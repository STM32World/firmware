
mcustm32f405_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004608  08004608  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000250  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009c8e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000197b  00000000  00000000  00029d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008e8  00000000  00000000  0002b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006c1  00000000  00000000  0002bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f78e  00000000  00000000  0002c691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009847  00000000  00000000  0004be1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc142  00000000  00000000  00055666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002bc8  00000000  00000000  001117a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00114370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800438c 	.word	0x0800438c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800438c 	.word	0x0800438c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 fbcc 	bl	8002d2c <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000d4 	.word	0x200000d4

080005b8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox0CompleteCallback");
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80005c2:	f003 f831 	bl	8003628 <iprintf>
 80005c6:	200a      	movs	r0, #10
 80005c8:	f003 f840 	bl	800364c <putchar>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	080043a4 	.word	0x080043a4

080005d8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox1CompleteCallback");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80005e2:	f003 f821 	bl	8003628 <iprintf>
 80005e6:	200a      	movs	r0, #10
 80005e8:	f003 f830 	bl	800364c <putchar>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	080043c8 	.word	0x080043c8

080005f8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox2CompleteCallback");
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000602:	f003 f811 	bl	8003628 <iprintf>
 8000606:	200a      	movs	r0, #10
 8000608:	f003 f820 	bl	800364c <putchar>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080043ec 	.word	0x080043ec

08000618 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox0AbortCallback");
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 8000622:	f003 f801 	bl	8003628 <iprintf>
 8000626:	200a      	movs	r0, #10
 8000628:	f003 f810 	bl	800364c <putchar>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08004410 	.word	0x08004410

08000638 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox1AbortCallback");
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <HAL_CAN_TxMailbox1AbortCallback+0x1c>)
 8000642:	f002 fff1 	bl	8003628 <iprintf>
 8000646:	200a      	movs	r0, #10
 8000648:	f003 f800 	bl	800364c <putchar>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08004430 	.word	0x08004430

08000658 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox2AbortCallback");
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <HAL_CAN_TxMailbox2AbortCallback+0x1c>)
 8000662:	f002 ffe1 	bl	8003628 <iprintf>
 8000666:	200a      	movs	r0, #10
 8000668:	f002 fff0 	bl	800364c <putchar>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	08004450 	.word	0x08004450

08000678 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	b08f      	sub	sp, #60	; 0x3c
 800067c:	af08      	add	r7, sp, #32
 800067e:	6178      	str	r0, [r7, #20]
    DBG("HAL_CAN_RxFifo0MsgPendingCallback");
 8000680:	4823      	ldr	r0, [pc, #140]	; (8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000682:	f002 ffd1 	bl	8003628 <iprintf>
 8000686:	200a      	movs	r0, #10
 8000688:	f002 ffe0 	bl	800364c <putchar>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000690:	2100      	movs	r1, #0
 8000692:	6978      	ldr	r0, [r7, #20]
 8000694:	f001 f882 	bl	800179c <HAL_CAN_GetRxMessage>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d12f      	bne.n	80006fe <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
        DBG("Got message %lu - id = 0x%04lx len = 0x%lx, data=%02x%02x%02x%02x%02x%02x%02x%02x", msg_count + 1, RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1c59      	adds	r1, r3, #1
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4819      	ldr	r0, [pc, #100]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006ae:	7800      	ldrb	r0, [r0, #0]
 80006b0:	4604      	mov	r4, r0
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006b4:	7840      	ldrb	r0, [r0, #1]
 80006b6:	4605      	mov	r5, r0
 80006b8:	4816      	ldr	r0, [pc, #88]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006ba:	7880      	ldrb	r0, [r0, #2]
 80006bc:	4606      	mov	r6, r0
 80006be:	4815      	ldr	r0, [pc, #84]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006c0:	78c0      	ldrb	r0, [r0, #3]
 80006c2:	6138      	str	r0, [r7, #16]
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006c6:	7900      	ldrb	r0, [r0, #4]
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006cc:	7940      	ldrb	r0, [r0, #5]
 80006ce:	60b8      	str	r0, [r7, #8]
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006d2:	7980      	ldrb	r0, [r0, #6]
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006d8:	79c0      	ldrb	r0, [r0, #7]
 80006da:	9007      	str	r0, [sp, #28]
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	9006      	str	r0, [sp, #24]
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	9005      	str	r0, [sp, #20]
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	9004      	str	r0, [sp, #16]
 80006e8:	6938      	ldr	r0, [r7, #16]
 80006ea:	9003      	str	r0, [sp, #12]
 80006ec:	9602      	str	r6, [sp, #8]
 80006ee:	9501      	str	r5, [sp, #4]
 80006f0:	9400      	str	r4, [sp, #0]
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80006f4:	f002 ff98 	bl	8003628 <iprintf>
 80006f8:	200a      	movs	r0, #10
 80006fa:	f002 ffa7 	bl	800364c <putchar>
    }
    msg_count++;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a05      	ldr	r2, [pc, #20]	; (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	08004470 	.word	0x08004470
 8000714:	20000154 	.word	0x20000154
 8000718:	20000134 	.word	0x20000134
 800071c:	2000015c 	.word	0x2000015c
 8000720:	08004494 	.word	0x08004494

08000724 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo0FullCallback");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 800072e:	f002 ff7b 	bl	8003628 <iprintf>
 8000732:	200a      	movs	r0, #10
 8000734:	f002 ff8a 	bl	800364c <putchar>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	080044e8 	.word	0x080044e8

08000744 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo1MsgPendingCallback");
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 800074e:	f002 ff6b 	bl	8003628 <iprintf>
 8000752:	200a      	movs	r0, #10
 8000754:	f002 ff7a 	bl	800364c <putchar>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08004504 	.word	0x08004504

08000764 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo1FullCallback");
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <HAL_CAN_RxFifo1FullCallback+0x1c>)
 800076e:	f002 ff5b 	bl	8003628 <iprintf>
 8000772:	200a      	movs	r0, #10
 8000774:	f002 ff6a 	bl	800364c <putchar>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08004528 	.word	0x08004528

08000784 <HAL_CAN_SleepCallback>:

void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_SleepCallback");
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <HAL_CAN_SleepCallback+0x1c>)
 800078e:	f002 ff4b 	bl	8003628 <iprintf>
 8000792:	200a      	movs	r0, #10
 8000794:	f002 ff5a 	bl	800364c <putchar>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08004544 	.word	0x08004544

080007a4 <HAL_CAN_WakeUpFromRxMsgCallback>:

void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_WakeUpFromRxMsgCallback");
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <HAL_CAN_WakeUpFromRxMsgCallback+0x1c>)
 80007ae:	f002 ff3b 	bl	8003628 <iprintf>
 80007b2:	200a      	movs	r0, #10
 80007b4:	f002 ff4a 	bl	800364c <putchar>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	0800455c 	.word	0x0800455c

080007c4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_ErrorCallback");
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <HAL_CAN_ErrorCallback+0x1c>)
 80007ce:	f002 ff2b 	bl	8003628 <iprintf>
 80007d2:	200a      	movs	r0, #10
 80007d4:	f002 ff3a 	bl	800364c <putchar>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800457c 	.word	0x0800457c

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fc75 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f87f 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f97d 	bl	8000af0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007f6:	f000 f8e5 	bl	80009c4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80007fa:	f000 f94f 	bl	8000a9c <MX_USART1_UART_Init>
  MX_CAN2_Init();
 80007fe:	f000 f917 	bl	8000a30 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

    DBG("\n\n\n\n\n------------\nCAN Starting");
 8000802:	4834      	ldr	r0, [pc, #208]	; (80008d4 <main+0xf0>)
 8000804:	f002 ff10 	bl	8003628 <iprintf>
 8000808:	200a      	movs	r0, #10
 800080a:	f002 ff1f 	bl	800364c <putchar>

    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800080e:	2301      	movs	r3, #1
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
    canfilterconfig.FilterBank = 12;  // anything between 0 to SlaveStartFilterBank
 8000812:	230c      	movs	r3, #12
 8000814:	61fb      	str	r3, [r7, #28]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
    //canfilterconfig.FilterIdHigh = 0x103<<5;
    canfilterconfig.FilterIdHigh = 0x0000;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterIdLow = 0x0000;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
    //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
    canfilterconfig.FilterMaskIdHigh = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterMaskIdLow = 0x0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800082e:	2301      	movs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000832:	230d      	movs	r3, #13
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4619      	mov	r1, r3
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <main+0xf4>)
 800083e:	f000 fdb9 	bl	80013b4 <HAL_CAN_ConfigFilter>

    HAL_CAN_Start(&hcan1);
 8000842:	4825      	ldr	r0, [pc, #148]	; (80008d8 <main+0xf4>)
 8000844:	f000 fe96 	bl	8001574 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(
 8000848:	4924      	ldr	r1, [pc, #144]	; (80008dc <main+0xf8>)
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <main+0xf4>)
 800084c:	f001 f8c8 	bl	80019e0 <HAL_CAN_ActivateNotification>
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
        );

    HAL_CAN_Start(&hcan2);
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <main+0xfc>)
 8000852:	f000 fe8f 	bl	8001574 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(
 8000856:	4921      	ldr	r1, [pc, #132]	; (80008dc <main+0xf8>)
 8000858:	4821      	ldr	r0, [pc, #132]	; (80008e0 <main+0xfc>)
 800085a:	f001 f8c1 	bl	80019e0 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_tx = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30

    while (1) {

        now = HAL_GetTick();
 800086a:	f000 fc9b 	bl	80011a4 <HAL_GetTick>
 800086e:	4603      	mov	r3, r0
 8000870:	607b      	str	r3, [r7, #4]

        if (now - last_tx >= 100) {
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	2b63      	cmp	r3, #99	; 0x63
 800087a:	d91c      	bls.n	80008b6 <main+0xd2>

            TxHeader.DLC = 4;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <main+0x100>)
 800087e:	2204      	movs	r2, #4
 8000880:	611a      	str	r2, [r3, #16]
            TxHeader.ExtId = 0;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <main+0x100>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
            TxHeader.IDE = CAN_ID_STD;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <main+0x100>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
            TxHeader.RTR = CAN_RTR_DATA;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <main+0x100>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
            TxHeader.StdId = 0x601;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <main+0x100>)
 8000896:	f240 6201 	movw	r2, #1537	; 0x601
 800089a:	601a      	str	r2, [r3, #0]
            //TxHeader.TransmitGlobalTime = DISABLE;

            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, (uint8_t *)&now, &TxMailbox) != HAL_OK)
 800089c:	1d3a      	adds	r2, r7, #4
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <main+0x104>)
 80008a0:	4910      	ldr	r1, [pc, #64]	; (80008e4 <main+0x100>)
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <main+0xfc>)
 80008a4:	f000 feaa 	bl	80015fc <HAL_CAN_AddTxMessage>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <main+0xce>
            {
                Error_Handler();
 80008ae:	f000 f97f 	bl	8000bb0 <Error_Handler>
            }

            last_tx = now;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
        }

        if (now - last_blink >= 500) {
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008c0:	d3d3      	bcc.n	800086a <main+0x86>

            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <main+0x108>)
 80008c8:	f001 fd2f 	bl	800232a <HAL_GPIO_TogglePin>

            last_blink = now;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
        now = HAL_GetTick();
 80008d0:	e7cb      	b.n	800086a <main+0x86>
 80008d2:	bf00      	nop
 80008d4:	08004594 	.word	0x08004594
 80008d8:	20000084 	.word	0x20000084
 80008dc:	00038f7f 	.word	0x00038f7f
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	2000011c 	.word	0x2000011c
 80008e8:	20000150 	.word	0x20000150
 80008ec:	40020800 	.word	0x40020800

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	; 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 feef 	bl	80036e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <SystemClock_Config+0xcc>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <SystemClock_Config+0xd0>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000964:	23a8      	movs	r3, #168	; 0xa8
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fcf3 	bl	8002360 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000980:	f000 f916 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2105      	movs	r1, #5
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ff54 	bl	8002850 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ae:	f000 f8ff 	bl	8000bb0 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_CAN1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009e2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80009e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a16:	f000 fbd1 	bl	80011bc <HAL_CAN_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f000 f8c6 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	40006400 	.word	0x40006400

08000a30 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN2_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a4e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN2_Init+0x64>)
 8000a82:	f000 fb9b 	bl	80011bc <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 f890 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	40006800 	.word	0x40006800

08000a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART1_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	f002 f8da 	bl	8002c8c <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f867 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d4 	.word	0x200000d4
 8000aec:	40011000 	.word	0x40011000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <MX_GPIO_Init+0xbc>)
 8000b7e:	f001 fbbb 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b88:	2311      	movs	r3, #17
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_GPIO_Init+0xbc>)
 8000b9c:	f001 fa10 	bl	8001fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a63      	ldr	r2, [pc, #396]	; (8000db8 <HAL_CAN_MspInit+0x1ac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d156      	bne.n	8000cdc <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a61      	ldr	r2, [pc, #388]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000c36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c38:	4b60      	ldr	r3, [pc, #384]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d10d      	bne.n	8000c5c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a5d      	ldr	r2, [pc, #372]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a56      	ldr	r2, [pc, #344]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	484b      	ldr	r0, [pc, #300]	; (8000dc4 <HAL_CAN_MspInit+0x1b8>)
 8000c96:	f001 f993 	bl	8001fc0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2013      	movs	r0, #19
 8000ca0:	f001 f957 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ca4:	2013      	movs	r0, #19
 8000ca6:	f001 f970 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f001 f94f 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f001 f968 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2015      	movs	r0, #21
 8000cc0:	f001 f947 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cc4:	2015      	movs	r0, #21
 8000cc6:	f001 f960 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2016      	movs	r0, #22
 8000cd0:	f001 f93f 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000cd4:	2016      	movs	r0, #22
 8000cd6:	f001 f958 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000cda:	e068      	b.n	8000dae <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <HAL_CAN_MspInit+0x1bc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d163      	bne.n	8000dae <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_CAN_MspInit+0x1b0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10d      	bne.n	8000d30 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_CAN_MspInit+0x1b4>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d5e:	2309      	movs	r3, #9
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <HAL_CAN_MspInit+0x1b8>)
 8000d6a:	f001 f929 	bl	8001fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	203f      	movs	r0, #63	; 0x3f
 8000d74:	f001 f8ed 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000d78:	203f      	movs	r0, #63	; 0x3f
 8000d7a:	f001 f906 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f001 f8e5 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d88:	2040      	movs	r0, #64	; 0x40
 8000d8a:	f001 f8fe 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2041      	movs	r0, #65	; 0x41
 8000d94:	f001 f8dd 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d98:	2041      	movs	r0, #65	; 0x41
 8000d9a:	f001 f8f6 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2042      	movs	r0, #66	; 0x42
 8000da4:	f001 f8d5 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000da8:	2042      	movs	r0, #66	; 0x42
 8000daa:	f001 f8ee 	bl	8001f8a <HAL_NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40006400 	.word	0x40006400
 8000dbc:	20000160 	.word	0x20000160
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40006800 	.word	0x40006800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12c      	bne.n	8000e48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e44:	f001 f8bc 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f968 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <CAN1_TX_IRQHandler+0x10>)
 8000eb6:	f000 fdb9 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <CAN1_RX0_IRQHandler+0x10>)
 8000eca:	f000 fdaf 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000084 	.word	0x20000084

08000ed8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <CAN1_RX1_IRQHandler+0x10>)
 8000ede:	f000 fda5 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000084 	.word	0x20000084

08000eec <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <CAN1_SCE_IRQHandler+0x10>)
 8000ef2:	f000 fd9b 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000084 	.word	0x20000084

08000f00 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <CAN2_TX_IRQHandler+0x10>)
 8000f06:	f000 fd91 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ac 	.word	0x200000ac

08000f14 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <CAN2_RX0_IRQHandler+0x10>)
 8000f1a:	f000 fd87 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000ac 	.word	0x200000ac

08000f28 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <CAN2_RX1_IRQHandler+0x10>)
 8000f2e:	f000 fd7d 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000ac 	.word	0x200000ac

08000f3c <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <CAN2_SCE_IRQHandler+0x10>)
 8000f42:	f000 fd73 	bl	8001a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000ac 	.word	0x200000ac

08000f50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
  }

  return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_isatty>:

int _isatty(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f002 fbac 	bl	8003780 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20020000 	.word	0x20020000
 8001054:	00000400 	.word	0x00000400
 8001058:	20000164 	.word	0x20000164
 800105c:	200002b8 	.word	0x200002b8

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001088:	f7ff ffea 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fb6b 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fb95 	bl	80007e4 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010c8:	08004610 	.word	0x08004610
  ldr r2, =_sbss
 80010cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010d0:	200002b8 	.word	0x200002b8

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 ff1b 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fd56 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 ff33 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001158:	f000 fefb 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000168 	.word	0x20000168

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000168 	.word	0x20000168

080011bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0ed      	b.n	80013aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fd16 	bl	8000c0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f0:	f7ff ffd8 	bl	80011a4 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f6:	e012      	b.n	800121e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f8:	f7ff ffd4 	bl	80011a4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d90b      	bls.n	800121e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0c5      	b.n	80013aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0e5      	beq.n	80011f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0202 	bic.w	r2, r2, #2
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff ffb2 	bl	80011a4 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001242:	e012      	b.n	800126a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001244:	f7ff ffae 	bl	80011a4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90b      	bls.n	800126a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e09f      	b.n	80013aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e5      	bne.n	8001244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e1b      	ldrb	r3, [r3, #24]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e5b      	ldrb	r3, [r3, #25]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7e9b      	ldrb	r3, [r3, #26]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0220 	bic.w	r2, r2, #32
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7edb      	ldrb	r3, [r3, #27]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0210 	bic.w	r2, r2, #16
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0210 	orr.w	r2, r2, #16
 800131e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7f1b      	ldrb	r3, [r3, #28]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d108      	bne.n	800133a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0208 	orr.w	r2, r2, #8
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e007      	b.n	800134a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0208 	bic.w	r2, r2, #8
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7f5b      	ldrb	r3, [r3, #29]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d108      	bne.n	8001364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0204 	orr.w	r2, r2, #4
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e007      	b.n	8001374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	ea42 0103 	orr.w	r1, r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <HAL_CAN_ConfigFilter+0x26>
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	f040 80be 	bne.w	8001556 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_CAN_ConfigFilter+0x1bc>)
 80013dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2201      	movs	r2, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d123      	bne.n	8001484 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800145e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3248      	adds	r2, #72	; 0x48
 8001464:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001478:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800147a:	6979      	ldr	r1, [r7, #20]
 800147c:	3348      	adds	r3, #72	; 0x48
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d122      	bne.n	80014d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3248      	adds	r2, #72	; 0x48
 80014b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c8:	6979      	ldr	r1, [r7, #20]
 80014ca:	3348      	adds	r3, #72	; 0x48
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014ec:	e007      	b.n	80014fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001518:	e007      	b.n	800152a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	431a      	orrs	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001548:	f023 0201 	bic.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e006      	b.n	8001564 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40006400 	.word	0x40006400

08001574 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d12e      	bne.n	80015e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fe00 	bl	80011a4 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015a6:	e012      	b.n	80015ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a8:	f7ff fdfc 	bl	80011a4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d90b      	bls.n	80015ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e012      	b.n	80015f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e5      	bne.n	80015a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e006      	b.n	80015f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800161a:	7ffb      	ldrb	r3, [r7, #31]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d003      	beq.n	8001628 <HAL_CAN_AddTxMessage+0x2c>
 8001620:	7ffb      	ldrb	r3, [r7, #31]
 8001622:	2b02      	cmp	r3, #2
 8001624:	f040 80ad 	bne.w	8001782 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8095 	beq.w	8001772 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	0e1b      	lsrs	r3, r3, #24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	6809      	ldr	r1, [r1, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3318      	adds	r3, #24
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	440b      	add	r3, r1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e00f      	b.n	80016a0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001694:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3318      	adds	r3, #24
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3318      	adds	r3, #24
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	440b      	add	r3, r1
 80016b0:	3304      	adds	r3, #4
 80016b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	7d1b      	ldrb	r3, [r3, #20]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d111      	bne.n	80016e0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3318      	adds	r3, #24
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	3304      	adds	r3, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6811      	ldr	r1, [r2, #0]
 80016d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3318      	adds	r3, #24
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	440b      	add	r3, r1
 80016dc:	3304      	adds	r3, #4
 80016de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3307      	adds	r3, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	061a      	lsls	r2, r3, #24
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3306      	adds	r3, #6
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3305      	adds	r3, #5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3204      	adds	r2, #4
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	4610      	mov	r0, r2
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	ea43 0200 	orr.w	r2, r3, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	440b      	add	r3, r1
 8001712:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001716:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3303      	adds	r3, #3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	061a      	lsls	r2, r3, #24
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3302      	adds	r3, #2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	4313      	orrs	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	4610      	mov	r0, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6811      	ldr	r1, [r2, #0]
 800173e:	ea43 0200 	orr.w	r2, r3, r0
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	440b      	add	r3, r1
 8001748:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800174c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6811      	ldr	r1, [r2, #0]
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3318      	adds	r3, #24
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	440b      	add	r3, r1
 800176c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e00e      	b.n	8001790 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e006      	b.n	8001790 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3724      	adds	r7, #36	; 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d003      	beq.n	80017c0 <HAL_CAN_GetRxMessage+0x24>
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	f040 8103 	bne.w	80019c6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10e      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d116      	bne.n	8001802 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0f7      	b.n	80019d4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0e8      	b.n	80019d4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	331b      	adds	r3, #27
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0204 	and.w	r2, r3, #4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	331b      	adds	r3, #27
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0d5b      	lsrs	r3, r3, #21
 8001830:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e00b      	b.n	8001852 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	331b      	adds	r3, #27
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	331b      	adds	r3, #27
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0202 	and.w	r2, r3, #2
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	331b      	adds	r3, #27
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	3304      	adds	r3, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2208      	movs	r2, #8
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	e00b      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	331b      	adds	r3, #27
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	3304      	adds	r3, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 020f 	and.w	r2, r3, #15
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	331b      	adds	r3, #27
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	331b      	adds	r3, #27
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0a1a      	lsrs	r2, r3, #8
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0c1a      	lsrs	r2, r3, #16
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3302      	adds	r3, #2
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e1a      	lsrs	r2, r3, #24
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	3303      	adds	r3, #3
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	3304      	adds	r3, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0a1a      	lsrs	r2, r3, #8
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3305      	adds	r3, #5
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0c1a      	lsrs	r2, r3, #16
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3306      	adds	r3, #6
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e1a      	lsrs	r2, r3, #24
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3307      	adds	r3, #7
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d108      	bne.n	80019b2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e006      	b.n	80019d4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d002      	beq.n	80019fe <HAL_CAN_ActivateNotification+0x1e>
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d109      	bne.n	8001a12 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6959      	ldr	r1, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e006      	b.n	8001a20 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d07c      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fd92 	bl	80005b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a94:	e016      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	e00c      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	e002      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fdaa 	bl	8000618 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fd78 	bl	80005d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ae8:	e016      	b.n	8001b18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	e00c      	b.n	8001b18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	e002      	b.n	8001b18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fd90 	bl	8000638 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fd5e 	bl	80005f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b3c:	e016      	b.n	8001b6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	e00c      	b.n	8001b6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	e002      	b.n	8001b6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fd76 	bl	8000658 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe fdb9 	bl	8000724 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fd54 	bl	8000678 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fda7 	bl	8000764 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fd88 	bl	8000744 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe fd97 	bl	8000784 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fd96 	bl	80007a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d07b      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d072      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d043      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03e      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfa:	2b60      	cmp	r3, #96	; 0x60
 8001cfc:	d02b      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x32a>
 8001cfe:	2b60      	cmp	r3, #96	; 0x60
 8001d00:	d82e      	bhi.n	8001d60 <HAL_CAN_IRQHandler+0x334>
 8001d02:	2b50      	cmp	r3, #80	; 0x50
 8001d04:	d022      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x320>
 8001d06:	2b50      	cmp	r3, #80	; 0x50
 8001d08:	d82a      	bhi.n	8001d60 <HAL_CAN_IRQHandler+0x334>
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d019      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x316>
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d826      	bhi.n	8001d60 <HAL_CAN_IRQHandler+0x334>
 8001d12:	2b30      	cmp	r3, #48	; 0x30
 8001d14:	d010      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x30c>
 8001d16:	2b30      	cmp	r3, #48	; 0x30
 8001d18:	d822      	bhi.n	8001d60 <HAL_CAN_IRQHandler+0x334>
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d002      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x2f8>
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d005      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d22:	e01d      	b.n	8001d60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d2c:	e019      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d36:	e014      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f043 0320 	orr.w	r3, r3, #32
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d40:	e00f      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d4a:	e00a      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d54:	e005      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d5e:	e000      	b.n	8001d62 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2204      	movs	r2, #4
 8001d78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fd19 	bl	80007c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff3e 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff31 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e16b      	b.n	80022b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 815a 	bne.w	80022ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80b4 	beq.w	80022ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b60      	ldr	r3, [pc, #384]	; (80022cc <HAL_GPIO_Init+0x30c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <HAL_GPIO_Init+0x30c>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_GPIO_Init+0x30c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <HAL_GPIO_Init+0x310>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_GPIO_Init+0x314>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_GPIO_Init+0x318>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_GPIO_Init+0x31c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4f      	ldr	r2, [pc, #316]	; (80022e0 <HAL_GPIO_Init+0x320>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x21a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4e      	ldr	r2, [pc, #312]	; (80022e4 <HAL_GPIO_Init+0x324>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x216>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <HAL_GPIO_Init+0x328>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x212>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_GPIO_Init+0x32c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x20e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_GPIO_Init+0x330>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x20a>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00e      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021ca:	2308      	movs	r3, #8
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021ce:	2306      	movs	r3, #6
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x228>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	; (80022d0 <HAL_GPIO_Init+0x310>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_GPIO_Init+0x334>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_GPIO_Init+0x334>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae90 	bls.w	8001fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40021400 	.word	0x40021400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40021c00 	.word	0x40021c00
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	041a      	lsls	r2, r3, #16
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43d9      	mvns	r1, r3
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	400b      	ands	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e267      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d075      	beq.n	800246a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b04      	cmp	r3, #4
 8002388:	d00c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d112      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05b      	beq.n	8002468 <HAL_RCC_OscConfig+0x108>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d157      	bne.n	8002468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e242      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x74>
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a75      	ldr	r2, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6f      	ldr	r2, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a68      	ldr	r2, [pc, #416]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fec4 	bl	80011a4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fec0 	bl	80011a4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e207      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xc0>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe feb0 	bl	80011a4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe feac 	bl	80011a4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1f3      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0xe8>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c7      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe65 	bl	80011a4 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe fe61 	bl	80011a4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a8      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4925      	ldr	r1, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fe44 	bl	80011a4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe fe40 	bl	80011a4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e187      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x248>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fe24 	bl	80011a4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fe20 	bl	80011a4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e167      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x200>
 800257e:	e01b      	b.n	80025b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x248>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fe0d 	bl	80011a4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	e00e      	b.n	80025ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258e:	f7fe fe09 	bl	80011a4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d907      	bls.n	80025ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e150      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
 80025a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ea      	bne.n	800258e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8097 	beq.w	80026f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b7d      	ldr	r3, [pc, #500]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b77      	ldr	r3, [pc, #476]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002602:	4b74      	ldr	r3, [pc, #464]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7fe fdc9 	bl	80011a4 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe fdc5 	bl	80011a4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e10c      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x2ea>
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a63      	ldr	r2, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x324>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x30c>
 8002652:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5e      	ldr	r2, [pc, #376]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a5b      	ldr	r2, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x324>
 800266c:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fd8a 	bl	80011a4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fd86 	bl	80011a4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0cb      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ee      	beq.n	8002694 <HAL_RCC_OscConfig+0x334>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fd74 	bl	80011a4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fd70 	bl	80011a4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0b5      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ee      	bne.n	80026c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a38      	ldr	r2, [pc, #224]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a1 	beq.w	8002840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b08      	cmp	r3, #8
 8002708:	d05c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d141      	bne.n	8002796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fd44 	bl	80011a4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fd40 	bl	80011a4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e087      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	491b      	ldr	r1, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe fd19 	bl	80011a4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fd15 	bl	80011a4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e05c      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x416>
 8002794:	e054      	b.n	8002840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe fd02 	bl	80011a4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fcfe 	bl	80011a4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e045      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x444>
 80027c2:	e03d      	b.n	8002840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e038      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40007000 	.word	0x40007000
 80027d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x4ec>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d028      	beq.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d121      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11a      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0cc      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d90c      	bls.n	800288c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b8      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	494d      	ldr	r1, [pc, #308]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d044      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e067      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4934      	ldr	r1, [pc, #208]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe fc30 	bl	80011a4 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe fc2c 	bl	80011a4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e04f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d20c      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e032      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4916      	ldr	r1, [pc, #88]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029d6:	f000 f821 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	490a      	ldr	r1, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	5ccb      	ldrb	r3, [r1, r3]
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fb90 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	080045b4 	.word	0x080045b4
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b094      	sub	sp, #80	; 0x50
 8002a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x40>
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	f200 80e1 	bhi.w	8002c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a4e:	e0db      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a54:	e0db      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a56:	4b72      	ldr	r3, [pc, #456]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5a:	e0d8      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	2200      	movs	r2, #0
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	0159      	lsls	r1, r3, #5
 8002a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa0:	0150      	lsls	r0, r2, #5
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	1a51      	subs	r1, r2, r1
 8002aaa:	6139      	str	r1, [r7, #16]
 8002aac:	4629      	mov	r1, r5
 8002aae:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	018b      	lsls	r3, r1, #6
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aca:	4651      	mov	r1, sl
 8002acc:	018a      	lsls	r2, r1, #6
 8002ace:	4651      	mov	r1, sl
 8002ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aee:	4690      	mov	r8, r2
 8002af0:	4699      	mov	r9, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	eb18 0303 	adds.w	r3, r8, r3
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	462b      	mov	r3, r5
 8002afc:	eb49 0303 	adc.w	r3, r9, r3
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b0e:	4629      	mov	r1, r5
 8002b10:	028b      	lsls	r3, r1, #10
 8002b12:	4621      	mov	r1, r4
 8002b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b18:	4621      	mov	r1, r4
 8002b1a:	028a      	lsls	r2, r1, #10
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b22:	2200      	movs	r2, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b2c:	f7fd fba0 	bl	8000270 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b38:	e058      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	4611      	mov	r1, r2
 8002b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	f04f 0000 	mov.w	r0, #0
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	0159      	lsls	r1, r3, #5
 8002b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b66:	0150      	lsls	r0, r2, #5
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b90:	eb63 050b 	sbc.w	r5, r3, fp
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	00eb      	lsls	r3, r5, #3
 8002b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba2:	00e2      	lsls	r2, r4, #3
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	4643      	mov	r3, r8
 8002baa:	18e3      	adds	r3, r4, r3
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	464b      	mov	r3, r9
 8002bb0:	eb45 0303 	adc.w	r3, r5, r3
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	028b      	lsls	r3, r1, #10
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bcc:	4621      	mov	r1, r4
 8002bce:	028a      	lsls	r2, r1, #10
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	61fa      	str	r2, [r7, #28]
 8002bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be0:	f7fd fb46 	bl	8000270 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3750      	adds	r7, #80	; 0x50
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	080045c4 	.word	0x080045c4

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c68:	f7ff ffdc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	080045c4 	.word	0x080045c4

08002c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e042      	b.n	8002d24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f88a 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f973 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d175      	bne.n	8002e38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x2c>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e06e      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe fa1b 	bl	80011a4 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d108      	bne.n	8002d98 <HAL_UART_Transmit+0x6c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e003      	b.n	8002da0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da0:	e02e      	b.n	8002e00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f848 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03a      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	e007      	b.n	8002df2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	3301      	adds	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1cb      	bne.n	8002da2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f814 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	e03b      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5a:	d037      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7fe f9a2 	bl	80011a4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e03a      	b.n	8002eec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	d020      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d01d      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d116      	bne.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f81d 	bl	8002ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e00f      	b.n	8002eec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d0b4      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b095      	sub	sp, #84	; 0x54
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1c:	643a      	str	r2, [r7, #64]	; 0x40
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d119      	bne.n	8002fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f023 0310 	bic.w	r3, r3, #16
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8c:	61ba      	str	r2, [r7, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fae:	bf00      	nop
 8002fb0:	3754      	adds	r7, #84	; 0x54
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0c0      	sub	sp, #256	; 0x100
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	68d9      	ldr	r1, [r3, #12]
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	ea40 0301 	orr.w	r3, r0, r1
 8002fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003014:	f021 010c 	bic.w	r1, r1, #12
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003022:	430b      	orrs	r3, r1
 8003024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	6999      	ldr	r1, [r3, #24]
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	ea40 0301 	orr.w	r3, r0, r1
 8003042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <UART_SetConfig+0x2cc>)
 800304c:	429a      	cmp	r2, r3
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0xa0>
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b8d      	ldr	r3, [pc, #564]	; (800328c <UART_SetConfig+0x2d0>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d104      	bne.n	8003066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff fe02 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003064:	e003      	b.n	800306e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003066:	f7ff fde9 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800306a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003078:	f040 810c 	bne.w	8003294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800308a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800308e:	4622      	mov	r2, r4
 8003090:	462b      	mov	r3, r5
 8003092:	1891      	adds	r1, r2, r2
 8003094:	65b9      	str	r1, [r7, #88]	; 0x58
 8003096:	415b      	adcs	r3, r3
 8003098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309e:	4621      	mov	r1, r4
 80030a0:	eb12 0801 	adds.w	r8, r2, r1
 80030a4:	4629      	mov	r1, r5
 80030a6:	eb43 0901 	adc.w	r9, r3, r1
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030be:	4690      	mov	r8, r2
 80030c0:	4699      	mov	r9, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	eb18 0303 	adds.w	r3, r8, r3
 80030c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030cc:	462b      	mov	r3, r5
 80030ce:	eb49 0303 	adc.w	r3, r9, r3
 80030d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030ea:	460b      	mov	r3, r1
 80030ec:	18db      	adds	r3, r3, r3
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
 80030f0:	4613      	mov	r3, r2
 80030f2:	eb42 0303 	adc.w	r3, r2, r3
 80030f6:	657b      	str	r3, [r7, #84]	; 0x54
 80030f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003100:	f7fd f8b6 	bl	8000270 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b61      	ldr	r3, [pc, #388]	; (8003290 <UART_SetConfig+0x2d4>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	011c      	lsls	r4, r3, #4
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800311c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	64b9      	str	r1, [r7, #72]	; 0x48
 800312c:	415b      	adcs	r3, r3
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003134:	4641      	mov	r1, r8
 8003136:	eb12 0a01 	adds.w	sl, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb43 0b01 	adc.w	fp, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800314c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003154:	4692      	mov	sl, r2
 8003156:	469b      	mov	fp, r3
 8003158:	4643      	mov	r3, r8
 800315a:	eb1a 0303 	adds.w	r3, sl, r3
 800315e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003162:	464b      	mov	r3, r9
 8003164:	eb4b 0303 	adc.w	r3, fp, r3
 8003168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800317c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003180:	460b      	mov	r3, r1
 8003182:	18db      	adds	r3, r3, r3
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
 8003186:	4613      	mov	r3, r2
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
 800318e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003196:	f7fd f86b 	bl	8000270 <__aeabi_uldivmod>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <UART_SetConfig+0x2d4>)
 80031a2:	fba3 2301 	umull	r2, r3, r3, r1
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2264      	movs	r2, #100	; 0x64
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	1acb      	subs	r3, r1, r3
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <UART_SetConfig+0x2d4>)
 80031b8:	fba3 2302 	umull	r2, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c4:	441c      	add	r4, r3
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	63b9      	str	r1, [r7, #56]	; 0x38
 80031e0:	415b      	adcs	r3, r3
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031e8:	4641      	mov	r1, r8
 80031ea:	1851      	adds	r1, r2, r1
 80031ec:	6339      	str	r1, [r7, #48]	; 0x30
 80031ee:	4649      	mov	r1, r9
 80031f0:	414b      	adcs	r3, r1
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003200:	4659      	mov	r1, fp
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4651      	mov	r1, sl
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4642      	mov	r2, r8
 8003216:	189b      	adds	r3, r3, r2
 8003218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800323c:	460b      	mov	r3, r1
 800323e:	18db      	adds	r3, r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	4613      	mov	r3, r2
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800324e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003252:	f7fd f80d 	bl	8000270 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x2d4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x2d4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4422      	add	r2, r4
 8003282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003284:	e106      	b.n	8003494 <UART_SetConfig+0x4d8>
 8003286:	bf00      	nop
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800329e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032a6:	4642      	mov	r2, r8
 80032a8:	464b      	mov	r3, r9
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	6239      	str	r1, [r7, #32]
 80032ae:	415b      	adcs	r3, r3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032b6:	4641      	mov	r1, r8
 80032b8:	1854      	adds	r4, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb43 0501 	adc.w	r5, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032dc:	464b      	mov	r3, r9
 80032de:	eb45 0303 	adc.w	r3, r5, r3
 80032e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003302:	4629      	mov	r1, r5
 8003304:	008b      	lsls	r3, r1, #2
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330c:	4621      	mov	r1, r4
 800330e:	008a      	lsls	r2, r1, #2
 8003310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003314:	f7fc ffac 	bl	8000270 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b60      	ldr	r3, [pc, #384]	; (80034a0 <UART_SetConfig+0x4e4>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011c      	lsls	r4, r3, #4
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	61b9      	str	r1, [r7, #24]
 8003340:	415b      	adcs	r3, r3
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6139      	str	r1, [r7, #16]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800337c:	464b      	mov	r3, r9
 800337e:	460a      	mov	r2, r1
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	67bb      	str	r3, [r7, #120]	; 0x78
 8003392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033a0:	4649      	mov	r1, r9
 80033a2:	008b      	lsls	r3, r1, #2
 80033a4:	4641      	mov	r1, r8
 80033a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033aa:	4641      	mov	r1, r8
 80033ac:	008a      	lsls	r2, r1, #2
 80033ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033b2:	f7fc ff5d 	bl	8000270 <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <UART_SetConfig+0x4e4>)
 80033be:	fba3 2301 	umull	r2, r3, r3, r1
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2264      	movs	r2, #100	; 0x64
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	1acb      	subs	r3, r1, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	; 0x32
 80033d0:	4a33      	ldr	r2, [pc, #204]	; (80034a0 <UART_SetConfig+0x4e4>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	673b      	str	r3, [r7, #112]	; 0x70
 80033e6:	677a      	str	r2, [r7, #116]	; 0x74
 80033e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	415b      	adcs	r3, r3
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	66bb      	str	r3, [r7, #104]	; 0x68
 800342e:	464b      	mov	r3, r9
 8003430:	460a      	mov	r2, r1
 8003432:	eb42 0303 	adc.w	r3, r2, r3
 8003436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
 8003442:	667a      	str	r2, [r7, #100]	; 0x64
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003450:	4649      	mov	r1, r9
 8003452:	008b      	lsls	r3, r1, #2
 8003454:	4641      	mov	r1, r8
 8003456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800345a:	4641      	mov	r1, r8
 800345c:	008a      	lsls	r2, r1, #2
 800345e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003462:	f7fc ff05 	bl	8000270 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <UART_SetConfig+0x4e4>)
 800346c:	fba3 1302 	umull	r1, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2164      	movs	r1, #100	; 0x64
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	3332      	adds	r3, #50	; 0x32
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <UART_SetConfig+0x4e4>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4422      	add	r2, r4
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a0:	51eb851f 	.word	0x51eb851f

080034a4 <std>:
 80034a4:	2300      	movs	r3, #0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
 80034aa:	e9c0 3300 	strd	r3, r3, [r0]
 80034ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034b2:	6083      	str	r3, [r0, #8]
 80034b4:	8181      	strh	r1, [r0, #12]
 80034b6:	6643      	str	r3, [r0, #100]	; 0x64
 80034b8:	81c2      	strh	r2, [r0, #14]
 80034ba:	6183      	str	r3, [r0, #24]
 80034bc:	4619      	mov	r1, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	305c      	adds	r0, #92	; 0x5c
 80034c2:	f000 f90e 	bl	80036e2 <memset>
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <std+0x58>)
 80034c8:	6263      	str	r3, [r4, #36]	; 0x24
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <std+0x5c>)
 80034cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <std+0x60>)
 80034d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <std+0x64>)
 80034d4:	6323      	str	r3, [r4, #48]	; 0x30
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <std+0x68>)
 80034d8:	6224      	str	r4, [r4, #32]
 80034da:	429c      	cmp	r4, r3
 80034dc:	d006      	beq.n	80034ec <std+0x48>
 80034de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034e2:	4294      	cmp	r4, r2
 80034e4:	d002      	beq.n	80034ec <std+0x48>
 80034e6:	33d0      	adds	r3, #208	; 0xd0
 80034e8:	429c      	cmp	r4, r3
 80034ea:	d105      	bne.n	80034f8 <std+0x54>
 80034ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f4:	f000 b96e 	b.w	80037d4 <__retarget_lock_init_recursive>
 80034f8:	bd10      	pop	{r4, pc}
 80034fa:	bf00      	nop
 80034fc:	0800365d 	.word	0x0800365d
 8003500:	0800367f 	.word	0x0800367f
 8003504:	080036b7 	.word	0x080036b7
 8003508:	080036db 	.word	0x080036db
 800350c:	2000016c 	.word	0x2000016c

08003510 <stdio_exit_handler>:
 8003510:	4a02      	ldr	r2, [pc, #8]	; (800351c <stdio_exit_handler+0xc>)
 8003512:	4903      	ldr	r1, [pc, #12]	; (8003520 <stdio_exit_handler+0x10>)
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <stdio_exit_handler+0x14>)
 8003516:	f000 b869 	b.w	80035ec <_fwalk_sglue>
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c
 8003520:	08004081 	.word	0x08004081
 8003524:	20000018 	.word	0x20000018

08003528 <cleanup_stdio>:
 8003528:	6841      	ldr	r1, [r0, #4]
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <cleanup_stdio+0x34>)
 800352c:	4299      	cmp	r1, r3
 800352e:	b510      	push	{r4, lr}
 8003530:	4604      	mov	r4, r0
 8003532:	d001      	beq.n	8003538 <cleanup_stdio+0x10>
 8003534:	f000 fda4 	bl	8004080 <_fflush_r>
 8003538:	68a1      	ldr	r1, [r4, #8]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <cleanup_stdio+0x38>)
 800353c:	4299      	cmp	r1, r3
 800353e:	d002      	beq.n	8003546 <cleanup_stdio+0x1e>
 8003540:	4620      	mov	r0, r4
 8003542:	f000 fd9d 	bl	8004080 <_fflush_r>
 8003546:	68e1      	ldr	r1, [r4, #12]
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <cleanup_stdio+0x3c>)
 800354a:	4299      	cmp	r1, r3
 800354c:	d004      	beq.n	8003558 <cleanup_stdio+0x30>
 800354e:	4620      	mov	r0, r4
 8003550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003554:	f000 bd94 	b.w	8004080 <_fflush_r>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	bf00      	nop
 800355c:	2000016c 	.word	0x2000016c
 8003560:	200001d4 	.word	0x200001d4
 8003564:	2000023c 	.word	0x2000023c

08003568 <global_stdio_init.part.0>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <global_stdio_init.part.0+0x30>)
 800356c:	4c0b      	ldr	r4, [pc, #44]	; (800359c <global_stdio_init.part.0+0x34>)
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <global_stdio_init.part.0+0x38>)
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	4620      	mov	r0, r4
 8003574:	2200      	movs	r2, #0
 8003576:	2104      	movs	r1, #4
 8003578:	f7ff ff94 	bl	80034a4 <std>
 800357c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003580:	2201      	movs	r2, #1
 8003582:	2109      	movs	r1, #9
 8003584:	f7ff ff8e 	bl	80034a4 <std>
 8003588:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800358c:	2202      	movs	r2, #2
 800358e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003592:	2112      	movs	r1, #18
 8003594:	f7ff bf86 	b.w	80034a4 <std>
 8003598:	200002a4 	.word	0x200002a4
 800359c:	2000016c 	.word	0x2000016c
 80035a0:	08003511 	.word	0x08003511

080035a4 <__sfp_lock_acquire>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__sfp_lock_acquire+0x8>)
 80035a6:	f000 b916 	b.w	80037d6 <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	200002ad 	.word	0x200002ad

080035b0 <__sfp_lock_release>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__sfp_lock_release+0x8>)
 80035b2:	f000 b911 	b.w	80037d8 <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	200002ad 	.word	0x200002ad

080035bc <__sinit>:
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	f7ff fff0 	bl	80035a4 <__sfp_lock_acquire>
 80035c4:	6a23      	ldr	r3, [r4, #32]
 80035c6:	b11b      	cbz	r3, 80035d0 <__sinit+0x14>
 80035c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035cc:	f7ff bff0 	b.w	80035b0 <__sfp_lock_release>
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__sinit+0x28>)
 80035d2:	6223      	str	r3, [r4, #32]
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <__sinit+0x2c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f5      	bne.n	80035c8 <__sinit+0xc>
 80035dc:	f7ff ffc4 	bl	8003568 <global_stdio_init.part.0>
 80035e0:	e7f2      	b.n	80035c8 <__sinit+0xc>
 80035e2:	bf00      	nop
 80035e4:	08003529 	.word	0x08003529
 80035e8:	200002a4 	.word	0x200002a4

080035ec <_fwalk_sglue>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	4607      	mov	r7, r0
 80035f2:	4688      	mov	r8, r1
 80035f4:	4614      	mov	r4, r2
 80035f6:	2600      	movs	r6, #0
 80035f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003600:	d505      	bpl.n	800360e <_fwalk_sglue+0x22>
 8003602:	6824      	ldr	r4, [r4, #0]
 8003604:	2c00      	cmp	r4, #0
 8003606:	d1f7      	bne.n	80035f8 <_fwalk_sglue+0xc>
 8003608:	4630      	mov	r0, r6
 800360a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800360e:	89ab      	ldrh	r3, [r5, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d907      	bls.n	8003624 <_fwalk_sglue+0x38>
 8003614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003618:	3301      	adds	r3, #1
 800361a:	d003      	beq.n	8003624 <_fwalk_sglue+0x38>
 800361c:	4629      	mov	r1, r5
 800361e:	4638      	mov	r0, r7
 8003620:	47c0      	blx	r8
 8003622:	4306      	orrs	r6, r0
 8003624:	3568      	adds	r5, #104	; 0x68
 8003626:	e7e9      	b.n	80035fc <_fwalk_sglue+0x10>

08003628 <iprintf>:
 8003628:	b40f      	push	{r0, r1, r2, r3}
 800362a:	b507      	push	{r0, r1, r2, lr}
 800362c:	4906      	ldr	r1, [pc, #24]	; (8003648 <iprintf+0x20>)
 800362e:	ab04      	add	r3, sp, #16
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	f853 2b04 	ldr.w	r2, [r3], #4
 8003636:	6881      	ldr	r1, [r0, #8]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	f000 f9f1 	bl	8003a20 <_vfiprintf_r>
 800363e:	b003      	add	sp, #12
 8003640:	f85d eb04 	ldr.w	lr, [sp], #4
 8003644:	b004      	add	sp, #16
 8003646:	4770      	bx	lr
 8003648:	20000064 	.word	0x20000064

0800364c <putchar>:
 800364c:	4b02      	ldr	r3, [pc, #8]	; (8003658 <putchar+0xc>)
 800364e:	4601      	mov	r1, r0
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	6882      	ldr	r2, [r0, #8]
 8003654:	f000 bd3c 	b.w	80040d0 <_putc_r>
 8003658:	20000064 	.word	0x20000064

0800365c <__sread>:
 800365c:	b510      	push	{r4, lr}
 800365e:	460c      	mov	r4, r1
 8003660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003664:	f000 f868 	bl	8003738 <_read_r>
 8003668:	2800      	cmp	r0, #0
 800366a:	bfab      	itete	ge
 800366c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800366e:	89a3      	ldrhlt	r3, [r4, #12]
 8003670:	181b      	addge	r3, r3, r0
 8003672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003676:	bfac      	ite	ge
 8003678:	6563      	strge	r3, [r4, #84]	; 0x54
 800367a:	81a3      	strhlt	r3, [r4, #12]
 800367c:	bd10      	pop	{r4, pc}

0800367e <__swrite>:
 800367e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003682:	461f      	mov	r7, r3
 8003684:	898b      	ldrh	r3, [r1, #12]
 8003686:	05db      	lsls	r3, r3, #23
 8003688:	4605      	mov	r5, r0
 800368a:	460c      	mov	r4, r1
 800368c:	4616      	mov	r6, r2
 800368e:	d505      	bpl.n	800369c <__swrite+0x1e>
 8003690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003694:	2302      	movs	r3, #2
 8003696:	2200      	movs	r2, #0
 8003698:	f000 f83c 	bl	8003714 <_lseek_r>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	4632      	mov	r2, r6
 80036aa:	463b      	mov	r3, r7
 80036ac:	4628      	mov	r0, r5
 80036ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b2:	f000 b853 	b.w	800375c <_write_r>

080036b6 <__sseek>:
 80036b6:	b510      	push	{r4, lr}
 80036b8:	460c      	mov	r4, r1
 80036ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036be:	f000 f829 	bl	8003714 <_lseek_r>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	bf15      	itete	ne
 80036c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036d2:	81a3      	strheq	r3, [r4, #12]
 80036d4:	bf18      	it	ne
 80036d6:	81a3      	strhne	r3, [r4, #12]
 80036d8:	bd10      	pop	{r4, pc}

080036da <__sclose>:
 80036da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036de:	f000 b809 	b.w	80036f4 <_close_r>

080036e2 <memset>:
 80036e2:	4402      	add	r2, r0
 80036e4:	4603      	mov	r3, r0
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d100      	bne.n	80036ec <memset+0xa>
 80036ea:	4770      	bx	lr
 80036ec:	f803 1b01 	strb.w	r1, [r3], #1
 80036f0:	e7f9      	b.n	80036e6 <memset+0x4>
	...

080036f4 <_close_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4d06      	ldr	r5, [pc, #24]	; (8003710 <_close_r+0x1c>)
 80036f8:	2300      	movs	r3, #0
 80036fa:	4604      	mov	r4, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	602b      	str	r3, [r5, #0]
 8003700:	f7fd fc43 	bl	8000f8a <_close>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_close_r+0x1a>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	b103      	cbz	r3, 800370e <_close_r+0x1a>
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	200002a8 	.word	0x200002a8

08003714 <_lseek_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d07      	ldr	r5, [pc, #28]	; (8003734 <_lseek_r+0x20>)
 8003718:	4604      	mov	r4, r0
 800371a:	4608      	mov	r0, r1
 800371c:	4611      	mov	r1, r2
 800371e:	2200      	movs	r2, #0
 8003720:	602a      	str	r2, [r5, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f7fd fc58 	bl	8000fd8 <_lseek>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_lseek_r+0x1e>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_lseek_r+0x1e>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	200002a8 	.word	0x200002a8

08003738 <_read_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d07      	ldr	r5, [pc, #28]	; (8003758 <_read_r+0x20>)
 800373c:	4604      	mov	r4, r0
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	2200      	movs	r2, #0
 8003744:	602a      	str	r2, [r5, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	f7fd fc02 	bl	8000f50 <_read>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_read_r+0x1e>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_read_r+0x1e>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	200002a8 	.word	0x200002a8

0800375c <_write_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	; (800377c <_write_r+0x20>)
 8003760:	4604      	mov	r4, r0
 8003762:	4608      	mov	r0, r1
 8003764:	4611      	mov	r1, r2
 8003766:	2200      	movs	r2, #0
 8003768:	602a      	str	r2, [r5, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f7fc fefe 	bl	800056c <_write>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_write_r+0x1e>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_write_r+0x1e>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	200002a8 	.word	0x200002a8

08003780 <__errno>:
 8003780:	4b01      	ldr	r3, [pc, #4]	; (8003788 <__errno+0x8>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000064 	.word	0x20000064

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	4d0d      	ldr	r5, [pc, #52]	; (80037c4 <__libc_init_array+0x38>)
 8003790:	4c0d      	ldr	r4, [pc, #52]	; (80037c8 <__libc_init_array+0x3c>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	2600      	movs	r6, #0
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	4d0b      	ldr	r5, [pc, #44]	; (80037cc <__libc_init_array+0x40>)
 800379e:	4c0c      	ldr	r4, [pc, #48]	; (80037d0 <__libc_init_array+0x44>)
 80037a0:	f000 fdf4 	bl	800438c <_init>
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	2600      	movs	r6, #0
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	08004608 	.word	0x08004608
 80037c8:	08004608 	.word	0x08004608
 80037cc:	08004608 	.word	0x08004608
 80037d0:	0800460c 	.word	0x0800460c

080037d4 <__retarget_lock_init_recursive>:
 80037d4:	4770      	bx	lr

080037d6 <__retarget_lock_acquire_recursive>:
 80037d6:	4770      	bx	lr

080037d8 <__retarget_lock_release_recursive>:
 80037d8:	4770      	bx	lr
	...

080037dc <_free_r>:
 80037dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037de:	2900      	cmp	r1, #0
 80037e0:	d044      	beq.n	800386c <_free_r+0x90>
 80037e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e6:	9001      	str	r0, [sp, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f1a1 0404 	sub.w	r4, r1, #4
 80037ee:	bfb8      	it	lt
 80037f0:	18e4      	addlt	r4, r4, r3
 80037f2:	f000 f8df 	bl	80039b4 <__malloc_lock>
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <_free_r+0x94>)
 80037f8:	9801      	ldr	r0, [sp, #4]
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	b933      	cbnz	r3, 800380c <_free_r+0x30>
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	6014      	str	r4, [r2, #0]
 8003802:	b003      	add	sp, #12
 8003804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003808:	f000 b8da 	b.w	80039c0 <__malloc_unlock>
 800380c:	42a3      	cmp	r3, r4
 800380e:	d908      	bls.n	8003822 <_free_r+0x46>
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	1961      	adds	r1, r4, r5
 8003814:	428b      	cmp	r3, r1
 8003816:	bf01      	itttt	eq
 8003818:	6819      	ldreq	r1, [r3, #0]
 800381a:	685b      	ldreq	r3, [r3, #4]
 800381c:	1949      	addeq	r1, r1, r5
 800381e:	6021      	streq	r1, [r4, #0]
 8003820:	e7ed      	b.n	80037fe <_free_r+0x22>
 8003822:	461a      	mov	r2, r3
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b10b      	cbz	r3, 800382c <_free_r+0x50>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d9fa      	bls.n	8003822 <_free_r+0x46>
 800382c:	6811      	ldr	r1, [r2, #0]
 800382e:	1855      	adds	r5, r2, r1
 8003830:	42a5      	cmp	r5, r4
 8003832:	d10b      	bne.n	800384c <_free_r+0x70>
 8003834:	6824      	ldr	r4, [r4, #0]
 8003836:	4421      	add	r1, r4
 8003838:	1854      	adds	r4, r2, r1
 800383a:	42a3      	cmp	r3, r4
 800383c:	6011      	str	r1, [r2, #0]
 800383e:	d1e0      	bne.n	8003802 <_free_r+0x26>
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	6053      	str	r3, [r2, #4]
 8003846:	440c      	add	r4, r1
 8003848:	6014      	str	r4, [r2, #0]
 800384a:	e7da      	b.n	8003802 <_free_r+0x26>
 800384c:	d902      	bls.n	8003854 <_free_r+0x78>
 800384e:	230c      	movs	r3, #12
 8003850:	6003      	str	r3, [r0, #0]
 8003852:	e7d6      	b.n	8003802 <_free_r+0x26>
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	1961      	adds	r1, r4, r5
 8003858:	428b      	cmp	r3, r1
 800385a:	bf04      	itt	eq
 800385c:	6819      	ldreq	r1, [r3, #0]
 800385e:	685b      	ldreq	r3, [r3, #4]
 8003860:	6063      	str	r3, [r4, #4]
 8003862:	bf04      	itt	eq
 8003864:	1949      	addeq	r1, r1, r5
 8003866:	6021      	streq	r1, [r4, #0]
 8003868:	6054      	str	r4, [r2, #4]
 800386a:	e7ca      	b.n	8003802 <_free_r+0x26>
 800386c:	b003      	add	sp, #12
 800386e:	bd30      	pop	{r4, r5, pc}
 8003870:	200002b0 	.word	0x200002b0

08003874 <sbrk_aligned>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4e0e      	ldr	r6, [pc, #56]	; (80038b0 <sbrk_aligned+0x3c>)
 8003878:	460c      	mov	r4, r1
 800387a:	6831      	ldr	r1, [r6, #0]
 800387c:	4605      	mov	r5, r0
 800387e:	b911      	cbnz	r1, 8003886 <sbrk_aligned+0x12>
 8003880:	f000 fcf0 	bl	8004264 <_sbrk_r>
 8003884:	6030      	str	r0, [r6, #0]
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 fceb 	bl	8004264 <_sbrk_r>
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	d00a      	beq.n	80038a8 <sbrk_aligned+0x34>
 8003892:	1cc4      	adds	r4, r0, #3
 8003894:	f024 0403 	bic.w	r4, r4, #3
 8003898:	42a0      	cmp	r0, r4
 800389a:	d007      	beq.n	80038ac <sbrk_aligned+0x38>
 800389c:	1a21      	subs	r1, r4, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	f000 fce0 	bl	8004264 <_sbrk_r>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d101      	bne.n	80038ac <sbrk_aligned+0x38>
 80038a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80038ac:	4620      	mov	r0, r4
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	200002b4 	.word	0x200002b4

080038b4 <_malloc_r>:
 80038b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b8:	1ccd      	adds	r5, r1, #3
 80038ba:	f025 0503 	bic.w	r5, r5, #3
 80038be:	3508      	adds	r5, #8
 80038c0:	2d0c      	cmp	r5, #12
 80038c2:	bf38      	it	cc
 80038c4:	250c      	movcc	r5, #12
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	4607      	mov	r7, r0
 80038ca:	db01      	blt.n	80038d0 <_malloc_r+0x1c>
 80038cc:	42a9      	cmp	r1, r5
 80038ce:	d905      	bls.n	80038dc <_malloc_r+0x28>
 80038d0:	230c      	movs	r3, #12
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	2600      	movs	r6, #0
 80038d6:	4630      	mov	r0, r6
 80038d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039b0 <_malloc_r+0xfc>
 80038e0:	f000 f868 	bl	80039b4 <__malloc_lock>
 80038e4:	f8d8 3000 	ldr.w	r3, [r8]
 80038e8:	461c      	mov	r4, r3
 80038ea:	bb5c      	cbnz	r4, 8003944 <_malloc_r+0x90>
 80038ec:	4629      	mov	r1, r5
 80038ee:	4638      	mov	r0, r7
 80038f0:	f7ff ffc0 	bl	8003874 <sbrk_aligned>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	4604      	mov	r4, r0
 80038f8:	d155      	bne.n	80039a6 <_malloc_r+0xf2>
 80038fa:	f8d8 4000 	ldr.w	r4, [r8]
 80038fe:	4626      	mov	r6, r4
 8003900:	2e00      	cmp	r6, #0
 8003902:	d145      	bne.n	8003990 <_malloc_r+0xdc>
 8003904:	2c00      	cmp	r4, #0
 8003906:	d048      	beq.n	800399a <_malloc_r+0xe6>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	4631      	mov	r1, r6
 800390c:	4638      	mov	r0, r7
 800390e:	eb04 0903 	add.w	r9, r4, r3
 8003912:	f000 fca7 	bl	8004264 <_sbrk_r>
 8003916:	4581      	cmp	r9, r0
 8003918:	d13f      	bne.n	800399a <_malloc_r+0xe6>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	1a6d      	subs	r5, r5, r1
 800391e:	4629      	mov	r1, r5
 8003920:	4638      	mov	r0, r7
 8003922:	f7ff ffa7 	bl	8003874 <sbrk_aligned>
 8003926:	3001      	adds	r0, #1
 8003928:	d037      	beq.n	800399a <_malloc_r+0xe6>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	442b      	add	r3, r5
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	f8d8 3000 	ldr.w	r3, [r8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d038      	beq.n	80039aa <_malloc_r+0xf6>
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	42a2      	cmp	r2, r4
 800393c:	d12b      	bne.n	8003996 <_malloc_r+0xe2>
 800393e:	2200      	movs	r2, #0
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e00f      	b.n	8003964 <_malloc_r+0xb0>
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	1b52      	subs	r2, r2, r5
 8003948:	d41f      	bmi.n	800398a <_malloc_r+0xd6>
 800394a:	2a0b      	cmp	r2, #11
 800394c:	d917      	bls.n	800397e <_malloc_r+0xca>
 800394e:	1961      	adds	r1, r4, r5
 8003950:	42a3      	cmp	r3, r4
 8003952:	6025      	str	r5, [r4, #0]
 8003954:	bf18      	it	ne
 8003956:	6059      	strne	r1, [r3, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	bf08      	it	eq
 800395c:	f8c8 1000 	streq.w	r1, [r8]
 8003960:	5162      	str	r2, [r4, r5]
 8003962:	604b      	str	r3, [r1, #4]
 8003964:	4638      	mov	r0, r7
 8003966:	f104 060b 	add.w	r6, r4, #11
 800396a:	f000 f829 	bl	80039c0 <__malloc_unlock>
 800396e:	f026 0607 	bic.w	r6, r6, #7
 8003972:	1d23      	adds	r3, r4, #4
 8003974:	1af2      	subs	r2, r6, r3
 8003976:	d0ae      	beq.n	80038d6 <_malloc_r+0x22>
 8003978:	1b9b      	subs	r3, r3, r6
 800397a:	50a3      	str	r3, [r4, r2]
 800397c:	e7ab      	b.n	80038d6 <_malloc_r+0x22>
 800397e:	42a3      	cmp	r3, r4
 8003980:	6862      	ldr	r2, [r4, #4]
 8003982:	d1dd      	bne.n	8003940 <_malloc_r+0x8c>
 8003984:	f8c8 2000 	str.w	r2, [r8]
 8003988:	e7ec      	b.n	8003964 <_malloc_r+0xb0>
 800398a:	4623      	mov	r3, r4
 800398c:	6864      	ldr	r4, [r4, #4]
 800398e:	e7ac      	b.n	80038ea <_malloc_r+0x36>
 8003990:	4634      	mov	r4, r6
 8003992:	6876      	ldr	r6, [r6, #4]
 8003994:	e7b4      	b.n	8003900 <_malloc_r+0x4c>
 8003996:	4613      	mov	r3, r2
 8003998:	e7cc      	b.n	8003934 <_malloc_r+0x80>
 800399a:	230c      	movs	r3, #12
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4638      	mov	r0, r7
 80039a0:	f000 f80e 	bl	80039c0 <__malloc_unlock>
 80039a4:	e797      	b.n	80038d6 <_malloc_r+0x22>
 80039a6:	6025      	str	r5, [r4, #0]
 80039a8:	e7dc      	b.n	8003964 <_malloc_r+0xb0>
 80039aa:	605b      	str	r3, [r3, #4]
 80039ac:	deff      	udf	#255	; 0xff
 80039ae:	bf00      	nop
 80039b0:	200002b0 	.word	0x200002b0

080039b4 <__malloc_lock>:
 80039b4:	4801      	ldr	r0, [pc, #4]	; (80039bc <__malloc_lock+0x8>)
 80039b6:	f7ff bf0e 	b.w	80037d6 <__retarget_lock_acquire_recursive>
 80039ba:	bf00      	nop
 80039bc:	200002ac 	.word	0x200002ac

080039c0 <__malloc_unlock>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__malloc_unlock+0x8>)
 80039c2:	f7ff bf09 	b.w	80037d8 <__retarget_lock_release_recursive>
 80039c6:	bf00      	nop
 80039c8:	200002ac 	.word	0x200002ac

080039cc <__sfputc_r>:
 80039cc:	6893      	ldr	r3, [r2, #8]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	b410      	push	{r4}
 80039d4:	6093      	str	r3, [r2, #8]
 80039d6:	da08      	bge.n	80039ea <__sfputc_r+0x1e>
 80039d8:	6994      	ldr	r4, [r2, #24]
 80039da:	42a3      	cmp	r3, r4
 80039dc:	db01      	blt.n	80039e2 <__sfputc_r+0x16>
 80039de:	290a      	cmp	r1, #10
 80039e0:	d103      	bne.n	80039ea <__sfputc_r+0x1e>
 80039e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e6:	f000 bba7 	b.w	8004138 <__swbuf_r>
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	1c58      	adds	r0, r3, #1
 80039ee:	6010      	str	r0, [r2, #0]
 80039f0:	7019      	strb	r1, [r3, #0]
 80039f2:	4608      	mov	r0, r1
 80039f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <__sfputs_r>:
 80039fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fc:	4606      	mov	r6, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	4614      	mov	r4, r2
 8003a02:	18d5      	adds	r5, r2, r3
 8003a04:	42ac      	cmp	r4, r5
 8003a06:	d101      	bne.n	8003a0c <__sfputs_r+0x12>
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e007      	b.n	8003a1c <__sfputs_r+0x22>
 8003a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a10:	463a      	mov	r2, r7
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7ff ffda 	bl	80039cc <__sfputc_r>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d1f3      	bne.n	8003a04 <__sfputs_r+0xa>
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a20 <_vfiprintf_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	460d      	mov	r5, r1
 8003a26:	b09d      	sub	sp, #116	; 0x74
 8003a28:	4614      	mov	r4, r2
 8003a2a:	4698      	mov	r8, r3
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	b118      	cbz	r0, 8003a38 <_vfiprintf_r+0x18>
 8003a30:	6a03      	ldr	r3, [r0, #32]
 8003a32:	b90b      	cbnz	r3, 8003a38 <_vfiprintf_r+0x18>
 8003a34:	f7ff fdc2 	bl	80035bc <__sinit>
 8003a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a3a:	07d9      	lsls	r1, r3, #31
 8003a3c:	d405      	bmi.n	8003a4a <_vfiprintf_r+0x2a>
 8003a3e:	89ab      	ldrh	r3, [r5, #12]
 8003a40:	059a      	lsls	r2, r3, #22
 8003a42:	d402      	bmi.n	8003a4a <_vfiprintf_r+0x2a>
 8003a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a46:	f7ff fec6 	bl	80037d6 <__retarget_lock_acquire_recursive>
 8003a4a:	89ab      	ldrh	r3, [r5, #12]
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	d501      	bpl.n	8003a54 <_vfiprintf_r+0x34>
 8003a50:	692b      	ldr	r3, [r5, #16]
 8003a52:	b99b      	cbnz	r3, 8003a7c <_vfiprintf_r+0x5c>
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 fbac 	bl	80041b4 <__swsetup_r>
 8003a5c:	b170      	cbz	r0, 8003a7c <_vfiprintf_r+0x5c>
 8003a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a60:	07dc      	lsls	r4, r3, #31
 8003a62:	d504      	bpl.n	8003a6e <_vfiprintf_r+0x4e>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a68:	b01d      	add	sp, #116	; 0x74
 8003a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	0598      	lsls	r0, r3, #22
 8003a72:	d4f7      	bmi.n	8003a64 <_vfiprintf_r+0x44>
 8003a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a76:	f7ff feaf 	bl	80037d8 <__retarget_lock_release_recursive>
 8003a7a:	e7f3      	b.n	8003a64 <_vfiprintf_r+0x44>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a80:	2320      	movs	r3, #32
 8003a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a8a:	2330      	movs	r3, #48	; 0x30
 8003a8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003c40 <_vfiprintf_r+0x220>
 8003a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a94:	f04f 0901 	mov.w	r9, #1
 8003a98:	4623      	mov	r3, r4
 8003a9a:	469a      	mov	sl, r3
 8003a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aa0:	b10a      	cbz	r2, 8003aa6 <_vfiprintf_r+0x86>
 8003aa2:	2a25      	cmp	r2, #37	; 0x25
 8003aa4:	d1f9      	bne.n	8003a9a <_vfiprintf_r+0x7a>
 8003aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8003aaa:	d00b      	beq.n	8003ac4 <_vfiprintf_r+0xa4>
 8003aac:	465b      	mov	r3, fp
 8003aae:	4622      	mov	r2, r4
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff ffa1 	bl	80039fa <__sfputs_r>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	f000 80a9 	beq.w	8003c10 <_vfiprintf_r+0x1f0>
 8003abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ac0:	445a      	add	r2, fp
 8003ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a1 	beq.w	8003c10 <_vfiprintf_r+0x1f0>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ad8:	f10a 0a01 	add.w	sl, sl, #1
 8003adc:	9304      	str	r3, [sp, #16]
 8003ade:	9307      	str	r3, [sp, #28]
 8003ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ae6:	4654      	mov	r4, sl
 8003ae8:	2205      	movs	r2, #5
 8003aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aee:	4854      	ldr	r0, [pc, #336]	; (8003c40 <_vfiprintf_r+0x220>)
 8003af0:	f7fc fb6e 	bl	80001d0 <memchr>
 8003af4:	9a04      	ldr	r2, [sp, #16]
 8003af6:	b9d8      	cbnz	r0, 8003b30 <_vfiprintf_r+0x110>
 8003af8:	06d1      	lsls	r1, r2, #27
 8003afa:	bf44      	itt	mi
 8003afc:	2320      	movmi	r3, #32
 8003afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b02:	0713      	lsls	r3, r2, #28
 8003b04:	bf44      	itt	mi
 8003b06:	232b      	movmi	r3, #43	; 0x2b
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b10:	2b2a      	cmp	r3, #42	; 0x2a
 8003b12:	d015      	beq.n	8003b40 <_vfiprintf_r+0x120>
 8003b14:	9a07      	ldr	r2, [sp, #28]
 8003b16:	4654      	mov	r4, sl
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f04f 0c0a 	mov.w	ip, #10
 8003b1e:	4621      	mov	r1, r4
 8003b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b24:	3b30      	subs	r3, #48	; 0x30
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d94d      	bls.n	8003bc6 <_vfiprintf_r+0x1a6>
 8003b2a:	b1b0      	cbz	r0, 8003b5a <_vfiprintf_r+0x13a>
 8003b2c:	9207      	str	r2, [sp, #28]
 8003b2e:	e014      	b.n	8003b5a <_vfiprintf_r+0x13a>
 8003b30:	eba0 0308 	sub.w	r3, r0, r8
 8003b34:	fa09 f303 	lsl.w	r3, r9, r3
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	9304      	str	r3, [sp, #16]
 8003b3c:	46a2      	mov	sl, r4
 8003b3e:	e7d2      	b.n	8003ae6 <_vfiprintf_r+0xc6>
 8003b40:	9b03      	ldr	r3, [sp, #12]
 8003b42:	1d19      	adds	r1, r3, #4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	9103      	str	r1, [sp, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bfbb      	ittet	lt
 8003b4c:	425b      	neglt	r3, r3
 8003b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003b52:	9307      	strge	r3, [sp, #28]
 8003b54:	9307      	strlt	r3, [sp, #28]
 8003b56:	bfb8      	it	lt
 8003b58:	9204      	strlt	r2, [sp, #16]
 8003b5a:	7823      	ldrb	r3, [r4, #0]
 8003b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b5e:	d10c      	bne.n	8003b7a <_vfiprintf_r+0x15a>
 8003b60:	7863      	ldrb	r3, [r4, #1]
 8003b62:	2b2a      	cmp	r3, #42	; 0x2a
 8003b64:	d134      	bne.n	8003bd0 <_vfiprintf_r+0x1b0>
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	9203      	str	r2, [sp, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bfb8      	it	lt
 8003b72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b76:	3402      	adds	r4, #2
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003c50 <_vfiprintf_r+0x230>
 8003b7e:	7821      	ldrb	r1, [r4, #0]
 8003b80:	2203      	movs	r2, #3
 8003b82:	4650      	mov	r0, sl
 8003b84:	f7fc fb24 	bl	80001d0 <memchr>
 8003b88:	b138      	cbz	r0, 8003b9a <_vfiprintf_r+0x17a>
 8003b8a:	9b04      	ldr	r3, [sp, #16]
 8003b8c:	eba0 000a 	sub.w	r0, r0, sl
 8003b90:	2240      	movs	r2, #64	; 0x40
 8003b92:	4082      	lsls	r2, r0
 8003b94:	4313      	orrs	r3, r2
 8003b96:	3401      	adds	r4, #1
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b9e:	4829      	ldr	r0, [pc, #164]	; (8003c44 <_vfiprintf_r+0x224>)
 8003ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f7fc fb13 	bl	80001d0 <memchr>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d03f      	beq.n	8003c2e <_vfiprintf_r+0x20e>
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <_vfiprintf_r+0x228>)
 8003bb0:	bb1b      	cbnz	r3, 8003bfa <_vfiprintf_r+0x1da>
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	3307      	adds	r3, #7
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	3308      	adds	r3, #8
 8003bbc:	9303      	str	r3, [sp, #12]
 8003bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc0:	443b      	add	r3, r7
 8003bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc4:	e768      	b.n	8003a98 <_vfiprintf_r+0x78>
 8003bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bca:	460c      	mov	r4, r1
 8003bcc:	2001      	movs	r0, #1
 8003bce:	e7a6      	b.n	8003b1e <_vfiprintf_r+0xfe>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be2:	3a30      	subs	r2, #48	; 0x30
 8003be4:	2a09      	cmp	r2, #9
 8003be6:	d903      	bls.n	8003bf0 <_vfiprintf_r+0x1d0>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0c6      	beq.n	8003b7a <_vfiprintf_r+0x15a>
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	e7c4      	b.n	8003b7a <_vfiprintf_r+0x15a>
 8003bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7f0      	b.n	8003bdc <_vfiprintf_r+0x1bc>
 8003bfa:	ab03      	add	r3, sp, #12
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	462a      	mov	r2, r5
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <_vfiprintf_r+0x22c>)
 8003c02:	a904      	add	r1, sp, #16
 8003c04:	4630      	mov	r0, r6
 8003c06:	f3af 8000 	nop.w
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	1c78      	adds	r0, r7, #1
 8003c0e:	d1d6      	bne.n	8003bbe <_vfiprintf_r+0x19e>
 8003c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c12:	07d9      	lsls	r1, r3, #31
 8003c14:	d405      	bmi.n	8003c22 <_vfiprintf_r+0x202>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	059a      	lsls	r2, r3, #22
 8003c1a:	d402      	bmi.n	8003c22 <_vfiprintf_r+0x202>
 8003c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c1e:	f7ff fddb 	bl	80037d8 <__retarget_lock_release_recursive>
 8003c22:	89ab      	ldrh	r3, [r5, #12]
 8003c24:	065b      	lsls	r3, r3, #25
 8003c26:	f53f af1d 	bmi.w	8003a64 <_vfiprintf_r+0x44>
 8003c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c2c:	e71c      	b.n	8003a68 <_vfiprintf_r+0x48>
 8003c2e:	ab03      	add	r3, sp, #12
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	462a      	mov	r2, r5
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <_vfiprintf_r+0x22c>)
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f000 f879 	bl	8003d30 <_printf_i>
 8003c3e:	e7e4      	b.n	8003c0a <_vfiprintf_r+0x1ea>
 8003c40:	080045cc 	.word	0x080045cc
 8003c44:	080045d6 	.word	0x080045d6
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	080039fb 	.word	0x080039fb
 8003c50:	080045d2 	.word	0x080045d2

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfb8      	it	lt
 8003c68:	4613      	movlt	r3, r2
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c70:	4607      	mov	r7, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc26      	bgt.n	8003cea <_printf_common+0x96>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42b      	bmi.n	8003d04 <_printf_common+0xb0>
 8003cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d01e      	beq.n	8003cf8 <_printf_common+0xa4>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	6922      	ldr	r2, [r4, #16]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf02      	ittt	eq
 8003cc6:	68e5      	ldreq	r5, [r4, #12]
 8003cc8:	6833      	ldreq	r3, [r6, #0]
 8003cca:	1aed      	subeq	r5, r5, r3
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	bf0c      	ite	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	2500      	movne	r5, #0
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bfc4      	itt	gt
 8003cda:	1a9b      	subgt	r3, r3, r2
 8003cdc:	18ed      	addgt	r5, r5, r3
 8003cde:	2600      	movs	r6, #0
 8003ce0:	341a      	adds	r4, #26
 8003ce2:	42b5      	cmp	r5, r6
 8003ce4:	d11a      	bne.n	8003d1c <_printf_common+0xc8>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e008      	b.n	8003cfc <_printf_common+0xa8>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4652      	mov	r2, sl
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	47c0      	blx	r8
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_printf_common+0xac>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7c6      	b.n	8003c92 <_printf_common+0x3e>
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d0e:	4422      	add	r2, r4
 8003d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d18:	3302      	adds	r3, #2
 8003d1a:	e7c7      	b.n	8003cac <_printf_common+0x58>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d0e6      	beq.n	8003cf8 <_printf_common+0xa4>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7d9      	b.n	8003ce2 <_printf_common+0x8e>
	...

08003d30 <_printf_i>:
 8003d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	7e0f      	ldrb	r7, [r1, #24]
 8003d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d38:	2f78      	cmp	r7, #120	; 0x78
 8003d3a:	4691      	mov	r9, r2
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	469a      	mov	sl, r3
 8003d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d46:	d807      	bhi.n	8003d58 <_printf_i+0x28>
 8003d48:	2f62      	cmp	r7, #98	; 0x62
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x32>
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f000 80d4 	beq.w	8003efa <_printf_i+0x1ca>
 8003d52:	2f58      	cmp	r7, #88	; 0x58
 8003d54:	f000 80c0 	beq.w	8003ed8 <_printf_i+0x1a8>
 8003d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d60:	e03a      	b.n	8003dd8 <_printf_i+0xa8>
 8003d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d66:	2b15      	cmp	r3, #21
 8003d68:	d8f6      	bhi.n	8003d58 <_printf_i+0x28>
 8003d6a:	a101      	add	r1, pc, #4	; (adr r1, 8003d70 <_printf_i+0x40>)
 8003d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003d59 	.word	0x08003d59
 8003d7c:	08003d59 	.word	0x08003d59
 8003d80:	08003d59 	.word	0x08003d59
 8003d84:	08003d59 	.word	0x08003d59
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d59 	.word	0x08003d59
 8003d90:	08003d59 	.word	0x08003d59
 8003d94:	08003d59 	.word	0x08003d59
 8003d98:	08003d59 	.word	0x08003d59
 8003d9c:	08003ee1 	.word	0x08003ee1
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e9b 	.word	0x08003e9b
 8003da8:	08003d59 	.word	0x08003d59
 8003dac:	08003d59 	.word	0x08003d59
 8003db0:	08003f03 	.word	0x08003f03
 8003db4:	08003d59 	.word	0x08003d59
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003d59 	.word	0x08003d59
 8003dc0:	08003d59 	.word	0x08003d59
 8003dc4:	08003ea3 	.word	0x08003ea3
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	602a      	str	r2, [r5, #0]
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09f      	b.n	8003f1c <_printf_i+0x1ec>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	0607      	lsls	r7, r0, #24
 8003de2:	f103 0104 	add.w	r1, r3, #4
 8003de6:	6029      	str	r1, [r5, #0]
 8003de8:	d501      	bpl.n	8003dee <_printf_i+0xbe>
 8003dea:	681e      	ldr	r6, [r3, #0]
 8003dec:	e003      	b.n	8003df6 <_printf_i+0xc6>
 8003dee:	0646      	lsls	r6, r0, #25
 8003df0:	d5fb      	bpl.n	8003dea <_printf_i+0xba>
 8003df2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	da03      	bge.n	8003e02 <_printf_i+0xd2>
 8003dfa:	232d      	movs	r3, #45	; 0x2d
 8003dfc:	4276      	negs	r6, r6
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e02:	485a      	ldr	r0, [pc, #360]	; (8003f6c <_printf_i+0x23c>)
 8003e04:	230a      	movs	r3, #10
 8003e06:	e012      	b.n	8003e2e <_printf_i+0xfe>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1d19      	adds	r1, r3, #4
 8003e0e:	6029      	str	r1, [r5, #0]
 8003e10:	0605      	lsls	r5, r0, #24
 8003e12:	d501      	bpl.n	8003e18 <_printf_i+0xe8>
 8003e14:	681e      	ldr	r6, [r3, #0]
 8003e16:	e002      	b.n	8003e1e <_printf_i+0xee>
 8003e18:	0641      	lsls	r1, r0, #25
 8003e1a:	d5fb      	bpl.n	8003e14 <_printf_i+0xe4>
 8003e1c:	881e      	ldrh	r6, [r3, #0]
 8003e1e:	4853      	ldr	r0, [pc, #332]	; (8003f6c <_printf_i+0x23c>)
 8003e20:	2f6f      	cmp	r7, #111	; 0x6f
 8003e22:	bf0c      	ite	eq
 8003e24:	2308      	moveq	r3, #8
 8003e26:	230a      	movne	r3, #10
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e2e:	6865      	ldr	r5, [r4, #4]
 8003e30:	60a5      	str	r5, [r4, #8]
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	bfa2      	ittt	ge
 8003e36:	6821      	ldrge	r1, [r4, #0]
 8003e38:	f021 0104 	bicge.w	r1, r1, #4
 8003e3c:	6021      	strge	r1, [r4, #0]
 8003e3e:	b90e      	cbnz	r6, 8003e44 <_printf_i+0x114>
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	d04b      	beq.n	8003edc <_printf_i+0x1ac>
 8003e44:	4615      	mov	r5, r2
 8003e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e4e:	5dc7      	ldrb	r7, [r0, r7]
 8003e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e54:	4637      	mov	r7, r6
 8003e56:	42bb      	cmp	r3, r7
 8003e58:	460e      	mov	r6, r1
 8003e5a:	d9f4      	bls.n	8003e46 <_printf_i+0x116>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d10b      	bne.n	8003e78 <_printf_i+0x148>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	07de      	lsls	r6, r3, #31
 8003e64:	d508      	bpl.n	8003e78 <_printf_i+0x148>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	6861      	ldr	r1, [r4, #4]
 8003e6a:	4299      	cmp	r1, r3
 8003e6c:	bfde      	ittt	le
 8003e6e:	2330      	movle	r3, #48	; 0x30
 8003e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e78:	1b52      	subs	r2, r2, r5
 8003e7a:	6122      	str	r2, [r4, #16]
 8003e7c:	f8cd a000 	str.w	sl, [sp]
 8003e80:	464b      	mov	r3, r9
 8003e82:	aa03      	add	r2, sp, #12
 8003e84:	4621      	mov	r1, r4
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7ff fee4 	bl	8003c54 <_printf_common>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d14a      	bne.n	8003f26 <_printf_i+0x1f6>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e94:	b004      	add	sp, #16
 8003e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	4833      	ldr	r0, [pc, #204]	; (8003f70 <_printf_i+0x240>)
 8003ea4:	2778      	movs	r7, #120	; 0x78
 8003ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6829      	ldr	r1, [r5, #0]
 8003eae:	061f      	lsls	r7, r3, #24
 8003eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eb4:	d402      	bmi.n	8003ebc <_printf_i+0x18c>
 8003eb6:	065f      	lsls	r7, r3, #25
 8003eb8:	bf48      	it	mi
 8003eba:	b2b6      	uxthmi	r6, r6
 8003ebc:	07df      	lsls	r7, r3, #31
 8003ebe:	bf48      	it	mi
 8003ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec4:	6029      	str	r1, [r5, #0]
 8003ec6:	bf48      	it	mi
 8003ec8:	6023      	strmi	r3, [r4, #0]
 8003eca:	b91e      	cbnz	r6, 8003ed4 <_printf_i+0x1a4>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	e7a7      	b.n	8003e28 <_printf_i+0xf8>
 8003ed8:	4824      	ldr	r0, [pc, #144]	; (8003f6c <_printf_i+0x23c>)
 8003eda:	e7e4      	b.n	8003ea6 <_printf_i+0x176>
 8003edc:	4615      	mov	r5, r2
 8003ede:	e7bd      	b.n	8003e5c <_printf_i+0x12c>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	6826      	ldr	r6, [r4, #0]
 8003ee4:	6961      	ldr	r1, [r4, #20]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6028      	str	r0, [r5, #0]
 8003eea:	0635      	lsls	r5, r6, #24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	d501      	bpl.n	8003ef4 <_printf_i+0x1c4>
 8003ef0:	6019      	str	r1, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <_printf_i+0x1ca>
 8003ef4:	0670      	lsls	r0, r6, #25
 8003ef6:	d5fb      	bpl.n	8003ef0 <_printf_i+0x1c0>
 8003ef8:	8019      	strh	r1, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	6123      	str	r3, [r4, #16]
 8003efe:	4615      	mov	r5, r2
 8003f00:	e7bc      	b.n	8003e7c <_printf_i+0x14c>
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	602a      	str	r2, [r5, #0]
 8003f08:	681d      	ldr	r5, [r3, #0]
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fc f95e 	bl	80001d0 <memchr>
 8003f14:	b108      	cbz	r0, 8003f1a <_printf_i+0x1ea>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	6060      	str	r0, [r4, #4]
 8003f1a:	6863      	ldr	r3, [r4, #4]
 8003f1c:	6123      	str	r3, [r4, #16]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	e7aa      	b.n	8003e7c <_printf_i+0x14c>
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	47d0      	blx	sl
 8003f30:	3001      	adds	r0, #1
 8003f32:	d0ad      	beq.n	8003e90 <_printf_i+0x160>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	079b      	lsls	r3, r3, #30
 8003f38:	d413      	bmi.n	8003f62 <_printf_i+0x232>
 8003f3a:	68e0      	ldr	r0, [r4, #12]
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	bfb8      	it	lt
 8003f42:	4618      	movlt	r0, r3
 8003f44:	e7a6      	b.n	8003e94 <_printf_i+0x164>
 8003f46:	2301      	movs	r3, #1
 8003f48:	4632      	mov	r2, r6
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	47d0      	blx	sl
 8003f50:	3001      	adds	r0, #1
 8003f52:	d09d      	beq.n	8003e90 <_printf_i+0x160>
 8003f54:	3501      	adds	r5, #1
 8003f56:	68e3      	ldr	r3, [r4, #12]
 8003f58:	9903      	ldr	r1, [sp, #12]
 8003f5a:	1a5b      	subs	r3, r3, r1
 8003f5c:	42ab      	cmp	r3, r5
 8003f5e:	dcf2      	bgt.n	8003f46 <_printf_i+0x216>
 8003f60:	e7eb      	b.n	8003f3a <_printf_i+0x20a>
 8003f62:	2500      	movs	r5, #0
 8003f64:	f104 0619 	add.w	r6, r4, #25
 8003f68:	e7f5      	b.n	8003f56 <_printf_i+0x226>
 8003f6a:	bf00      	nop
 8003f6c:	080045dd 	.word	0x080045dd
 8003f70:	080045ee 	.word	0x080045ee

08003f74 <__sflush_r>:
 8003f74:	898a      	ldrh	r2, [r1, #12]
 8003f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	0710      	lsls	r0, r2, #28
 8003f7e:	460c      	mov	r4, r1
 8003f80:	d458      	bmi.n	8004034 <__sflush_r+0xc0>
 8003f82:	684b      	ldr	r3, [r1, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dc05      	bgt.n	8003f94 <__sflush_r+0x20>
 8003f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dc02      	bgt.n	8003f94 <__sflush_r+0x20>
 8003f8e:	2000      	movs	r0, #0
 8003f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f96:	2e00      	cmp	r6, #0
 8003f98:	d0f9      	beq.n	8003f8e <__sflush_r+0x1a>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fa0:	682f      	ldr	r7, [r5, #0]
 8003fa2:	6a21      	ldr	r1, [r4, #32]
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	d032      	beq.n	800400e <__sflush_r+0x9a>
 8003fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	075a      	lsls	r2, r3, #29
 8003fae:	d505      	bpl.n	8003fbc <__sflush_r+0x48>
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	1ac0      	subs	r0, r0, r3
 8003fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fb6:	b10b      	cbz	r3, 8003fbc <__sflush_r+0x48>
 8003fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fba:	1ac0      	subs	r0, r0, r3
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fc2:	6a21      	ldr	r1, [r4, #32]
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b0      	blx	r6
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	d106      	bne.n	8003fdc <__sflush_r+0x68>
 8003fce:	6829      	ldr	r1, [r5, #0]
 8003fd0:	291d      	cmp	r1, #29
 8003fd2:	d82b      	bhi.n	800402c <__sflush_r+0xb8>
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <__sflush_r+0x108>)
 8003fd6:	410a      	asrs	r2, r1
 8003fd8:	07d6      	lsls	r6, r2, #31
 8003fda:	d427      	bmi.n	800402c <__sflush_r+0xb8>
 8003fdc:	2200      	movs	r2, #0
 8003fde:	6062      	str	r2, [r4, #4]
 8003fe0:	04d9      	lsls	r1, r3, #19
 8003fe2:	6922      	ldr	r2, [r4, #16]
 8003fe4:	6022      	str	r2, [r4, #0]
 8003fe6:	d504      	bpl.n	8003ff2 <__sflush_r+0x7e>
 8003fe8:	1c42      	adds	r2, r0, #1
 8003fea:	d101      	bne.n	8003ff0 <__sflush_r+0x7c>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b903      	cbnz	r3, 8003ff2 <__sflush_r+0x7e>
 8003ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff4:	602f      	str	r7, [r5, #0]
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d0c9      	beq.n	8003f8e <__sflush_r+0x1a>
 8003ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ffe:	4299      	cmp	r1, r3
 8004000:	d002      	beq.n	8004008 <__sflush_r+0x94>
 8004002:	4628      	mov	r0, r5
 8004004:	f7ff fbea 	bl	80037dc <_free_r>
 8004008:	2000      	movs	r0, #0
 800400a:	6360      	str	r0, [r4, #52]	; 0x34
 800400c:	e7c0      	b.n	8003f90 <__sflush_r+0x1c>
 800400e:	2301      	movs	r3, #1
 8004010:	4628      	mov	r0, r5
 8004012:	47b0      	blx	r6
 8004014:	1c41      	adds	r1, r0, #1
 8004016:	d1c8      	bne.n	8003faa <__sflush_r+0x36>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0c5      	beq.n	8003faa <__sflush_r+0x36>
 800401e:	2b1d      	cmp	r3, #29
 8004020:	d001      	beq.n	8004026 <__sflush_r+0xb2>
 8004022:	2b16      	cmp	r3, #22
 8004024:	d101      	bne.n	800402a <__sflush_r+0xb6>
 8004026:	602f      	str	r7, [r5, #0]
 8004028:	e7b1      	b.n	8003f8e <__sflush_r+0x1a>
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	e7ad      	b.n	8003f90 <__sflush_r+0x1c>
 8004034:	690f      	ldr	r7, [r1, #16]
 8004036:	2f00      	cmp	r7, #0
 8004038:	d0a9      	beq.n	8003f8e <__sflush_r+0x1a>
 800403a:	0793      	lsls	r3, r2, #30
 800403c:	680e      	ldr	r6, [r1, #0]
 800403e:	bf08      	it	eq
 8004040:	694b      	ldreq	r3, [r1, #20]
 8004042:	600f      	str	r7, [r1, #0]
 8004044:	bf18      	it	ne
 8004046:	2300      	movne	r3, #0
 8004048:	eba6 0807 	sub.w	r8, r6, r7
 800404c:	608b      	str	r3, [r1, #8]
 800404e:	f1b8 0f00 	cmp.w	r8, #0
 8004052:	dd9c      	ble.n	8003f8e <__sflush_r+0x1a>
 8004054:	6a21      	ldr	r1, [r4, #32]
 8004056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004058:	4643      	mov	r3, r8
 800405a:	463a      	mov	r2, r7
 800405c:	4628      	mov	r0, r5
 800405e:	47b0      	blx	r6
 8004060:	2800      	cmp	r0, #0
 8004062:	dc06      	bgt.n	8004072 <__sflush_r+0xfe>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004070:	e78e      	b.n	8003f90 <__sflush_r+0x1c>
 8004072:	4407      	add	r7, r0
 8004074:	eba8 0800 	sub.w	r8, r8, r0
 8004078:	e7e9      	b.n	800404e <__sflush_r+0xda>
 800407a:	bf00      	nop
 800407c:	dfbffffe 	.word	0xdfbffffe

08004080 <_fflush_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	690b      	ldr	r3, [r1, #16]
 8004084:	4605      	mov	r5, r0
 8004086:	460c      	mov	r4, r1
 8004088:	b913      	cbnz	r3, 8004090 <_fflush_r+0x10>
 800408a:	2500      	movs	r5, #0
 800408c:	4628      	mov	r0, r5
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	b118      	cbz	r0, 800409a <_fflush_r+0x1a>
 8004092:	6a03      	ldr	r3, [r0, #32]
 8004094:	b90b      	cbnz	r3, 800409a <_fflush_r+0x1a>
 8004096:	f7ff fa91 	bl	80035bc <__sinit>
 800409a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f3      	beq.n	800408a <_fflush_r+0xa>
 80040a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040a4:	07d0      	lsls	r0, r2, #31
 80040a6:	d404      	bmi.n	80040b2 <_fflush_r+0x32>
 80040a8:	0599      	lsls	r1, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_fflush_r+0x32>
 80040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ae:	f7ff fb92 	bl	80037d6 <__retarget_lock_acquire_recursive>
 80040b2:	4628      	mov	r0, r5
 80040b4:	4621      	mov	r1, r4
 80040b6:	f7ff ff5d 	bl	8003f74 <__sflush_r>
 80040ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040bc:	07da      	lsls	r2, r3, #31
 80040be:	4605      	mov	r5, r0
 80040c0:	d4e4      	bmi.n	800408c <_fflush_r+0xc>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	059b      	lsls	r3, r3, #22
 80040c6:	d4e1      	bmi.n	800408c <_fflush_r+0xc>
 80040c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ca:	f7ff fb85 	bl	80037d8 <__retarget_lock_release_recursive>
 80040ce:	e7dd      	b.n	800408c <_fflush_r+0xc>

080040d0 <_putc_r>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	460d      	mov	r5, r1
 80040d4:	4614      	mov	r4, r2
 80040d6:	4606      	mov	r6, r0
 80040d8:	b118      	cbz	r0, 80040e2 <_putc_r+0x12>
 80040da:	6a03      	ldr	r3, [r0, #32]
 80040dc:	b90b      	cbnz	r3, 80040e2 <_putc_r+0x12>
 80040de:	f7ff fa6d 	bl	80035bc <__sinit>
 80040e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e4:	07d8      	lsls	r0, r3, #31
 80040e6:	d405      	bmi.n	80040f4 <_putc_r+0x24>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	0599      	lsls	r1, r3, #22
 80040ec:	d402      	bmi.n	80040f4 <_putc_r+0x24>
 80040ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f0:	f7ff fb71 	bl	80037d6 <__retarget_lock_acquire_recursive>
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	da05      	bge.n	800410a <_putc_r+0x3a>
 80040fe:	69a2      	ldr	r2, [r4, #24]
 8004100:	4293      	cmp	r3, r2
 8004102:	db12      	blt.n	800412a <_putc_r+0x5a>
 8004104:	b2eb      	uxtb	r3, r5
 8004106:	2b0a      	cmp	r3, #10
 8004108:	d00f      	beq.n	800412a <_putc_r+0x5a>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	701d      	strb	r5, [r3, #0]
 8004112:	b2ed      	uxtb	r5, r5
 8004114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004116:	07da      	lsls	r2, r3, #31
 8004118:	d405      	bmi.n	8004126 <_putc_r+0x56>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	059b      	lsls	r3, r3, #22
 800411e:	d402      	bmi.n	8004126 <_putc_r+0x56>
 8004120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004122:	f7ff fb59 	bl	80037d8 <__retarget_lock_release_recursive>
 8004126:	4628      	mov	r0, r5
 8004128:	bd70      	pop	{r4, r5, r6, pc}
 800412a:	4629      	mov	r1, r5
 800412c:	4622      	mov	r2, r4
 800412e:	4630      	mov	r0, r6
 8004130:	f000 f802 	bl	8004138 <__swbuf_r>
 8004134:	4605      	mov	r5, r0
 8004136:	e7ed      	b.n	8004114 <_putc_r+0x44>

08004138 <__swbuf_r>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	460e      	mov	r6, r1
 800413c:	4614      	mov	r4, r2
 800413e:	4605      	mov	r5, r0
 8004140:	b118      	cbz	r0, 800414a <__swbuf_r+0x12>
 8004142:	6a03      	ldr	r3, [r0, #32]
 8004144:	b90b      	cbnz	r3, 800414a <__swbuf_r+0x12>
 8004146:	f7ff fa39 	bl	80035bc <__sinit>
 800414a:	69a3      	ldr	r3, [r4, #24]
 800414c:	60a3      	str	r3, [r4, #8]
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	071a      	lsls	r2, r3, #28
 8004152:	d525      	bpl.n	80041a0 <__swbuf_r+0x68>
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	b31b      	cbz	r3, 80041a0 <__swbuf_r+0x68>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	6922      	ldr	r2, [r4, #16]
 800415c:	1a98      	subs	r0, r3, r2
 800415e:	6963      	ldr	r3, [r4, #20]
 8004160:	b2f6      	uxtb	r6, r6
 8004162:	4283      	cmp	r3, r0
 8004164:	4637      	mov	r7, r6
 8004166:	dc04      	bgt.n	8004172 <__swbuf_r+0x3a>
 8004168:	4621      	mov	r1, r4
 800416a:	4628      	mov	r0, r5
 800416c:	f7ff ff88 	bl	8004080 <_fflush_r>
 8004170:	b9e0      	cbnz	r0, 80041ac <__swbuf_r+0x74>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	3b01      	subs	r3, #1
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	6022      	str	r2, [r4, #0]
 800417e:	701e      	strb	r6, [r3, #0]
 8004180:	6962      	ldr	r2, [r4, #20]
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	429a      	cmp	r2, r3
 8004186:	d004      	beq.n	8004192 <__swbuf_r+0x5a>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	07db      	lsls	r3, r3, #31
 800418c:	d506      	bpl.n	800419c <__swbuf_r+0x64>
 800418e:	2e0a      	cmp	r6, #10
 8004190:	d104      	bne.n	800419c <__swbuf_r+0x64>
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f7ff ff73 	bl	8004080 <_fflush_r>
 800419a:	b938      	cbnz	r0, 80041ac <__swbuf_r+0x74>
 800419c:	4638      	mov	r0, r7
 800419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a0:	4621      	mov	r1, r4
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 f806 	bl	80041b4 <__swsetup_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0d5      	beq.n	8004158 <__swbuf_r+0x20>
 80041ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041b0:	e7f4      	b.n	800419c <__swbuf_r+0x64>
	...

080041b4 <__swsetup_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <__swsetup_r+0xac>)
 80041b8:	4605      	mov	r5, r0
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	460c      	mov	r4, r1
 80041be:	b118      	cbz	r0, 80041c8 <__swsetup_r+0x14>
 80041c0:	6a03      	ldr	r3, [r0, #32]
 80041c2:	b90b      	cbnz	r3, 80041c8 <__swsetup_r+0x14>
 80041c4:	f7ff f9fa 	bl	80035bc <__sinit>
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041ce:	0718      	lsls	r0, r3, #28
 80041d0:	d422      	bmi.n	8004218 <__swsetup_r+0x64>
 80041d2:	06d9      	lsls	r1, r3, #27
 80041d4:	d407      	bmi.n	80041e6 <__swsetup_r+0x32>
 80041d6:	2309      	movs	r3, #9
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e4:	e034      	b.n	8004250 <__swsetup_r+0x9c>
 80041e6:	0758      	lsls	r0, r3, #29
 80041e8:	d512      	bpl.n	8004210 <__swsetup_r+0x5c>
 80041ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ec:	b141      	cbz	r1, 8004200 <__swsetup_r+0x4c>
 80041ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f2:	4299      	cmp	r1, r3
 80041f4:	d002      	beq.n	80041fc <__swsetup_r+0x48>
 80041f6:	4628      	mov	r0, r5
 80041f8:	f7ff faf0 	bl	80037dc <_free_r>
 80041fc:	2300      	movs	r3, #0
 80041fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	2300      	movs	r3, #0
 800420a:	6063      	str	r3, [r4, #4]
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f043 0308 	orr.w	r3, r3, #8
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	b94b      	cbnz	r3, 8004230 <__swsetup_r+0x7c>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004226:	d003      	beq.n	8004230 <__swsetup_r+0x7c>
 8004228:	4621      	mov	r1, r4
 800422a:	4628      	mov	r0, r5
 800422c:	f000 f850 	bl	80042d0 <__smakebuf_r>
 8004230:	89a0      	ldrh	r0, [r4, #12]
 8004232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004236:	f010 0301 	ands.w	r3, r0, #1
 800423a:	d00a      	beq.n	8004252 <__swsetup_r+0x9e>
 800423c:	2300      	movs	r3, #0
 800423e:	60a3      	str	r3, [r4, #8]
 8004240:	6963      	ldr	r3, [r4, #20]
 8004242:	425b      	negs	r3, r3
 8004244:	61a3      	str	r3, [r4, #24]
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	b943      	cbnz	r3, 800425c <__swsetup_r+0xa8>
 800424a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800424e:	d1c4      	bne.n	80041da <__swsetup_r+0x26>
 8004250:	bd38      	pop	{r3, r4, r5, pc}
 8004252:	0781      	lsls	r1, r0, #30
 8004254:	bf58      	it	pl
 8004256:	6963      	ldrpl	r3, [r4, #20]
 8004258:	60a3      	str	r3, [r4, #8]
 800425a:	e7f4      	b.n	8004246 <__swsetup_r+0x92>
 800425c:	2000      	movs	r0, #0
 800425e:	e7f7      	b.n	8004250 <__swsetup_r+0x9c>
 8004260:	20000064 	.word	0x20000064

08004264 <_sbrk_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d06      	ldr	r5, [pc, #24]	; (8004280 <_sbrk_r+0x1c>)
 8004268:	2300      	movs	r3, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f7fc fec0 	bl	8000ff4 <_sbrk>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_sbrk_r+0x1a>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_sbrk_r+0x1a>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	200002a8 	.word	0x200002a8

08004284 <__swhatbuf_r>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	460c      	mov	r4, r1
 8004288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428c:	2900      	cmp	r1, #0
 800428e:	b096      	sub	sp, #88	; 0x58
 8004290:	4615      	mov	r5, r2
 8004292:	461e      	mov	r6, r3
 8004294:	da0d      	bge.n	80042b2 <__swhatbuf_r+0x2e>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f013 0f80 	tst.w	r3, #128	; 0x80
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042a6:	2340      	movne	r3, #64	; 0x40
 80042a8:	2000      	movs	r0, #0
 80042aa:	6031      	str	r1, [r6, #0]
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	b016      	add	sp, #88	; 0x58
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	466a      	mov	r2, sp
 80042b4:	f000 f848 	bl	8004348 <_fstat_r>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	dbec      	blt.n	8004296 <__swhatbuf_r+0x12>
 80042bc:	9901      	ldr	r1, [sp, #4]
 80042be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042c6:	4259      	negs	r1, r3
 80042c8:	4159      	adcs	r1, r3
 80042ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ce:	e7eb      	b.n	80042a8 <__swhatbuf_r+0x24>

080042d0 <__smakebuf_r>:
 80042d0:	898b      	ldrh	r3, [r1, #12]
 80042d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042d4:	079d      	lsls	r5, r3, #30
 80042d6:	4606      	mov	r6, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	d507      	bpl.n	80042ec <__smakebuf_r+0x1c>
 80042dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	2301      	movs	r3, #1
 80042e6:	6163      	str	r3, [r4, #20]
 80042e8:	b002      	add	sp, #8
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	ab01      	add	r3, sp, #4
 80042ee:	466a      	mov	r2, sp
 80042f0:	f7ff ffc8 	bl	8004284 <__swhatbuf_r>
 80042f4:	9900      	ldr	r1, [sp, #0]
 80042f6:	4605      	mov	r5, r0
 80042f8:	4630      	mov	r0, r6
 80042fa:	f7ff fadb 	bl	80038b4 <_malloc_r>
 80042fe:	b948      	cbnz	r0, 8004314 <__smakebuf_r+0x44>
 8004300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004304:	059a      	lsls	r2, r3, #22
 8004306:	d4ef      	bmi.n	80042e8 <__smakebuf_r+0x18>
 8004308:	f023 0303 	bic.w	r3, r3, #3
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	e7e3      	b.n	80042dc <__smakebuf_r+0xc>
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	9b00      	ldr	r3, [sp, #0]
 8004320:	6163      	str	r3, [r4, #20]
 8004322:	9b01      	ldr	r3, [sp, #4]
 8004324:	6120      	str	r0, [r4, #16]
 8004326:	b15b      	cbz	r3, 8004340 <__smakebuf_r+0x70>
 8004328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f81d 	bl	800436c <_isatty_r>
 8004332:	b128      	cbz	r0, 8004340 <__smakebuf_r+0x70>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	81a3      	strh	r3, [r4, #12]
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	431d      	orrs	r5, r3
 8004344:	81a5      	strh	r5, [r4, #12]
 8004346:	e7cf      	b.n	80042e8 <__smakebuf_r+0x18>

08004348 <_fstat_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d07      	ldr	r5, [pc, #28]	; (8004368 <_fstat_r+0x20>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	f7fc fe24 	bl	8000fa2 <_fstat>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d102      	bne.n	8004364 <_fstat_r+0x1c>
 800435e:	682b      	ldr	r3, [r5, #0]
 8004360:	b103      	cbz	r3, 8004364 <_fstat_r+0x1c>
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	bd38      	pop	{r3, r4, r5, pc}
 8004366:	bf00      	nop
 8004368:	200002a8 	.word	0x200002a8

0800436c <_isatty_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4d06      	ldr	r5, [pc, #24]	; (8004388 <_isatty_r+0x1c>)
 8004370:	2300      	movs	r3, #0
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	f7fc fe23 	bl	8000fc2 <_isatty>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_isatty_r+0x1a>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_isatty_r+0x1a>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	200002a8 	.word	0x200002a8

0800438c <_init>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr

08004398 <_fini>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr
