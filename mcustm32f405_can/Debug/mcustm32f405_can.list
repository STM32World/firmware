
mcustm32f405_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000320c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003658  08003658  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000268  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c8bd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d56  00000000  00000000  0002c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000047bd  00000000  00000000  0002e6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000918  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000070a  00000000  00000000  000337c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fa7c  00000000  00000000  00033ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000d1dd  00000000  00000000  0005394e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bc8d8  00000000  00000000  00060b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001e5c  00000000  00000000  0011d404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  0011f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003384 	.word	0x08003384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003384 	.word	0x08003384

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000570:	2400      	movs	r4, #0
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]
 8000578:	9408      	str	r4, [sp, #32]
 800057a:	9409      	str	r4, [sp, #36]	; 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	9401      	str	r4, [sp, #4]
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0x8c>)
 8000580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000582:	f042 0204 	orr.w	r2, r2, #4
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	f002 0204 	and.w	r2, r2, #4
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	9402      	str	r4, [sp, #8]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005a2:	9202      	str	r2, [sp, #8]
 80005a4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0202 	orr.w	r2, r2, #2
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0202 	and.w	r2, r2, #2
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0201 	orr.w	r2, r2, #1
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005ce:	4d0b      	ldr	r5, [pc, #44]	; (80005fc <MX_GPIO_Init+0x90>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4628      	mov	r0, r5
 80005d8:	f001 fa38 	bl	8001a4c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e2:	2311      	movs	r3, #17
 80005e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	a905      	add	r1, sp, #20
 80005ec:	4628      	mov	r0, r5
 80005ee:	f001 f937 	bl	8001860 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005f2:	b00b      	add	sp, #44	; 0x2c
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020800 	.word	0x40020800

08000600 <_write>:
    if (fd == 1 || fd == 2) {
 8000600:	3801      	subs	r0, #1
 8000602:	2801      	cmp	r0, #1
 8000604:	d80a      	bhi.n	800061c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000606:	b510      	push	{r4, lr}
 8000608:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060e:	b292      	uxth	r2, r2
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <_write+0x28>)
 8000612:	f001 fedc 	bl	80023ce <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000616:	b920      	cbnz	r0, 8000622 <_write+0x22>
            return len;
 8000618:	4620      	mov	r0, r4
}
 800061a:	bd10      	pop	{r4, pc}
    return -1;
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000620:	4770      	bx	lr
            return -1;
 8000622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000626:	e7f8      	b.n	800061a <_write+0x1a>
 8000628:	20000130 	.word	0x20000130

0800062c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800062c:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox0CompleteCallback");
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <HAL_CAN_TxMailbox0CompleteCallback+0x10>)
 8000630:	f001 fff6 	bl	8002620 <iprintf>
 8000634:	200a      	movs	r0, #10
 8000636:	f002 f805 	bl	8002644 <putchar>
}
 800063a:	bd08      	pop	{r3, pc}
 800063c:	0800339c 	.word	0x0800339c

08000640 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000640:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox1CompleteCallback");
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <HAL_CAN_TxMailbox1CompleteCallback+0x10>)
 8000644:	f001 ffec 	bl	8002620 <iprintf>
 8000648:	200a      	movs	r0, #10
 800064a:	f001 fffb 	bl	8002644 <putchar>
}
 800064e:	bd08      	pop	{r3, pc}
 8000650:	080033c0 	.word	0x080033c0

08000654 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000654:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox2CompleteCallback");
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <HAL_CAN_TxMailbox2CompleteCallback+0x10>)
 8000658:	f001 ffe2 	bl	8002620 <iprintf>
 800065c:	200a      	movs	r0, #10
 800065e:	f001 fff1 	bl	8002644 <putchar>
}
 8000662:	bd08      	pop	{r3, pc}
 8000664:	080033e4 	.word	0x080033e4

08000668 <HAL_CAN_TxMailbox0AbortCallback>:
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8000668:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox0AbortCallback");
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <HAL_CAN_TxMailbox0AbortCallback+0x10>)
 800066c:	f001 ffd8 	bl	8002620 <iprintf>
 8000670:	200a      	movs	r0, #10
 8000672:	f001 ffe7 	bl	8002644 <putchar>
}
 8000676:	bd08      	pop	{r3, pc}
 8000678:	08003408 	.word	0x08003408

0800067c <HAL_CAN_TxMailbox1AbortCallback>:
void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan) {
 800067c:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox1AbortCallback");
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <HAL_CAN_TxMailbox1AbortCallback+0x10>)
 8000680:	f001 ffce 	bl	8002620 <iprintf>
 8000684:	200a      	movs	r0, #10
 8000686:	f001 ffdd 	bl	8002644 <putchar>
}
 800068a:	bd08      	pop	{r3, pc}
 800068c:	08003428 	.word	0x08003428

08000690 <HAL_CAN_TxMailbox2AbortCallback>:
void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan) {
 8000690:	b508      	push	{r3, lr}
    DBG("HAL_CAN_TxMailbox2AbortCallback");
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <HAL_CAN_TxMailbox2AbortCallback+0x10>)
 8000694:	f001 ffc4 	bl	8002620 <iprintf>
 8000698:	200a      	movs	r0, #10
 800069a:	f001 ffd3 	bl	8002644 <putchar>
}
 800069e:	bd08      	pop	{r3, pc}
 80006a0:	08003448 	.word	0x08003448

080006a4 <HAL_CAN_RxFifo0FullCallback>:
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 80006a4:	b508      	push	{r3, lr}
    DBG("HAL_CAN_RxFifo0FullCallback");
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <HAL_CAN_RxFifo0FullCallback+0x10>)
 80006a8:	f001 ffba 	bl	8002620 <iprintf>
 80006ac:	200a      	movs	r0, #10
 80006ae:	f001 ffc9 	bl	8002644 <putchar>
}
 80006b2:	bd08      	pop	{r3, pc}
 80006b4:	08003468 	.word	0x08003468

080006b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80006b8:	b508      	push	{r3, lr}
    DBG("HAL_CAN_RxFifo1MsgPendingCallback");
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>)
 80006bc:	f001 ffb0 	bl	8002620 <iprintf>
 80006c0:	200a      	movs	r0, #10
 80006c2:	f001 ffbf 	bl	8002644 <putchar>
}
 80006c6:	bd08      	pop	{r3, pc}
 80006c8:	08003484 	.word	0x08003484

080006cc <HAL_CAN_RxFifo1FullCallback>:
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 80006cc:	b508      	push	{r3, lr}
    DBG("HAL_CAN_RxFifo1FullCallback");
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <HAL_CAN_RxFifo1FullCallback+0x10>)
 80006d0:	f001 ffa6 	bl	8002620 <iprintf>
 80006d4:	200a      	movs	r0, #10
 80006d6:	f001 ffb5 	bl	8002644 <putchar>
}
 80006da:	bd08      	pop	{r3, pc}
 80006dc:	080034a8 	.word	0x080034a8

080006e0 <HAL_CAN_SleepCallback>:
void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan) {
 80006e0:	b508      	push	{r3, lr}
    DBG("HAL_CAN_SleepCallback");
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <HAL_CAN_SleepCallback+0x10>)
 80006e4:	f001 ff9c 	bl	8002620 <iprintf>
 80006e8:	200a      	movs	r0, #10
 80006ea:	f001 ffab 	bl	8002644 <putchar>
}
 80006ee:	bd08      	pop	{r3, pc}
 80006f0:	080034c4 	.word	0x080034c4

080006f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan) {
 80006f4:	b508      	push	{r3, lr}
    DBG("HAL_CAN_WakeUpFromRxMsgCallback");
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <HAL_CAN_WakeUpFromRxMsgCallback+0x10>)
 80006f8:	f001 ff92 	bl	8002620 <iprintf>
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 ffa1 	bl	8002644 <putchar>
}
 8000702:	bd08      	pop	{r3, pc}
 8000704:	080034dc 	.word	0x080034dc

08000708 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000708:	b508      	push	{r3, lr}
    DBG("HAL_CAN_ErrorCallback");
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <HAL_CAN_ErrorCallback+0x10>)
 800070c:	f001 ff88 	bl	8002620 <iprintf>
 8000710:	200a      	movs	r0, #10
 8000712:	f001 ff97 	bl	8002644 <putchar>
}
 8000716:	bd08      	pop	{r3, pc}
 8000718:	080034fc 	.word	0x080034fc

0800071c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800071e:	e7fe      	b.n	800071e <Error_Handler+0x2>

08000720 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000720:	b510      	push	{r4, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	4604      	mov	r4, r0
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000728:	4a54      	ldr	r2, [pc, #336]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800072a:	2100      	movs	r1, #0
 800072c:	f000 fe3f 	bl	80013ae <HAL_CAN_GetRxMessage>
 8000730:	b990      	cbnz	r0, 8000758 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    if (hcan->Instance == CAN1) {
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d010      	beq.n	800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
    } else if (hcan->Instance == CAN2) {
 800073a:	4a52      	ldr	r2, [pc, #328]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d067      	beq.n	8000810 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
        DBG("Unknown CAN Instance");
 8000740:	4851      	ldr	r0, [pc, #324]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8000742:	f001 ff6d 	bl	8002620 <iprintf>
 8000746:	200a      	movs	r0, #10
 8000748:	f001 ff7c 	bl	8002644 <putchar>
    msg_count++;
 800074c:	4a4f      	ldr	r2, [pc, #316]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800074e:	6813      	ldr	r3, [r2, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	b002      	add	sp, #8
 8000756:	bd10      	pop	{r4, pc}
        Error_Handler();
 8000758:	f7ff ffe0 	bl	800071c <Error_Handler>
        if (RxHeader.RTR == CAN_RTR_REMOTE) {
 800075c:	4b47      	ldr	r3, [pc, #284]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d14e      	bne.n	8000802 <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
            if (RxHeader.StdId == CAN_ID_NOW) {
 8000764:	4b45      	ldr	r3, [pc, #276]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800076c:	d009      	beq.n	8000782 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
            } else if (RxHeader.StdId == CAN_ID_RND) {
 800076e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000772:	d026      	beq.n	80007c2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
                DBG("CAN1 Unknown ID");
 8000774:	4846      	ldr	r0, [pc, #280]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000776:	f001 ff53 	bl	8002620 <iprintf>
 800077a:	200a      	movs	r0, #10
 800077c:	f001 ff62 	bl	8002644 <putchar>
 8000780:	e7e4      	b.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
                DBG("CAN1 got NOW request");
 8000782:	4844      	ldr	r0, [pc, #272]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000784:	f001 ff4c 	bl	8002620 <iprintf>
 8000788:	200a      	movs	r0, #10
 800078a:	f001 ff5b 	bl	8002644 <putchar>
                uint32_t now = HAL_GetTick() / 1000;
 800078e:	f000 fc23 	bl	8000fd8 <HAL_GetTick>
 8000792:	4b41      	ldr	r3, [pc, #260]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000794:	fba3 2300 	umull	r2, r3, r3, r0
 8000798:	099b      	lsrs	r3, r3, #6
 800079a:	9301      	str	r3, [sp, #4]
                TxHeader.DLC = 4;
 800079c:	493f      	ldr	r1, [pc, #252]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800079e:	2304      	movs	r3, #4
 80007a0:	610b      	str	r3, [r1, #16]
                TxHeader.ExtId = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	604b      	str	r3, [r1, #4]
                TxHeader.IDE = CAN_ID_STD;
 80007a6:	608b      	str	r3, [r1, #8]
                TxHeader.RTR = CAN_RTR_DATA;
 80007a8:	60cb      	str	r3, [r1, #12]
                TxHeader.StdId = CAN_ID_NOW;
 80007aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ae:	600b      	str	r3, [r1, #0]
                if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*) &now, &TxMailbox) != HAL_OK)
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80007b2:	aa01      	add	r2, sp, #4
 80007b4:	483b      	ldr	r0, [pc, #236]	; (80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80007b6:	f000 fd85 	bl	80012c4 <HAL_CAN_AddTxMessage>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d0c6      	beq.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
                    Error_Handler();
 80007be:	f7ff ffad 	bl	800071c <Error_Handler>
                DBG("CAN1 got RND request");
 80007c2:	4839      	ldr	r0, [pc, #228]	; (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80007c4:	f001 ff2c 	bl	8002620 <iprintf>
 80007c8:	200a      	movs	r0, #10
 80007ca:	f001 ff3b 	bl	8002644 <putchar>
                if (HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 80007ce:	a901      	add	r1, sp, #4
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80007d2:	f001 fc9c 	bl	800210e <HAL_RNG_GenerateRandomNumber>
 80007d6:	b990      	cbnz	r0, 80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0xde>
                TxHeader.DLC = 4;
 80007d8:	4930      	ldr	r1, [pc, #192]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80007da:	2304      	movs	r3, #4
 80007dc:	610b      	str	r3, [r1, #16]
                TxHeader.ExtId = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	604b      	str	r3, [r1, #4]
                TxHeader.IDE = CAN_ID_STD;
 80007e2:	608b      	str	r3, [r1, #8]
                TxHeader.RTR = CAN_RTR_DATA;
 80007e4:	60cb      	str	r3, [r1, #12]
                TxHeader.StdId = CAN_ID_RND;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	600b      	str	r3, [r1, #0]
                if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*) &rnd, &TxMailbox) != HAL_OK)
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80007ee:	aa01      	add	r2, sp, #4
 80007f0:	482c      	ldr	r0, [pc, #176]	; (80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80007f2:	f000 fd67 	bl	80012c4 <HAL_CAN_AddTxMessage>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d0a8      	beq.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
                    Error_Handler();
 80007fa:	f7ff ff8f 	bl	800071c <Error_Handler>
                    Error_Handler();
 80007fe:	f7ff ff8d 	bl	800071c <Error_Handler>
            DBG("CAN1 Received data");
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000804:	f001 ff0c 	bl	8002620 <iprintf>
 8000808:	200a      	movs	r0, #10
 800080a:	f001 ff1b 	bl	8002644 <putchar>
 800080e:	e79d      	b.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
        if (RxHeader.RTR == CAN_RTR_DATA) {
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d199      	bne.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
            if (RxHeader.StdId == CAN_ID_NOW) {
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000820:	d009      	beq.n	8000836 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
            } else if (RxHeader.StdId == CAN_ID_RND) {
 8000822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000826:	d00f      	beq.n	8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                DBG("CAN2 Unknown ID");
 8000828:	4822      	ldr	r0, [pc, #136]	; (80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800082a:	f001 fef9 	bl	8002620 <iprintf>
 800082e:	200a      	movs	r0, #10
 8000830:	f001 ff08 	bl	8002644 <putchar>
 8000834:	e78a      	b.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
                DBG("CAN2 Got NOW data!  now = %lu", *now);
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000838:	6819      	ldr	r1, [r3, #0]
 800083a:	481f      	ldr	r0, [pc, #124]	; (80008b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800083c:	f001 fef0 	bl	8002620 <iprintf>
 8000840:	200a      	movs	r0, #10
 8000842:	f001 feff 	bl	8002644 <putchar>
 8000846:	e781      	b.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
                delay = (uint16_t) *rnd % 1000;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	b28a      	uxth	r2, r1
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000850:	fba3 0302 	umull	r0, r3, r3, r2
 8000854:	099b      	lsrs	r3, r3, #6
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	fb00 2213 	mls	r2, r0, r3, r2
 800085e:	b292      	uxth	r2, r2
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000862:	801a      	strh	r2, [r3, #0]
                DBG("CAN2 Got RND data!  rnd = 0x%08lx new delay = %u", *rnd, 500 + delay);
 8000864:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800086a:	f001 fed9 	bl	8002620 <iprintf>
 800086e:	200a      	movs	r0, #10
 8000870:	f001 fee8 	bl	8002644 <putchar>
 8000874:	e76a      	b.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 8000876:	bf00      	nop
 8000878:	20000088 	.word	0x20000088
 800087c:	20000090 	.word	0x20000090
 8000880:	40006400 	.word	0x40006400
 8000884:	40006800 	.word	0x40006800
 8000888:	080035cc 	.word	0x080035cc
 800088c:	20000178 	.word	0x20000178
 8000890:	08003544 	.word	0x08003544
 8000894:	08003514 	.word	0x08003514
 8000898:	10624dd3 	.word	0x10624dd3
 800089c:	200000b4 	.word	0x200000b4
 80008a0:	200000cc 	.word	0x200000cc
 80008a4:	200000d0 	.word	0x200000d0
 80008a8:	0800352c 	.word	0x0800352c
 80008ac:	20000120 	.word	0x20000120
 80008b0:	08003554 	.word	0x08003554
 80008b4:	080035bc 	.word	0x080035bc
 80008b8:	08003568 	.word	0x08003568
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08003588 	.word	0x08003588

080008c4 <MX_CAN1_Init>:
{
 80008c4:	b508      	push	{r3, lr}
    hcan1.Instance = CAN1;
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_CAN1_Init+0x38>)
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_CAN1_Init+0x3c>)
 80008ca:	6003      	str	r3, [r0, #0]
    hcan1.Init.Prescaler = 3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	6043      	str	r3, [r0, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	6083      	str	r3, [r0, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d4:	60c3      	str	r3, [r0, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008d6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008da:	6102      	str	r2, [r0, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e0:	6142      	str	r2, [r0, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e2:	7603      	strb	r3, [r0, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 80008e4:	7643      	strb	r3, [r0, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 80008e6:	7683      	strb	r3, [r0, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 80008e8:	76c3      	strb	r3, [r0, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ea:	7703      	strb	r3, [r0, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ec:	7743      	strb	r3, [r0, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008ee:	f000 fb79 	bl	8000fe4 <HAL_CAN_Init>
 80008f2:	b900      	cbnz	r0, 80008f6 <MX_CAN1_Init+0x32>
}
 80008f4:	bd08      	pop	{r3, pc}
        Error_Handler();
 80008f6:	f7ff ff11 	bl	800071c <Error_Handler>
 80008fa:	bf00      	nop
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	40006400 	.word	0x40006400

08000904 <MX_USART1_UART_Init>:
{
 8000904:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <MX_USART1_UART_Init+0x2c>)
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USART1_UART_Init+0x30>)
 800090a:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 800090c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000910:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	2300      	movs	r3, #0
 8000914:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000916:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000918:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800091a:	220c      	movs	r2, #12
 800091c:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	f001 fd24 	bl	800236e <HAL_UART_Init>
 8000926:	b900      	cbnz	r0, 800092a <MX_USART1_UART_Init+0x26>
}
 8000928:	bd08      	pop	{r3, pc}
        Error_Handler();
 800092a:	f7ff fef7 	bl	800071c <Error_Handler>
 800092e:	bf00      	nop
 8000930:	20000130 	.word	0x20000130
 8000934:	40011000 	.word	0x40011000

08000938 <MX_CAN2_Init>:
{
 8000938:	b508      	push	{r3, lr}
    hcan2.Instance = CAN2;
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_CAN2_Init+0x38>)
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_CAN2_Init+0x3c>)
 800093e:	6003      	str	r3, [r0, #0]
    hcan2.Init.Prescaler = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	6043      	str	r3, [r0, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000944:	2300      	movs	r3, #0
 8000946:	6083      	str	r3, [r0, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000948:	60c3      	str	r3, [r0, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 800094a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800094e:	6102      	str	r2, [r0, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000954:	6142      	str	r2, [r0, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 8000956:	7603      	strb	r3, [r0, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 8000958:	7643      	strb	r3, [r0, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 800095a:	7683      	strb	r3, [r0, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 800095c:	76c3      	strb	r3, [r0, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 800095e:	7703      	strb	r3, [r0, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 8000960:	7743      	strb	r3, [r0, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000962:	f000 fb3f 	bl	8000fe4 <HAL_CAN_Init>
 8000966:	b900      	cbnz	r0, 800096a <MX_CAN2_Init+0x32>
}
 8000968:	bd08      	pop	{r3, pc}
        Error_Handler();
 800096a:	f7ff fed7 	bl	800071c <Error_Handler>
 800096e:	bf00      	nop
 8000970:	200000f8 	.word	0x200000f8
 8000974:	40006800 	.word	0x40006800

08000978 <MX_RNG_Init>:
{
 8000978:	b508      	push	{r3, lr}
    hrng.Instance = RNG;
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_RNG_Init+0x14>)
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <MX_RNG_Init+0x18>)
 800097e:	6003      	str	r3, [r0, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000980:	f001 fbae 	bl	80020e0 <HAL_RNG_Init>
 8000984:	b900      	cbnz	r0, 8000988 <MX_RNG_Init+0x10>
}
 8000986:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000988:	f7ff fec8 	bl	800071c <Error_Handler>
 800098c:	20000120 	.word	0x20000120
 8000990:	50060800 	.word	0x50060800

08000994 <SystemClock_Config>:
{
 8000994:	b500      	push	{lr}
 8000996:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000998:	2230      	movs	r2, #48	; 0x30
 800099a:	2100      	movs	r1, #0
 800099c:	a808      	add	r0, sp, #32
 800099e:	f001 fe9c 	bl	80026da <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009a2:	2300      	movs	r3, #0
 80009a4:	9303      	str	r3, [sp, #12]
 80009a6:	9304      	str	r3, [sp, #16]
 80009a8:	9305      	str	r3, [sp, #20]
 80009aa:	9306      	str	r3, [sp, #24]
 80009ac:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <SystemClock_Config+0xa0>)
 80009b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009b4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009b8:	6411      	str	r1, [r2, #64]	; 0x40
 80009ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009bc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <SystemClock_Config+0xa4>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	9302      	str	r3, [sp, #8]
 80009d8:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009da:	2301      	movs	r3, #1
 80009dc:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e2:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009ec:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80009ee:	2208      	movs	r2, #8
 80009f0:	9210      	str	r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80009f2:	22a8      	movs	r2, #168	; 0xa8
 80009f4:	9211      	str	r2, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f6:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f8:	2307      	movs	r3, #7
 80009fa:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	a808      	add	r0, sp, #32
 80009fe:	f001 f835 	bl	8001a6c <HAL_RCC_OscConfig>
 8000a02:	b998      	cbnz	r0, 8000a2c <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	2105      	movs	r1, #5
 8000a1e:	a803      	add	r0, sp, #12
 8000a20:	f001 fa88 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000a24:	b920      	cbnz	r0, 8000a30 <SystemClock_Config+0x9c>
}
 8000a26:	b015      	add	sp, #84	; 0x54
 8000a28:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000a2c:	f7ff fe76 	bl	800071c <Error_Handler>
        Error_Handler();
 8000a30:	f7ff fe74 	bl	800071c <Error_Handler>
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <main>:
int main(void) {
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
    HAL_Init();
 8000a40:	f000 faa4 	bl	8000f8c <HAL_Init>
    SystemClock_Config();
 8000a44:	f7ff ffa6 	bl	8000994 <SystemClock_Config>
    MX_GPIO_Init();
 8000a48:	f7ff fd90 	bl	800056c <MX_GPIO_Init>
    MX_CAN1_Init();
 8000a4c:	f7ff ff3a 	bl	80008c4 <MX_CAN1_Init>
    MX_USART1_UART_Init();
 8000a50:	f7ff ff58 	bl	8000904 <MX_USART1_UART_Init>
    MX_CAN2_Init();
 8000a54:	f7ff ff70 	bl	8000938 <MX_CAN2_Init>
    MX_RNG_Init();
 8000a58:	f7ff ff8e 	bl	8000978 <MX_RNG_Init>
    DBG("\n\n\n\n\n------------\nCAN Starting");
 8000a5c:	4837      	ldr	r0, [pc, #220]	; (8000b3c <main+0x100>)
 8000a5e:	f001 fddf 	bl	8002620 <iprintf>
 8000a62:	200a      	movs	r0, #10
 8000a64:	f001 fdee 	bl	8002644 <putchar>
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9308      	str	r3, [sp, #32]
    canfilterconfig.FilterBank = 12;  // anything between 0 to SlaveStartFilterBank
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	9205      	str	r2, [sp, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a70:	2500      	movs	r5, #0
 8000a72:	9504      	str	r5, [sp, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 8000a74:	9500      	str	r5, [sp, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000a76:	9501      	str	r5, [sp, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0;
 8000a78:	9502      	str	r5, [sp, #8]
    canfilterconfig.FilterMaskIdLow = 0x0;
 8000a7a:	9503      	str	r5, [sp, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a7c:	9506      	str	r5, [sp, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7e:	9307      	str	r3, [sp, #28]
    canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000a80:	240d      	movs	r4, #13
 8000a82:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a84:	4e2e      	ldr	r6, [pc, #184]	; (8000b40 <main+0x104>)
 8000a86:	4669      	mov	r1, sp
 8000a88:	4630      	mov	r0, r6
 8000a8a:	f000 fb51 	bl	8001130 <HAL_CAN_ConfigFilter>
    canfilterconfig.FilterBank = 13;
 8000a8e:	9405      	str	r4, [sp, #20]
    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000a90:	4c2c      	ldr	r4, [pc, #176]	; (8000b44 <main+0x108>)
 8000a92:	4669      	mov	r1, sp
 8000a94:	4620      	mov	r0, r4
 8000a96:	f000 fb4b 	bl	8001130 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	f000 fbe4 	bl	8001268 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(
 8000aa0:	4f29      	ldr	r7, [pc, #164]	; (8000b48 <main+0x10c>)
 8000aa2:	4639      	mov	r1, r7
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f000 fd37 	bl	8001518 <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan2);
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f000 fbdc 	bl	8001268 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(
 8000ab0:	4639      	mov	r1, r7
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f000 fd30 	bl	8001518 <HAL_CAN_ActivateNotification>
    uint32_t now = 0, last_blink = 0, last_now = 0, last_rnd = 0;
 8000ab8:	462f      	mov	r7, r5
 8000aba:	462e      	mov	r6, r5
        now = HAL_GetTick();
 8000abc:	f000 fa8c 	bl	8000fd8 <HAL_GetTick>
 8000ac0:	4604      	mov	r4, r0
        if (now - last_now >= 1000) {
 8000ac2:	1b83      	subs	r3, r0, r6
 8000ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac8:	d211      	bcs.n	8000aee <main+0xb2>
        if (now - last_rnd >= (500 + delay)) {
 8000aca:	1be2      	subs	r2, r4, r7
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <main+0x110>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d21d      	bcs.n	8000b14 <main+0xd8>
        if (now - last_blink >= 500) {
 8000ad8:	1b63      	subs	r3, r4, r5
 8000ada:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ade:	d3ed      	bcc.n	8000abc <main+0x80>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <main+0x114>)
 8000ae6:	f000 ffb7 	bl	8001a58 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000aea:	4625      	mov	r5, r4
 8000aec:	e7e6      	b.n	8000abc <main+0x80>
            TxHeader.ExtId = 0;
 8000aee:	4919      	ldr	r1, [pc, #100]	; (8000b54 <main+0x118>)
 8000af0:	2300      	movs	r3, #0
 8000af2:	604b      	str	r3, [r1, #4]
            TxHeader.IDE = CAN_ID_STD;
 8000af4:	608b      	str	r3, [r1, #8]
            TxHeader.RTR = CAN_RTR_REMOTE;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60cb      	str	r3, [r1, #12]
            TxHeader.StdId = CAN_ID_NOW;
 8000afa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000afe:	600b      	str	r3, [r1, #0]
            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, (uint8_t*) &TxData, &TxMailbox) != HAL_OK)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <main+0x11c>)
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <main+0x120>)
 8000b04:	480f      	ldr	r0, [pc, #60]	; (8000b44 <main+0x108>)
 8000b06:	f000 fbdd 	bl	80012c4 <HAL_CAN_AddTxMessage>
 8000b0a:	b908      	cbnz	r0, 8000b10 <main+0xd4>
            last_now = now;
 8000b0c:	4626      	mov	r6, r4
 8000b0e:	e7dc      	b.n	8000aca <main+0x8e>
                Error_Handler();
 8000b10:	f7ff fe04 	bl	800071c <Error_Handler>
            TxHeader.ExtId = 0;
 8000b14:	490f      	ldr	r1, [pc, #60]	; (8000b54 <main+0x118>)
 8000b16:	2300      	movs	r3, #0
 8000b18:	604b      	str	r3, [r1, #4]
            TxHeader.IDE = CAN_ID_STD;
 8000b1a:	608b      	str	r3, [r1, #8]
            TxHeader.RTR = CAN_RTR_REMOTE;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60cb      	str	r3, [r1, #12]
            TxHeader.StdId = CAN_ID_RND;
 8000b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b24:	600b      	str	r3, [r1, #0]
            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, (uint8_t*) &TxData, &TxMailbox) != HAL_OK)
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <main+0x11c>)
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <main+0x120>)
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <main+0x108>)
 8000b2c:	f000 fbca 	bl	80012c4 <HAL_CAN_AddTxMessage>
 8000b30:	b908      	cbnz	r0, 8000b36 <main+0xfa>
            last_rnd = now;
 8000b32:	4627      	mov	r7, r4
 8000b34:	e7d0      	b.n	8000ad8 <main+0x9c>
                Error_Handler();
 8000b36:	f7ff fdf1 	bl	800071c <Error_Handler>
 8000b3a:	bf00      	nop
 8000b3c:	080035e4 	.word	0x080035e4
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	200000f8 	.word	0x200000f8
 8000b48:	00038f7e 	.word	0x00038f7e
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	200000cc 	.word	0x200000cc
 8000b5c:	200000ac 	.word	0x200000ac

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2100      	movs	r1, #0
 8000b64:	9100      	str	r1, [sp, #0]
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x34>)
 8000b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	9101      	str	r1, [sp, #4]
 8000b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	b002      	add	sp, #8
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b98:	b510      	push	{r4, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9305      	str	r3, [sp, #20]
 8000ba0:	9306      	str	r3, [sp, #24]
 8000ba2:	9307      	str	r3, [sp, #28]
 8000ba4:	9308      	str	r3, [sp, #32]
 8000ba6:	9309      	str	r3, [sp, #36]	; 0x24
  if(hcan->Instance==CAN1)
 8000ba8:	6803      	ldr	r3, [r0, #0]
 8000baa:	4a57      	ldr	r2, [pc, #348]	; (8000d08 <HAL_CAN_MspInit+0x170>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d004      	beq.n	8000bba <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 8000bb0:	4a56      	ldr	r2, [pc, #344]	; (8000d0c <HAL_CAN_MspInit+0x174>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d04e      	beq.n	8000c54 <HAL_CAN_MspInit+0xbc>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bb6:	b00a      	add	sp, #40	; 0x28
 8000bb8:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bba:	4a55      	ldr	r2, [pc, #340]	; (8000d10 <HAL_CAN_MspInit+0x178>)
 8000bbc:	6813      	ldr	r3, [r2, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d039      	beq.n	8000c3a <HAL_CAN_MspInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	9401      	str	r4, [sp, #4]
 8000bca:	4b52      	ldr	r3, [pc, #328]	; (8000d14 <HAL_CAN_MspInit+0x17c>)
 8000bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bce:	f042 0202 	orr.w	r2, r2, #2
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bec:	2309      	movs	r3, #9
 8000bee:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	a905      	add	r1, sp, #20
 8000bf2:	4849      	ldr	r0, [pc, #292]	; (8000d18 <HAL_CAN_MspInit+0x180>)
 8000bf4:	f000 fe34 	bl	8001860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	2013      	movs	r0, #19
 8000bfe:	f000 fdd5 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c02:	2013      	movs	r0, #19
 8000c04:	f000 fe0a 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c08:	4622      	mov	r2, r4
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	2014      	movs	r0, #20
 8000c0e:	f000 fdcd 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c12:	2014      	movs	r0, #20
 8000c14:	f000 fe02 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c18:	4622      	mov	r2, r4
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	2015      	movs	r0, #21
 8000c1e:	f000 fdc5 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c22:	2015      	movs	r0, #21
 8000c24:	f000 fdfa 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000c28:	4622      	mov	r2, r4
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	2016      	movs	r0, #22
 8000c2e:	f000 fdbd 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c32:	2016      	movs	r0, #22
 8000c34:	f000 fdf2 	bl	800181c <HAL_NVIC_EnableIRQ>
 8000c38:	e7bd      	b.n	8000bb6 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <HAL_CAN_MspInit+0x17c>)
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	9b00      	ldr	r3, [sp, #0]
 8000c52:	e7b8      	b.n	8000bc6 <HAL_CAN_MspInit+0x2e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <HAL_CAN_MspInit+0x17c>)
 8000c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	9b02      	ldr	r3, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c6c:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <HAL_CAN_MspInit+0x178>)
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d039      	beq.n	8000cec <HAL_CAN_MspInit+0x154>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	2400      	movs	r4, #0
 8000c7a:	9404      	str	r4, [sp, #16]
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <HAL_CAN_MspInit+0x17c>)
 8000c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c80:	f042 0202 	orr.w	r2, r2, #2
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	a905      	add	r1, sp, #20
 8000ca4:	481c      	ldr	r0, [pc, #112]	; (8000d18 <HAL_CAN_MspInit+0x180>)
 8000ca6:	f000 fddb 	bl	8001860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000caa:	4622      	mov	r2, r4
 8000cac:	4621      	mov	r1, r4
 8000cae:	203f      	movs	r0, #63	; 0x3f
 8000cb0:	f000 fd7c 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000cb4:	203f      	movs	r0, #63	; 0x3f
 8000cb6:	f000 fdb1 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000cba:	4622      	mov	r2, r4
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	2040      	movs	r0, #64	; 0x40
 8000cc0:	f000 fd74 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000cc4:	2040      	movs	r0, #64	; 0x40
 8000cc6:	f000 fda9 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000cca:	4622      	mov	r2, r4
 8000ccc:	4621      	mov	r1, r4
 8000cce:	2041      	movs	r0, #65	; 0x41
 8000cd0:	f000 fd6c 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000cd4:	2041      	movs	r0, #65	; 0x41
 8000cd6:	f000 fda1 	bl	800181c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4621      	mov	r1, r4
 8000cde:	2042      	movs	r0, #66	; 0x42
 8000ce0:	f000 fd64 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000ce4:	2042      	movs	r0, #66	; 0x42
 8000ce6:	f000 fd99 	bl	800181c <HAL_NVIC_EnableIRQ>
}
 8000cea:	e764      	b.n	8000bb6 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	9303      	str	r3, [sp, #12]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_CAN_MspInit+0x17c>)
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	9b03      	ldr	r3, [sp, #12]
 8000d04:	e7b8      	b.n	8000c78 <HAL_CAN_MspInit+0xe0>
 8000d06:	bf00      	nop
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40006800 	.word	0x40006800
 8000d10:	2000017c 	.word	0x2000017c
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020400 	.word	0x40020400

08000d1c <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8000d1c:	6802      	ldr	r2, [r0, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_RNG_MspInit+0x28>)
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d000      	beq.n	8000d26 <HAL_RNG_MspInit+0xa>
 8000d24:	4770      	bx	lr
{
 8000d26:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_RNG_MspInit+0x2c>)
 8000d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000d40:	b002      	add	sp, #8
 8000d42:	4770      	bx	lr
 8000d44:	50060800 	.word	0x50060800
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b500      	push	{lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	2300      	movs	r3, #0
 8000d52:	9303      	str	r3, [sp, #12]
 8000d54:	9304      	str	r3, [sp, #16]
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	9306      	str	r3, [sp, #24]
 8000d5a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000d5c:	6802      	ldr	r2, [r0, #0]
 8000d5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d62:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d002      	beq.n	8000d70 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d6a:	b009      	add	sp, #36	; 0x24
 8000d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	2100      	movs	r1, #0
 8000d72:	9101      	str	r1, [sp, #4]
 8000d74:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d7a:	f042 0210 	orr.w	r2, r2, #16
 8000d7e:	645a      	str	r2, [r3, #68]	; 0x44
 8000d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d82:	f002 0210 	and.w	r2, r2, #16
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	9102      	str	r1, [sp, #8]
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dac:	2307      	movs	r3, #7
 8000dae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	a903      	add	r1, sp, #12
 8000db2:	4802      	ldr	r0, [pc, #8]	; (8000dbc <HAL_UART_MspInit+0x70>)
 8000db4:	f000 fd54 	bl	8001860 <HAL_GPIO_Init>
}
 8000db8:	e7d7      	b.n	8000d6a <HAL_UART_MspInit+0x1e>
 8000dba:	bf00      	nop
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler>

08000dc2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler>

08000dc4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler>

08000dc6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler>

08000dc8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler>

08000dca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f8f5 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bd08      	pop	{r3, pc}

08000dd8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000dd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dda:	4802      	ldr	r0, [pc, #8]	; (8000de4 <CAN1_TX_IRQHandler+0xc>)
 8000ddc:	f000 fbae 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000de0:	bd08      	pop	{r3, pc}
 8000de2:	bf00      	nop
 8000de4:	200000d0 	.word	0x200000d0

08000de8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dea:	4802      	ldr	r0, [pc, #8]	; (8000df4 <CAN1_RX0_IRQHandler+0xc>)
 8000dec:	f000 fba6 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000df0:	bd08      	pop	{r3, pc}
 8000df2:	bf00      	nop
 8000df4:	200000d0 	.word	0x200000d0

08000df8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dfa:	4802      	ldr	r0, [pc, #8]	; (8000e04 <CAN1_RX1_IRQHandler+0xc>)
 8000dfc:	f000 fb9e 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e00:	bd08      	pop	{r3, pc}
 8000e02:	bf00      	nop
 8000e04:	200000d0 	.word	0x200000d0

08000e08 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e0a:	4802      	ldr	r0, [pc, #8]	; (8000e14 <CAN1_SCE_IRQHandler+0xc>)
 8000e0c:	f000 fb96 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000e10:	bd08      	pop	{r3, pc}
 8000e12:	bf00      	nop
 8000e14:	200000d0 	.word	0x200000d0

08000e18 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000e18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <CAN2_TX_IRQHandler+0xc>)
 8000e1c:	f000 fb8e 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000e20:	bd08      	pop	{r3, pc}
 8000e22:	bf00      	nop
 8000e24:	200000f8 	.word	0x200000f8

08000e28 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <CAN2_RX0_IRQHandler+0xc>)
 8000e2c:	f000 fb86 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e30:	bd08      	pop	{r3, pc}
 8000e32:	bf00      	nop
 8000e34:	200000f8 	.word	0x200000f8

08000e38 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <CAN2_RX1_IRQHandler+0xc>)
 8000e3c:	f000 fb7e 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000e40:	bd08      	pop	{r3, pc}
 8000e42:	bf00      	nop
 8000e44:	200000f8 	.word	0x200000f8

08000e48 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8000e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e4a:	4802      	ldr	r0, [pc, #8]	; (8000e54 <CAN2_SCE_IRQHandler+0xc>)
 8000e4c:	f000 fb76 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8000e50:	bd08      	pop	{r3, pc}
 8000e52:	bf00      	nop
 8000e54:	200000f8 	.word	0x200000f8

08000e58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2500      	movs	r5, #0
 8000e60:	e006      	b.n	8000e70 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000e62:	f3af 8000 	nop.w
 8000e66:	4621      	mov	r1, r4
 8000e68:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000e6e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	42b5      	cmp	r5, r6
 8000e72:	dbf6      	blt.n	8000e62 <_read+0xa>
  }

  return len;
}
 8000e74:	4630      	mov	r0, r6
 8000e76:	bd70      	pop	{r4, r5, r6, pc}

08000e78 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	4770      	bx	lr

08000e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000e88:	2001      	movs	r0, #1
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	4770      	bx	lr

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <_sbrk+0x38>)
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <_sbrk+0x40>)
 8000e9a:	6800      	ldr	r0, [r0, #0]
 8000e9c:	b140      	cbz	r0, 8000eb0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <_sbrk+0x40>)
 8000ea0:	6800      	ldr	r0, [r0, #0]
 8000ea2:	4403      	add	r3, r0
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d806      	bhi.n	8000eb8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <_sbrk+0x40>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000eae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <_sbrk+0x40>)
 8000eb2:	4c08      	ldr	r4, [pc, #32]	; (8000ed4 <_sbrk+0x44>)
 8000eb4:	6004      	str	r4, [r0, #0]
 8000eb6:	e7f2      	b.n	8000e9e <_sbrk+0xe>
    errno = ENOMEM;
 8000eb8:	f001 fc5e 	bl	8002778 <__errno>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	e7f3      	b.n	8000eae <_sbrk+0x1e>
 8000ec6:	bf00      	nop
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	20000180 	.word	0x20000180
 8000ed4:	200002d8 	.word	0x200002d8

08000ed8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <SystemInit+0x10>)
 8000eda:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000ede:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ef0:	f7ff fff2 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f001 fc33 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fd8d 	bl	8000a3c <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f30:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 8000f34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f38:	200002d4 	.word	0x200002d4

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b510      	push	{r4, lr}
 8000f42:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_InitTick+0x40>)
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <HAL_InitTick+0x44>)
 8000f52:	6810      	ldr	r0, [r2, #0]
 8000f54:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f58:	f000 fc6e 	bl	8001838 <HAL_SYSTICK_Config>
 8000f5c:	b968      	cbnz	r0, 8000f7a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	2c0f      	cmp	r4, #15
 8000f60:	d901      	bls.n	8000f66 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	e00a      	b.n	8000f7c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	4621      	mov	r1, r4
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6e:	f000 fc1d 	bl	80017ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_InitTick+0x48>)
 8000f74:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2000      	movs	r0, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
}
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <HAL_Init>:
{
 8000f8c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x30>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fa6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fbed 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f7ff ffc6 	bl	8000f40 <HAL_InitTick>
  HAL_MspInit();
 8000fb4:	f7ff fdd4 	bl	8000b60 <HAL_MspInit>
}
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bd08      	pop	{r3, pc}
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x10>)
 8000fc2:	6811      	ldr	r1, [r2, #0]
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_IncTick+0x14>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	440b      	add	r3, r1
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000184 	.word	0x20000184
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <HAL_GetTick+0x8>)
 8000fda:	6818      	ldr	r0, [r3, #0]
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000184 	.word	0x20000184

08000fe4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	f000 80a1 	beq.w	800112c <HAL_CAN_Init+0x148>
{
 8000fea:	b538      	push	{r3, r4, r5, lr}
 8000fec:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fee:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000ff2:	b1d3      	cbz	r3, 800102a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffe:	f7ff ffeb 	bl	8000fd8 <HAL_GetTick>
 8001002:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	f012 0f01 	tst.w	r2, #1
 800100c:	d110      	bne.n	8001030 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800100e:	f7ff ffe3 	bl	8000fd8 <HAL_GetTick>
 8001012:	1b40      	subs	r0, r0, r5
 8001014:	280a      	cmp	r0, #10
 8001016:	d9f5      	bls.n	8001004 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800101a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001020:	2305      	movs	r3, #5
 8001022:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800102a:	f7ff fdb5 	bl	8000b98 <HAL_CAN_MspInit>
 800102e:	e7e1      	b.n	8000ff4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f022 0202 	bic.w	r2, r2, #2
 8001036:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001038:	f7ff ffce 	bl	8000fd8 <HAL_GetTick>
 800103c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	f012 0f02 	tst.w	r2, #2
 8001046:	d00d      	beq.n	8001064 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001048:	f7ff ffc6 	bl	8000fd8 <HAL_GetTick>
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	280a      	cmp	r0, #10
 8001050:	d9f5      	bls.n	800103e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800105a:	2305      	movs	r3, #5
 800105c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001060:	2001      	movs	r0, #1
 8001062:	e7e1      	b.n	8001028 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001064:	7e22      	ldrb	r2, [r4, #24]
 8001066:	2a01      	cmp	r2, #1
 8001068:	d03d      	beq.n	80010e6 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001070:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001072:	7e63      	ldrb	r3, [r4, #25]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d03b      	beq.n	80010f0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001080:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001082:	7ea3      	ldrb	r3, [r4, #26]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d039      	beq.n	80010fc <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	f023 0320 	bic.w	r3, r3, #32
 8001090:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001092:	7ee3      	ldrb	r3, [r4, #27]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d037      	beq.n	8001108 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010a2:	7f23      	ldrb	r3, [r4, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d035      	beq.n	8001114 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f023 0308 	bic.w	r3, r3, #8
 80010b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010b2:	7f63      	ldrb	r3, [r4, #29]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d033      	beq.n	8001120 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010b8:	6822      	ldr	r2, [r4, #0]
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010c2:	68a3      	ldr	r3, [r4, #8]
 80010c4:	68e2      	ldr	r2, [r4, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6922      	ldr	r2, [r4, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	6962      	ldr	r2, [r4, #20]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	6862      	ldr	r2, [r4, #4]
 80010d2:	3a01      	subs	r2, #1
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010da:	2000      	movs	r0, #0
 80010dc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80010de:	2301      	movs	r3, #1
 80010e0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80010e4:	e7a0      	b.n	8001028 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e7c0      	b.n	8001072 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e7c2      	b.n	8001082 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	6813      	ldr	r3, [r2, #0]
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e7c4      	b.n	8001092 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001108:	6822      	ldr	r2, [r4, #0]
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	f023 0310 	bic.w	r3, r3, #16
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e7c6      	b.n	80010a2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e7c8      	b.n	80010b2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001120:	6822      	ldr	r2, [r4, #0]
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e7ca      	b.n	80010c2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
}
 800112e:	4770      	bx	lr

08001130 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	3b01      	subs	r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d905      	bls.n	8001148 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800113e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001142:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
  }
}
 8001146:	4770      	bx	lr
{
 8001148:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 800114c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001150:	f042 0201 	orr.w	r2, r2, #1
 8001154:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001158:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800115c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001160:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001164:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001168:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800116a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800116e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001172:	694a      	ldr	r2, [r1, #20]
 8001174:	f002 021f 	and.w	r2, r2, #31
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800117e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8001182:	ea6f 0c02 	mvn.w	ip, r2
 8001186:	ea20 0002 	bic.w	r0, r0, r2
 800118a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800118e:	69cb      	ldr	r3, [r1, #28]
 8001190:	b9c3      	cbnz	r3, 80011c4 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 8001194:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001198:	ea0c 0000 	and.w	r0, ip, r0
 800119c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a0:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011a4:	68cd      	ldr	r5, [r1, #12]
 80011a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011aa:	3048      	adds	r0, #72	; 0x48
 80011ac:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b0:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011b2:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b8:	694c      	ldr	r4, [r1, #20]
 80011ba:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 80011be:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 80011c2:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011c4:	69cb      	ldr	r3, [r1, #28]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d01e      	beq.n	8001208 <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ca:	698b      	ldr	r3, [r1, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d133      	bne.n	8001238 <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 80011d2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80011d6:	ea0c 0303 	and.w	r3, ip, r3
 80011da:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011de:	690b      	ldr	r3, [r1, #16]
 80011e0:	bb8b      	cbnz	r3, 8001246 <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011e2:	4820      	ldr	r0, [pc, #128]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 80011e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80011e8:	ea0c 0303 	and.w	r3, ip, r3
 80011ec:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011f0:	6a0b      	ldr	r3, [r1, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d02e      	beq.n	8001254 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 80011f8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8001204:	2000      	movs	r0, #0
}
 8001206:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 800120a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800120e:	4310      	orrs	r0, r2
 8001210:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001214:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001216:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001218:	680d      	ldr	r5, [r1, #0]
 800121a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800121e:	3048      	adds	r0, #72	; 0x48
 8001220:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001224:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001226:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001228:	688d      	ldr	r5, [r1, #8]
 800122a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122e:	3448      	adds	r4, #72	; 0x48
 8001230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001234:	6058      	str	r0, [r3, #4]
 8001236:	e7c8      	b.n	80011ca <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 800123a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800123e:	4313      	orrs	r3, r2
 8001240:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8001244:	e7cb      	b.n	80011de <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 8001248:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800124c:	4313      	orrs	r3, r2
 800124e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8001252:	e7cd      	b.n	80011f0 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001254:	4903      	ldr	r1, [pc, #12]	; (8001264 <HAL_CAN_ConfigFilter+0x134>)
 8001256:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 800125a:	4313      	orrs	r3, r2
 800125c:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
 8001260:	e7c9      	b.n	80011f6 <HAL_CAN_ConfigFilter+0xc6>
 8001262:	bf00      	nop
 8001264:	40006400 	.word	0x40006400

08001268 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800126c:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001270:	b2ed      	uxtb	r5, r5
 8001272:	2d01      	cmp	r5, #1
 8001274:	d006      	beq.n	8001284 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001276:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800127c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800127e:	2501      	movs	r5, #1
  }
}
 8001280:	4628      	mov	r0, r5
 8001282:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001284:	2302      	movs	r3, #2
 8001286:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128a:	6802      	ldr	r2, [r0, #0]
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001294:	f7ff fea0 	bl	8000fd8 <HAL_GetTick>
 8001298:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f013 0f01 	tst.w	r3, #1
 80012a2:	d00c      	beq.n	80012be <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff fe98 	bl	8000fd8 <HAL_GetTick>
 80012a8:	1b83      	subs	r3, r0, r6
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d9f5      	bls.n	800129a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80012b6:	2305      	movs	r3, #5
 80012b8:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80012bc:	e7e0      	b.n	8001280 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012be:	2500      	movs	r5, #0
 80012c0:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80012c2:	e7dd      	b.n	8001280 <HAL_CAN_Start+0x18>

080012c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012c4:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c6:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ca:	6804      	ldr	r4, [r0, #0]
 80012cc:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ce:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80012d2:	fa5f fc8c 	uxtb.w	ip, ip
 80012d6:	f1bc 0f01 	cmp.w	ip, #1
 80012da:	d862      	bhi.n	80013a2 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012dc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80012e0:	d059      	beq.n	8001396 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012e2:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012e6:	2401      	movs	r4, #1
 80012e8:	fa04 f40c 	lsl.w	r4, r4, ip
 80012ec:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012ee:	688b      	ldr	r3, [r1, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d13d      	bne.n	8001370 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f4:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 80012f6:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f8:	6804      	ldr	r4, [r0, #0]
 80012fa:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 80012fe:	f10c 0318 	add.w	r3, ip, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001306:	6803      	ldr	r3, [r0, #0]
 8001308:	690c      	ldr	r4, [r1, #16]
 800130a:	f10c 0e18 	add.w	lr, ip, #24
 800130e:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8001312:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001314:	7d0b      	ldrb	r3, [r1, #20]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d035      	beq.n	8001386 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800131a:	79d1      	ldrb	r1, [r2, #7]
 800131c:	7993      	ldrb	r3, [r2, #6]
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001324:	7951      	ldrb	r1, [r2, #5]
 8001326:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800132a:	7914      	ldrb	r4, [r2, #4]
 800132c:	6801      	ldr	r1, [r0, #0]
 800132e:	4323      	orrs	r3, r4
 8001330:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8001334:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001338:	78d1      	ldrb	r1, [r2, #3]
 800133a:	7893      	ldrb	r3, [r2, #2]
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001342:	7851      	ldrb	r1, [r2, #1]
 8001344:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001348:	7811      	ldrb	r1, [r2, #0]
 800134a:	6802      	ldr	r2, [r0, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8001352:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001356:	6802      	ldr	r2, [r0, #0]
 8001358:	f10c 0c18 	add.w	ip, ip, #24
 800135c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8001360:	f852 300c 	ldr.w	r3, [r2, ip]
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800136c:	2000      	movs	r0, #0
 800136e:	e01d      	b.n	80013ac <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001370:	684c      	ldr	r4, [r1, #4]
 8001372:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8001376:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8001378:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800137a:	f10c 0418 	add.w	r4, ip, #24
 800137e:	0124      	lsls	r4, r4, #4
 8001380:	6805      	ldr	r5, [r0, #0]
 8001382:	512b      	str	r3, [r5, r4]
 8001384:	e7bf      	b.n	8001306 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001386:	6803      	ldr	r3, [r0, #0]
 8001388:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001392:	6059      	str	r1, [r3, #4]
 8001394:	e7c1      	b.n	800131a <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001396:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800139c:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e004      	b.n	80013ac <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
  }
}
 80013ac:	bd30      	pop	{r4, r5, pc}

080013ae <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ae:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80013b6:	fa5f fc8c 	uxtb.w	ip, ip
 80013ba:	f1bc 0f01 	cmp.w	ip, #1
 80013be:	f200 80a5 	bhi.w	800150c <HAL_CAN_GetRxMessage+0x15e>
{
 80013c2:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c4:	b951      	cbnz	r1, 80013dc <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013c6:	6804      	ldr	r4, [r0, #0]
 80013c8:	68e4      	ldr	r4, [r4, #12]
 80013ca:	f014 0f03 	tst.w	r4, #3
 80013ce:	d110      	bne.n	80013f2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d6:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e07e      	b.n	80014da <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013dc:	6804      	ldr	r4, [r0, #0]
 80013de:	6924      	ldr	r4, [r4, #16]
 80013e0:	f014 0f03 	tst.w	r4, #3
 80013e4:	d105      	bne.n	80013f2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ec:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80013ee:	2001      	movs	r0, #1
 80013f0:	e073      	b.n	80014da <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013f2:	6805      	ldr	r5, [r0, #0]
 80013f4:	f101 041b 	add.w	r4, r1, #27
 80013f8:	0124      	lsls	r4, r4, #4
 80013fa:	592c      	ldr	r4, [r5, r4]
 80013fc:	f004 0404 	and.w	r4, r4, #4
 8001400:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001402:	2c00      	cmp	r4, #0
 8001404:	d16b      	bne.n	80014de <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001406:	6805      	ldr	r5, [r0, #0]
 8001408:	f101 041b 	add.w	r4, r1, #27
 800140c:	0124      	lsls	r4, r4, #4
 800140e:	592c      	ldr	r4, [r5, r4]
 8001410:	0d64      	lsrs	r4, r4, #21
 8001412:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001414:	6804      	ldr	r4, [r0, #0]
 8001416:	f101 0c1b 	add.w	ip, r1, #27
 800141a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800141e:	f854 400c 	ldr.w	r4, [r4, ip]
 8001422:	f004 0402 	and.w	r4, r4, #2
 8001426:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001428:	6804      	ldr	r4, [r0, #0]
 800142a:	44a4      	add	ip, r4
 800142c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8001430:	f015 0f08 	tst.w	r5, #8
 8001434:	d05b      	beq.n	80014ee <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001436:	2408      	movs	r4, #8
 8001438:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800143a:	6804      	ldr	r4, [r0, #0]
 800143c:	f101 0c1b 	add.w	ip, r1, #27
 8001440:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8001444:	6864      	ldr	r4, [r4, #4]
 8001446:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800144a:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800144c:	6804      	ldr	r4, [r0, #0]
 800144e:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8001452:	6864      	ldr	r4, [r4, #4]
 8001454:	0c24      	lsrs	r4, r4, #16
 8001456:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800145e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001462:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001464:	6802      	ldr	r2, [r0, #0]
 8001466:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800146a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800146e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001472:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001474:	6802      	ldr	r2, [r0, #0]
 8001476:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800147a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800147e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001482:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001484:	6802      	ldr	r2, [r0, #0]
 8001486:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800148a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800148e:	0e12      	lsrs	r2, r2, #24
 8001490:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001492:	6802      	ldr	r2, [r0, #0]
 8001494:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001498:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800149c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800149e:	6802      	ldr	r2, [r0, #0]
 80014a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014a4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80014a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80014ac:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014ae:	6802      	ldr	r2, [r0, #0]
 80014b0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014b4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80014b8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80014bc:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014be:	6802      	ldr	r2, [r0, #0]
 80014c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014c4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80014c8:	0e12      	lsrs	r2, r2, #24
 80014ca:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014cc:	b9c1      	cbnz	r1, 8001500 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014ce:	6802      	ldr	r2, [r0, #0]
 80014d0:	68d3      	ldr	r3, [r2, #12]
 80014d2:	f043 0320 	orr.w	r3, r3, #32
 80014d6:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80014d8:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80014da:	bc30      	pop	{r4, r5}
 80014dc:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014de:	6805      	ldr	r5, [r0, #0]
 80014e0:	f101 041b 	add.w	r4, r1, #27
 80014e4:	0124      	lsls	r4, r4, #4
 80014e6:	592c      	ldr	r4, [r5, r4]
 80014e8:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014ea:	6054      	str	r4, [r2, #4]
 80014ec:	e792      	b.n	8001414 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014ee:	f101 051b 	add.w	r5, r1, #27
 80014f2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80014f6:	6864      	ldr	r4, [r4, #4]
 80014f8:	f004 040f 	and.w	r4, r4, #15
 80014fc:	6114      	str	r4, [r2, #16]
 80014fe:	e79c      	b.n	800143a <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001500:	6802      	ldr	r2, [r0, #0]
 8001502:	6913      	ldr	r3, [r2, #16]
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6113      	str	r3, [r2, #16]
 800150a:	e7e5      	b.n	80014d8 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800150c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800150e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001512:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
}
 8001516:	4770      	bx	lr

08001518 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001518:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800151c:	3b01      	subs	r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d905      	bls.n	8001530 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001524:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
  }
}
 800152e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6953      	ldr	r3, [r2, #20]
 8001534:	430b      	orrs	r3, r1
 8001536:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800153c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001540:	4605      	mov	r5, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001542:	6803      	ldr	r3, [r0, #0]
 8001544:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001546:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800154a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800154c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001550:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001554:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001558:	f014 0601 	ands.w	r6, r4, #1
 800155c:	d03b      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x9a>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800155e:	f017 0601 	ands.w	r6, r7, #1
 8001562:	d016      	beq.n	8001592 <HAL_CAN_IRQHandler+0x56>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001564:	2201      	movs	r2, #1
 8001566:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001568:	f017 0f02 	tst.w	r7, #2
 800156c:	d108      	bne.n	8001580 <HAL_CAN_IRQHandler+0x44>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800156e:	f017 0f04 	tst.w	r7, #4
 8001572:	d10c      	bne.n	800158e <HAL_CAN_IRQHandler+0x52>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001574:	f017 0608 	ands.w	r6, r7, #8
 8001578:	d006      	beq.n	8001588 <HAL_CAN_IRQHandler+0x4c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800157a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800157e:	e008      	b.n	8001592 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001580:	f7ff f854 	bl	800062c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001584:	2600      	movs	r6, #0
 8001586:	e004      	b.n	8001592 <HAL_CAN_IRQHandler+0x56>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001588:	f7ff f86e 	bl	8000668 <HAL_CAN_TxMailbox0AbortCallback>
 800158c:	e001      	b.n	8001592 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800158e:	f44f 6600 	mov.w	r6, #2048	; 0x800
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001592:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001596:	d00d      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x78>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015a0:	f417 7f00 	tst.w	r7, #512	; 0x200
 80015a4:	f040 8086 	bne.w	80016b4 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015a8:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80015ac:	f000 8086 	beq.w	80016bc <HAL_CAN_IRQHandler+0x180>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015b0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015b4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80015b8:	d00d      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x9a>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015c2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80015c6:	f040 8083 	bne.w	80016d0 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015ca:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80015ce:	f000 8083 	beq.w	80016d8 <HAL_CAN_IRQHandler+0x19c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015d2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015d6:	f014 0f08 	tst.w	r4, #8
 80015da:	d007      	beq.n	80015ec <HAL_CAN_IRQHandler+0xb0>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015dc:	f01b 0f10 	tst.w	fp, #16
 80015e0:	d004      	beq.n	80015ec <HAL_CAN_IRQHandler+0xb0>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015e2:	f446 7600 	orr.w	r6, r6, #512	; 0x200

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ec:	f014 0f04 	tst.w	r4, #4
 80015f0:	d002      	beq.n	80015f8 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015f2:	f01b 0f08 	tst.w	fp, #8
 80015f6:	d179      	bne.n	80016ec <HAL_CAN_IRQHandler+0x1b0>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015f8:	f014 0f02 	tst.w	r4, #2
 80015fc:	d004      	beq.n	8001608 <HAL_CAN_IRQHandler+0xcc>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f013 0f03 	tst.w	r3, #3
 8001606:	d178      	bne.n	80016fa <HAL_CAN_IRQHandler+0x1be>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001608:	f014 0f40 	tst.w	r4, #64	; 0x40
 800160c:	d007      	beq.n	800161e <HAL_CAN_IRQHandler+0xe2>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800160e:	f01a 0f10 	tst.w	sl, #16
 8001612:	d004      	beq.n	800161e <HAL_CAN_IRQHandler+0xe2>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001614:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	2210      	movs	r2, #16
 800161c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800161e:	f014 0f20 	tst.w	r4, #32
 8001622:	d002      	beq.n	800162a <HAL_CAN_IRQHandler+0xee>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001624:	f01a 0f08 	tst.w	sl, #8
 8001628:	d16b      	bne.n	8001702 <HAL_CAN_IRQHandler+0x1c6>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800162a:	f014 0f10 	tst.w	r4, #16
 800162e:	d004      	beq.n	800163a <HAL_CAN_IRQHandler+0xfe>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f013 0f03 	tst.w	r3, #3
 8001638:	d16a      	bne.n	8001710 <HAL_CAN_IRQHandler+0x1d4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800163a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800163e:	d002      	beq.n	8001646 <HAL_CAN_IRQHandler+0x10a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001640:	f018 0f10 	tst.w	r8, #16
 8001644:	d168      	bne.n	8001718 <HAL_CAN_IRQHandler+0x1dc>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001646:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800164a:	d002      	beq.n	8001652 <HAL_CAN_IRQHandler+0x116>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800164c:	f018 0f08 	tst.w	r8, #8
 8001650:	d169      	bne.n	8001726 <HAL_CAN_IRQHandler+0x1ea>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001652:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001656:	d07a      	beq.n	800174e <HAL_CAN_IRQHandler+0x212>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001658:	f018 0f04 	tst.w	r8, #4
 800165c:	d074      	beq.n	8001748 <HAL_CAN_IRQHandler+0x20c>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800165e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001662:	d004      	beq.n	800166e <HAL_CAN_IRQHandler+0x132>
 8001664:	f019 0f01 	tst.w	r9, #1
 8001668:	d001      	beq.n	800166e <HAL_CAN_IRQHandler+0x132>
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800166a:	f046 0601 	orr.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800166e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001672:	d004      	beq.n	800167e <HAL_CAN_IRQHandler+0x142>
 8001674:	f019 0f02 	tst.w	r9, #2
 8001678:	d001      	beq.n	800167e <HAL_CAN_IRQHandler+0x142>
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800167a:	f046 0602 	orr.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800167e:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001682:	d004      	beq.n	800168e <HAL_CAN_IRQHandler+0x152>
 8001684:	f019 0f04 	tst.w	r9, #4
 8001688:	d001      	beq.n	800168e <HAL_CAN_IRQHandler+0x152>
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800168a:	f046 0604 	orr.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800168e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001692:	d059      	beq.n	8001748 <HAL_CAN_IRQHandler+0x20c>
 8001694:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8001698:	d056      	beq.n	8001748 <HAL_CAN_IRQHandler+0x20c>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 800169a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800169e:	d065      	beq.n	800176c <HAL_CAN_IRQHandler+0x230>
 80016a0:	d858      	bhi.n	8001754 <HAL_CAN_IRQHandler+0x218>
 80016a2:	f1b9 0f20 	cmp.w	r9, #32
 80016a6:	d05e      	beq.n	8001766 <HAL_CAN_IRQHandler+0x22a>
 80016a8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80016ac:	d142      	bne.n	8001734 <HAL_CAN_IRQHandler+0x1f8>
            /* Set CAN error code to Form error */
            errorcode |= HAL_CAN_ERROR_FOR;
            break;
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
 80016ae:	f046 0620 	orr.w	r6, r6, #32
            break;
 80016b2:	e044      	b.n	800173e <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7fe ffc3 	bl	8000640 <HAL_CAN_TxMailbox1CompleteCallback>
 80016ba:	e77b      	b.n	80015b4 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016bc:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80016c0:	d002      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016c2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80016c6:	e775      	b.n	80015b4 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016c8:	4628      	mov	r0, r5
 80016ca:	f7fe ffd7 	bl	800067c <HAL_CAN_TxMailbox1AbortCallback>
 80016ce:	e771      	b.n	80015b4 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016d0:	4628      	mov	r0, r5
 80016d2:	f7fe ffbf 	bl	8000654 <HAL_CAN_TxMailbox2CompleteCallback>
 80016d6:	e77e      	b.n	80015d6 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016d8:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80016dc:	d002      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016de:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80016e2:	e778      	b.n	80015d6 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7fe ffd3 	bl	8000690 <HAL_CAN_TxMailbox2AbortCallback>
 80016ea:	e774      	b.n	80015d6 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	2208      	movs	r2, #8
 80016f0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016f2:	4628      	mov	r0, r5
 80016f4:	f7fe ffd6 	bl	80006a4 <HAL_CAN_RxFifo0FullCallback>
 80016f8:	e77e      	b.n	80015f8 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016fa:	4628      	mov	r0, r5
 80016fc:	f7ff f810 	bl	8000720 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001700:	e782      	b.n	8001608 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001702:	682b      	ldr	r3, [r5, #0]
 8001704:	2208      	movs	r2, #8
 8001706:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001708:	4628      	mov	r0, r5
 800170a:	f7fe ffdf 	bl	80006cc <HAL_CAN_RxFifo1FullCallback>
 800170e:	e78c      	b.n	800162a <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001710:	4628      	mov	r0, r5
 8001712:	f7fe ffd1 	bl	80006b8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001716:	e790      	b.n	800163a <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	2210      	movs	r2, #16
 800171c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800171e:	4628      	mov	r0, r5
 8001720:	f7fe ffde 	bl	80006e0 <HAL_CAN_SleepCallback>
 8001724:	e78f      	b.n	8001646 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	2208      	movs	r2, #8
 800172a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800172c:	4628      	mov	r0, r5
 800172e:	f7fe ffe1 	bl	80006f4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001732:	e78e      	b.n	8001652 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8001734:	f1b9 0f10 	cmp.w	r9, #16
 8001738:	d101      	bne.n	800173e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800173a:	f046 0608 	orr.w	r6, r6, #8
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800173e:	682a      	ldr	r2, [r5, #0]
 8001740:	6993      	ldr	r3, [r2, #24]
 8001742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001746:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800174e:	b99e      	cbnz	r6, 8001778 <HAL_CAN_IRQHandler+0x23c>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8001754:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8001758:	d00b      	beq.n	8001772 <HAL_CAN_IRQHandler+0x236>
 800175a:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 800175e:	d1ee      	bne.n	800173e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001760:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8001764:	e7eb      	b.n	800173e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001766:	f046 0610 	orr.w	r6, r6, #16
            break;
 800176a:	e7e8      	b.n	800173e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 800176c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8001770:	e7e5      	b.n	800173e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8001772:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8001776:	e7e2      	b.n	800173e <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8001778:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800177a:	4333      	orrs	r3, r6
 800177c:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800177e:	4628      	mov	r0, r5
 8001780:	f7fe ffc2 	bl	8000708 <HAL_CAN_ErrorCallback>
}
 8001784:	e7e4      	b.n	8001750 <HAL_CAN_IRQHandler+0x214>
	...

08001788 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800178a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	0200      	lsls	r0, r0, #8
 8001796:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_NVIC_SetPriority+0x68>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b6:	f1c3 0c07 	rsb	ip, r3, #7
 80017ba:	f1bc 0f04 	cmp.w	ip, #4
 80017be:	bf28      	it	cs
 80017c0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c4:	f103 0e04 	add.w	lr, r3, #4
 80017c8:	f1be 0f06 	cmp.w	lr, #6
 80017cc:	d918      	bls.n	8001800 <HAL_NVIC_SetPriority+0x54>
 80017ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80017d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80017d8:	ea21 010c 	bic.w	r1, r1, ip
 80017dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017de:	fa0e fe03 	lsl.w	lr, lr, r3
 80017e2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80017e8:	2800      	cmp	r0, #0
 80017ea:	db0b      	blt.n	8001804 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017f8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017fc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001800:	2300      	movs	r3, #0
 8001802:	e7e5      	b.n	80017d0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	f000 000f 	and.w	r0, r0, #15
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <HAL_NVIC_SetPriority+0x6c>)
 800180e:	541a      	strb	r2, [r3, r0]
 8001810:	e7f4      	b.n	80017fc <HAL_NVIC_SetPriority+0x50>
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	e000ed14 	.word	0xe000ed14

0800181c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800181c:	2800      	cmp	r0, #0
 800181e:	db07      	blt.n	8001830 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001820:	f000 021f 	and.w	r2, r0, #31
 8001824:	0940      	lsrs	r0, r0, #5
 8001826:	2301      	movs	r3, #1
 8001828:	4093      	lsls	r3, r2
 800182a:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_NVIC_EnableIRQ+0x18>)
 800182c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	3801      	subs	r0, #1
 800183a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800183e:	d20b      	bcs.n	8001858 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001840:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001844:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_SYSTICK_Config+0x24>)
 8001848:	21f0      	movs	r1, #240	; 0xf0
 800184a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184e:	2000      	movs	r0, #0
 8001850:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	2207      	movs	r2, #7
 8001854:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001856:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001858:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001860:	2300      	movs	r3, #0
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f200 80e9 	bhi.w	8001a3a <HAL_GPIO_Init+0x1da>
{
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	e065      	b.n	800193a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001874:	2403      	movs	r4, #3
 8001876:	fa04 f40e 	lsl.w	r4, r4, lr
 800187a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187e:	68cc      	ldr	r4, [r1, #12]
 8001880:	fa04 f40e 	lsl.w	r4, r4, lr
 8001884:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001886:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188e:	684a      	ldr	r2, [r1, #4]
 8001890:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001898:	6042      	str	r2, [r0, #4]
 800189a:	e05c      	b.n	8001956 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	08dc      	lsrs	r4, r3, #3
 800189e:	3408      	adds	r4, #8
 80018a0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a4:	f003 0507 	and.w	r5, r3, #7
 80018a8:	00ad      	lsls	r5, r5, #2
 80018aa:	f04f 0e0f 	mov.w	lr, #15
 80018ae:	fa0e fe05 	lsl.w	lr, lr, r5
 80018b2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b6:	690a      	ldr	r2, [r1, #16]
 80018b8:	40aa      	lsls	r2, r5
 80018ba:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80018c2:	e05c      	b.n	800197e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c4:	2207      	movs	r2, #7
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 80018c8:	2200      	movs	r2, #0
 80018ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80018ce:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	3402      	adds	r4, #2
 80018d2:	4d5a      	ldr	r5, [pc, #360]	; (8001a3c <HAL_GPIO_Init+0x1dc>)
 80018d4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d8:	4a59      	ldr	r2, [pc, #356]	; (8001a40 <HAL_GPIO_Init+0x1e0>)
 80018da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	ea6f 020c 	mvn.w	r2, ip
 80018e0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e4:	684e      	ldr	r6, [r1, #4]
 80018e6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80018ea:	d001      	beq.n	80018f0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80018ec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80018f0:	4c53      	ldr	r4, [pc, #332]	; (8001a40 <HAL_GPIO_Init+0x1e0>)
 80018f2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80018f4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fa:	684e      	ldr	r6, [r1, #4]
 80018fc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001900:	d001      	beq.n	8001906 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001902:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001906:	4c4e      	ldr	r4, [pc, #312]	; (8001a40 <HAL_GPIO_Init+0x1e0>)
 8001908:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800190a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800190c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001910:	684e      	ldr	r6, [r1, #4]
 8001912:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001916:	d001      	beq.n	800191c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001918:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800191c:	4c48      	ldr	r4, [pc, #288]	; (8001a40 <HAL_GPIO_Init+0x1e0>)
 800191e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001920:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001922:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001924:	684d      	ldr	r5, [r1, #4]
 8001926:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800192a:	d001      	beq.n	8001930 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800192c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001930:	4c43      	ldr	r4, [pc, #268]	; (8001a40 <HAL_GPIO_Init+0x1e0>)
 8001932:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001934:	3301      	adds	r3, #1
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d87d      	bhi.n	8001a36 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800193a:	2201      	movs	r2, #1
 800193c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	680c      	ldr	r4, [r1, #0]
 8001940:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001944:	ea32 0404 	bics.w	r4, r2, r4
 8001948:	d1f4      	bne.n	8001934 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	684c      	ldr	r4, [r1, #4]
 800194c:	f004 0403 	and.w	r4, r4, #3
 8001950:	3c01      	subs	r4, #1
 8001952:	2c01      	cmp	r4, #1
 8001954:	d98b      	bls.n	800186e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	684a      	ldr	r2, [r1, #4]
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	2a03      	cmp	r2, #3
 800195e:	d009      	beq.n	8001974 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001960:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001962:	005d      	lsls	r5, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	40aa      	lsls	r2, r5
 8001968:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	688a      	ldr	r2, [r1, #8]
 800196e:	40aa      	lsls	r2, r5
 8001970:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001972:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	684a      	ldr	r2, [r1, #4]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	2a02      	cmp	r2, #2
 800197c:	d08e      	beq.n	800189c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800197e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001980:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f20e 	lsl.w	r2, r2, lr
 800198a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	684a      	ldr	r2, [r1, #4]
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	fa02 f20e 	lsl.w	r2, r2, lr
 8001998:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800199a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	684a      	ldr	r2, [r1, #4]
 800199e:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80019a2:	d0c7      	beq.n	8001934 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	2200      	movs	r2, #0
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_GPIO_Init+0x1e4>)
 80019aa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80019ac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80019b0:	6454      	str	r4, [r2, #68]	; 0x44
 80019b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019b4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019bc:	089c      	lsrs	r4, r3, #2
 80019be:	1ca5      	adds	r5, r4, #2
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_GPIO_Init+0x1dc>)
 80019c2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c6:	f003 0e03 	and.w	lr, r3, #3
 80019ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80019d4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x1e8>)
 80019da:	4290      	cmp	r0, r2
 80019dc:	f43f af74 	beq.w	80018c8 <HAL_GPIO_Init+0x68>
 80019e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e4:	4290      	cmp	r0, r2
 80019e6:	d01a      	beq.n	8001a1e <HAL_GPIO_Init+0x1be>
 80019e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ec:	4290      	cmp	r0, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_GPIO_Init+0x1c2>
 80019f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f4:	4290      	cmp	r0, r2
 80019f6:	d016      	beq.n	8001a26 <HAL_GPIO_Init+0x1c6>
 80019f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d014      	beq.n	8001a2a <HAL_GPIO_Init+0x1ca>
 8001a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a04:	4290      	cmp	r0, r2
 8001a06:	d012      	beq.n	8001a2e <HAL_GPIO_Init+0x1ce>
 8001a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d010      	beq.n	8001a32 <HAL_GPIO_Init+0x1d2>
 8001a10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a14:	4290      	cmp	r0, r2
 8001a16:	f43f af55 	beq.w	80018c4 <HAL_GPIO_Init+0x64>
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	e755      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a1e:	2201      	movs	r2, #1
 8001a20:	e753      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a22:	2202      	movs	r2, #2
 8001a24:	e751      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a26:	2203      	movs	r2, #3
 8001a28:	e74f      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	e74d      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a2e:	2205      	movs	r2, #5
 8001a30:	e74b      	b.n	80018ca <HAL_GPIO_Init+0x6a>
 8001a32:	2206      	movs	r2, #6
 8001a34:	e749      	b.n	80018ca <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001a36:	b002      	add	sp, #8
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
 8001a3a:	4770      	bx	lr
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40013c00 	.word	0x40013c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	b10a      	cbz	r2, 8001a52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	6181      	str	r1, [r0, #24]
 8001a50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	6181      	str	r1, [r0, #24]
  }
}
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a58:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5a:	ea01 0203 	and.w	r2, r1, r3
 8001a5e:	ea21 0103 	bic.w	r1, r1, r3
 8001a62:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a66:	6181      	str	r1, [r0, #24]
}
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	f000 81e0 	beq.w	8001e32 <HAL_RCC_OscConfig+0x3c6>
{
 8001a72:	b570      	push	{r4, r5, r6, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	f013 0f01 	tst.w	r3, #1
 8001a7e:	d03b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a80:	4b9f      	ldr	r3, [pc, #636]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d02c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d021      	beq.n	8001adc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d04f      	beq.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d052      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe0>
 8001aa6:	4b96      	ldr	r3, [pc, #600]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d050      	beq.n	8001b60 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fa8b 	bl	8000fd8 <HAL_GetTick>
 8001ac2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001acc:	d114      	bne.n	8001af8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ace:	f7ff fa83 	bl	8000fd8 <HAL_GetTick>
 8001ad2:	1b40      	subs	r0, r0, r5
 8001ad4:	2864      	cmp	r0, #100	; 0x64
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ad8:	2003      	movs	r0, #3
 8001ada:	e1b1      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001adc:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ae4:	d0d8      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aee:	d003      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 819f 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f013 0f02 	tst.w	r3, #2
 8001afe:	d054      	beq.n	8001baa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b00:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f013 0f0c 	tst.w	r3, #12
 8001b08:	d03e      	beq.n	8001b88 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d033      	beq.n	8001b7e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d068      	beq.n	8001bee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa59 	bl	8000fd8 <HAL_GetTick>
 8001b26:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f013 0f02 	tst.w	r3, #2
 8001b30:	d154      	bne.n	8001bdc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fa51 	bl	8000fd8 <HAL_GetTick>
 8001b36:	1b40      	subs	r0, r0, r5
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f5      	bls.n	8001b28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	e17f      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e7b5      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4c>
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e7ab      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa3a 	bl	8000fd8 <HAL_GetTick>
 8001b64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b6e:	d0c3      	beq.n	8001af8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fa32 	bl	8000fd8 <HAL_GetTick>
 8001b74:	1b40      	subs	r0, r0, r5
 8001b76:	2864      	cmp	r0, #100	; 0x64
 8001b78:	d9f5      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e160      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b86:	d1c6      	bne.n	8001b16 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 0f02 	tst.w	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_OscConfig+0x12e>
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	f040 8150 	bne.w	8001e3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4a59      	ldr	r2, [pc, #356]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ba2:	6921      	ldr	r1, [r4, #16]
 8001ba4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ba8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	f013 0f08 	tst.w	r3, #8
 8001bb0:	d042      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb2:	6963      	ldr	r3, [r4, #20]
 8001bb4:	b36b      	cbz	r3, 8001c12 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fa0b 	bl	8000fd8 <HAL_GetTick>
 8001bc2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc4:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	f013 0f02 	tst.w	r3, #2
 8001bcc:	d134      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fa03 	bl	8000fd8 <HAL_GetTick>
 8001bd2:	1b40      	subs	r0, r0, r5
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d9f5      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	e131      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001be4:	6921      	ldr	r1, [r4, #16]
 8001be6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e7dd      	b.n	8001baa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f9f0 	bl	8000fd8 <HAL_GetTick>
 8001bf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d0d2      	beq.n	8001baa <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff f9e8 	bl	8000fd8 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f5      	bls.n	8001bfa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e116      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f9dd 	bl	8000fd8 <HAL_GetTick>
 8001c1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	f013 0f02 	tst.w	r3, #2
 8001c28:	d006      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f9d5 	bl	8000fd8 <HAL_GetTick>
 8001c2e:	1b40      	subs	r0, r0, r5
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9f5      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
 8001c36:	e103      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f013 0f04 	tst.w	r3, #4
 8001c3e:	d077      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c48:	d133      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c62:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c6c:	d023      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	68a3      	ldr	r3, [r4, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d034      	beq.n	8001cde <HAL_RCC_OscConfig+0x272>
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d038      	beq.n	8001cea <HAL_RCC_OscConfig+0x27e>
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	671a      	str	r2, [r3, #112]	; 0x70
 8001c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c84:	f022 0204 	bic.w	r2, r2, #4
 8001c88:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8a:	68a3      	ldr	r3, [r4, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03d      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f9a2 	bl	8000fd8 <HAL_GetTick>
 8001c94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	f013 0f02 	tst.w	r3, #2
 8001c9e:	d146      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f99a 	bl	8000fd8 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001caa:	4298      	cmp	r0, r3
 8001cac:	d9f3      	bls.n	8001c96 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001cae:	2003      	movs	r0, #3
 8001cb0:	e0c6      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	e7d6      	b.n	8001c64 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f98a 	bl	8000fd8 <HAL_GetTick>
 8001cc4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cce:	d1ce      	bne.n	8001c6e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7ff f982 	bl	8000fd8 <HAL_GetTick>
 8001cd4:	1b80      	subs	r0, r0, r6
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9f5      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	e0b0      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001ce0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e7cf      	b.n	8001c8a <HAL_RCC_OscConfig+0x21e>
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_OscConfig+0x294>)
 8001cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cee:	f042 0204 	orr.w	r2, r2, #4
 8001cf2:	671a      	str	r2, [r3, #112]	; 0x70
 8001cf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	671a      	str	r2, [r3, #112]	; 0x70
 8001cfc:	e7c5      	b.n	8001c8a <HAL_RCC_OscConfig+0x21e>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f964 	bl	8000fd8 <HAL_GetTick>
 8001d10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f013 0f02 	tst.w	r3, #2
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f95c 	bl	8000fd8 <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d9f3      	bls.n	8001d12 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e088      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2e:	b9ed      	cbnz	r5, 8001d6c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	69a3      	ldr	r3, [r4, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8083 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d3a:	6892      	ldr	r2, [r2, #8]
 8001d3c:	f002 020c 	and.w	r2, r2, #12
 8001d40:	2a08      	cmp	r2, #8
 8001d42:	d051      	beq.n	8001de8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d017      	beq.n	8001d78 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f943 	bl	8000fd8 <HAL_GetTick>
 8001d52:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d54:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d5c:	d042      	beq.n	8001de4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f93b 	bl	8000fd8 <HAL_GetTick>
 8001d62:	1b00      	subs	r0, r0, r4
 8001d64:	2802      	cmp	r0, #2
 8001d66:	d9f5      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d68:	2003      	movs	r0, #3
 8001d6a:	e069      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	e7db      	b.n	8001d30 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f92b 	bl	8000fd8 <HAL_GetTick>
 8001d82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d8c:	d006      	beq.n	8001d9c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f923 	bl	8000fd8 <HAL_GetTick>
 8001d92:	1b40      	subs	r0, r0, r5
 8001d94:	2802      	cmp	r0, #2
 8001d96:	d9f5      	bls.n	8001d84 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e051      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9c:	69e3      	ldr	r3, [r4, #28]
 8001d9e:	6a22      	ldr	r2, [r4, #32]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001da4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001da8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001db4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001db8:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_OscConfig+0x3f4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f909 	bl	8000fd8 <HAL_GetTick>
 8001dc6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff f901 	bl	8000fd8 <HAL_GetTick>
 8001dd6:	1b00      	subs	r0, r0, r4
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f5      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
 8001dde:	e02f      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e02d      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001de4:	2000      	movs	r0, #0
 8001de6:	e02b      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d02b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x3f0>)
 8001dee:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001df4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	4291      	cmp	r1, r2
 8001df8:	d126      	bne.n	8001e48 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	428a      	cmp	r2, r1
 8001e02:	d123      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e04:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e06:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e10:	d11e      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e12:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001e16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e18:	0852      	lsrs	r2, r2, #1
 8001e1a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e22:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e2c:	d114      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e006      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
}
 8001e34:	4770      	bx	lr
        return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
}
 8001e40:	b002      	add	sp, #8
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e44:	2001      	movs	r0, #1
 8001e46:	e7fb      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001e48:	2001      	movs	r0, #1
 8001e4a:	e7f9      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e7f7      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7f5      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e54:	2001      	movs	r0, #1
 8001e56:	e7f3      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	e7f1      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000

08001e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e72:	482f      	ldr	r0, [pc, #188]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e84:	d02c      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e88:	6858      	ldr	r0, [r3, #4]
 8001e8a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001e8e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001e92:	ebbc 0c00 	subs.w	ip, ip, r0
 8001e96:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001e9a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001e9e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001ea2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001ea6:	ebb1 010c 	subs.w	r1, r1, ip
 8001eaa:	eb63 030e 	sbc.w	r3, r3, lr
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb4:	00c9      	lsls	r1, r1, #3
 8001eb6:	eb11 0c00 	adds.w	ip, r1, r0
 8001eba:	f143 0300 	adc.w	r3, r3, #0
 8001ebe:	0299      	lsls	r1, r3, #10
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001ec6:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001eca:	f7fe f9d1 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001eda:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001ede:	e7c9      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ee2:	6858      	ldr	r0, [r3, #4]
 8001ee4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ee8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001eec:	ebbc 0c00 	subs.w	ip, ip, r0
 8001ef0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001ef4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001ef8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001efc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001f00:	ebb1 010c 	subs.w	r1, r1, ip
 8001f04:	eb63 030e 	sbc.w	r3, r3, lr
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f0e:	00c9      	lsls	r1, r1, #3
 8001f10:	eb11 0c00 	adds.w	ip, r1, r0
 8001f14:	f143 0300 	adc.w	r3, r3, #0
 8001f18:	0299      	lsls	r1, r3, #10
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001f20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001f24:	f7fe f9a4 	bl	8000270 <__aeabi_uldivmod>
 8001f28:	e7d1      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x6a>
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	00f42400 	.word	0x00f42400

08001f34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f34:	2800      	cmp	r0, #0
 8001f36:	f000 809b 	beq.w	8002070 <HAL_RCC_ClockConfig+0x13c>
{
 8001f3a:	b570      	push	{r4, r5, r6, lr}
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <HAL_RCC_ClockConfig+0x14c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d208      	bcs.n	8001f5e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	b2cb      	uxtb	r3, r1
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_RCC_ClockConfig+0x14c>)
 8001f50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	6813      	ldr	r3, [r2, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	f040 808b 	bne.w	8002074 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	f013 0f02 	tst.w	r3, #2
 8001f64:	d017      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	f013 0f04 	tst.w	r3, #4
 8001f6a:	d004      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f6c:	4a45      	ldr	r2, [pc, #276]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001f6e:	6893      	ldr	r3, [r2, #8]
 8001f70:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f74:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f013 0f08 	tst.w	r3, #8
 8001f7c:	d004      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f7e:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001f80:	6893      	ldr	r3, [r2, #8]
 8001f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f86:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001f8a:	6893      	ldr	r3, [r2, #8]
 8001f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f90:	68a1      	ldr	r1, [r4, #8]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f013 0f01 	tst.w	r3, #1
 8001f9c:	d032      	beq.n	8002004 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d021      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa4:	1e9a      	subs	r2, r3, #2
 8001fa6:	2a01      	cmp	r2, #1
 8001fa8:	d925      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f012 0f02 	tst.w	r2, #2
 8001fb2:	d061      	beq.n	8002078 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb4:	4933      	ldr	r1, [pc, #204]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001fb6:	688a      	ldr	r2, [r1, #8]
 8001fb8:	f022 0203 	bic.w	r2, r2, #3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f80a 	bl	8000fd8 <HAL_GetTick>
 8001fc4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7fe ffff 	bl	8000fd8 <HAL_GetTick>
 8001fda:	1b80      	subs	r0, r0, r6
 8001fdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d9f0      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	e042      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ff0:	d1e0      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e03b      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ffe:	d1d9      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	e034      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_ClockConfig+0x14c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	42ab      	cmp	r3, r5
 800200e:	d907      	bls.n	8002020 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002010:	b2ea      	uxtb	r2, r5
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_ClockConfig+0x14c>)
 8002014:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	42ab      	cmp	r3, r5
 800201e:	d12d      	bne.n	800207c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	f013 0f04 	tst.w	r3, #4
 8002026:	d006      	beq.n	8002036 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 800202a:	6893      	ldr	r3, [r2, #8]
 800202c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002030:	68e1      	ldr	r1, [r4, #12]
 8002032:	430b      	orrs	r3, r1
 8002034:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	f013 0f08 	tst.w	r3, #8
 800203c:	d007      	beq.n	800204e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8002040:	6893      	ldr	r3, [r2, #8]
 8002042:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002046:	6921      	ldr	r1, [r4, #16]
 8002048:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800204c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204e:	f7ff ff09 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_ClockConfig+0x150>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x154>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	40d8      	lsrs	r0, r3
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x158>)
 8002062:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x15c>)
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f7fe ff6a 	bl	8000f40 <HAL_InitTick>
  return HAL_OK;
 800206c:	2000      	movs	r0, #0
}
 800206e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002070:	2001      	movs	r0, #1
}
 8002072:	4770      	bx	lr
      return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	e7fa      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
 800207a:	e7f8      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e7f6      	b.n	800206e <HAL_RCC_ClockConfig+0x13a>
 8002080:	40023c00 	.word	0x40023c00
 8002084:	40023800 	.word	0x40023800
 8002088:	08003604 	.word	0x08003604
 800208c:	20000004 	.word	0x20000004
 8002090:	2000000c 	.word	0x2000000c

08002094 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002094:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_RCC_GetHCLKFreq+0x8>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020a2:	f7ff fff7 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020ae:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80020b2:	40d8      	lsrs	r0, r3
 80020b4:	bd08      	pop	{r3, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08003614 	.word	0x08003614

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c2:	f7ff ffe7 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020ce:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80020d2:	40d8      	lsrs	r0, r3
 80020d4:	bd08      	pop	{r3, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08003614 	.word	0x08003614

080020e0 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80020e0:	b198      	cbz	r0, 800210a <HAL_RNG_Init+0x2a>
{
 80020e2:	b510      	push	{r4, lr}
 80020e4:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80020e6:	7943      	ldrb	r3, [r0, #5]
 80020e8:	b15b      	cbz	r3, 8002102 <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80020f8:	2301      	movs	r3, #1
 80020fa:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80020fc:	2000      	movs	r0, #0
 80020fe:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8002100:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8002102:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002104:	f7fe fe0a 	bl	8000d1c <HAL_RNG_MspInit>
 8002108:	e7ef      	b.n	80020ea <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 800210a:	2001      	movs	r0, #1
}
 800210c:	4770      	bx	lr

0800210e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800210e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002110:	7903      	ldrb	r3, [r0, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d030      	beq.n	8002178 <HAL_RNG_GenerateRandomNumber+0x6a>
 8002116:	4604      	mov	r4, r0
 8002118:	460e      	mov	r6, r1
 800211a:	2301      	movs	r3, #1
 800211c:	7103      	strb	r3, [r0, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800211e:	7945      	ldrb	r5, [r0, #5]
 8002120:	b2ed      	uxtb	r5, r5
 8002122:	429d      	cmp	r5, r3
 8002124:	d006      	beq.n	8002134 <HAL_RNG_GenerateRandomNumber+0x26>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002126:	2304      	movs	r3, #4
 8002128:	6083      	str	r3, [r0, #8]
    status = HAL_ERROR;
 800212a:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800212c:	2300      	movs	r3, #0
 800212e:	7123      	strb	r3, [r4, #4]

  return status;
}
 8002130:	4628      	mov	r0, r5
 8002132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 8002138:	f7fe ff4e 	bl	8000fd8 <HAL_GetTick>
 800213c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	f012 0f01 	tst.w	r2, #1
 8002146:	d110      	bne.n	800216a <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002148:	f7fe ff46 	bl	8000fd8 <HAL_GetTick>
 800214c:	1bc0      	subs	r0, r0, r7
 800214e:	2802      	cmp	r0, #2
 8002150:	d9f5      	bls.n	800213e <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f013 0f01 	tst.w	r3, #1
 800215a:	d1f0      	bne.n	800213e <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
 800215c:	2301      	movs	r3, #1
 800215e:	7163      	strb	r3, [r4, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002160:	2302      	movs	r3, #2
 8002162:	60a3      	str	r3, [r4, #8]
          __HAL_UNLOCK(hrng);
 8002164:	2300      	movs	r3, #0
 8002166:	7123      	strb	r3, [r4, #4]
          return HAL_ERROR;
 8002168:	e7e2      	b.n	8002130 <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 800216e:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8002170:	2301      	movs	r3, #1
 8002172:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2500      	movs	r5, #0
 8002176:	e7d9      	b.n	800212c <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8002178:	2502      	movs	r5, #2
 800217a:	e7d9      	b.n	8002130 <HAL_RNG_GenerateRandomNumber+0x22>

0800217c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800217c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217e:	f102 030c 	add.w	r3, r2, #12
 8002182:	e853 3f00 	ldrex	r3, [r3]
 8002186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218a:	320c      	adds	r2, #12
 800218c:	e842 3100 	strex	r1, r3, [r2]
 8002190:	2900      	cmp	r1, #0
 8002192:	d1f3      	bne.n	800217c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002194:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	f102 0314 	add.w	r3, r2, #20
 800219a:	e853 3f00 	ldrex	r3, [r3]
 800219e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a2:	3214      	adds	r2, #20
 80021a4:	e842 3100 	strex	r1, r3, [r2]
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d1f3      	bne.n	8002194 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021b2:	2320      	movs	r3, #32
 80021b4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b8:	2300      	movs	r3, #0
 80021ba:	6303      	str	r3, [r0, #48]	; 0x30
}
 80021bc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c0:	f102 030c 	add.w	r3, r2, #12
 80021c4:	e853 3f00 	ldrex	r3, [r3]
 80021c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021cc:	320c      	adds	r2, #12
 80021ce:	e842 3100 	strex	r1, r3, [r2]
 80021d2:	2900      	cmp	r1, #0
 80021d4:	d1f3      	bne.n	80021be <UART_EndRxTransfer+0x42>
 80021d6:	e7ec      	b.n	80021b2 <UART_EndRxTransfer+0x36>

080021d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021dc:	6802      	ldr	r2, [r0, #0]
 80021de:	6913      	ldr	r3, [r2, #16]
 80021e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e4:	68c1      	ldr	r1, [r0, #12]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ea:	6883      	ldr	r3, [r0, #8]
 80021ec:	6902      	ldr	r2, [r0, #16]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	6943      	ldr	r3, [r0, #20]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	69c3      	ldr	r3, [r0, #28]
 80021f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80021f8:	6801      	ldr	r1, [r0, #0]
 80021fa:	68cb      	ldr	r3, [r1, #12]
 80021fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002200:	f023 030c 	bic.w	r3, r3, #12
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002208:	6802      	ldr	r2, [r0, #0]
 800220a:	6953      	ldr	r3, [r2, #20]
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	6981      	ldr	r1, [r0, #24]
 8002212:	430b      	orrs	r3, r1
 8002214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002216:	6803      	ldr	r3, [r0, #0]
 8002218:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <UART_SetConfig+0x108>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d006      	beq.n	800222c <UART_SetConfig+0x54>
 800221e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002222:	4293      	cmp	r3, r2
 8002224:	d002      	beq.n	800222c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002226:	f7ff ff3b 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 800222a:	e001      	b.n	8002230 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff ff48 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002230:	69e3      	ldr	r3, [r4, #28]
 8002232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002236:	d029      	beq.n	800228c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002238:	2100      	movs	r1, #0
 800223a:	1803      	adds	r3, r0, r0
 800223c:	4149      	adcs	r1, r1
 800223e:	181b      	adds	r3, r3, r0
 8002240:	f141 0100 	adc.w	r1, r1, #0
 8002244:	00c9      	lsls	r1, r1, #3
 8002246:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1818      	adds	r0, r3, r0
 800224e:	6863      	ldr	r3, [r4, #4]
 8002250:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002254:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002258:	f141 0100 	adc.w	r1, r1, #0
 800225c:	f7fe f808 	bl	8000270 <__aeabi_uldivmod>
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <UART_SetConfig+0x10c>)
 8002262:	fba2 3100 	umull	r3, r1, r2, r0
 8002266:	0949      	lsrs	r1, r1, #5
 8002268:	2364      	movs	r3, #100	; 0x64
 800226a:	fb03 0311 	mls	r3, r3, r1, r0
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	3332      	adds	r3, #50	; 0x32
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800227c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	6821      	ldr	r1, [r4, #0]
 8002286:	4413      	add	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }
}
 800228a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800228c:	2300      	movs	r3, #0
 800228e:	1802      	adds	r2, r0, r0
 8002290:	eb43 0103 	adc.w	r1, r3, r3
 8002294:	1812      	adds	r2, r2, r0
 8002296:	f141 0100 	adc.w	r1, r1, #0
 800229a:	00c9      	lsls	r1, r1, #3
 800229c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a0:	00d2      	lsls	r2, r2, #3
 80022a2:	1810      	adds	r0, r2, r0
 80022a4:	f141 0100 	adc.w	r1, r1, #0
 80022a8:	6862      	ldr	r2, [r4, #4]
 80022aa:	1892      	adds	r2, r2, r2
 80022ac:	415b      	adcs	r3, r3
 80022ae:	f7fd ffdf 	bl	8000270 <__aeabi_uldivmod>
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <UART_SetConfig+0x10c>)
 80022b4:	fba2 3100 	umull	r3, r1, r2, r0
 80022b8:	0949      	lsrs	r1, r1, #5
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	fb03 0311 	mls	r3, r3, r1, r0
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	3332      	adds	r3, #50	; 0x32
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	005a      	lsls	r2, r3, #1
 80022cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80022d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	6821      	ldr	r1, [r4, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
 80022de:	e7d4      	b.n	800228a <UART_SetConfig+0xb2>
 80022e0:	40011000 	.word	0x40011000
 80022e4:	51eb851f 	.word	0x51eb851f

080022e8 <UART_WaitOnFlagUntilTimeout>:
{
 80022e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022ec:	b083      	sub	sp, #12
 80022ee:	4605      	mov	r5, r0
 80022f0:	460e      	mov	r6, r1
 80022f2:	4617      	mov	r7, r2
 80022f4:	4699      	mov	r9, r3
 80022f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fa:	682b      	ldr	r3, [r5, #0]
 80022fc:	681c      	ldr	r4, [r3, #0]
 80022fe:	ea36 0404 	bics.w	r4, r6, r4
 8002302:	bf0c      	ite	eq
 8002304:	2401      	moveq	r4, #1
 8002306:	2400      	movne	r4, #0
 8002308:	42bc      	cmp	r4, r7
 800230a:	d128      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800230c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002310:	d0f3      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe fe61 	bl	8000fd8 <HAL_GetTick>
 8002316:	eba0 0009 	sub.w	r0, r0, r9
 800231a:	4540      	cmp	r0, r8
 800231c:	d823      	bhi.n	8002366 <UART_WaitOnFlagUntilTimeout+0x7e>
 800231e:	f1b8 0f00 	cmp.w	r8, #0
 8002322:	d022      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	f012 0f04 	tst.w	r2, #4
 800232c:	d0e5      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x12>
 800232e:	2e80      	cmp	r6, #128	; 0x80
 8002330:	d0e3      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x12>
 8002332:	2e40      	cmp	r6, #64	; 0x40
 8002334:	d0e1      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	f012 0f08 	tst.w	r2, #8
 800233c:	d0dd      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800233e:	2400      	movs	r4, #0
 8002340:	9401      	str	r4, [sp, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800234c:	4628      	mov	r0, r5
 800234e:	f7ff ff15 	bl	800217c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002352:	2308      	movs	r3, #8
 8002354:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 8002356:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
          return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
 800235c:	e000      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800235e:	2000      	movs	r0, #0
}
 8002360:	b003      	add	sp, #12
 8002362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002366:	2003      	movs	r0, #3
 8002368:	e7fa      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0x78>
 800236a:	2003      	movs	r0, #3
 800236c:	e7f8      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0x78>

0800236e <HAL_UART_Init>:
  if (huart == NULL)
 800236e:	b360      	cbz	r0, 80023ca <HAL_UART_Init+0x5c>
{
 8002370:	b510      	push	{r4, lr}
 8002372:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002374:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002378:	b313      	cbz	r3, 80023c0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800237a:	2324      	movs	r3, #36	; 0x24
 800237c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	68d3      	ldr	r3, [r2, #12]
 8002384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002388:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff ff24 	bl	80021d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	6913      	ldr	r3, [r2, #16]
 8002394:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002398:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6953      	ldr	r3, [r2, #20]
 800239e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80023a2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	68d3      	ldr	r3, [r2, #12]
 80023a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	2000      	movs	r0, #0
 80023b0:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b2:	2320      	movs	r3, #32
 80023b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023bc:	6360      	str	r0, [r4, #52]	; 0x34
}
 80023be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80023c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80023c4:	f7fe fcc2 	bl	8000d4c <HAL_UART_MspInit>
 80023c8:	e7d7      	b.n	800237a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80023ca:	2001      	movs	r0, #1
}
 80023cc:	4770      	bx	lr

080023ce <HAL_UART_Transmit>:
{
 80023ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80023d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d156      	bne.n	800248e <HAL_UART_Transmit+0xc0>
 80023e0:	4604      	mov	r4, r0
 80023e2:	460d      	mov	r5, r1
 80023e4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80023e6:	2900      	cmp	r1, #0
 80023e8:	d055      	beq.n	8002496 <HAL_UART_Transmit+0xc8>
 80023ea:	b90a      	cbnz	r2, 80023f0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e04f      	b.n	8002490 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f4:	2321      	movs	r3, #33	; 0x21
 80023f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80023fa:	f7fe fded 	bl	8000fd8 <HAL_GetTick>
 80023fe:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002400:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002404:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	68a3      	ldr	r3, [r4, #8]
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	d002      	beq.n	8002416 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002410:	f04f 0800 	mov.w	r8, #0
 8002414:	e014      	b.n	8002440 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002416:	6923      	ldr	r3, [r4, #16]
 8002418:	b32b      	cbz	r3, 8002466 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800241a:	f04f 0800 	mov.w	r8, #0
 800241e:	e00f      	b.n	8002440 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002420:	2320      	movs	r3, #32
 8002422:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        return HAL_TIMEOUT;
 8002426:	2003      	movs	r0, #3
 8002428:	e032      	b.n	8002490 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800242a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800242e:	6822      	ldr	r2, [r4, #0]
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002436:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002438:	b292      	uxth	r2, r2
 800243a:	3a01      	subs	r2, #1
 800243c:	b292      	uxth	r2, r2
 800243e:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002440:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002442:	b29b      	uxth	r3, r3
 8002444:	b193      	cbz	r3, 800246c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	9600      	str	r6, [sp, #0]
 8002448:	463b      	mov	r3, r7
 800244a:	2200      	movs	r2, #0
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff ff4a 	bl	80022e8 <UART_WaitOnFlagUntilTimeout>
 8002454:	2800      	cmp	r0, #0
 8002456:	d1e3      	bne.n	8002420 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002458:	2d00      	cmp	r5, #0
 800245a:	d0e6      	beq.n	800242a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002464:	e7e7      	b.n	8002436 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002466:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002468:	2500      	movs	r5, #0
 800246a:	e7e9      	b.n	8002440 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246c:	9600      	str	r6, [sp, #0]
 800246e:	463b      	mov	r3, r7
 8002470:	2200      	movs	r2, #0
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff ff37 	bl	80022e8 <UART_WaitOnFlagUntilTimeout>
 800247a:	b918      	cbnz	r0, 8002484 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800247c:	2320      	movs	r3, #32
 800247e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002482:	e005      	b.n	8002490 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002484:	2320      	movs	r3, #32
 8002486:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 800248a:	2003      	movs	r0, #3
 800248c:	e000      	b.n	8002490 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800248e:	2002      	movs	r0, #2
}
 8002490:	b002      	add	sp, #8
 8002492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002496:	2001      	movs	r0, #1
 8002498:	e7fa      	b.n	8002490 <HAL_UART_Transmit+0xc2>
	...

0800249c <std>:
 800249c:	2300      	movs	r3, #0
 800249e:	b510      	push	{r4, lr}
 80024a0:	4604      	mov	r4, r0
 80024a2:	e9c0 3300 	strd	r3, r3, [r0]
 80024a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024aa:	6083      	str	r3, [r0, #8]
 80024ac:	8181      	strh	r1, [r0, #12]
 80024ae:	6643      	str	r3, [r0, #100]	; 0x64
 80024b0:	81c2      	strh	r2, [r0, #14]
 80024b2:	6183      	str	r3, [r0, #24]
 80024b4:	4619      	mov	r1, r3
 80024b6:	2208      	movs	r2, #8
 80024b8:	305c      	adds	r0, #92	; 0x5c
 80024ba:	f000 f90e 	bl	80026da <memset>
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <std+0x58>)
 80024c0:	6263      	str	r3, [r4, #36]	; 0x24
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <std+0x5c>)
 80024c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <std+0x60>)
 80024c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <std+0x64>)
 80024cc:	6323      	str	r3, [r4, #48]	; 0x30
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <std+0x68>)
 80024d0:	6224      	str	r4, [r4, #32]
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d006      	beq.n	80024e4 <std+0x48>
 80024d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80024da:	4294      	cmp	r4, r2
 80024dc:	d002      	beq.n	80024e4 <std+0x48>
 80024de:	33d0      	adds	r3, #208	; 0xd0
 80024e0:	429c      	cmp	r4, r3
 80024e2:	d105      	bne.n	80024f0 <std+0x54>
 80024e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80024e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ec:	f000 b96e 	b.w	80027cc <__retarget_lock_init_recursive>
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	08002655 	.word	0x08002655
 80024f8:	08002677 	.word	0x08002677
 80024fc:	080026af 	.word	0x080026af
 8002500:	080026d3 	.word	0x080026d3
 8002504:	20000188 	.word	0x20000188

08002508 <stdio_exit_handler>:
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <stdio_exit_handler+0xc>)
 800250a:	4903      	ldr	r1, [pc, #12]	; (8002518 <stdio_exit_handler+0x10>)
 800250c:	4803      	ldr	r0, [pc, #12]	; (800251c <stdio_exit_handler+0x14>)
 800250e:	f000 b869 	b.w	80025e4 <_fwalk_sglue>
 8002512:	bf00      	nop
 8002514:	20000010 	.word	0x20000010
 8002518:	08003079 	.word	0x08003079
 800251c:	2000001c 	.word	0x2000001c

08002520 <cleanup_stdio>:
 8002520:	6841      	ldr	r1, [r0, #4]
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <cleanup_stdio+0x34>)
 8002524:	4299      	cmp	r1, r3
 8002526:	b510      	push	{r4, lr}
 8002528:	4604      	mov	r4, r0
 800252a:	d001      	beq.n	8002530 <cleanup_stdio+0x10>
 800252c:	f000 fda4 	bl	8003078 <_fflush_r>
 8002530:	68a1      	ldr	r1, [r4, #8]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <cleanup_stdio+0x38>)
 8002534:	4299      	cmp	r1, r3
 8002536:	d002      	beq.n	800253e <cleanup_stdio+0x1e>
 8002538:	4620      	mov	r0, r4
 800253a:	f000 fd9d 	bl	8003078 <_fflush_r>
 800253e:	68e1      	ldr	r1, [r4, #12]
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <cleanup_stdio+0x3c>)
 8002542:	4299      	cmp	r1, r3
 8002544:	d004      	beq.n	8002550 <cleanup_stdio+0x30>
 8002546:	4620      	mov	r0, r4
 8002548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800254c:	f000 bd94 	b.w	8003078 <_fflush_r>
 8002550:	bd10      	pop	{r4, pc}
 8002552:	bf00      	nop
 8002554:	20000188 	.word	0x20000188
 8002558:	200001f0 	.word	0x200001f0
 800255c:	20000258 	.word	0x20000258

08002560 <global_stdio_init.part.0>:
 8002560:	b510      	push	{r4, lr}
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <global_stdio_init.part.0+0x30>)
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <global_stdio_init.part.0+0x34>)
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <global_stdio_init.part.0+0x38>)
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4620      	mov	r0, r4
 800256c:	2200      	movs	r2, #0
 800256e:	2104      	movs	r1, #4
 8002570:	f7ff ff94 	bl	800249c <std>
 8002574:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002578:	2201      	movs	r2, #1
 800257a:	2109      	movs	r1, #9
 800257c:	f7ff ff8e 	bl	800249c <std>
 8002580:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002584:	2202      	movs	r2, #2
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800258a:	2112      	movs	r1, #18
 800258c:	f7ff bf86 	b.w	800249c <std>
 8002590:	200002c0 	.word	0x200002c0
 8002594:	20000188 	.word	0x20000188
 8002598:	08002509 	.word	0x08002509

0800259c <__sfp_lock_acquire>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__sfp_lock_acquire+0x8>)
 800259e:	f000 b916 	b.w	80027ce <__retarget_lock_acquire_recursive>
 80025a2:	bf00      	nop
 80025a4:	200002c9 	.word	0x200002c9

080025a8 <__sfp_lock_release>:
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <__sfp_lock_release+0x8>)
 80025aa:	f000 b911 	b.w	80027d0 <__retarget_lock_release_recursive>
 80025ae:	bf00      	nop
 80025b0:	200002c9 	.word	0x200002c9

080025b4 <__sinit>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	4604      	mov	r4, r0
 80025b8:	f7ff fff0 	bl	800259c <__sfp_lock_acquire>
 80025bc:	6a23      	ldr	r3, [r4, #32]
 80025be:	b11b      	cbz	r3, 80025c8 <__sinit+0x14>
 80025c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025c4:	f7ff bff0 	b.w	80025a8 <__sfp_lock_release>
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__sinit+0x28>)
 80025ca:	6223      	str	r3, [r4, #32]
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__sinit+0x2c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f5      	bne.n	80025c0 <__sinit+0xc>
 80025d4:	f7ff ffc4 	bl	8002560 <global_stdio_init.part.0>
 80025d8:	e7f2      	b.n	80025c0 <__sinit+0xc>
 80025da:	bf00      	nop
 80025dc:	08002521 	.word	0x08002521
 80025e0:	200002c0 	.word	0x200002c0

080025e4 <_fwalk_sglue>:
 80025e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025e8:	4607      	mov	r7, r0
 80025ea:	4688      	mov	r8, r1
 80025ec:	4614      	mov	r4, r2
 80025ee:	2600      	movs	r6, #0
 80025f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025f4:	f1b9 0901 	subs.w	r9, r9, #1
 80025f8:	d505      	bpl.n	8002606 <_fwalk_sglue+0x22>
 80025fa:	6824      	ldr	r4, [r4, #0]
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d1f7      	bne.n	80025f0 <_fwalk_sglue+0xc>
 8002600:	4630      	mov	r0, r6
 8002602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002606:	89ab      	ldrh	r3, [r5, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d907      	bls.n	800261c <_fwalk_sglue+0x38>
 800260c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002610:	3301      	adds	r3, #1
 8002612:	d003      	beq.n	800261c <_fwalk_sglue+0x38>
 8002614:	4629      	mov	r1, r5
 8002616:	4638      	mov	r0, r7
 8002618:	47c0      	blx	r8
 800261a:	4306      	orrs	r6, r0
 800261c:	3568      	adds	r5, #104	; 0x68
 800261e:	e7e9      	b.n	80025f4 <_fwalk_sglue+0x10>

08002620 <iprintf>:
 8002620:	b40f      	push	{r0, r1, r2, r3}
 8002622:	b507      	push	{r0, r1, r2, lr}
 8002624:	4906      	ldr	r1, [pc, #24]	; (8002640 <iprintf+0x20>)
 8002626:	ab04      	add	r3, sp, #16
 8002628:	6808      	ldr	r0, [r1, #0]
 800262a:	f853 2b04 	ldr.w	r2, [r3], #4
 800262e:	6881      	ldr	r1, [r0, #8]
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	f000 f9f1 	bl	8002a18 <_vfiprintf_r>
 8002636:	b003      	add	sp, #12
 8002638:	f85d eb04 	ldr.w	lr, [sp], #4
 800263c:	b004      	add	sp, #16
 800263e:	4770      	bx	lr
 8002640:	20000068 	.word	0x20000068

08002644 <putchar>:
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <putchar+0xc>)
 8002646:	4601      	mov	r1, r0
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	6882      	ldr	r2, [r0, #8]
 800264c:	f000 bd3c 	b.w	80030c8 <_putc_r>
 8002650:	20000068 	.word	0x20000068

08002654 <__sread>:
 8002654:	b510      	push	{r4, lr}
 8002656:	460c      	mov	r4, r1
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	f000 f868 	bl	8002730 <_read_r>
 8002660:	2800      	cmp	r0, #0
 8002662:	bfab      	itete	ge
 8002664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002666:	89a3      	ldrhlt	r3, [r4, #12]
 8002668:	181b      	addge	r3, r3, r0
 800266a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800266e:	bfac      	ite	ge
 8002670:	6563      	strge	r3, [r4, #84]	; 0x54
 8002672:	81a3      	strhlt	r3, [r4, #12]
 8002674:	bd10      	pop	{r4, pc}

08002676 <__swrite>:
 8002676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800267a:	461f      	mov	r7, r3
 800267c:	898b      	ldrh	r3, [r1, #12]
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	4605      	mov	r5, r0
 8002682:	460c      	mov	r4, r1
 8002684:	4616      	mov	r6, r2
 8002686:	d505      	bpl.n	8002694 <__swrite+0x1e>
 8002688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268c:	2302      	movs	r3, #2
 800268e:	2200      	movs	r2, #0
 8002690:	f000 f83c 	bl	800270c <_lseek_r>
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800269a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800269e:	81a3      	strh	r3, [r4, #12]
 80026a0:	4632      	mov	r2, r6
 80026a2:	463b      	mov	r3, r7
 80026a4:	4628      	mov	r0, r5
 80026a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026aa:	f000 b853 	b.w	8002754 <_write_r>

080026ae <__sseek>:
 80026ae:	b510      	push	{r4, lr}
 80026b0:	460c      	mov	r4, r1
 80026b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b6:	f000 f829 	bl	800270c <_lseek_r>
 80026ba:	1c43      	adds	r3, r0, #1
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	bf15      	itete	ne
 80026c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80026c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026ca:	81a3      	strheq	r3, [r4, #12]
 80026cc:	bf18      	it	ne
 80026ce:	81a3      	strhne	r3, [r4, #12]
 80026d0:	bd10      	pop	{r4, pc}

080026d2 <__sclose>:
 80026d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d6:	f000 b809 	b.w	80026ec <_close_r>

080026da <memset>:
 80026da:	4402      	add	r2, r0
 80026dc:	4603      	mov	r3, r0
 80026de:	4293      	cmp	r3, r2
 80026e0:	d100      	bne.n	80026e4 <memset+0xa>
 80026e2:	4770      	bx	lr
 80026e4:	f803 1b01 	strb.w	r1, [r3], #1
 80026e8:	e7f9      	b.n	80026de <memset+0x4>
	...

080026ec <_close_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4d06      	ldr	r5, [pc, #24]	; (8002708 <_close_r+0x1c>)
 80026f0:	2300      	movs	r3, #0
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	f7fe fbbe 	bl	8000e78 <_close>
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	d102      	bne.n	8002706 <_close_r+0x1a>
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	b103      	cbz	r3, 8002706 <_close_r+0x1a>
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	bd38      	pop	{r3, r4, r5, pc}
 8002708:	200002c4 	.word	0x200002c4

0800270c <_lseek_r>:
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4d07      	ldr	r5, [pc, #28]	; (800272c <_lseek_r+0x20>)
 8002710:	4604      	mov	r4, r0
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	2200      	movs	r2, #0
 8002718:	602a      	str	r2, [r5, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	f7fe fbb6 	bl	8000e8c <_lseek>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d102      	bne.n	800272a <_lseek_r+0x1e>
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	b103      	cbz	r3, 800272a <_lseek_r+0x1e>
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	200002c4 	.word	0x200002c4

08002730 <_read_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4d07      	ldr	r5, [pc, #28]	; (8002750 <_read_r+0x20>)
 8002734:	4604      	mov	r4, r0
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	2200      	movs	r2, #0
 800273c:	602a      	str	r2, [r5, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f7fe fb8a 	bl	8000e58 <_read>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_read_r+0x1e>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_read_r+0x1e>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	200002c4 	.word	0x200002c4

08002754 <_write_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4d07      	ldr	r5, [pc, #28]	; (8002774 <_write_r+0x20>)
 8002758:	4604      	mov	r4, r0
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	2200      	movs	r2, #0
 8002760:	602a      	str	r2, [r5, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	f7fd ff4c 	bl	8000600 <_write>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d102      	bne.n	8002772 <_write_r+0x1e>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <_write_r+0x1e>
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	200002c4 	.word	0x200002c4

08002778 <__errno>:
 8002778:	4b01      	ldr	r3, [pc, #4]	; (8002780 <__errno+0x8>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000068 	.word	0x20000068

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	4d0d      	ldr	r5, [pc, #52]	; (80027bc <__libc_init_array+0x38>)
 8002788:	4c0d      	ldr	r4, [pc, #52]	; (80027c0 <__libc_init_array+0x3c>)
 800278a:	1b64      	subs	r4, r4, r5
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	2600      	movs	r6, #0
 8002790:	42a6      	cmp	r6, r4
 8002792:	d109      	bne.n	80027a8 <__libc_init_array+0x24>
 8002794:	4d0b      	ldr	r5, [pc, #44]	; (80027c4 <__libc_init_array+0x40>)
 8002796:	4c0c      	ldr	r4, [pc, #48]	; (80027c8 <__libc_init_array+0x44>)
 8002798:	f000 fdf4 	bl	8003384 <_init>
 800279c:	1b64      	subs	r4, r4, r5
 800279e:	10a4      	asrs	r4, r4, #2
 80027a0:	2600      	movs	r6, #0
 80027a2:	42a6      	cmp	r6, r4
 80027a4:	d105      	bne.n	80027b2 <__libc_init_array+0x2e>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ac:	4798      	blx	r3
 80027ae:	3601      	adds	r6, #1
 80027b0:	e7ee      	b.n	8002790 <__libc_init_array+0xc>
 80027b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b6:	4798      	blx	r3
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7f2      	b.n	80027a2 <__libc_init_array+0x1e>
 80027bc:	08003658 	.word	0x08003658
 80027c0:	08003658 	.word	0x08003658
 80027c4:	08003658 	.word	0x08003658
 80027c8:	0800365c 	.word	0x0800365c

080027cc <__retarget_lock_init_recursive>:
 80027cc:	4770      	bx	lr

080027ce <__retarget_lock_acquire_recursive>:
 80027ce:	4770      	bx	lr

080027d0 <__retarget_lock_release_recursive>:
 80027d0:	4770      	bx	lr
	...

080027d4 <_free_r>:
 80027d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d044      	beq.n	8002864 <_free_r+0x90>
 80027da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027de:	9001      	str	r0, [sp, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f1a1 0404 	sub.w	r4, r1, #4
 80027e6:	bfb8      	it	lt
 80027e8:	18e4      	addlt	r4, r4, r3
 80027ea:	f000 f8df 	bl	80029ac <__malloc_lock>
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <_free_r+0x94>)
 80027f0:	9801      	ldr	r0, [sp, #4]
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	b933      	cbnz	r3, 8002804 <_free_r+0x30>
 80027f6:	6063      	str	r3, [r4, #4]
 80027f8:	6014      	str	r4, [r2, #0]
 80027fa:	b003      	add	sp, #12
 80027fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002800:	f000 b8da 	b.w	80029b8 <__malloc_unlock>
 8002804:	42a3      	cmp	r3, r4
 8002806:	d908      	bls.n	800281a <_free_r+0x46>
 8002808:	6825      	ldr	r5, [r4, #0]
 800280a:	1961      	adds	r1, r4, r5
 800280c:	428b      	cmp	r3, r1
 800280e:	bf01      	itttt	eq
 8002810:	6819      	ldreq	r1, [r3, #0]
 8002812:	685b      	ldreq	r3, [r3, #4]
 8002814:	1949      	addeq	r1, r1, r5
 8002816:	6021      	streq	r1, [r4, #0]
 8002818:	e7ed      	b.n	80027f6 <_free_r+0x22>
 800281a:	461a      	mov	r2, r3
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	b10b      	cbz	r3, 8002824 <_free_r+0x50>
 8002820:	42a3      	cmp	r3, r4
 8002822:	d9fa      	bls.n	800281a <_free_r+0x46>
 8002824:	6811      	ldr	r1, [r2, #0]
 8002826:	1855      	adds	r5, r2, r1
 8002828:	42a5      	cmp	r5, r4
 800282a:	d10b      	bne.n	8002844 <_free_r+0x70>
 800282c:	6824      	ldr	r4, [r4, #0]
 800282e:	4421      	add	r1, r4
 8002830:	1854      	adds	r4, r2, r1
 8002832:	42a3      	cmp	r3, r4
 8002834:	6011      	str	r1, [r2, #0]
 8002836:	d1e0      	bne.n	80027fa <_free_r+0x26>
 8002838:	681c      	ldr	r4, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	6053      	str	r3, [r2, #4]
 800283e:	440c      	add	r4, r1
 8002840:	6014      	str	r4, [r2, #0]
 8002842:	e7da      	b.n	80027fa <_free_r+0x26>
 8002844:	d902      	bls.n	800284c <_free_r+0x78>
 8002846:	230c      	movs	r3, #12
 8002848:	6003      	str	r3, [r0, #0]
 800284a:	e7d6      	b.n	80027fa <_free_r+0x26>
 800284c:	6825      	ldr	r5, [r4, #0]
 800284e:	1961      	adds	r1, r4, r5
 8002850:	428b      	cmp	r3, r1
 8002852:	bf04      	itt	eq
 8002854:	6819      	ldreq	r1, [r3, #0]
 8002856:	685b      	ldreq	r3, [r3, #4]
 8002858:	6063      	str	r3, [r4, #4]
 800285a:	bf04      	itt	eq
 800285c:	1949      	addeq	r1, r1, r5
 800285e:	6021      	streq	r1, [r4, #0]
 8002860:	6054      	str	r4, [r2, #4]
 8002862:	e7ca      	b.n	80027fa <_free_r+0x26>
 8002864:	b003      	add	sp, #12
 8002866:	bd30      	pop	{r4, r5, pc}
 8002868:	200002cc 	.word	0x200002cc

0800286c <sbrk_aligned>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4e0e      	ldr	r6, [pc, #56]	; (80028a8 <sbrk_aligned+0x3c>)
 8002870:	460c      	mov	r4, r1
 8002872:	6831      	ldr	r1, [r6, #0]
 8002874:	4605      	mov	r5, r0
 8002876:	b911      	cbnz	r1, 800287e <sbrk_aligned+0x12>
 8002878:	f000 fcf0 	bl	800325c <_sbrk_r>
 800287c:	6030      	str	r0, [r6, #0]
 800287e:	4621      	mov	r1, r4
 8002880:	4628      	mov	r0, r5
 8002882:	f000 fceb 	bl	800325c <_sbrk_r>
 8002886:	1c43      	adds	r3, r0, #1
 8002888:	d00a      	beq.n	80028a0 <sbrk_aligned+0x34>
 800288a:	1cc4      	adds	r4, r0, #3
 800288c:	f024 0403 	bic.w	r4, r4, #3
 8002890:	42a0      	cmp	r0, r4
 8002892:	d007      	beq.n	80028a4 <sbrk_aligned+0x38>
 8002894:	1a21      	subs	r1, r4, r0
 8002896:	4628      	mov	r0, r5
 8002898:	f000 fce0 	bl	800325c <_sbrk_r>
 800289c:	3001      	adds	r0, #1
 800289e:	d101      	bne.n	80028a4 <sbrk_aligned+0x38>
 80028a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80028a4:	4620      	mov	r0, r4
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	200002d0 	.word	0x200002d0

080028ac <_malloc_r>:
 80028ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b0:	1ccd      	adds	r5, r1, #3
 80028b2:	f025 0503 	bic.w	r5, r5, #3
 80028b6:	3508      	adds	r5, #8
 80028b8:	2d0c      	cmp	r5, #12
 80028ba:	bf38      	it	cc
 80028bc:	250c      	movcc	r5, #12
 80028be:	2d00      	cmp	r5, #0
 80028c0:	4607      	mov	r7, r0
 80028c2:	db01      	blt.n	80028c8 <_malloc_r+0x1c>
 80028c4:	42a9      	cmp	r1, r5
 80028c6:	d905      	bls.n	80028d4 <_malloc_r+0x28>
 80028c8:	230c      	movs	r3, #12
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	2600      	movs	r6, #0
 80028ce:	4630      	mov	r0, r6
 80028d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029a8 <_malloc_r+0xfc>
 80028d8:	f000 f868 	bl	80029ac <__malloc_lock>
 80028dc:	f8d8 3000 	ldr.w	r3, [r8]
 80028e0:	461c      	mov	r4, r3
 80028e2:	bb5c      	cbnz	r4, 800293c <_malloc_r+0x90>
 80028e4:	4629      	mov	r1, r5
 80028e6:	4638      	mov	r0, r7
 80028e8:	f7ff ffc0 	bl	800286c <sbrk_aligned>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	4604      	mov	r4, r0
 80028f0:	d155      	bne.n	800299e <_malloc_r+0xf2>
 80028f2:	f8d8 4000 	ldr.w	r4, [r8]
 80028f6:	4626      	mov	r6, r4
 80028f8:	2e00      	cmp	r6, #0
 80028fa:	d145      	bne.n	8002988 <_malloc_r+0xdc>
 80028fc:	2c00      	cmp	r4, #0
 80028fe:	d048      	beq.n	8002992 <_malloc_r+0xe6>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	4631      	mov	r1, r6
 8002904:	4638      	mov	r0, r7
 8002906:	eb04 0903 	add.w	r9, r4, r3
 800290a:	f000 fca7 	bl	800325c <_sbrk_r>
 800290e:	4581      	cmp	r9, r0
 8002910:	d13f      	bne.n	8002992 <_malloc_r+0xe6>
 8002912:	6821      	ldr	r1, [r4, #0]
 8002914:	1a6d      	subs	r5, r5, r1
 8002916:	4629      	mov	r1, r5
 8002918:	4638      	mov	r0, r7
 800291a:	f7ff ffa7 	bl	800286c <sbrk_aligned>
 800291e:	3001      	adds	r0, #1
 8002920:	d037      	beq.n	8002992 <_malloc_r+0xe6>
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	442b      	add	r3, r5
 8002926:	6023      	str	r3, [r4, #0]
 8002928:	f8d8 3000 	ldr.w	r3, [r8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d038      	beq.n	80029a2 <_malloc_r+0xf6>
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	42a2      	cmp	r2, r4
 8002934:	d12b      	bne.n	800298e <_malloc_r+0xe2>
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e00f      	b.n	800295c <_malloc_r+0xb0>
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	1b52      	subs	r2, r2, r5
 8002940:	d41f      	bmi.n	8002982 <_malloc_r+0xd6>
 8002942:	2a0b      	cmp	r2, #11
 8002944:	d917      	bls.n	8002976 <_malloc_r+0xca>
 8002946:	1961      	adds	r1, r4, r5
 8002948:	42a3      	cmp	r3, r4
 800294a:	6025      	str	r5, [r4, #0]
 800294c:	bf18      	it	ne
 800294e:	6059      	strne	r1, [r3, #4]
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	bf08      	it	eq
 8002954:	f8c8 1000 	streq.w	r1, [r8]
 8002958:	5162      	str	r2, [r4, r5]
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	4638      	mov	r0, r7
 800295e:	f104 060b 	add.w	r6, r4, #11
 8002962:	f000 f829 	bl	80029b8 <__malloc_unlock>
 8002966:	f026 0607 	bic.w	r6, r6, #7
 800296a:	1d23      	adds	r3, r4, #4
 800296c:	1af2      	subs	r2, r6, r3
 800296e:	d0ae      	beq.n	80028ce <_malloc_r+0x22>
 8002970:	1b9b      	subs	r3, r3, r6
 8002972:	50a3      	str	r3, [r4, r2]
 8002974:	e7ab      	b.n	80028ce <_malloc_r+0x22>
 8002976:	42a3      	cmp	r3, r4
 8002978:	6862      	ldr	r2, [r4, #4]
 800297a:	d1dd      	bne.n	8002938 <_malloc_r+0x8c>
 800297c:	f8c8 2000 	str.w	r2, [r8]
 8002980:	e7ec      	b.n	800295c <_malloc_r+0xb0>
 8002982:	4623      	mov	r3, r4
 8002984:	6864      	ldr	r4, [r4, #4]
 8002986:	e7ac      	b.n	80028e2 <_malloc_r+0x36>
 8002988:	4634      	mov	r4, r6
 800298a:	6876      	ldr	r6, [r6, #4]
 800298c:	e7b4      	b.n	80028f8 <_malloc_r+0x4c>
 800298e:	4613      	mov	r3, r2
 8002990:	e7cc      	b.n	800292c <_malloc_r+0x80>
 8002992:	230c      	movs	r3, #12
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4638      	mov	r0, r7
 8002998:	f000 f80e 	bl	80029b8 <__malloc_unlock>
 800299c:	e797      	b.n	80028ce <_malloc_r+0x22>
 800299e:	6025      	str	r5, [r4, #0]
 80029a0:	e7dc      	b.n	800295c <_malloc_r+0xb0>
 80029a2:	605b      	str	r3, [r3, #4]
 80029a4:	deff      	udf	#255	; 0xff
 80029a6:	bf00      	nop
 80029a8:	200002cc 	.word	0x200002cc

080029ac <__malloc_lock>:
 80029ac:	4801      	ldr	r0, [pc, #4]	; (80029b4 <__malloc_lock+0x8>)
 80029ae:	f7ff bf0e 	b.w	80027ce <__retarget_lock_acquire_recursive>
 80029b2:	bf00      	nop
 80029b4:	200002c8 	.word	0x200002c8

080029b8 <__malloc_unlock>:
 80029b8:	4801      	ldr	r0, [pc, #4]	; (80029c0 <__malloc_unlock+0x8>)
 80029ba:	f7ff bf09 	b.w	80027d0 <__retarget_lock_release_recursive>
 80029be:	bf00      	nop
 80029c0:	200002c8 	.word	0x200002c8

080029c4 <__sfputc_r>:
 80029c4:	6893      	ldr	r3, [r2, #8]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	b410      	push	{r4}
 80029cc:	6093      	str	r3, [r2, #8]
 80029ce:	da08      	bge.n	80029e2 <__sfputc_r+0x1e>
 80029d0:	6994      	ldr	r4, [r2, #24]
 80029d2:	42a3      	cmp	r3, r4
 80029d4:	db01      	blt.n	80029da <__sfputc_r+0x16>
 80029d6:	290a      	cmp	r1, #10
 80029d8:	d103      	bne.n	80029e2 <__sfputc_r+0x1e>
 80029da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029de:	f000 bba7 	b.w	8003130 <__swbuf_r>
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	1c58      	adds	r0, r3, #1
 80029e6:	6010      	str	r0, [r2, #0]
 80029e8:	7019      	strb	r1, [r3, #0]
 80029ea:	4608      	mov	r0, r1
 80029ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <__sfputs_r>:
 80029f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f4:	4606      	mov	r6, r0
 80029f6:	460f      	mov	r7, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	18d5      	adds	r5, r2, r3
 80029fc:	42ac      	cmp	r4, r5
 80029fe:	d101      	bne.n	8002a04 <__sfputs_r+0x12>
 8002a00:	2000      	movs	r0, #0
 8002a02:	e007      	b.n	8002a14 <__sfputs_r+0x22>
 8002a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a08:	463a      	mov	r2, r7
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f7ff ffda 	bl	80029c4 <__sfputc_r>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d1f3      	bne.n	80029fc <__sfputs_r+0xa>
 8002a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a18 <_vfiprintf_r>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	b09d      	sub	sp, #116	; 0x74
 8002a20:	4614      	mov	r4, r2
 8002a22:	4698      	mov	r8, r3
 8002a24:	4606      	mov	r6, r0
 8002a26:	b118      	cbz	r0, 8002a30 <_vfiprintf_r+0x18>
 8002a28:	6a03      	ldr	r3, [r0, #32]
 8002a2a:	b90b      	cbnz	r3, 8002a30 <_vfiprintf_r+0x18>
 8002a2c:	f7ff fdc2 	bl	80025b4 <__sinit>
 8002a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a32:	07d9      	lsls	r1, r3, #31
 8002a34:	d405      	bmi.n	8002a42 <_vfiprintf_r+0x2a>
 8002a36:	89ab      	ldrh	r3, [r5, #12]
 8002a38:	059a      	lsls	r2, r3, #22
 8002a3a:	d402      	bmi.n	8002a42 <_vfiprintf_r+0x2a>
 8002a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a3e:	f7ff fec6 	bl	80027ce <__retarget_lock_acquire_recursive>
 8002a42:	89ab      	ldrh	r3, [r5, #12]
 8002a44:	071b      	lsls	r3, r3, #28
 8002a46:	d501      	bpl.n	8002a4c <_vfiprintf_r+0x34>
 8002a48:	692b      	ldr	r3, [r5, #16]
 8002a4a:	b99b      	cbnz	r3, 8002a74 <_vfiprintf_r+0x5c>
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f000 fbac 	bl	80031ac <__swsetup_r>
 8002a54:	b170      	cbz	r0, 8002a74 <_vfiprintf_r+0x5c>
 8002a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a58:	07dc      	lsls	r4, r3, #31
 8002a5a:	d504      	bpl.n	8002a66 <_vfiprintf_r+0x4e>
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a60:	b01d      	add	sp, #116	; 0x74
 8002a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	0598      	lsls	r0, r3, #22
 8002a6a:	d4f7      	bmi.n	8002a5c <_vfiprintf_r+0x44>
 8002a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a6e:	f7ff feaf 	bl	80027d0 <__retarget_lock_release_recursive>
 8002a72:	e7f3      	b.n	8002a5c <_vfiprintf_r+0x44>
 8002a74:	2300      	movs	r3, #0
 8002a76:	9309      	str	r3, [sp, #36]	; 0x24
 8002a78:	2320      	movs	r3, #32
 8002a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a82:	2330      	movs	r3, #48	; 0x30
 8002a84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002c38 <_vfiprintf_r+0x220>
 8002a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a8c:	f04f 0901 	mov.w	r9, #1
 8002a90:	4623      	mov	r3, r4
 8002a92:	469a      	mov	sl, r3
 8002a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a98:	b10a      	cbz	r2, 8002a9e <_vfiprintf_r+0x86>
 8002a9a:	2a25      	cmp	r2, #37	; 0x25
 8002a9c:	d1f9      	bne.n	8002a92 <_vfiprintf_r+0x7a>
 8002a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa2:	d00b      	beq.n	8002abc <_vfiprintf_r+0xa4>
 8002aa4:	465b      	mov	r3, fp
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4630      	mov	r0, r6
 8002aac:	f7ff ffa1 	bl	80029f2 <__sfputs_r>
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	f000 80a9 	beq.w	8002c08 <_vfiprintf_r+0x1f0>
 8002ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ab8:	445a      	add	r2, fp
 8002aba:	9209      	str	r2, [sp, #36]	; 0x24
 8002abc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a1 	beq.w	8002c08 <_vfiprintf_r+0x1f0>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad0:	f10a 0a01 	add.w	sl, sl, #1
 8002ad4:	9304      	str	r3, [sp, #16]
 8002ad6:	9307      	str	r3, [sp, #28]
 8002ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002adc:	931a      	str	r3, [sp, #104]	; 0x68
 8002ade:	4654      	mov	r4, sl
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae6:	4854      	ldr	r0, [pc, #336]	; (8002c38 <_vfiprintf_r+0x220>)
 8002ae8:	f7fd fb72 	bl	80001d0 <memchr>
 8002aec:	9a04      	ldr	r2, [sp, #16]
 8002aee:	b9d8      	cbnz	r0, 8002b28 <_vfiprintf_r+0x110>
 8002af0:	06d1      	lsls	r1, r2, #27
 8002af2:	bf44      	itt	mi
 8002af4:	2320      	movmi	r3, #32
 8002af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afa:	0713      	lsls	r3, r2, #28
 8002afc:	bf44      	itt	mi
 8002afe:	232b      	movmi	r3, #43	; 0x2b
 8002b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b04:	f89a 3000 	ldrb.w	r3, [sl]
 8002b08:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0a:	d015      	beq.n	8002b38 <_vfiprintf_r+0x120>
 8002b0c:	9a07      	ldr	r2, [sp, #28]
 8002b0e:	4654      	mov	r4, sl
 8002b10:	2000      	movs	r0, #0
 8002b12:	f04f 0c0a 	mov.w	ip, #10
 8002b16:	4621      	mov	r1, r4
 8002b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b1c:	3b30      	subs	r3, #48	; 0x30
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	d94d      	bls.n	8002bbe <_vfiprintf_r+0x1a6>
 8002b22:	b1b0      	cbz	r0, 8002b52 <_vfiprintf_r+0x13a>
 8002b24:	9207      	str	r2, [sp, #28]
 8002b26:	e014      	b.n	8002b52 <_vfiprintf_r+0x13a>
 8002b28:	eba0 0308 	sub.w	r3, r0, r8
 8002b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8002b30:	4313      	orrs	r3, r2
 8002b32:	9304      	str	r3, [sp, #16]
 8002b34:	46a2      	mov	sl, r4
 8002b36:	e7d2      	b.n	8002ade <_vfiprintf_r+0xc6>
 8002b38:	9b03      	ldr	r3, [sp, #12]
 8002b3a:	1d19      	adds	r1, r3, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	9103      	str	r1, [sp, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bfbb      	ittet	lt
 8002b44:	425b      	neglt	r3, r3
 8002b46:	f042 0202 	orrlt.w	r2, r2, #2
 8002b4a:	9307      	strge	r3, [sp, #28]
 8002b4c:	9307      	strlt	r3, [sp, #28]
 8002b4e:	bfb8      	it	lt
 8002b50:	9204      	strlt	r2, [sp, #16]
 8002b52:	7823      	ldrb	r3, [r4, #0]
 8002b54:	2b2e      	cmp	r3, #46	; 0x2e
 8002b56:	d10c      	bne.n	8002b72 <_vfiprintf_r+0x15a>
 8002b58:	7863      	ldrb	r3, [r4, #1]
 8002b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5c:	d134      	bne.n	8002bc8 <_vfiprintf_r+0x1b0>
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	1d1a      	adds	r2, r3, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	9203      	str	r2, [sp, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bfb8      	it	lt
 8002b6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b6e:	3402      	adds	r4, #2
 8002b70:	9305      	str	r3, [sp, #20]
 8002b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002c48 <_vfiprintf_r+0x230>
 8002b76:	7821      	ldrb	r1, [r4, #0]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	f7fd fb28 	bl	80001d0 <memchr>
 8002b80:	b138      	cbz	r0, 8002b92 <_vfiprintf_r+0x17a>
 8002b82:	9b04      	ldr	r3, [sp, #16]
 8002b84:	eba0 000a 	sub.w	r0, r0, sl
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	4082      	lsls	r2, r0
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	3401      	adds	r4, #1
 8002b90:	9304      	str	r3, [sp, #16]
 8002b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b96:	4829      	ldr	r0, [pc, #164]	; (8002c3c <_vfiprintf_r+0x224>)
 8002b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b9c:	2206      	movs	r2, #6
 8002b9e:	f7fd fb17 	bl	80001d0 <memchr>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d03f      	beq.n	8002c26 <_vfiprintf_r+0x20e>
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <_vfiprintf_r+0x228>)
 8002ba8:	bb1b      	cbnz	r3, 8002bf2 <_vfiprintf_r+0x1da>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	9303      	str	r3, [sp, #12]
 8002bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb8:	443b      	add	r3, r7
 8002bba:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbc:	e768      	b.n	8002a90 <_vfiprintf_r+0x78>
 8002bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7a6      	b.n	8002b16 <_vfiprintf_r+0xfe>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	3401      	adds	r4, #1
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f04f 0c0a 	mov.w	ip, #10
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bda:	3a30      	subs	r2, #48	; 0x30
 8002bdc:	2a09      	cmp	r2, #9
 8002bde:	d903      	bls.n	8002be8 <_vfiprintf_r+0x1d0>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0c6      	beq.n	8002b72 <_vfiprintf_r+0x15a>
 8002be4:	9105      	str	r1, [sp, #20]
 8002be6:	e7c4      	b.n	8002b72 <_vfiprintf_r+0x15a>
 8002be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bec:	4604      	mov	r4, r0
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e7f0      	b.n	8002bd4 <_vfiprintf_r+0x1bc>
 8002bf2:	ab03      	add	r3, sp, #12
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <_vfiprintf_r+0x22c>)
 8002bfa:	a904      	add	r1, sp, #16
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f3af 8000 	nop.w
 8002c02:	4607      	mov	r7, r0
 8002c04:	1c78      	adds	r0, r7, #1
 8002c06:	d1d6      	bne.n	8002bb6 <_vfiprintf_r+0x19e>
 8002c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c0a:	07d9      	lsls	r1, r3, #31
 8002c0c:	d405      	bmi.n	8002c1a <_vfiprintf_r+0x202>
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	059a      	lsls	r2, r3, #22
 8002c12:	d402      	bmi.n	8002c1a <_vfiprintf_r+0x202>
 8002c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c16:	f7ff fddb 	bl	80027d0 <__retarget_lock_release_recursive>
 8002c1a:	89ab      	ldrh	r3, [r5, #12]
 8002c1c:	065b      	lsls	r3, r3, #25
 8002c1e:	f53f af1d 	bmi.w	8002a5c <_vfiprintf_r+0x44>
 8002c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c24:	e71c      	b.n	8002a60 <_vfiprintf_r+0x48>
 8002c26:	ab03      	add	r3, sp, #12
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	462a      	mov	r2, r5
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <_vfiprintf_r+0x22c>)
 8002c2e:	a904      	add	r1, sp, #16
 8002c30:	4630      	mov	r0, r6
 8002c32:	f000 f879 	bl	8002d28 <_printf_i>
 8002c36:	e7e4      	b.n	8002c02 <_vfiprintf_r+0x1ea>
 8002c38:	0800361c 	.word	0x0800361c
 8002c3c:	08003626 	.word	0x08003626
 8002c40:	00000000 	.word	0x00000000
 8002c44:	080029f3 	.word	0x080029f3
 8002c48:	08003622 	.word	0x08003622

08002c4c <_printf_common>:
 8002c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c50:	4616      	mov	r6, r2
 8002c52:	4699      	mov	r9, r3
 8002c54:	688a      	ldr	r2, [r1, #8]
 8002c56:	690b      	ldr	r3, [r1, #16]
 8002c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bfb8      	it	lt
 8002c60:	4613      	movlt	r3, r2
 8002c62:	6033      	str	r3, [r6, #0]
 8002c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c68:	4607      	mov	r7, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	b10a      	cbz	r2, 8002c72 <_printf_common+0x26>
 8002c6e:	3301      	adds	r3, #1
 8002c70:	6033      	str	r3, [r6, #0]
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	0699      	lsls	r1, r3, #26
 8002c76:	bf42      	ittt	mi
 8002c78:	6833      	ldrmi	r3, [r6, #0]
 8002c7a:	3302      	addmi	r3, #2
 8002c7c:	6033      	strmi	r3, [r6, #0]
 8002c7e:	6825      	ldr	r5, [r4, #0]
 8002c80:	f015 0506 	ands.w	r5, r5, #6
 8002c84:	d106      	bne.n	8002c94 <_printf_common+0x48>
 8002c86:	f104 0a19 	add.w	sl, r4, #25
 8002c8a:	68e3      	ldr	r3, [r4, #12]
 8002c8c:	6832      	ldr	r2, [r6, #0]
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	42ab      	cmp	r3, r5
 8002c92:	dc26      	bgt.n	8002ce2 <_printf_common+0x96>
 8002c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c98:	1e13      	subs	r3, r2, #0
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	bf18      	it	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	0692      	lsls	r2, r2, #26
 8002ca2:	d42b      	bmi.n	8002cfc <_printf_common+0xb0>
 8002ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ca8:	4649      	mov	r1, r9
 8002caa:	4638      	mov	r0, r7
 8002cac:	47c0      	blx	r8
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d01e      	beq.n	8002cf0 <_printf_common+0xa4>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	6922      	ldr	r2, [r4, #16]
 8002cb6:	f003 0306 	and.w	r3, r3, #6
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf02      	ittt	eq
 8002cbe:	68e5      	ldreq	r5, [r4, #12]
 8002cc0:	6833      	ldreq	r3, [r6, #0]
 8002cc2:	1aed      	subeq	r5, r5, r3
 8002cc4:	68a3      	ldr	r3, [r4, #8]
 8002cc6:	bf0c      	ite	eq
 8002cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ccc:	2500      	movne	r5, #0
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	bfc4      	itt	gt
 8002cd2:	1a9b      	subgt	r3, r3, r2
 8002cd4:	18ed      	addgt	r5, r5, r3
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	341a      	adds	r4, #26
 8002cda:	42b5      	cmp	r5, r6
 8002cdc:	d11a      	bne.n	8002d14 <_printf_common+0xc8>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e008      	b.n	8002cf4 <_printf_common+0xa8>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4652      	mov	r2, sl
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4638      	mov	r0, r7
 8002cea:	47c0      	blx	r8
 8002cec:	3001      	adds	r0, #1
 8002cee:	d103      	bne.n	8002cf8 <_printf_common+0xac>
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf8:	3501      	adds	r5, #1
 8002cfa:	e7c6      	b.n	8002c8a <_printf_common+0x3e>
 8002cfc:	18e1      	adds	r1, r4, r3
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	2030      	movs	r0, #48	; 0x30
 8002d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d06:	4422      	add	r2, r4
 8002d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d10:	3302      	adds	r3, #2
 8002d12:	e7c7      	b.n	8002ca4 <_printf_common+0x58>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4622      	mov	r2, r4
 8002d18:	4649      	mov	r1, r9
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	47c0      	blx	r8
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d0e6      	beq.n	8002cf0 <_printf_common+0xa4>
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7d9      	b.n	8002cda <_printf_common+0x8e>
	...

08002d28 <_printf_i>:
 8002d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d2c:	7e0f      	ldrb	r7, [r1, #24]
 8002d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d30:	2f78      	cmp	r7, #120	; 0x78
 8002d32:	4691      	mov	r9, r2
 8002d34:	4680      	mov	r8, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	469a      	mov	sl, r3
 8002d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d3e:	d807      	bhi.n	8002d50 <_printf_i+0x28>
 8002d40:	2f62      	cmp	r7, #98	; 0x62
 8002d42:	d80a      	bhi.n	8002d5a <_printf_i+0x32>
 8002d44:	2f00      	cmp	r7, #0
 8002d46:	f000 80d4 	beq.w	8002ef2 <_printf_i+0x1ca>
 8002d4a:	2f58      	cmp	r7, #88	; 0x58
 8002d4c:	f000 80c0 	beq.w	8002ed0 <_printf_i+0x1a8>
 8002d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d58:	e03a      	b.n	8002dd0 <_printf_i+0xa8>
 8002d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d5e:	2b15      	cmp	r3, #21
 8002d60:	d8f6      	bhi.n	8002d50 <_printf_i+0x28>
 8002d62:	a101      	add	r1, pc, #4	; (adr r1, 8002d68 <_printf_i+0x40>)
 8002d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d68:	08002dc1 	.word	0x08002dc1
 8002d6c:	08002dd5 	.word	0x08002dd5
 8002d70:	08002d51 	.word	0x08002d51
 8002d74:	08002d51 	.word	0x08002d51
 8002d78:	08002d51 	.word	0x08002d51
 8002d7c:	08002d51 	.word	0x08002d51
 8002d80:	08002dd5 	.word	0x08002dd5
 8002d84:	08002d51 	.word	0x08002d51
 8002d88:	08002d51 	.word	0x08002d51
 8002d8c:	08002d51 	.word	0x08002d51
 8002d90:	08002d51 	.word	0x08002d51
 8002d94:	08002ed9 	.word	0x08002ed9
 8002d98:	08002e01 	.word	0x08002e01
 8002d9c:	08002e93 	.word	0x08002e93
 8002da0:	08002d51 	.word	0x08002d51
 8002da4:	08002d51 	.word	0x08002d51
 8002da8:	08002efb 	.word	0x08002efb
 8002dac:	08002d51 	.word	0x08002d51
 8002db0:	08002e01 	.word	0x08002e01
 8002db4:	08002d51 	.word	0x08002d51
 8002db8:	08002d51 	.word	0x08002d51
 8002dbc:	08002e9b 	.word	0x08002e9b
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	602a      	str	r2, [r5, #0]
 8002dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e09f      	b.n	8002f14 <_printf_i+0x1ec>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	682b      	ldr	r3, [r5, #0]
 8002dd8:	0607      	lsls	r7, r0, #24
 8002dda:	f103 0104 	add.w	r1, r3, #4
 8002dde:	6029      	str	r1, [r5, #0]
 8002de0:	d501      	bpl.n	8002de6 <_printf_i+0xbe>
 8002de2:	681e      	ldr	r6, [r3, #0]
 8002de4:	e003      	b.n	8002dee <_printf_i+0xc6>
 8002de6:	0646      	lsls	r6, r0, #25
 8002de8:	d5fb      	bpl.n	8002de2 <_printf_i+0xba>
 8002dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dee:	2e00      	cmp	r6, #0
 8002df0:	da03      	bge.n	8002dfa <_printf_i+0xd2>
 8002df2:	232d      	movs	r3, #45	; 0x2d
 8002df4:	4276      	negs	r6, r6
 8002df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dfa:	485a      	ldr	r0, [pc, #360]	; (8002f64 <_printf_i+0x23c>)
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	e012      	b.n	8002e26 <_printf_i+0xfe>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	1d19      	adds	r1, r3, #4
 8002e06:	6029      	str	r1, [r5, #0]
 8002e08:	0605      	lsls	r5, r0, #24
 8002e0a:	d501      	bpl.n	8002e10 <_printf_i+0xe8>
 8002e0c:	681e      	ldr	r6, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <_printf_i+0xee>
 8002e10:	0641      	lsls	r1, r0, #25
 8002e12:	d5fb      	bpl.n	8002e0c <_printf_i+0xe4>
 8002e14:	881e      	ldrh	r6, [r3, #0]
 8002e16:	4853      	ldr	r0, [pc, #332]	; (8002f64 <_printf_i+0x23c>)
 8002e18:	2f6f      	cmp	r7, #111	; 0x6f
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2308      	moveq	r3, #8
 8002e1e:	230a      	movne	r3, #10
 8002e20:	2100      	movs	r1, #0
 8002e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e26:	6865      	ldr	r5, [r4, #4]
 8002e28:	60a5      	str	r5, [r4, #8]
 8002e2a:	2d00      	cmp	r5, #0
 8002e2c:	bfa2      	ittt	ge
 8002e2e:	6821      	ldrge	r1, [r4, #0]
 8002e30:	f021 0104 	bicge.w	r1, r1, #4
 8002e34:	6021      	strge	r1, [r4, #0]
 8002e36:	b90e      	cbnz	r6, 8002e3c <_printf_i+0x114>
 8002e38:	2d00      	cmp	r5, #0
 8002e3a:	d04b      	beq.n	8002ed4 <_printf_i+0x1ac>
 8002e3c:	4615      	mov	r5, r2
 8002e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e42:	fb03 6711 	mls	r7, r3, r1, r6
 8002e46:	5dc7      	ldrb	r7, [r0, r7]
 8002e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e4c:	4637      	mov	r7, r6
 8002e4e:	42bb      	cmp	r3, r7
 8002e50:	460e      	mov	r6, r1
 8002e52:	d9f4      	bls.n	8002e3e <_printf_i+0x116>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d10b      	bne.n	8002e70 <_printf_i+0x148>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	07de      	lsls	r6, r3, #31
 8002e5c:	d508      	bpl.n	8002e70 <_printf_i+0x148>
 8002e5e:	6923      	ldr	r3, [r4, #16]
 8002e60:	6861      	ldr	r1, [r4, #4]
 8002e62:	4299      	cmp	r1, r3
 8002e64:	bfde      	ittt	le
 8002e66:	2330      	movle	r3, #48	; 0x30
 8002e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e70:	1b52      	subs	r2, r2, r5
 8002e72:	6122      	str	r2, [r4, #16]
 8002e74:	f8cd a000 	str.w	sl, [sp]
 8002e78:	464b      	mov	r3, r9
 8002e7a:	aa03      	add	r2, sp, #12
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	4640      	mov	r0, r8
 8002e80:	f7ff fee4 	bl	8002c4c <_printf_common>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d14a      	bne.n	8002f1e <_printf_i+0x1f6>
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8c:	b004      	add	sp, #16
 8002e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	4833      	ldr	r0, [pc, #204]	; (8002f68 <_printf_i+0x240>)
 8002e9c:	2778      	movs	r7, #120	; 0x78
 8002e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	6829      	ldr	r1, [r5, #0]
 8002ea6:	061f      	lsls	r7, r3, #24
 8002ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eac:	d402      	bmi.n	8002eb4 <_printf_i+0x18c>
 8002eae:	065f      	lsls	r7, r3, #25
 8002eb0:	bf48      	it	mi
 8002eb2:	b2b6      	uxthmi	r6, r6
 8002eb4:	07df      	lsls	r7, r3, #31
 8002eb6:	bf48      	it	mi
 8002eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ebc:	6029      	str	r1, [r5, #0]
 8002ebe:	bf48      	it	mi
 8002ec0:	6023      	strmi	r3, [r4, #0]
 8002ec2:	b91e      	cbnz	r6, 8002ecc <_printf_i+0x1a4>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	f023 0320 	bic.w	r3, r3, #32
 8002eca:	6023      	str	r3, [r4, #0]
 8002ecc:	2310      	movs	r3, #16
 8002ece:	e7a7      	b.n	8002e20 <_printf_i+0xf8>
 8002ed0:	4824      	ldr	r0, [pc, #144]	; (8002f64 <_printf_i+0x23c>)
 8002ed2:	e7e4      	b.n	8002e9e <_printf_i+0x176>
 8002ed4:	4615      	mov	r5, r2
 8002ed6:	e7bd      	b.n	8002e54 <_printf_i+0x12c>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	6826      	ldr	r6, [r4, #0]
 8002edc:	6961      	ldr	r1, [r4, #20]
 8002ede:	1d18      	adds	r0, r3, #4
 8002ee0:	6028      	str	r0, [r5, #0]
 8002ee2:	0635      	lsls	r5, r6, #24
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	d501      	bpl.n	8002eec <_printf_i+0x1c4>
 8002ee8:	6019      	str	r1, [r3, #0]
 8002eea:	e002      	b.n	8002ef2 <_printf_i+0x1ca>
 8002eec:	0670      	lsls	r0, r6, #25
 8002eee:	d5fb      	bpl.n	8002ee8 <_printf_i+0x1c0>
 8002ef0:	8019      	strh	r1, [r3, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6123      	str	r3, [r4, #16]
 8002ef6:	4615      	mov	r5, r2
 8002ef8:	e7bc      	b.n	8002e74 <_printf_i+0x14c>
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	602a      	str	r2, [r5, #0]
 8002f00:	681d      	ldr	r5, [r3, #0]
 8002f02:	6862      	ldr	r2, [r4, #4]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7fd f962 	bl	80001d0 <memchr>
 8002f0c:	b108      	cbz	r0, 8002f12 <_printf_i+0x1ea>
 8002f0e:	1b40      	subs	r0, r0, r5
 8002f10:	6060      	str	r0, [r4, #4]
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	6123      	str	r3, [r4, #16]
 8002f16:	2300      	movs	r3, #0
 8002f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f1c:	e7aa      	b.n	8002e74 <_printf_i+0x14c>
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	462a      	mov	r2, r5
 8002f22:	4649      	mov	r1, r9
 8002f24:	4640      	mov	r0, r8
 8002f26:	47d0      	blx	sl
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d0ad      	beq.n	8002e88 <_printf_i+0x160>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	079b      	lsls	r3, r3, #30
 8002f30:	d413      	bmi.n	8002f5a <_printf_i+0x232>
 8002f32:	68e0      	ldr	r0, [r4, #12]
 8002f34:	9b03      	ldr	r3, [sp, #12]
 8002f36:	4298      	cmp	r0, r3
 8002f38:	bfb8      	it	lt
 8002f3a:	4618      	movlt	r0, r3
 8002f3c:	e7a6      	b.n	8002e8c <_printf_i+0x164>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4632      	mov	r2, r6
 8002f42:	4649      	mov	r1, r9
 8002f44:	4640      	mov	r0, r8
 8002f46:	47d0      	blx	sl
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d09d      	beq.n	8002e88 <_printf_i+0x160>
 8002f4c:	3501      	adds	r5, #1
 8002f4e:	68e3      	ldr	r3, [r4, #12]
 8002f50:	9903      	ldr	r1, [sp, #12]
 8002f52:	1a5b      	subs	r3, r3, r1
 8002f54:	42ab      	cmp	r3, r5
 8002f56:	dcf2      	bgt.n	8002f3e <_printf_i+0x216>
 8002f58:	e7eb      	b.n	8002f32 <_printf_i+0x20a>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	f104 0619 	add.w	r6, r4, #25
 8002f60:	e7f5      	b.n	8002f4e <_printf_i+0x226>
 8002f62:	bf00      	nop
 8002f64:	0800362d 	.word	0x0800362d
 8002f68:	0800363e 	.word	0x0800363e

08002f6c <__sflush_r>:
 8002f6c:	898a      	ldrh	r2, [r1, #12]
 8002f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f72:	4605      	mov	r5, r0
 8002f74:	0710      	lsls	r0, r2, #28
 8002f76:	460c      	mov	r4, r1
 8002f78:	d458      	bmi.n	800302c <__sflush_r+0xc0>
 8002f7a:	684b      	ldr	r3, [r1, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc05      	bgt.n	8002f8c <__sflush_r+0x20>
 8002f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc02      	bgt.n	8002f8c <__sflush_r+0x20>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f8e:	2e00      	cmp	r6, #0
 8002f90:	d0f9      	beq.n	8002f86 <__sflush_r+0x1a>
 8002f92:	2300      	movs	r3, #0
 8002f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f98:	682f      	ldr	r7, [r5, #0]
 8002f9a:	6a21      	ldr	r1, [r4, #32]
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	d032      	beq.n	8003006 <__sflush_r+0x9a>
 8002fa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	075a      	lsls	r2, r3, #29
 8002fa6:	d505      	bpl.n	8002fb4 <__sflush_r+0x48>
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	1ac0      	subs	r0, r0, r3
 8002fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fae:	b10b      	cbz	r3, 8002fb4 <__sflush_r+0x48>
 8002fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fb2:	1ac0      	subs	r0, r0, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fba:	6a21      	ldr	r1, [r4, #32]
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	47b0      	blx	r6
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	d106      	bne.n	8002fd4 <__sflush_r+0x68>
 8002fc6:	6829      	ldr	r1, [r5, #0]
 8002fc8:	291d      	cmp	r1, #29
 8002fca:	d82b      	bhi.n	8003024 <__sflush_r+0xb8>
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <__sflush_r+0x108>)
 8002fce:	410a      	asrs	r2, r1
 8002fd0:	07d6      	lsls	r6, r2, #31
 8002fd2:	d427      	bmi.n	8003024 <__sflush_r+0xb8>
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6062      	str	r2, [r4, #4]
 8002fd8:	04d9      	lsls	r1, r3, #19
 8002fda:	6922      	ldr	r2, [r4, #16]
 8002fdc:	6022      	str	r2, [r4, #0]
 8002fde:	d504      	bpl.n	8002fea <__sflush_r+0x7e>
 8002fe0:	1c42      	adds	r2, r0, #1
 8002fe2:	d101      	bne.n	8002fe8 <__sflush_r+0x7c>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b903      	cbnz	r3, 8002fea <__sflush_r+0x7e>
 8002fe8:	6560      	str	r0, [r4, #84]	; 0x54
 8002fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fec:	602f      	str	r7, [r5, #0]
 8002fee:	2900      	cmp	r1, #0
 8002ff0:	d0c9      	beq.n	8002f86 <__sflush_r+0x1a>
 8002ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ff6:	4299      	cmp	r1, r3
 8002ff8:	d002      	beq.n	8003000 <__sflush_r+0x94>
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f7ff fbea 	bl	80027d4 <_free_r>
 8003000:	2000      	movs	r0, #0
 8003002:	6360      	str	r0, [r4, #52]	; 0x34
 8003004:	e7c0      	b.n	8002f88 <__sflush_r+0x1c>
 8003006:	2301      	movs	r3, #1
 8003008:	4628      	mov	r0, r5
 800300a:	47b0      	blx	r6
 800300c:	1c41      	adds	r1, r0, #1
 800300e:	d1c8      	bne.n	8002fa2 <__sflush_r+0x36>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0c5      	beq.n	8002fa2 <__sflush_r+0x36>
 8003016:	2b1d      	cmp	r3, #29
 8003018:	d001      	beq.n	800301e <__sflush_r+0xb2>
 800301a:	2b16      	cmp	r3, #22
 800301c:	d101      	bne.n	8003022 <__sflush_r+0xb6>
 800301e:	602f      	str	r7, [r5, #0]
 8003020:	e7b1      	b.n	8002f86 <__sflush_r+0x1a>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003028:	81a3      	strh	r3, [r4, #12]
 800302a:	e7ad      	b.n	8002f88 <__sflush_r+0x1c>
 800302c:	690f      	ldr	r7, [r1, #16]
 800302e:	2f00      	cmp	r7, #0
 8003030:	d0a9      	beq.n	8002f86 <__sflush_r+0x1a>
 8003032:	0793      	lsls	r3, r2, #30
 8003034:	680e      	ldr	r6, [r1, #0]
 8003036:	bf08      	it	eq
 8003038:	694b      	ldreq	r3, [r1, #20]
 800303a:	600f      	str	r7, [r1, #0]
 800303c:	bf18      	it	ne
 800303e:	2300      	movne	r3, #0
 8003040:	eba6 0807 	sub.w	r8, r6, r7
 8003044:	608b      	str	r3, [r1, #8]
 8003046:	f1b8 0f00 	cmp.w	r8, #0
 800304a:	dd9c      	ble.n	8002f86 <__sflush_r+0x1a>
 800304c:	6a21      	ldr	r1, [r4, #32]
 800304e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003050:	4643      	mov	r3, r8
 8003052:	463a      	mov	r2, r7
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	2800      	cmp	r0, #0
 800305a:	dc06      	bgt.n	800306a <__sflush_r+0xfe>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003068:	e78e      	b.n	8002f88 <__sflush_r+0x1c>
 800306a:	4407      	add	r7, r0
 800306c:	eba8 0800 	sub.w	r8, r8, r0
 8003070:	e7e9      	b.n	8003046 <__sflush_r+0xda>
 8003072:	bf00      	nop
 8003074:	dfbffffe 	.word	0xdfbffffe

08003078 <_fflush_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	4605      	mov	r5, r0
 800307e:	460c      	mov	r4, r1
 8003080:	b913      	cbnz	r3, 8003088 <_fflush_r+0x10>
 8003082:	2500      	movs	r5, #0
 8003084:	4628      	mov	r0, r5
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	b118      	cbz	r0, 8003092 <_fflush_r+0x1a>
 800308a:	6a03      	ldr	r3, [r0, #32]
 800308c:	b90b      	cbnz	r3, 8003092 <_fflush_r+0x1a>
 800308e:	f7ff fa91 	bl	80025b4 <__sinit>
 8003092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f3      	beq.n	8003082 <_fflush_r+0xa>
 800309a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800309c:	07d0      	lsls	r0, r2, #31
 800309e:	d404      	bmi.n	80030aa <_fflush_r+0x32>
 80030a0:	0599      	lsls	r1, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_fflush_r+0x32>
 80030a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030a6:	f7ff fb92 	bl	80027ce <__retarget_lock_acquire_recursive>
 80030aa:	4628      	mov	r0, r5
 80030ac:	4621      	mov	r1, r4
 80030ae:	f7ff ff5d 	bl	8002f6c <__sflush_r>
 80030b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b4:	07da      	lsls	r2, r3, #31
 80030b6:	4605      	mov	r5, r0
 80030b8:	d4e4      	bmi.n	8003084 <_fflush_r+0xc>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	059b      	lsls	r3, r3, #22
 80030be:	d4e1      	bmi.n	8003084 <_fflush_r+0xc>
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f7ff fb85 	bl	80027d0 <__retarget_lock_release_recursive>
 80030c6:	e7dd      	b.n	8003084 <_fflush_r+0xc>

080030c8 <_putc_r>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	460d      	mov	r5, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	4606      	mov	r6, r0
 80030d0:	b118      	cbz	r0, 80030da <_putc_r+0x12>
 80030d2:	6a03      	ldr	r3, [r0, #32]
 80030d4:	b90b      	cbnz	r3, 80030da <_putc_r+0x12>
 80030d6:	f7ff fa6d 	bl	80025b4 <__sinit>
 80030da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030dc:	07d8      	lsls	r0, r3, #31
 80030de:	d405      	bmi.n	80030ec <_putc_r+0x24>
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	0599      	lsls	r1, r3, #22
 80030e4:	d402      	bmi.n	80030ec <_putc_r+0x24>
 80030e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e8:	f7ff fb71 	bl	80027ce <__retarget_lock_acquire_recursive>
 80030ec:	68a3      	ldr	r3, [r4, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	60a3      	str	r3, [r4, #8]
 80030f4:	da05      	bge.n	8003102 <_putc_r+0x3a>
 80030f6:	69a2      	ldr	r2, [r4, #24]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	db12      	blt.n	8003122 <_putc_r+0x5a>
 80030fc:	b2eb      	uxtb	r3, r5
 80030fe:	2b0a      	cmp	r3, #10
 8003100:	d00f      	beq.n	8003122 <_putc_r+0x5a>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	6022      	str	r2, [r4, #0]
 8003108:	701d      	strb	r5, [r3, #0]
 800310a:	b2ed      	uxtb	r5, r5
 800310c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800310e:	07da      	lsls	r2, r3, #31
 8003110:	d405      	bmi.n	800311e <_putc_r+0x56>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	059b      	lsls	r3, r3, #22
 8003116:	d402      	bmi.n	800311e <_putc_r+0x56>
 8003118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800311a:	f7ff fb59 	bl	80027d0 <__retarget_lock_release_recursive>
 800311e:	4628      	mov	r0, r5
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	4629      	mov	r1, r5
 8003124:	4622      	mov	r2, r4
 8003126:	4630      	mov	r0, r6
 8003128:	f000 f802 	bl	8003130 <__swbuf_r>
 800312c:	4605      	mov	r5, r0
 800312e:	e7ed      	b.n	800310c <_putc_r+0x44>

08003130 <__swbuf_r>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	460e      	mov	r6, r1
 8003134:	4614      	mov	r4, r2
 8003136:	4605      	mov	r5, r0
 8003138:	b118      	cbz	r0, 8003142 <__swbuf_r+0x12>
 800313a:	6a03      	ldr	r3, [r0, #32]
 800313c:	b90b      	cbnz	r3, 8003142 <__swbuf_r+0x12>
 800313e:	f7ff fa39 	bl	80025b4 <__sinit>
 8003142:	69a3      	ldr	r3, [r4, #24]
 8003144:	60a3      	str	r3, [r4, #8]
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	071a      	lsls	r2, r3, #28
 800314a:	d525      	bpl.n	8003198 <__swbuf_r+0x68>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	b31b      	cbz	r3, 8003198 <__swbuf_r+0x68>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	6922      	ldr	r2, [r4, #16]
 8003154:	1a98      	subs	r0, r3, r2
 8003156:	6963      	ldr	r3, [r4, #20]
 8003158:	b2f6      	uxtb	r6, r6
 800315a:	4283      	cmp	r3, r0
 800315c:	4637      	mov	r7, r6
 800315e:	dc04      	bgt.n	800316a <__swbuf_r+0x3a>
 8003160:	4621      	mov	r1, r4
 8003162:	4628      	mov	r0, r5
 8003164:	f7ff ff88 	bl	8003078 <_fflush_r>
 8003168:	b9e0      	cbnz	r0, 80031a4 <__swbuf_r+0x74>
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60a3      	str	r3, [r4, #8]
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	701e      	strb	r6, [r3, #0]
 8003178:	6962      	ldr	r2, [r4, #20]
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	429a      	cmp	r2, r3
 800317e:	d004      	beq.n	800318a <__swbuf_r+0x5a>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	07db      	lsls	r3, r3, #31
 8003184:	d506      	bpl.n	8003194 <__swbuf_r+0x64>
 8003186:	2e0a      	cmp	r6, #10
 8003188:	d104      	bne.n	8003194 <__swbuf_r+0x64>
 800318a:	4621      	mov	r1, r4
 800318c:	4628      	mov	r0, r5
 800318e:	f7ff ff73 	bl	8003078 <_fflush_r>
 8003192:	b938      	cbnz	r0, 80031a4 <__swbuf_r+0x74>
 8003194:	4638      	mov	r0, r7
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	4621      	mov	r1, r4
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f806 	bl	80031ac <__swsetup_r>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0d5      	beq.n	8003150 <__swbuf_r+0x20>
 80031a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80031a8:	e7f4      	b.n	8003194 <__swbuf_r+0x64>
	...

080031ac <__swsetup_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <__swsetup_r+0xac>)
 80031b0:	4605      	mov	r5, r0
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	460c      	mov	r4, r1
 80031b6:	b118      	cbz	r0, 80031c0 <__swsetup_r+0x14>
 80031b8:	6a03      	ldr	r3, [r0, #32]
 80031ba:	b90b      	cbnz	r3, 80031c0 <__swsetup_r+0x14>
 80031bc:	f7ff f9fa 	bl	80025b4 <__sinit>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031c6:	0718      	lsls	r0, r3, #28
 80031c8:	d422      	bmi.n	8003210 <__swsetup_r+0x64>
 80031ca:	06d9      	lsls	r1, r3, #27
 80031cc:	d407      	bmi.n	80031de <__swsetup_r+0x32>
 80031ce:	2309      	movs	r3, #9
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031d6:	81a3      	strh	r3, [r4, #12]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031dc:	e034      	b.n	8003248 <__swsetup_r+0x9c>
 80031de:	0758      	lsls	r0, r3, #29
 80031e0:	d512      	bpl.n	8003208 <__swsetup_r+0x5c>
 80031e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031e4:	b141      	cbz	r1, 80031f8 <__swsetup_r+0x4c>
 80031e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031ea:	4299      	cmp	r1, r3
 80031ec:	d002      	beq.n	80031f4 <__swsetup_r+0x48>
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff faf0 	bl	80027d4 <_free_r>
 80031f4:	2300      	movs	r3, #0
 80031f6:	6363      	str	r3, [r4, #52]	; 0x34
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031fe:	81a3      	strh	r3, [r4, #12]
 8003200:	2300      	movs	r3, #0
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	b94b      	cbnz	r3, 8003228 <__swsetup_r+0x7c>
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d003      	beq.n	8003228 <__swsetup_r+0x7c>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f850 	bl	80032c8 <__smakebuf_r>
 8003228:	89a0      	ldrh	r0, [r4, #12]
 800322a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800322e:	f010 0301 	ands.w	r3, r0, #1
 8003232:	d00a      	beq.n	800324a <__swsetup_r+0x9e>
 8003234:	2300      	movs	r3, #0
 8003236:	60a3      	str	r3, [r4, #8]
 8003238:	6963      	ldr	r3, [r4, #20]
 800323a:	425b      	negs	r3, r3
 800323c:	61a3      	str	r3, [r4, #24]
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	b943      	cbnz	r3, 8003254 <__swsetup_r+0xa8>
 8003242:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003246:	d1c4      	bne.n	80031d2 <__swsetup_r+0x26>
 8003248:	bd38      	pop	{r3, r4, r5, pc}
 800324a:	0781      	lsls	r1, r0, #30
 800324c:	bf58      	it	pl
 800324e:	6963      	ldrpl	r3, [r4, #20]
 8003250:	60a3      	str	r3, [r4, #8]
 8003252:	e7f4      	b.n	800323e <__swsetup_r+0x92>
 8003254:	2000      	movs	r0, #0
 8003256:	e7f7      	b.n	8003248 <__swsetup_r+0x9c>
 8003258:	20000068 	.word	0x20000068

0800325c <_sbrk_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d06      	ldr	r5, [pc, #24]	; (8003278 <_sbrk_r+0x1c>)
 8003260:	2300      	movs	r3, #0
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7fd fe12 	bl	8000e90 <_sbrk>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_sbrk_r+0x1a>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_sbrk_r+0x1a>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	200002c4 	.word	0x200002c4

0800327c <__swhatbuf_r>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	460c      	mov	r4, r1
 8003280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003284:	2900      	cmp	r1, #0
 8003286:	b096      	sub	sp, #88	; 0x58
 8003288:	4615      	mov	r5, r2
 800328a:	461e      	mov	r6, r3
 800328c:	da0d      	bge.n	80032aa <__swhatbuf_r+0x2e>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	bf0c      	ite	eq
 800329a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800329e:	2340      	movne	r3, #64	; 0x40
 80032a0:	2000      	movs	r0, #0
 80032a2:	6031      	str	r1, [r6, #0]
 80032a4:	602b      	str	r3, [r5, #0]
 80032a6:	b016      	add	sp, #88	; 0x58
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	466a      	mov	r2, sp
 80032ac:	f000 f848 	bl	8003340 <_fstat_r>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	dbec      	blt.n	800328e <__swhatbuf_r+0x12>
 80032b4:	9901      	ldr	r1, [sp, #4]
 80032b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80032ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80032be:	4259      	negs	r1, r3
 80032c0:	4159      	adcs	r1, r3
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	e7eb      	b.n	80032a0 <__swhatbuf_r+0x24>

080032c8 <__smakebuf_r>:
 80032c8:	898b      	ldrh	r3, [r1, #12]
 80032ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032cc:	079d      	lsls	r5, r3, #30
 80032ce:	4606      	mov	r6, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	d507      	bpl.n	80032e4 <__smakebuf_r+0x1c>
 80032d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	2301      	movs	r3, #1
 80032de:	6163      	str	r3, [r4, #20]
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	ab01      	add	r3, sp, #4
 80032e6:	466a      	mov	r2, sp
 80032e8:	f7ff ffc8 	bl	800327c <__swhatbuf_r>
 80032ec:	9900      	ldr	r1, [sp, #0]
 80032ee:	4605      	mov	r5, r0
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7ff fadb 	bl	80028ac <_malloc_r>
 80032f6:	b948      	cbnz	r0, 800330c <__smakebuf_r+0x44>
 80032f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fc:	059a      	lsls	r2, r3, #22
 80032fe:	d4ef      	bmi.n	80032e0 <__smakebuf_r+0x18>
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	e7e3      	b.n	80032d4 <__smakebuf_r+0xc>
 800330c:	89a3      	ldrh	r3, [r4, #12]
 800330e:	6020      	str	r0, [r4, #0]
 8003310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	9b00      	ldr	r3, [sp, #0]
 8003318:	6163      	str	r3, [r4, #20]
 800331a:	9b01      	ldr	r3, [sp, #4]
 800331c:	6120      	str	r0, [r4, #16]
 800331e:	b15b      	cbz	r3, 8003338 <__smakebuf_r+0x70>
 8003320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003324:	4630      	mov	r0, r6
 8003326:	f000 f81d 	bl	8003364 <_isatty_r>
 800332a:	b128      	cbz	r0, 8003338 <__smakebuf_r+0x70>
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	89a3      	ldrh	r3, [r4, #12]
 800333a:	431d      	orrs	r5, r3
 800333c:	81a5      	strh	r5, [r4, #12]
 800333e:	e7cf      	b.n	80032e0 <__smakebuf_r+0x18>

08003340 <_fstat_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	; (8003360 <_fstat_r+0x20>)
 8003344:	2300      	movs	r3, #0
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	4611      	mov	r1, r2
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	f7fd fd96 	bl	8000e7e <_fstat>
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	d102      	bne.n	800335c <_fstat_r+0x1c>
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	b103      	cbz	r3, 800335c <_fstat_r+0x1c>
 800335a:	6023      	str	r3, [r4, #0]
 800335c:	bd38      	pop	{r3, r4, r5, pc}
 800335e:	bf00      	nop
 8003360:	200002c4 	.word	0x200002c4

08003364 <_isatty_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d06      	ldr	r5, [pc, #24]	; (8003380 <_isatty_r+0x1c>)
 8003368:	2300      	movs	r3, #0
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	602b      	str	r3, [r5, #0]
 8003370:	f7fd fd8a 	bl	8000e88 <_isatty>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_isatty_r+0x1a>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_isatty_r+0x1a>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	200002c4 	.word	0x200002c4

08003384 <_init>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr

08003390 <_fini>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	bf00      	nop
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr
