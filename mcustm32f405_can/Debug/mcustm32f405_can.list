
mcustm32f405_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800448c  0800448c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000230  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009aee  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001914  00000000  00000000  00029bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000858  00000000  00000000  0002b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000656  00000000  00000000  0002bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f78e  00000000  00000000  0002c38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000096d2  00000000  00000000  0004bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc0e6  00000000  00000000  000551ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002978  00000000  00000000  001112d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00113c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004368 	.word	0x08004368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004368 	.word	0x08004368

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 fbba 	bl	8002d08 <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000d4 	.word	0x200000d4

080005b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN Callbacks

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo0MsgPendingCallback");
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80005c2:	f003 f81f 	bl	8003604 <iprintf>
 80005c6:	200a      	movs	r0, #10
 80005c8:	f003 f82e 	bl	8003628 <putchar>
    if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005d4:	f001 f831 	bl	800163a <HAL_CAN_GetRxMessage>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
        Error_Handler();
 80005de:	f000 fa6d 	bl	8000abc <Error_Handler>
    }
    //message_waiting = 1;
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08004380 	.word	0x08004380
 80005f0:	20000138 	.word	0x20000138
 80005f4:	2000011c 	.word	0x2000011c
 80005f8:	200000ac 	.word	0x200000ac

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fc83 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f8c1 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f9f7 	bl	80009fc <MX_GPIO_Init>
  MX_CAN1_Init();
 800060e:	f000 f927 	bl	8000860 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000612:	f000 f9c9 	bl	80009a8 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 8000616:	f000 f975 	bl	8000904 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

    DBG("\n\n\n\n--------\nStarting");
 800061a:	4852      	ldr	r0, [pc, #328]	; (8000764 <main+0x168>)
 800061c:	f002 fff2 	bl	8003604 <iprintf>
 8000620:	200a      	movs	r0, #10
 8000622:	f003 f801 	bl	8003628 <putchar>


    DBG("Activating CAN notification");
 8000626:	4850      	ldr	r0, [pc, #320]	; (8000768 <main+0x16c>)
 8000628:	f002 ffec 	bl	8003604 <iprintf>
 800062c:	200a      	movs	r0, #10
 800062e:	f002 fffb 	bl	8003628 <putchar>
    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000632:	2102      	movs	r1, #2
 8000634:	484d      	ldr	r0, [pc, #308]	; (800076c <main+0x170>)
 8000636:	f001 f94a 	bl	80018ce <HAL_CAN_ActivateNotification>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d007      	beq.n	8000650 <main+0x54>
        DBG("Failed");
 8000640:	484b      	ldr	r0, [pc, #300]	; (8000770 <main+0x174>)
 8000642:	f002 ffdf 	bl	8003604 <iprintf>
 8000646:	200a      	movs	r0, #10
 8000648:	f002 ffee 	bl	8003628 <putchar>
        Error_Handler();
 800064c:	f000 fa36 	bl	8000abc <Error_Handler>
    }

    DBG("Starting CAN");
 8000650:	4848      	ldr	r0, [pc, #288]	; (8000774 <main+0x178>)
 8000652:	f002 ffd7 	bl	8003604 <iprintf>
 8000656:	200a      	movs	r0, #10
 8000658:	f002 ffe6 	bl	8003628 <putchar>
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 800065c:	4843      	ldr	r0, [pc, #268]	; (800076c <main+0x170>)
 800065e:	f000 fea3 	bl	80013a8 <HAL_CAN_Start>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d007      	beq.n	8000678 <main+0x7c>
        DBG("Failed");
 8000668:	4841      	ldr	r0, [pc, #260]	; (8000770 <main+0x174>)
 800066a:	f002 ffcb 	bl	8003604 <iprintf>
 800066e:	200a      	movs	r0, #10
 8000670:	f002 ffda 	bl	8003628 <putchar>
        Error_Handler();
 8000674:	f000 fa22 	bl	8000abc <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_can_tx = 0, last_tick = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t TxMailbox;

    while (1) {

        now = HAL_GetTick();
 8000688:	f000 fca6 	bl	8000fd8 <HAL_GetTick>
 800068c:	6338      	str	r0, [r7, #48]	; 0x30

        if (now - last_blink >= 500) {
 800068e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000698:	d306      	bcc.n	80006a8 <main+0xac>

            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <main+0x17c>)
 80006a0:	f001 fe31 	bl	8002306 <HAL_GPIO_TogglePin>

            last_blink = now;
 80006a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        if (now - last_can_tx >= 10000) {
 80006a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80006aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d937      	bls.n	8000726 <main+0x12a>

            DBG("Sending data");
 80006b6:	4831      	ldr	r0, [pc, #196]	; (800077c <main+0x180>)
 80006b8:	f002 ffa4 	bl	8003604 <iprintf>
 80006bc:	200a      	movs	r0, #10
 80006be:	f002 ffb3 	bl	8003628 <putchar>

            TxHeader.DLC = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
            TxHeader.ExtId = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
            TxHeader.IDE = CAN_ID_STD;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
            TxHeader.RTR = CAN_RTR_DATA;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
            TxHeader.StdId = 0x111;
 80006d2:	f240 1311 	movw	r3, #273	; 0x111
 80006d6:	613b      	str	r3, [r7, #16]
            TxHeader.TransmitGlobalTime = DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            TxData[0] = 0x01;
 80006de:	2301      	movs	r3, #1
 80006e0:	723b      	strb	r3, [r7, #8]
            TxData[1] = 0x02;
 80006e2:	2302      	movs	r3, #2
 80006e4:	727b      	strb	r3, [r7, #9]
            TxData[2] = 0x03;
 80006e6:	2303      	movs	r3, #3
 80006e8:	72bb      	strb	r3, [r7, #10]
            TxData[3] = 0x04;
 80006ea:	2304      	movs	r3, #4
 80006ec:	72fb      	strb	r3, [r7, #11]


            TxData[0] = 50;
 80006ee:	2332      	movs	r3, #50	; 0x32
 80006f0:	723b      	strb	r3, [r7, #8]
            TxData[1] = 0xAA;
 80006f2:	23aa      	movs	r3, #170	; 0xaa
 80006f4:	727b      	strb	r3, [r7, #9]

            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, &TxData[0], &TxMailbox) == HAL_OK) {
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	f107 0208 	add.w	r2, r7, #8
 80006fc:	f107 0110 	add.w	r1, r7, #16
 8000700:	481a      	ldr	r0, [pc, #104]	; (800076c <main+0x170>)
 8000702:	f000 fe95 	bl	8001430 <HAL_CAN_AddTxMessage>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d108      	bne.n	800071e <main+0x122>
                DBG("Mailbox was %lu", TxMailbox);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <main+0x184>)
 8000712:	f002 ff77 	bl	8003604 <iprintf>
 8000716:	200a      	movs	r0, #10
 8000718:	f002 ff86 	bl	8003628 <putchar>
 800071c:	e001      	b.n	8000722 <main+0x126>
            } else {
                Error_Handler();
 800071e:	f000 f9cd 	bl	8000abc <Error_Handler>
            }

            last_can_tx = now;
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (now - last_tick >= 1000) {
 8000726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000730:	d3aa      	bcc.n	8000688 <main+0x8c>

            uint32_t fill_rx = HAL_CAN_GetRxFifoFillLevel(&hcan2, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <main+0x170>)
 8000736:	f001 f8a2 	bl	800187e <HAL_CAN_GetRxFifoFillLevel>
 800073a:	62f8      	str	r0, [r7, #44]	; 0x2c
            uint32_t fill_tx = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <main+0x170>)
 800073e:	f000 ff47 	bl	80015d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000742:	62b8      	str	r0, [r7, #40]	; 0x28

            DBG("Tick %lu - tx free = %lu, fill = %lu", now / 1000, fill_tx, fill_rx);
 8000744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <main+0x188>)
 8000748:	fba2 2303 	umull	r2, r3, r2, r3
 800074c:	0999      	lsrs	r1, r3, #6
 800074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <main+0x18c>)
 8000754:	f002 ff56 	bl	8003604 <iprintf>
 8000758:	200a      	movs	r0, #10
 800075a:	f002 ff65 	bl	8003628 <putchar>

            last_tick = now;
 800075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
        now = HAL_GetTick();
 8000762:	e791      	b.n	8000688 <main+0x8c>
 8000764:	080043a4 	.word	0x080043a4
 8000768:	080043bc 	.word	0x080043bc
 800076c:	200000ac 	.word	0x200000ac
 8000770:	080043d8 	.word	0x080043d8
 8000774:	080043e0 	.word	0x080043e0
 8000778:	40020800 	.word	0x40020800
 800077c:	080043f0 	.word	0x080043f0
 8000780:	08004400 	.word	0x08004400
 8000784:	10624dd3 	.word	0x10624dd3
 8000788:	08004410 	.word	0x08004410

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 ff8f 	bl	80036be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000800:	23a8      	movs	r3, #168	; 0xa8
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fd93 	bl	800233c <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f94e 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2105      	movs	r1, #5
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fff4 	bl	800282c <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084a:	f000 f937 	bl	8000abc <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_CAN1_Init+0x9c>)
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <MX_CAN1_Init+0xa0>)
 800086a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_CAN1_Init+0x9c>)
 800086e:	2220      	movs	r2, #32
 8000870:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_CAN1_Init+0x9c>)
 8000874:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000878:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_CAN1_Init+0x9c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_CAN1_Init+0x9c>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_CAN1_Init+0x9c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_CAN1_Init+0x9c>)
 800088e:	2200      	movs	r2, #0
 8000890:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_CAN1_Init+0x9c>)
 8000894:	2200      	movs	r2, #0
 8000896:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_CAN1_Init+0x9c>)
 800089a:	2200      	movs	r2, #0
 800089c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_CAN1_Init+0x9c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_CAN1_Init+0x9c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_CAN1_Init+0x9c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_CAN1_Init+0x9c>)
 80008b2:	f000 fb9d 	bl	8000ff0 <HAL_CAN_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f8fe 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 80008e4:	230d      	movs	r3, #13
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_CAN1_Init+0x9c>)
 80008ee:	f000 fc7b 	bl	80011e8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000084 	.word	0x20000084
 8000900:	40006400 	.word	0x40006400

08000904 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_CAN2_Init+0x9c>)
 800090c:	4a25      	ldr	r2, [pc, #148]	; (80009a4 <MX_CAN2_Init+0xa0>)
 800090e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000912:	2210      	movs	r2, #16
 8000914:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_CAN2_Init+0x9c>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000932:	2200      	movs	r2, #0
 8000934:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000938:	2200      	movs	r2, #0
 800093a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_CAN2_Init+0x9c>)
 800093e:	2200      	movs	r2, #0
 8000940:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000944:	2200      	movs	r2, #0
 8000946:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_CAN2_Init+0x9c>)
 800094a:	2200      	movs	r2, #0
 800094c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000950:	2200      	movs	r2, #0
 8000952:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000956:	f000 fb4b 	bl	8000ff0 <HAL_CAN_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 f8ac 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 20;  // anything between 0 to SlaveStartFilterBank
 8000968:	2314      	movs	r3, #20
 800096a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000988:	230d      	movs	r3, #13
 800098a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <MX_CAN2_Init+0x9c>)
 8000992:	f000 fc29 	bl	80011e8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000ac 	.word	0x200000ac
 80009a4:	40006800 	.word	0x40006800

080009a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f002 f942 	bl	8002c68 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f867 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	40011000 	.word	0x40011000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0xbc>)
 8000a8a:	f001 fc23 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xbc>)
 8000aa8:	f001 fa78 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_CAN_MspInit+0x14c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d146      	bne.n	8000bc8 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b3a:	4b4b      	ldr	r3, [pc, #300]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10d      	bne.n	8000b68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a45      	ldr	r2, [pc, #276]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b96:	2309      	movs	r3, #9
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4833      	ldr	r0, [pc, #204]	; (8000c70 <HAL_CAN_MspInit+0x158>)
 8000ba2:	f001 f9fb 	bl	8001f9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2014      	movs	r0, #20
 8000bac:	f001 f9bf 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f001 f9d8 	bl	8001f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2015      	movs	r0, #21
 8000bbc:	f001 f9b7 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bc0:	2015      	movs	r0, #21
 8000bc2:	f001 f9d0 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bc6:	e048      	b.n	8000c5a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <HAL_CAN_MspInit+0x15c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d143      	bne.n	8000c5a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000bf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_CAN_MspInit+0x150>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10d      	bne.n	8000c1c <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_CAN_MspInit+0x154>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c4a:	2309      	movs	r3, #9
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_CAN_MspInit+0x158>)
 8000c56:	f001 f9a1 	bl	8001f9c <HAL_GPIO_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40006400 	.word	0x40006400
 8000c68:	20000140 	.word	0x20000140
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40006800 	.word	0x40006800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cf0:	f001 f954 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f92c 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <CAN1_RX0_IRQHandler+0x10>)
 8000d62:	f000 fdda 	bl	800191a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000084 	.word	0x20000084

08000d70 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <CAN1_RX1_IRQHandler+0x10>)
 8000d76:	f000 fdd0 	bl	800191a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000084 	.word	0x20000084

08000d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 fc80 	bl	800375c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000144 	.word	0x20000144
 8000e90:	20000298 	.word	0x20000298

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ebc:	f7ff ffea 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	; (8000f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f002 fc3f 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fb87 	bl	80005fc <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000efc:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8000f00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f04:	20000298 	.word	0x20000298

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 ffef 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fdc2 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f807 	bl	8001f82 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f000 ffcf 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000148 	.word	0x20000148

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000148 	.word	0x20000148

08000ff0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0ed      	b.n	80011de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fd82 	bl	8000b18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff ffd8 	bl	8000fd8 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102a:	e012      	b.n	8001052 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff ffd4 	bl	8000fd8 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90b      	bls.n	8001052 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2205      	movs	r2, #5
 800104a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0c5      	b.n	80011de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0e5      	beq.n	800102c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0202 	bic.w	r2, r2, #2
 800106e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff ffb2 	bl	8000fd8 <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001076:	e012      	b.n	800109e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001078:	f7ff ffae 	bl	8000fd8 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d90b      	bls.n	800109e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2205      	movs	r2, #5
 8001096:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e09f      	b.n	80011de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e5      	bne.n	8001078 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e007      	b.n	80010d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e5b      	ldrb	r3, [r3, #25]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e007      	b.n	8001100 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e9b      	ldrb	r3, [r3, #26]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0220 	orr.w	r2, r2, #32
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0220 	bic.w	r2, r2, #32
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7edb      	ldrb	r3, [r3, #27]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0210 	bic.w	r2, r2, #16
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0210 	orr.w	r2, r2, #16
 8001152:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7f1b      	ldrb	r3, [r3, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0208 	orr.w	r2, r2, #8
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0208 	bic.w	r2, r2, #8
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7f5b      	ldrb	r3, [r3, #29]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0204 	orr.w	r2, r2, #4
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	ea42 0103 	orr.w	r1, r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d003      	beq.n	800120e <HAL_CAN_ConfigFilter+0x26>
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	2b02      	cmp	r3, #2
 800120a:	f040 80be 	bne.w	800138a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800120e:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001210:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001228:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2201      	movs	r2, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d123      	bne.n	80012b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001292:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3248      	adds	r2, #72	; 0x48
 8001298:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ae:	6979      	ldr	r1, [r7, #20]
 80012b0:	3348      	adds	r3, #72	; 0x48
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d122      	bne.n	8001306 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3248      	adds	r2, #72	; 0x48
 80012e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	3348      	adds	r3, #72	; 0x48
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	401a      	ands	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001320:	e007      	b.n	8001332 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	431a      	orrs	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800134c:	e007      	b.n	800135e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	431a      	orrs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800137c:	f023 0201 	bic.w	r2, r3, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e006      	b.n	8001398 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40006400 	.word	0x40006400

080013a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d12e      	bne.n	800141a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fe00 	bl	8000fd8 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013da:	e012      	b.n	8001402 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013dc:	f7ff fdfc 	bl	8000fd8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b0a      	cmp	r3, #10
 80013e8:	d90b      	bls.n	8001402 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2205      	movs	r2, #5
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e012      	b.n	8001428 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e5      	bne.n	80013dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e006      	b.n	8001428 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
  }
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001444:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d003      	beq.n	800145c <HAL_CAN_AddTxMessage+0x2c>
 8001454:	7ffb      	ldrb	r3, [r7, #31]
 8001456:	2b02      	cmp	r3, #2
 8001458:	f040 80ad 	bne.w	80015b6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10a      	bne.n	800147c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8095 	beq.w	80015a6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	0e1b      	lsrs	r3, r3, #24
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001486:	2201      	movs	r2, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10d      	bne.n	80014b4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	6809      	ldr	r1, [r1, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3318      	adds	r3, #24
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e00f      	b.n	80014d4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3318      	adds	r3, #24
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	440b      	add	r3, r1
 80014d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3318      	adds	r3, #24
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	7d1b      	ldrb	r3, [r3, #20]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d111      	bne.n	8001514 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3318      	adds	r3, #24
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	6811      	ldr	r1, [r2, #0]
 8001504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3318      	adds	r3, #24
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	440b      	add	r3, r1
 8001510:	3304      	adds	r3, #4
 8001512:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3307      	adds	r3, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	061a      	lsls	r2, r3, #24
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3306      	adds	r3, #6
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	4313      	orrs	r3, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	3204      	adds	r2, #4
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	4610      	mov	r0, r2
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	6811      	ldr	r1, [r2, #0]
 800153c:	ea43 0200 	orr.w	r2, r3, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	440b      	add	r3, r1
 8001546:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800154a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3303      	adds	r3, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	061a      	lsls	r2, r3, #24
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3302      	adds	r3, #2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	4313      	orrs	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	4610      	mov	r0, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6811      	ldr	r1, [r2, #0]
 8001572:	ea43 0200 	orr.w	r2, r3, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	440b      	add	r3, r1
 800157c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001580:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3318      	adds	r3, #24
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	6811      	ldr	r1, [r2, #0]
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3318      	adds	r3, #24
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	440b      	add	r3, r1
 80015a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e00e      	b.n	80015c4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e006      	b.n	80015c4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d002      	beq.n	80015f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d11d      	bne.n	800162c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800163a:	b480      	push	{r7}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <HAL_CAN_GetRxMessage+0x24>
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b02      	cmp	r3, #2
 800165a:	f040 8103 	bne.w	8001864 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10e      	bne.n	8001682 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0f7      	b.n	8001872 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0e8      	b.n	8001872 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	331b      	adds	r3, #27
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0204 	and.w	r2, r3, #4
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	331b      	adds	r3, #27
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	331b      	adds	r3, #27
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	08db      	lsrs	r3, r3, #3
 80016e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	331b      	adds	r3, #27
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0202 	and.w	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	331b      	adds	r3, #27
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2208      	movs	r2, #8
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	e00b      	b.n	800173e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	331b      	adds	r3, #27
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	331b      	adds	r3, #27
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b2da      	uxtb	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	331b      	adds	r3, #27
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	3304      	adds	r3, #4
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0a1a      	lsrs	r2, r3, #8
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0c1a      	lsrs	r2, r3, #16
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3302      	adds	r3, #2
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e1a      	lsrs	r2, r3, #24
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3303      	adds	r3, #3
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3304      	adds	r3, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0a1a      	lsrs	r2, r3, #8
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3305      	adds	r3, #5
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0c1a      	lsrs	r2, r3, #16
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3306      	adds	r3, #6
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0e1a      	lsrs	r2, r3, #24
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3307      	adds	r3, #7
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	e007      	b.n	8001860 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0220 	orr.w	r2, r2, #32
 800185e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e006      	b.n	8001872 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d002      	beq.n	80018a0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d10f      	bne.n	80018c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e005      	b.n	80018c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d002      	beq.n	80018ec <HAL_CAN_ActivateNotification+0x1e>
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d109      	bne.n	8001900 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6959      	ldr	r1, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e006      	b.n	800190e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b08a      	sub	sp, #40	; 0x28
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d07c      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d023      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f983 	bl	8001c88 <HAL_CAN_TxMailbox0CompleteCallback>
 8001982:	e016      	b.n	80019b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e00c      	b.n	80019b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	e002      	b.n	80019b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f989 	bl	8001cc4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d024      	beq.n	8001a06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f963 	bl	8001c9c <HAL_CAN_TxMailbox1CompleteCallback>
 80019d6:	e016      	b.n	8001a06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e00c      	b.n	8001a06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e002      	b.n	8001a06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f969 	bl	8001cd8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f943 	bl	8001cb0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a2a:	e016      	b.n	8001a5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e00c      	b.n	8001a5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e002      	b.n	8001a5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f949 	bl	8001cec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00c      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2208      	movs	r2, #8
 8001a98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f930 	bl	8001d00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fd7d 	bl	80005b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2210      	movs	r2, #16
 8001ae0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2208      	movs	r2, #8
 8001afc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f912 	bl	8001d28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8f9 	bl	8001d14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8fc 	bl	8001d3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f8f5 	bl	8001d50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d07b      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d072      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d043      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03e      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001be8:	2b60      	cmp	r3, #96	; 0x60
 8001bea:	d02b      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x32a>
 8001bec:	2b60      	cmp	r3, #96	; 0x60
 8001bee:	d82e      	bhi.n	8001c4e <HAL_CAN_IRQHandler+0x334>
 8001bf0:	2b50      	cmp	r3, #80	; 0x50
 8001bf2:	d022      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x320>
 8001bf4:	2b50      	cmp	r3, #80	; 0x50
 8001bf6:	d82a      	bhi.n	8001c4e <HAL_CAN_IRQHandler+0x334>
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d019      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x316>
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d826      	bhi.n	8001c4e <HAL_CAN_IRQHandler+0x334>
 8001c00:	2b30      	cmp	r3, #48	; 0x30
 8001c02:	d010      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x30c>
 8001c04:	2b30      	cmp	r3, #48	; 0x30
 8001c06:	d822      	bhi.n	8001c4e <HAL_CAN_IRQHandler+0x334>
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	d002      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x2f8>
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d005      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c10:	e01d      	b.n	8001c4e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1a:	e019      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c24:	e014      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c2e:	e00f      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c38:	e00a      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c42:	e005      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c4c:	e000      	b.n	8001c50 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c4e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c5e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f872 	bl	8001d64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e16b      	b.n	8002290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 815a 	bne.w	800228a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b4 	beq.w	800228a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae90 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	041a      	lsls	r2, r3, #16
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43d9      	mvns	r1, r3
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	400b      	ands	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e267      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d075      	beq.n	8002446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d00c      	beq.n	8002380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236e:	2b08      	cmp	r3, #8
 8002370:	d112      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b82      	ldr	r3, [pc, #520]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b7e      	ldr	r3, [pc, #504]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05b      	beq.n	8002444 <HAL_RCC_OscConfig+0x108>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e242      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x74>
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6f      	ldr	r2, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023d4:	4b69      	ldr	r3, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a68      	ldr	r2, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fdf0 	bl	8000fd8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe fdec 	bl	8000fd8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e207      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xc0>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fddc 	bl	8000fd8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fdd8 	bl	8000fd8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1f3      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0xe8>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x240>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d116      	bne.n	80024a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x152>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1c7      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4937      	ldr	r1, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x240>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	e03a      	b.n	800251a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCC_OscConfig+0x244>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fd91 	bl	8000fd8 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fd8d 	bl	8000fd8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1a8      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4925      	ldr	r1, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x240>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x244>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fd70 	bl	8000fd8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fd6c 	bl	8000fd8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e187      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d036      	beq.n	8002594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x248>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fd50 	bl	8000fd8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fd4c 	bl	8000fd8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e167      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x240>)
 8002550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x200>
 800255a:	e01b      	b.n	8002594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_OscConfig+0x248>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe fd39 	bl	8000fd8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	e00e      	b.n	8002588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256a:	f7fe fd35 	bl	8000fd8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d907      	bls.n	8002588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e150      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ea      	bne.n	800256a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8097 	beq.w	80026d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a7c      	ldr	r2, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <HAL_RCC_OscConfig+0x474>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b74      	ldr	r3, [pc, #464]	; (80027b0 <HAL_RCC_OscConfig+0x474>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a73      	ldr	r2, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x474>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fcf5 	bl	8000fd8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fcf1 	bl	8000fd8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e10c      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x474>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x2ea>
 8002618:	4b64      	ldr	r3, [pc, #400]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a63      	ldr	r2, [pc, #396]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x324>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x30c>
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a5e      	ldr	r2, [pc, #376]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5b      	ldr	r2, [pc, #364]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x324>
 8002648:	4b58      	ldr	r3, [pc, #352]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b55      	ldr	r3, [pc, #340]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a54      	ldr	r2, [pc, #336]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fcb6 	bl	8000fd8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fcb2 	bl	8000fd8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0cb      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe fca0 	bl	8000fd8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fc9c 	bl	8000fd8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0b5      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ee      	bne.n	800269c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a38      	ldr	r2, [pc, #224]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a1 	beq.w	800281c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCC_OscConfig+0x478>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc70 	bl	8000fd8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc6c 	bl	8000fd8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e087      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491b      	ldr	r1, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x478>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc45 	bl	8000fd8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc41 	bl	8000fd8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e05c      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x416>
 8002770:	e054      	b.n	800281c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_OscConfig+0x478>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc2e 	bl	8000fd8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc2a 	bl	8000fd8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e045      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x470>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
 800279e:	e03d      	b.n	800281c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e038      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000
 80027b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x4ec>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d028      	beq.n	8002818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d121      	bne.n	8002818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11a      	bne.n	8002818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d111      	bne.n	8002818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0cc      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d90c      	bls.n	8002868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0b8      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	494d      	ldr	r1, [pc, #308]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d044      	beq.n	800294c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d119      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07f      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06f      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e067      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4934      	ldr	r1, [pc, #208]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800291c:	f7fe fb5c 	bl	8000fd8 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe fb58 	bl	8000fd8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e04f      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d20c      	bcs.n	8002974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e032      	b.n	80029da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4916      	ldr	r1, [pc, #88]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b2:	f000 f821 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	490a      	ldr	r1, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fabc 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023c00 	.word	0x40023c00
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08004438 	.word	0x08004438
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004

080029f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029fc:	b094      	sub	sp, #80	; 0x50
 80029fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	647b      	str	r3, [r7, #68]	; 0x44
 8002a04:	2300      	movs	r3, #0
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a08:	2300      	movs	r3, #0
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d00d      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	f200 80e1 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x34>
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a2a:	e0db      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a30:	e0db      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a36:	e0d8      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a42:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	2200      	movs	r2, #0
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
 8002a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7c:	0150      	lsls	r0, r2, #5
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4621      	mov	r1, r4
 8002a84:	1a51      	subs	r1, r2, r1
 8002a86:	6139      	str	r1, [r7, #16]
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a9c:	4659      	mov	r1, fp
 8002a9e:	018b      	lsls	r3, r1, #6
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa6:	4651      	mov	r1, sl
 8002aa8:	018a      	lsls	r2, r1, #6
 8002aaa:	4651      	mov	r1, sl
 8002aac:	ebb2 0801 	subs.w	r8, r2, r1
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aca:	4690      	mov	r8, r2
 8002acc:	4699      	mov	r9, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb18 0303 	adds.w	r3, r8, r3
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	eb49 0303 	adc.w	r3, r9, r3
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aea:	4629      	mov	r1, r5
 8002aec:	028b      	lsls	r3, r1, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af4:	4621      	mov	r1, r4
 8002af6:	028a      	lsls	r2, r1, #10
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afe:	2200      	movs	r2, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b08:	f7fd fbb2 	bl	8000270 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	e058      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	4611      	mov	r1, r2
 8002b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	0159      	lsls	r1, r3, #5
 8002b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b42:	0150      	lsls	r0, r2, #5
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4641      	mov	r1, r8
 8002b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b4e:	4649      	mov	r1, r9
 8002b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b68:	ebb2 040a 	subs.w	r4, r2, sl
 8002b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	00eb      	lsls	r3, r5, #3
 8002b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7e:	00e2      	lsls	r2, r4, #3
 8002b80:	4614      	mov	r4, r2
 8002b82:	461d      	mov	r5, r3
 8002b84:	4643      	mov	r3, r8
 8002b86:	18e3      	adds	r3, r4, r3
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	464b      	mov	r3, r9
 8002b8c:	eb45 0303 	adc.w	r3, r5, r3
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	028b      	lsls	r3, r1, #10
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba8:	4621      	mov	r1, r4
 8002baa:	028a      	lsls	r2, r1, #10
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	61fa      	str	r2, [r7, #28]
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	f7fd fb58 	bl	8000270 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3750      	adds	r7, #80	; 0x50
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff0 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08004448 	.word	0x08004448

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffdc 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0b5b      	lsrs	r3, r3, #13
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08004448 	.word	0x08004448

08002c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd fff2 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f973 	bl	8002f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d175      	bne.n	8002e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit+0x2c>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e06e      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f947 	bl	8000fd8 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e02e      	b.n	8002ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f848 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e03a      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3302      	adds	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e007      	b.n	8002dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1cb      	bne.n	8002d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f814 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2e:	e03b      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e36:	d037      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe f8ce 	bl	8000fd8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e03a      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d020      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d01d      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d116      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f81d 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e00f      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d0b4      	beq.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b095      	sub	sp, #84	; 0x54
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e5      	bne.n	8002ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d119      	bne.n	8002f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 0310 	bic.w	r3, r3, #16
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f68:	61ba      	str	r2, [r7, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	613b      	str	r3, [r7, #16]
   return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f8a:	bf00      	nop
 8002f8c:	3754      	adds	r7, #84	; 0x54
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b0c0      	sub	sp, #256	; 0x100
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	68d9      	ldr	r1, [r3, #12]
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	ea40 0301 	orr.w	r3, r0, r1
 8002fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ff0:	f021 010c 	bic.w	r1, r1, #12
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ffe:	430b      	orrs	r3, r1
 8003000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	6999      	ldr	r1, [r3, #24]
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	ea40 0301 	orr.w	r3, r0, r1
 800301e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <UART_SetConfig+0x2cc>)
 8003028:	429a      	cmp	r2, r3
 800302a:	d005      	beq.n	8003038 <UART_SetConfig+0xa0>
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <UART_SetConfig+0x2d0>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d104      	bne.n	8003042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7ff fe02 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 800303c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003040:	e003      	b.n	800304a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7ff fde9 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8003046:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	f040 810c 	bne.w	8003270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003062:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800306a:	4622      	mov	r2, r4
 800306c:	462b      	mov	r3, r5
 800306e:	1891      	adds	r1, r2, r2
 8003070:	65b9      	str	r1, [r7, #88]	; 0x58
 8003072:	415b      	adcs	r3, r3
 8003074:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800307a:	4621      	mov	r1, r4
 800307c:	eb12 0801 	adds.w	r8, r2, r1
 8003080:	4629      	mov	r1, r5
 8003082:	eb43 0901 	adc.w	r9, r3, r1
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	4623      	mov	r3, r4
 80030a0:	eb18 0303 	adds.w	r3, r8, r3
 80030a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030a8:	462b      	mov	r3, r5
 80030aa:	eb49 0303 	adc.w	r3, r9, r3
 80030ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030c6:	460b      	mov	r3, r1
 80030c8:	18db      	adds	r3, r3, r3
 80030ca:	653b      	str	r3, [r7, #80]	; 0x50
 80030cc:	4613      	mov	r3, r2
 80030ce:	eb42 0303 	adc.w	r3, r2, r3
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030dc:	f7fd f8c8 	bl	8000270 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b61      	ldr	r3, [pc, #388]	; (800326c <UART_SetConfig+0x2d4>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011c      	lsls	r4, r3, #4
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	64b9      	str	r1, [r7, #72]	; 0x48
 8003108:	415b      	adcs	r3, r3
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003110:	4641      	mov	r1, r8
 8003112:	eb12 0a01 	adds.w	sl, r2, r1
 8003116:	4649      	mov	r1, r9
 8003118:	eb43 0b01 	adc.w	fp, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800312c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003130:	4692      	mov	sl, r2
 8003132:	469b      	mov	fp, r3
 8003134:	4643      	mov	r3, r8
 8003136:	eb1a 0303 	adds.w	r3, sl, r3
 800313a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800313e:	464b      	mov	r3, r9
 8003140:	eb4b 0303 	adc.w	r3, fp, r3
 8003144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003154:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800315c:	460b      	mov	r3, r1
 800315e:	18db      	adds	r3, r3, r3
 8003160:	643b      	str	r3, [r7, #64]	; 0x40
 8003162:	4613      	mov	r3, r2
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
 800316a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800316e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003172:	f7fd f87d 	bl	8000270 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4611      	mov	r1, r2
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <UART_SetConfig+0x2d4>)
 800317e:	fba3 2301 	umull	r2, r3, r3, r1
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2264      	movs	r2, #100	; 0x64
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	1acb      	subs	r3, r1, r3
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <UART_SetConfig+0x2d4>)
 8003194:	fba3 2302 	umull	r2, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a0:	441c      	add	r4, r3
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	1891      	adds	r1, r2, r2
 80031ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80031bc:	415b      	adcs	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031c4:	4641      	mov	r1, r8
 80031c6:	1851      	adds	r1, r2, r1
 80031c8:	6339      	str	r1, [r7, #48]	; 0x30
 80031ca:	4649      	mov	r1, r9
 80031cc:	414b      	adcs	r3, r1
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031dc:	4659      	mov	r1, fp
 80031de:	00cb      	lsls	r3, r1, #3
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e6:	4651      	mov	r1, sl
 80031e8:	00ca      	lsls	r2, r1, #3
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	4642      	mov	r2, r8
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f8:	464b      	mov	r3, r9
 80031fa:	460a      	mov	r2, r1
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003210:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003218:	460b      	mov	r3, r1
 800321a:	18db      	adds	r3, r3, r3
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
 800321e:	4613      	mov	r3, r2
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800322a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800322e:	f7fd f81f 	bl	8000270 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <UART_SetConfig+0x2d4>)
 8003238:	fba3 1302 	umull	r1, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2164      	movs	r1, #100	; 0x64
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3332      	adds	r3, #50	; 0x32
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <UART_SetConfig+0x2d4>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 0207 	and.w	r2, r3, #7
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4422      	add	r2, r4
 800325e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003260:	e106      	b.n	8003470 <UART_SetConfig+0x4d8>
 8003262:	bf00      	nop
 8003264:	40011000 	.word	0x40011000
 8003268:	40011400 	.word	0x40011400
 800326c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800327a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800327e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003282:	4642      	mov	r2, r8
 8003284:	464b      	mov	r3, r9
 8003286:	1891      	adds	r1, r2, r2
 8003288:	6239      	str	r1, [r7, #32]
 800328a:	415b      	adcs	r3, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003292:	4641      	mov	r1, r8
 8003294:	1854      	adds	r4, r2, r1
 8003296:	4649      	mov	r1, r9
 8003298:	eb43 0501 	adc.w	r5, r3, r1
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	00eb      	lsls	r3, r5, #3
 80032a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032aa:	00e2      	lsls	r2, r4, #3
 80032ac:	4614      	mov	r4, r2
 80032ae:	461d      	mov	r5, r3
 80032b0:	4643      	mov	r3, r8
 80032b2:	18e3      	adds	r3, r4, r3
 80032b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032b8:	464b      	mov	r3, r9
 80032ba:	eb45 0303 	adc.w	r3, r5, r3
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032de:	4629      	mov	r1, r5
 80032e0:	008b      	lsls	r3, r1, #2
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e8:	4621      	mov	r1, r4
 80032ea:	008a      	lsls	r2, r1, #2
 80032ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032f0:	f7fc ffbe 	bl	8000270 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b60      	ldr	r3, [pc, #384]	; (800347c <UART_SetConfig+0x4e4>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011c      	lsls	r4, r3, #4
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800330c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	61b9      	str	r1, [r7, #24]
 800331c:	415b      	adcs	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6139      	str	r1, [r7, #16]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	67bb      	str	r3, [r7, #120]	; 0x78
 800336e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800337c:	4649      	mov	r1, r9
 800337e:	008b      	lsls	r3, r1, #2
 8003380:	4641      	mov	r1, r8
 8003382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003386:	4641      	mov	r1, r8
 8003388:	008a      	lsls	r2, r1, #2
 800338a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800338e:	f7fc ff6f 	bl	8000270 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4b38      	ldr	r3, [pc, #224]	; (800347c <UART_SetConfig+0x4e4>)
 800339a:	fba3 2301 	umull	r2, r3, r3, r1
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	; 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a33      	ldr	r2, [pc, #204]	; (800347c <UART_SetConfig+0x4e4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b8:	441c      	add	r4, r3
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	673b      	str	r3, [r7, #112]	; 0x70
 80033c2:	677a      	str	r2, [r7, #116]	; 0x74
 80033c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	415b      	adcs	r3, r3
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	66bb      	str	r3, [r7, #104]	; 0x68
 800340a:	464b      	mov	r3, r9
 800340c:	460a      	mov	r2, r1
 800340e:	eb42 0303 	adc.w	r3, r2, r3
 8003412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	663b      	str	r3, [r7, #96]	; 0x60
 800341e:	667a      	str	r2, [r7, #100]	; 0x64
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800342c:	4649      	mov	r1, r9
 800342e:	008b      	lsls	r3, r1, #2
 8003430:	4641      	mov	r1, r8
 8003432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003436:	4641      	mov	r1, r8
 8003438:	008a      	lsls	r2, r1, #2
 800343a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800343e:	f7fc ff17 	bl	8000270 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <UART_SetConfig+0x4e4>)
 8003448:	fba3 1302 	umull	r1, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	2164      	movs	r1, #100	; 0x64
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	3332      	adds	r3, #50	; 0x32
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <UART_SetConfig+0x4e4>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4422      	add	r2, r4
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003476:	46bd      	mov	sp, r7
 8003478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <std>:
 8003480:	2300      	movs	r3, #0
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	e9c0 3300 	strd	r3, r3, [r0]
 800348a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	8181      	strh	r1, [r0, #12]
 8003492:	6643      	str	r3, [r0, #100]	; 0x64
 8003494:	81c2      	strh	r2, [r0, #14]
 8003496:	6183      	str	r3, [r0, #24]
 8003498:	4619      	mov	r1, r3
 800349a:	2208      	movs	r2, #8
 800349c:	305c      	adds	r0, #92	; 0x5c
 800349e:	f000 f90e 	bl	80036be <memset>
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <std+0x58>)
 80034a4:	6263      	str	r3, [r4, #36]	; 0x24
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <std+0x5c>)
 80034a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <std+0x60>)
 80034ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <std+0x64>)
 80034b0:	6323      	str	r3, [r4, #48]	; 0x30
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <std+0x68>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d006      	beq.n	80034c8 <std+0x48>
 80034ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034be:	4294      	cmp	r4, r2
 80034c0:	d002      	beq.n	80034c8 <std+0x48>
 80034c2:	33d0      	adds	r3, #208	; 0xd0
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d105      	bne.n	80034d4 <std+0x54>
 80034c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d0:	f000 b96e 	b.w	80037b0 <__retarget_lock_init_recursive>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	08003639 	.word	0x08003639
 80034dc:	0800365b 	.word	0x0800365b
 80034e0:	08003693 	.word	0x08003693
 80034e4:	080036b7 	.word	0x080036b7
 80034e8:	2000014c 	.word	0x2000014c

080034ec <stdio_exit_handler>:
 80034ec:	4a02      	ldr	r2, [pc, #8]	; (80034f8 <stdio_exit_handler+0xc>)
 80034ee:	4903      	ldr	r1, [pc, #12]	; (80034fc <stdio_exit_handler+0x10>)
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <stdio_exit_handler+0x14>)
 80034f2:	f000 b869 	b.w	80035c8 <_fwalk_sglue>
 80034f6:	bf00      	nop
 80034f8:	2000000c 	.word	0x2000000c
 80034fc:	0800405d 	.word	0x0800405d
 8003500:	20000018 	.word	0x20000018

08003504 <cleanup_stdio>:
 8003504:	6841      	ldr	r1, [r0, #4]
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <cleanup_stdio+0x34>)
 8003508:	4299      	cmp	r1, r3
 800350a:	b510      	push	{r4, lr}
 800350c:	4604      	mov	r4, r0
 800350e:	d001      	beq.n	8003514 <cleanup_stdio+0x10>
 8003510:	f000 fda4 	bl	800405c <_fflush_r>
 8003514:	68a1      	ldr	r1, [r4, #8]
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <cleanup_stdio+0x38>)
 8003518:	4299      	cmp	r1, r3
 800351a:	d002      	beq.n	8003522 <cleanup_stdio+0x1e>
 800351c:	4620      	mov	r0, r4
 800351e:	f000 fd9d 	bl	800405c <_fflush_r>
 8003522:	68e1      	ldr	r1, [r4, #12]
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <cleanup_stdio+0x3c>)
 8003526:	4299      	cmp	r1, r3
 8003528:	d004      	beq.n	8003534 <cleanup_stdio+0x30>
 800352a:	4620      	mov	r0, r4
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003530:	f000 bd94 	b.w	800405c <_fflush_r>
 8003534:	bd10      	pop	{r4, pc}
 8003536:	bf00      	nop
 8003538:	2000014c 	.word	0x2000014c
 800353c:	200001b4 	.word	0x200001b4
 8003540:	2000021c 	.word	0x2000021c

08003544 <global_stdio_init.part.0>:
 8003544:	b510      	push	{r4, lr}
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <global_stdio_init.part.0+0x30>)
 8003548:	4c0b      	ldr	r4, [pc, #44]	; (8003578 <global_stdio_init.part.0+0x34>)
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <global_stdio_init.part.0+0x38>)
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	4620      	mov	r0, r4
 8003550:	2200      	movs	r2, #0
 8003552:	2104      	movs	r1, #4
 8003554:	f7ff ff94 	bl	8003480 <std>
 8003558:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800355c:	2201      	movs	r2, #1
 800355e:	2109      	movs	r1, #9
 8003560:	f7ff ff8e 	bl	8003480 <std>
 8003564:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003568:	2202      	movs	r2, #2
 800356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356e:	2112      	movs	r1, #18
 8003570:	f7ff bf86 	b.w	8003480 <std>
 8003574:	20000284 	.word	0x20000284
 8003578:	2000014c 	.word	0x2000014c
 800357c:	080034ed 	.word	0x080034ed

08003580 <__sfp_lock_acquire>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__sfp_lock_acquire+0x8>)
 8003582:	f000 b916 	b.w	80037b2 <__retarget_lock_acquire_recursive>
 8003586:	bf00      	nop
 8003588:	2000028d 	.word	0x2000028d

0800358c <__sfp_lock_release>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__sfp_lock_release+0x8>)
 800358e:	f000 b911 	b.w	80037b4 <__retarget_lock_release_recursive>
 8003592:	bf00      	nop
 8003594:	2000028d 	.word	0x2000028d

08003598 <__sinit>:
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	f7ff fff0 	bl	8003580 <__sfp_lock_acquire>
 80035a0:	6a23      	ldr	r3, [r4, #32]
 80035a2:	b11b      	cbz	r3, 80035ac <__sinit+0x14>
 80035a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a8:	f7ff bff0 	b.w	800358c <__sfp_lock_release>
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__sinit+0x28>)
 80035ae:	6223      	str	r3, [r4, #32]
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__sinit+0x2c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f5      	bne.n	80035a4 <__sinit+0xc>
 80035b8:	f7ff ffc4 	bl	8003544 <global_stdio_init.part.0>
 80035bc:	e7f2      	b.n	80035a4 <__sinit+0xc>
 80035be:	bf00      	nop
 80035c0:	08003505 	.word	0x08003505
 80035c4:	20000284 	.word	0x20000284

080035c8 <_fwalk_sglue>:
 80035c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4607      	mov	r7, r0
 80035ce:	4688      	mov	r8, r1
 80035d0:	4614      	mov	r4, r2
 80035d2:	2600      	movs	r6, #0
 80035d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035d8:	f1b9 0901 	subs.w	r9, r9, #1
 80035dc:	d505      	bpl.n	80035ea <_fwalk_sglue+0x22>
 80035de:	6824      	ldr	r4, [r4, #0]
 80035e0:	2c00      	cmp	r4, #0
 80035e2:	d1f7      	bne.n	80035d4 <_fwalk_sglue+0xc>
 80035e4:	4630      	mov	r0, r6
 80035e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ea:	89ab      	ldrh	r3, [r5, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d907      	bls.n	8003600 <_fwalk_sglue+0x38>
 80035f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035f4:	3301      	adds	r3, #1
 80035f6:	d003      	beq.n	8003600 <_fwalk_sglue+0x38>
 80035f8:	4629      	mov	r1, r5
 80035fa:	4638      	mov	r0, r7
 80035fc:	47c0      	blx	r8
 80035fe:	4306      	orrs	r6, r0
 8003600:	3568      	adds	r5, #104	; 0x68
 8003602:	e7e9      	b.n	80035d8 <_fwalk_sglue+0x10>

08003604 <iprintf>:
 8003604:	b40f      	push	{r0, r1, r2, r3}
 8003606:	b507      	push	{r0, r1, r2, lr}
 8003608:	4906      	ldr	r1, [pc, #24]	; (8003624 <iprintf+0x20>)
 800360a:	ab04      	add	r3, sp, #16
 800360c:	6808      	ldr	r0, [r1, #0]
 800360e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003612:	6881      	ldr	r1, [r0, #8]
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	f000 f9f1 	bl	80039fc <_vfiprintf_r>
 800361a:	b003      	add	sp, #12
 800361c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003620:	b004      	add	sp, #16
 8003622:	4770      	bx	lr
 8003624:	20000064 	.word	0x20000064

08003628 <putchar>:
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <putchar+0xc>)
 800362a:	4601      	mov	r1, r0
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	6882      	ldr	r2, [r0, #8]
 8003630:	f000 bd3c 	b.w	80040ac <_putc_r>
 8003634:	20000064 	.word	0x20000064

08003638 <__sread>:
 8003638:	b510      	push	{r4, lr}
 800363a:	460c      	mov	r4, r1
 800363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003640:	f000 f868 	bl	8003714 <_read_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	bfab      	itete	ge
 8003648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800364a:	89a3      	ldrhlt	r3, [r4, #12]
 800364c:	181b      	addge	r3, r3, r0
 800364e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003652:	bfac      	ite	ge
 8003654:	6563      	strge	r3, [r4, #84]	; 0x54
 8003656:	81a3      	strhlt	r3, [r4, #12]
 8003658:	bd10      	pop	{r4, pc}

0800365a <__swrite>:
 800365a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	461f      	mov	r7, r3
 8003660:	898b      	ldrh	r3, [r1, #12]
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4616      	mov	r6, r2
 800366a:	d505      	bpl.n	8003678 <__swrite+0x1e>
 800366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003670:	2302      	movs	r3, #2
 8003672:	2200      	movs	r2, #0
 8003674:	f000 f83c 	bl	80036f0 <_lseek_r>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800367e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	4632      	mov	r2, r6
 8003686:	463b      	mov	r3, r7
 8003688:	4628      	mov	r0, r5
 800368a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	f000 b853 	b.w	8003738 <_write_r>

08003692 <__sseek>:
 8003692:	b510      	push	{r4, lr}
 8003694:	460c      	mov	r4, r1
 8003696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369a:	f000 f829 	bl	80036f0 <_lseek_r>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	bf15      	itete	ne
 80036a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036ae:	81a3      	strheq	r3, [r4, #12]
 80036b0:	bf18      	it	ne
 80036b2:	81a3      	strhne	r3, [r4, #12]
 80036b4:	bd10      	pop	{r4, pc}

080036b6 <__sclose>:
 80036b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ba:	f000 b809 	b.w	80036d0 <_close_r>

080036be <memset>:
 80036be:	4402      	add	r2, r0
 80036c0:	4603      	mov	r3, r0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d100      	bne.n	80036c8 <memset+0xa>
 80036c6:	4770      	bx	lr
 80036c8:	f803 1b01 	strb.w	r1, [r3], #1
 80036cc:	e7f9      	b.n	80036c2 <memset+0x4>
	...

080036d0 <_close_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4d06      	ldr	r5, [pc, #24]	; (80036ec <_close_r+0x1c>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fd fb6f 	bl	8000dbe <_close>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d102      	bne.n	80036ea <_close_r+0x1a>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	b103      	cbz	r3, 80036ea <_close_r+0x1a>
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	20000288 	.word	0x20000288

080036f0 <_lseek_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4d07      	ldr	r5, [pc, #28]	; (8003710 <_lseek_r+0x20>)
 80036f4:	4604      	mov	r4, r0
 80036f6:	4608      	mov	r0, r1
 80036f8:	4611      	mov	r1, r2
 80036fa:	2200      	movs	r2, #0
 80036fc:	602a      	str	r2, [r5, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7fd fb84 	bl	8000e0c <_lseek>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_lseek_r+0x1e>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	b103      	cbz	r3, 800370e <_lseek_r+0x1e>
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	20000288 	.word	0x20000288

08003714 <_read_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d07      	ldr	r5, [pc, #28]	; (8003734 <_read_r+0x20>)
 8003718:	4604      	mov	r4, r0
 800371a:	4608      	mov	r0, r1
 800371c:	4611      	mov	r1, r2
 800371e:	2200      	movs	r2, #0
 8003720:	602a      	str	r2, [r5, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f7fd fb2e 	bl	8000d84 <_read>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_read_r+0x1e>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_read_r+0x1e>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	20000288 	.word	0x20000288

08003738 <_write_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d07      	ldr	r5, [pc, #28]	; (8003758 <_write_r+0x20>)
 800373c:	4604      	mov	r4, r0
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	2200      	movs	r2, #0
 8003744:	602a      	str	r2, [r5, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	f7fc ff10 	bl	800056c <_write>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_write_r+0x1e>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_write_r+0x1e>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	20000288 	.word	0x20000288

0800375c <__errno>:
 800375c:	4b01      	ldr	r3, [pc, #4]	; (8003764 <__errno+0x8>)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000064 	.word	0x20000064

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4d0d      	ldr	r5, [pc, #52]	; (80037a0 <__libc_init_array+0x38>)
 800376c:	4c0d      	ldr	r4, [pc, #52]	; (80037a4 <__libc_init_array+0x3c>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	2600      	movs	r6, #0
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	4d0b      	ldr	r5, [pc, #44]	; (80037a8 <__libc_init_array+0x40>)
 800377a:	4c0c      	ldr	r4, [pc, #48]	; (80037ac <__libc_init_array+0x44>)
 800377c:	f000 fdf4 	bl	8004368 <_init>
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	2600      	movs	r6, #0
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	f855 3b04 	ldr.w	r3, [r5], #4
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	0800448c 	.word	0x0800448c
 80037a4:	0800448c 	.word	0x0800448c
 80037a8:	0800448c 	.word	0x0800448c
 80037ac:	08004490 	.word	0x08004490

080037b0 <__retarget_lock_init_recursive>:
 80037b0:	4770      	bx	lr

080037b2 <__retarget_lock_acquire_recursive>:
 80037b2:	4770      	bx	lr

080037b4 <__retarget_lock_release_recursive>:
 80037b4:	4770      	bx	lr
	...

080037b8 <_free_r>:
 80037b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ba:	2900      	cmp	r1, #0
 80037bc:	d044      	beq.n	8003848 <_free_r+0x90>
 80037be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c2:	9001      	str	r0, [sp, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f1a1 0404 	sub.w	r4, r1, #4
 80037ca:	bfb8      	it	lt
 80037cc:	18e4      	addlt	r4, r4, r3
 80037ce:	f000 f8df 	bl	8003990 <__malloc_lock>
 80037d2:	4a1e      	ldr	r2, [pc, #120]	; (800384c <_free_r+0x94>)
 80037d4:	9801      	ldr	r0, [sp, #4]
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	b933      	cbnz	r3, 80037e8 <_free_r+0x30>
 80037da:	6063      	str	r3, [r4, #4]
 80037dc:	6014      	str	r4, [r2, #0]
 80037de:	b003      	add	sp, #12
 80037e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037e4:	f000 b8da 	b.w	800399c <__malloc_unlock>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d908      	bls.n	80037fe <_free_r+0x46>
 80037ec:	6825      	ldr	r5, [r4, #0]
 80037ee:	1961      	adds	r1, r4, r5
 80037f0:	428b      	cmp	r3, r1
 80037f2:	bf01      	itttt	eq
 80037f4:	6819      	ldreq	r1, [r3, #0]
 80037f6:	685b      	ldreq	r3, [r3, #4]
 80037f8:	1949      	addeq	r1, r1, r5
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	e7ed      	b.n	80037da <_free_r+0x22>
 80037fe:	461a      	mov	r2, r3
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b10b      	cbz	r3, 8003808 <_free_r+0x50>
 8003804:	42a3      	cmp	r3, r4
 8003806:	d9fa      	bls.n	80037fe <_free_r+0x46>
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	1855      	adds	r5, r2, r1
 800380c:	42a5      	cmp	r5, r4
 800380e:	d10b      	bne.n	8003828 <_free_r+0x70>
 8003810:	6824      	ldr	r4, [r4, #0]
 8003812:	4421      	add	r1, r4
 8003814:	1854      	adds	r4, r2, r1
 8003816:	42a3      	cmp	r3, r4
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	d1e0      	bne.n	80037de <_free_r+0x26>
 800381c:	681c      	ldr	r4, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	6053      	str	r3, [r2, #4]
 8003822:	440c      	add	r4, r1
 8003824:	6014      	str	r4, [r2, #0]
 8003826:	e7da      	b.n	80037de <_free_r+0x26>
 8003828:	d902      	bls.n	8003830 <_free_r+0x78>
 800382a:	230c      	movs	r3, #12
 800382c:	6003      	str	r3, [r0, #0]
 800382e:	e7d6      	b.n	80037de <_free_r+0x26>
 8003830:	6825      	ldr	r5, [r4, #0]
 8003832:	1961      	adds	r1, r4, r5
 8003834:	428b      	cmp	r3, r1
 8003836:	bf04      	itt	eq
 8003838:	6819      	ldreq	r1, [r3, #0]
 800383a:	685b      	ldreq	r3, [r3, #4]
 800383c:	6063      	str	r3, [r4, #4]
 800383e:	bf04      	itt	eq
 8003840:	1949      	addeq	r1, r1, r5
 8003842:	6021      	streq	r1, [r4, #0]
 8003844:	6054      	str	r4, [r2, #4]
 8003846:	e7ca      	b.n	80037de <_free_r+0x26>
 8003848:	b003      	add	sp, #12
 800384a:	bd30      	pop	{r4, r5, pc}
 800384c:	20000290 	.word	0x20000290

08003850 <sbrk_aligned>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4e0e      	ldr	r6, [pc, #56]	; (800388c <sbrk_aligned+0x3c>)
 8003854:	460c      	mov	r4, r1
 8003856:	6831      	ldr	r1, [r6, #0]
 8003858:	4605      	mov	r5, r0
 800385a:	b911      	cbnz	r1, 8003862 <sbrk_aligned+0x12>
 800385c:	f000 fcf0 	bl	8004240 <_sbrk_r>
 8003860:	6030      	str	r0, [r6, #0]
 8003862:	4621      	mov	r1, r4
 8003864:	4628      	mov	r0, r5
 8003866:	f000 fceb 	bl	8004240 <_sbrk_r>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	d00a      	beq.n	8003884 <sbrk_aligned+0x34>
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d007      	beq.n	8003888 <sbrk_aligned+0x38>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fce0 	bl	8004240 <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d101      	bne.n	8003888 <sbrk_aligned+0x38>
 8003884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003888:	4620      	mov	r0, r4
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	20000294 	.word	0x20000294

08003890 <_malloc_r>:
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003894:	1ccd      	adds	r5, r1, #3
 8003896:	f025 0503 	bic.w	r5, r5, #3
 800389a:	3508      	adds	r5, #8
 800389c:	2d0c      	cmp	r5, #12
 800389e:	bf38      	it	cc
 80038a0:	250c      	movcc	r5, #12
 80038a2:	2d00      	cmp	r5, #0
 80038a4:	4607      	mov	r7, r0
 80038a6:	db01      	blt.n	80038ac <_malloc_r+0x1c>
 80038a8:	42a9      	cmp	r1, r5
 80038aa:	d905      	bls.n	80038b8 <_malloc_r+0x28>
 80038ac:	230c      	movs	r3, #12
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	2600      	movs	r6, #0
 80038b2:	4630      	mov	r0, r6
 80038b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800398c <_malloc_r+0xfc>
 80038bc:	f000 f868 	bl	8003990 <__malloc_lock>
 80038c0:	f8d8 3000 	ldr.w	r3, [r8]
 80038c4:	461c      	mov	r4, r3
 80038c6:	bb5c      	cbnz	r4, 8003920 <_malloc_r+0x90>
 80038c8:	4629      	mov	r1, r5
 80038ca:	4638      	mov	r0, r7
 80038cc:	f7ff ffc0 	bl	8003850 <sbrk_aligned>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	4604      	mov	r4, r0
 80038d4:	d155      	bne.n	8003982 <_malloc_r+0xf2>
 80038d6:	f8d8 4000 	ldr.w	r4, [r8]
 80038da:	4626      	mov	r6, r4
 80038dc:	2e00      	cmp	r6, #0
 80038de:	d145      	bne.n	800396c <_malloc_r+0xdc>
 80038e0:	2c00      	cmp	r4, #0
 80038e2:	d048      	beq.n	8003976 <_malloc_r+0xe6>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4631      	mov	r1, r6
 80038e8:	4638      	mov	r0, r7
 80038ea:	eb04 0903 	add.w	r9, r4, r3
 80038ee:	f000 fca7 	bl	8004240 <_sbrk_r>
 80038f2:	4581      	cmp	r9, r0
 80038f4:	d13f      	bne.n	8003976 <_malloc_r+0xe6>
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	1a6d      	subs	r5, r5, r1
 80038fa:	4629      	mov	r1, r5
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7ff ffa7 	bl	8003850 <sbrk_aligned>
 8003902:	3001      	adds	r0, #1
 8003904:	d037      	beq.n	8003976 <_malloc_r+0xe6>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	442b      	add	r3, r5
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	f8d8 3000 	ldr.w	r3, [r8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d038      	beq.n	8003986 <_malloc_r+0xf6>
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	42a2      	cmp	r2, r4
 8003918:	d12b      	bne.n	8003972 <_malloc_r+0xe2>
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	e00f      	b.n	8003940 <_malloc_r+0xb0>
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	1b52      	subs	r2, r2, r5
 8003924:	d41f      	bmi.n	8003966 <_malloc_r+0xd6>
 8003926:	2a0b      	cmp	r2, #11
 8003928:	d917      	bls.n	800395a <_malloc_r+0xca>
 800392a:	1961      	adds	r1, r4, r5
 800392c:	42a3      	cmp	r3, r4
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	bf18      	it	ne
 8003932:	6059      	strne	r1, [r3, #4]
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	bf08      	it	eq
 8003938:	f8c8 1000 	streq.w	r1, [r8]
 800393c:	5162      	str	r2, [r4, r5]
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	4638      	mov	r0, r7
 8003942:	f104 060b 	add.w	r6, r4, #11
 8003946:	f000 f829 	bl	800399c <__malloc_unlock>
 800394a:	f026 0607 	bic.w	r6, r6, #7
 800394e:	1d23      	adds	r3, r4, #4
 8003950:	1af2      	subs	r2, r6, r3
 8003952:	d0ae      	beq.n	80038b2 <_malloc_r+0x22>
 8003954:	1b9b      	subs	r3, r3, r6
 8003956:	50a3      	str	r3, [r4, r2]
 8003958:	e7ab      	b.n	80038b2 <_malloc_r+0x22>
 800395a:	42a3      	cmp	r3, r4
 800395c:	6862      	ldr	r2, [r4, #4]
 800395e:	d1dd      	bne.n	800391c <_malloc_r+0x8c>
 8003960:	f8c8 2000 	str.w	r2, [r8]
 8003964:	e7ec      	b.n	8003940 <_malloc_r+0xb0>
 8003966:	4623      	mov	r3, r4
 8003968:	6864      	ldr	r4, [r4, #4]
 800396a:	e7ac      	b.n	80038c6 <_malloc_r+0x36>
 800396c:	4634      	mov	r4, r6
 800396e:	6876      	ldr	r6, [r6, #4]
 8003970:	e7b4      	b.n	80038dc <_malloc_r+0x4c>
 8003972:	4613      	mov	r3, r2
 8003974:	e7cc      	b.n	8003910 <_malloc_r+0x80>
 8003976:	230c      	movs	r3, #12
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4638      	mov	r0, r7
 800397c:	f000 f80e 	bl	800399c <__malloc_unlock>
 8003980:	e797      	b.n	80038b2 <_malloc_r+0x22>
 8003982:	6025      	str	r5, [r4, #0]
 8003984:	e7dc      	b.n	8003940 <_malloc_r+0xb0>
 8003986:	605b      	str	r3, [r3, #4]
 8003988:	deff      	udf	#255	; 0xff
 800398a:	bf00      	nop
 800398c:	20000290 	.word	0x20000290

08003990 <__malloc_lock>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__malloc_lock+0x8>)
 8003992:	f7ff bf0e 	b.w	80037b2 <__retarget_lock_acquire_recursive>
 8003996:	bf00      	nop
 8003998:	2000028c 	.word	0x2000028c

0800399c <__malloc_unlock>:
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <__malloc_unlock+0x8>)
 800399e:	f7ff bf09 	b.w	80037b4 <__retarget_lock_release_recursive>
 80039a2:	bf00      	nop
 80039a4:	2000028c 	.word	0x2000028c

080039a8 <__sfputc_r>:
 80039a8:	6893      	ldr	r3, [r2, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	b410      	push	{r4}
 80039b0:	6093      	str	r3, [r2, #8]
 80039b2:	da08      	bge.n	80039c6 <__sfputc_r+0x1e>
 80039b4:	6994      	ldr	r4, [r2, #24]
 80039b6:	42a3      	cmp	r3, r4
 80039b8:	db01      	blt.n	80039be <__sfputc_r+0x16>
 80039ba:	290a      	cmp	r1, #10
 80039bc:	d103      	bne.n	80039c6 <__sfputc_r+0x1e>
 80039be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039c2:	f000 bba7 	b.w	8004114 <__swbuf_r>
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	1c58      	adds	r0, r3, #1
 80039ca:	6010      	str	r0, [r2, #0]
 80039cc:	7019      	strb	r1, [r3, #0]
 80039ce:	4608      	mov	r0, r1
 80039d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <__sfputs_r>:
 80039d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d8:	4606      	mov	r6, r0
 80039da:	460f      	mov	r7, r1
 80039dc:	4614      	mov	r4, r2
 80039de:	18d5      	adds	r5, r2, r3
 80039e0:	42ac      	cmp	r4, r5
 80039e2:	d101      	bne.n	80039e8 <__sfputs_r+0x12>
 80039e4:	2000      	movs	r0, #0
 80039e6:	e007      	b.n	80039f8 <__sfputs_r+0x22>
 80039e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ec:	463a      	mov	r2, r7
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7ff ffda 	bl	80039a8 <__sfputc_r>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d1f3      	bne.n	80039e0 <__sfputs_r+0xa>
 80039f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039fc <_vfiprintf_r>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	460d      	mov	r5, r1
 8003a02:	b09d      	sub	sp, #116	; 0x74
 8003a04:	4614      	mov	r4, r2
 8003a06:	4698      	mov	r8, r3
 8003a08:	4606      	mov	r6, r0
 8003a0a:	b118      	cbz	r0, 8003a14 <_vfiprintf_r+0x18>
 8003a0c:	6a03      	ldr	r3, [r0, #32]
 8003a0e:	b90b      	cbnz	r3, 8003a14 <_vfiprintf_r+0x18>
 8003a10:	f7ff fdc2 	bl	8003598 <__sinit>
 8003a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a16:	07d9      	lsls	r1, r3, #31
 8003a18:	d405      	bmi.n	8003a26 <_vfiprintf_r+0x2a>
 8003a1a:	89ab      	ldrh	r3, [r5, #12]
 8003a1c:	059a      	lsls	r2, r3, #22
 8003a1e:	d402      	bmi.n	8003a26 <_vfiprintf_r+0x2a>
 8003a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a22:	f7ff fec6 	bl	80037b2 <__retarget_lock_acquire_recursive>
 8003a26:	89ab      	ldrh	r3, [r5, #12]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	d501      	bpl.n	8003a30 <_vfiprintf_r+0x34>
 8003a2c:	692b      	ldr	r3, [r5, #16]
 8003a2e:	b99b      	cbnz	r3, 8003a58 <_vfiprintf_r+0x5c>
 8003a30:	4629      	mov	r1, r5
 8003a32:	4630      	mov	r0, r6
 8003a34:	f000 fbac 	bl	8004190 <__swsetup_r>
 8003a38:	b170      	cbz	r0, 8003a58 <_vfiprintf_r+0x5c>
 8003a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a3c:	07dc      	lsls	r4, r3, #31
 8003a3e:	d504      	bpl.n	8003a4a <_vfiprintf_r+0x4e>
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a44:	b01d      	add	sp, #116	; 0x74
 8003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4a:	89ab      	ldrh	r3, [r5, #12]
 8003a4c:	0598      	lsls	r0, r3, #22
 8003a4e:	d4f7      	bmi.n	8003a40 <_vfiprintf_r+0x44>
 8003a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a52:	f7ff feaf 	bl	80037b4 <__retarget_lock_release_recursive>
 8003a56:	e7f3      	b.n	8003a40 <_vfiprintf_r+0x44>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a66:	2330      	movs	r3, #48	; 0x30
 8003a68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003c1c <_vfiprintf_r+0x220>
 8003a6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a70:	f04f 0901 	mov.w	r9, #1
 8003a74:	4623      	mov	r3, r4
 8003a76:	469a      	mov	sl, r3
 8003a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a7c:	b10a      	cbz	r2, 8003a82 <_vfiprintf_r+0x86>
 8003a7e:	2a25      	cmp	r2, #37	; 0x25
 8003a80:	d1f9      	bne.n	8003a76 <_vfiprintf_r+0x7a>
 8003a82:	ebba 0b04 	subs.w	fp, sl, r4
 8003a86:	d00b      	beq.n	8003aa0 <_vfiprintf_r+0xa4>
 8003a88:	465b      	mov	r3, fp
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff ffa1 	bl	80039d6 <__sfputs_r>
 8003a94:	3001      	adds	r0, #1
 8003a96:	f000 80a9 	beq.w	8003bec <_vfiprintf_r+0x1f0>
 8003a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a9c:	445a      	add	r2, fp
 8003a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8003aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a1 	beq.w	8003bec <_vfiprintf_r+0x1f0>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ab4:	f10a 0a01 	add.w	sl, sl, #1
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	9307      	str	r3, [sp, #28]
 8003abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ac2:	4654      	mov	r4, sl
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aca:	4854      	ldr	r0, [pc, #336]	; (8003c1c <_vfiprintf_r+0x220>)
 8003acc:	f7fc fb80 	bl	80001d0 <memchr>
 8003ad0:	9a04      	ldr	r2, [sp, #16]
 8003ad2:	b9d8      	cbnz	r0, 8003b0c <_vfiprintf_r+0x110>
 8003ad4:	06d1      	lsls	r1, r2, #27
 8003ad6:	bf44      	itt	mi
 8003ad8:	2320      	movmi	r3, #32
 8003ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ade:	0713      	lsls	r3, r2, #28
 8003ae0:	bf44      	itt	mi
 8003ae2:	232b      	movmi	r3, #43	; 0x2b
 8003ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8003aec:	2b2a      	cmp	r3, #42	; 0x2a
 8003aee:	d015      	beq.n	8003b1c <_vfiprintf_r+0x120>
 8003af0:	9a07      	ldr	r2, [sp, #28]
 8003af2:	4654      	mov	r4, sl
 8003af4:	2000      	movs	r0, #0
 8003af6:	f04f 0c0a 	mov.w	ip, #10
 8003afa:	4621      	mov	r1, r4
 8003afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b00:	3b30      	subs	r3, #48	; 0x30
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	d94d      	bls.n	8003ba2 <_vfiprintf_r+0x1a6>
 8003b06:	b1b0      	cbz	r0, 8003b36 <_vfiprintf_r+0x13a>
 8003b08:	9207      	str	r2, [sp, #28]
 8003b0a:	e014      	b.n	8003b36 <_vfiprintf_r+0x13a>
 8003b0c:	eba0 0308 	sub.w	r3, r0, r8
 8003b10:	fa09 f303 	lsl.w	r3, r9, r3
 8003b14:	4313      	orrs	r3, r2
 8003b16:	9304      	str	r3, [sp, #16]
 8003b18:	46a2      	mov	sl, r4
 8003b1a:	e7d2      	b.n	8003ac2 <_vfiprintf_r+0xc6>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	1d19      	adds	r1, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9103      	str	r1, [sp, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bfbb      	ittet	lt
 8003b28:	425b      	neglt	r3, r3
 8003b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b2e:	9307      	strge	r3, [sp, #28]
 8003b30:	9307      	strlt	r3, [sp, #28]
 8003b32:	bfb8      	it	lt
 8003b34:	9204      	strlt	r2, [sp, #16]
 8003b36:	7823      	ldrb	r3, [r4, #0]
 8003b38:	2b2e      	cmp	r3, #46	; 0x2e
 8003b3a:	d10c      	bne.n	8003b56 <_vfiprintf_r+0x15a>
 8003b3c:	7863      	ldrb	r3, [r4, #1]
 8003b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b40:	d134      	bne.n	8003bac <_vfiprintf_r+0x1b0>
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	1d1a      	adds	r2, r3, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	9203      	str	r2, [sp, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfb8      	it	lt
 8003b4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b52:	3402      	adds	r4, #2
 8003b54:	9305      	str	r3, [sp, #20]
 8003b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003c2c <_vfiprintf_r+0x230>
 8003b5a:	7821      	ldrb	r1, [r4, #0]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	4650      	mov	r0, sl
 8003b60:	f7fc fb36 	bl	80001d0 <memchr>
 8003b64:	b138      	cbz	r0, 8003b76 <_vfiprintf_r+0x17a>
 8003b66:	9b04      	ldr	r3, [sp, #16]
 8003b68:	eba0 000a 	sub.w	r0, r0, sl
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	4082      	lsls	r2, r0
 8003b70:	4313      	orrs	r3, r2
 8003b72:	3401      	adds	r4, #1
 8003b74:	9304      	str	r3, [sp, #16]
 8003b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7a:	4829      	ldr	r0, [pc, #164]	; (8003c20 <_vfiprintf_r+0x224>)
 8003b7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b80:	2206      	movs	r2, #6
 8003b82:	f7fc fb25 	bl	80001d0 <memchr>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d03f      	beq.n	8003c0a <_vfiprintf_r+0x20e>
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <_vfiprintf_r+0x228>)
 8003b8c:	bb1b      	cbnz	r3, 8003bd6 <_vfiprintf_r+0x1da>
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	3307      	adds	r3, #7
 8003b92:	f023 0307 	bic.w	r3, r3, #7
 8003b96:	3308      	adds	r3, #8
 8003b98:	9303      	str	r3, [sp, #12]
 8003b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b9c:	443b      	add	r3, r7
 8003b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba0:	e768      	b.n	8003a74 <_vfiprintf_r+0x78>
 8003ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	2001      	movs	r0, #1
 8003baa:	e7a6      	b.n	8003afa <_vfiprintf_r+0xfe>
 8003bac:	2300      	movs	r3, #0
 8003bae:	3401      	adds	r4, #1
 8003bb0:	9305      	str	r3, [sp, #20]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0c0a 	mov.w	ip, #10
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bbe:	3a30      	subs	r2, #48	; 0x30
 8003bc0:	2a09      	cmp	r2, #9
 8003bc2:	d903      	bls.n	8003bcc <_vfiprintf_r+0x1d0>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0c6      	beq.n	8003b56 <_vfiprintf_r+0x15a>
 8003bc8:	9105      	str	r1, [sp, #20]
 8003bca:	e7c4      	b.n	8003b56 <_vfiprintf_r+0x15a>
 8003bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e7f0      	b.n	8003bb8 <_vfiprintf_r+0x1bc>
 8003bd6:	ab03      	add	r3, sp, #12
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <_vfiprintf_r+0x22c>)
 8003bde:	a904      	add	r1, sp, #16
 8003be0:	4630      	mov	r0, r6
 8003be2:	f3af 8000 	nop.w
 8003be6:	4607      	mov	r7, r0
 8003be8:	1c78      	adds	r0, r7, #1
 8003bea:	d1d6      	bne.n	8003b9a <_vfiprintf_r+0x19e>
 8003bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bee:	07d9      	lsls	r1, r3, #31
 8003bf0:	d405      	bmi.n	8003bfe <_vfiprintf_r+0x202>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d402      	bmi.n	8003bfe <_vfiprintf_r+0x202>
 8003bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bfa:	f7ff fddb 	bl	80037b4 <__retarget_lock_release_recursive>
 8003bfe:	89ab      	ldrh	r3, [r5, #12]
 8003c00:	065b      	lsls	r3, r3, #25
 8003c02:	f53f af1d 	bmi.w	8003a40 <_vfiprintf_r+0x44>
 8003c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c08:	e71c      	b.n	8003a44 <_vfiprintf_r+0x48>
 8003c0a:	ab03      	add	r3, sp, #12
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <_vfiprintf_r+0x22c>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f879 	bl	8003d0c <_printf_i>
 8003c1a:	e7e4      	b.n	8003be6 <_vfiprintf_r+0x1ea>
 8003c1c:	08004450 	.word	0x08004450
 8003c20:	0800445a 	.word	0x0800445a
 8003c24:	00000000 	.word	0x00000000
 8003c28:	080039d7 	.word	0x080039d7
 8003c2c:	08004456 	.word	0x08004456

08003c30 <_printf_common>:
 8003c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c34:	4616      	mov	r6, r2
 8003c36:	4699      	mov	r9, r3
 8003c38:	688a      	ldr	r2, [r1, #8]
 8003c3a:	690b      	ldr	r3, [r1, #16]
 8003c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bfb8      	it	lt
 8003c44:	4613      	movlt	r3, r2
 8003c46:	6033      	str	r3, [r6, #0]
 8003c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	b10a      	cbz	r2, 8003c56 <_printf_common+0x26>
 8003c52:	3301      	adds	r3, #1
 8003c54:	6033      	str	r3, [r6, #0]
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	0699      	lsls	r1, r3, #26
 8003c5a:	bf42      	ittt	mi
 8003c5c:	6833      	ldrmi	r3, [r6, #0]
 8003c5e:	3302      	addmi	r3, #2
 8003c60:	6033      	strmi	r3, [r6, #0]
 8003c62:	6825      	ldr	r5, [r4, #0]
 8003c64:	f015 0506 	ands.w	r5, r5, #6
 8003c68:	d106      	bne.n	8003c78 <_printf_common+0x48>
 8003c6a:	f104 0a19 	add.w	sl, r4, #25
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	6832      	ldr	r2, [r6, #0]
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dc26      	bgt.n	8003cc6 <_printf_common+0x96>
 8003c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c7c:	1e13      	subs	r3, r2, #0
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	bf18      	it	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	0692      	lsls	r2, r2, #26
 8003c86:	d42b      	bmi.n	8003ce0 <_printf_common+0xb0>
 8003c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4638      	mov	r0, r7
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d01e      	beq.n	8003cd4 <_printf_common+0xa4>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	6922      	ldr	r2, [r4, #16]
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf02      	ittt	eq
 8003ca2:	68e5      	ldreq	r5, [r4, #12]
 8003ca4:	6833      	ldreq	r3, [r6, #0]
 8003ca6:	1aed      	subeq	r5, r5, r3
 8003ca8:	68a3      	ldr	r3, [r4, #8]
 8003caa:	bf0c      	ite	eq
 8003cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb0:	2500      	movne	r5, #0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfc4      	itt	gt
 8003cb6:	1a9b      	subgt	r3, r3, r2
 8003cb8:	18ed      	addgt	r5, r5, r3
 8003cba:	2600      	movs	r6, #0
 8003cbc:	341a      	adds	r4, #26
 8003cbe:	42b5      	cmp	r5, r6
 8003cc0:	d11a      	bne.n	8003cf8 <_printf_common+0xc8>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e008      	b.n	8003cd8 <_printf_common+0xa8>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4652      	mov	r2, sl
 8003cca:	4649      	mov	r1, r9
 8003ccc:	4638      	mov	r0, r7
 8003cce:	47c0      	blx	r8
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d103      	bne.n	8003cdc <_printf_common+0xac>
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	3501      	adds	r5, #1
 8003cde:	e7c6      	b.n	8003c6e <_printf_common+0x3e>
 8003ce0:	18e1      	adds	r1, r4, r3
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	2030      	movs	r0, #48	; 0x30
 8003ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cea:	4422      	add	r2, r4
 8003cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	e7c7      	b.n	8003c88 <_printf_common+0x58>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	4638      	mov	r0, r7
 8003d00:	47c0      	blx	r8
 8003d02:	3001      	adds	r0, #1
 8003d04:	d0e6      	beq.n	8003cd4 <_printf_common+0xa4>
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7d9      	b.n	8003cbe <_printf_common+0x8e>
	...

08003d0c <_printf_i>:
 8003d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	7e0f      	ldrb	r7, [r1, #24]
 8003d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d14:	2f78      	cmp	r7, #120	; 0x78
 8003d16:	4691      	mov	r9, r2
 8003d18:	4680      	mov	r8, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	469a      	mov	sl, r3
 8003d1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d22:	d807      	bhi.n	8003d34 <_printf_i+0x28>
 8003d24:	2f62      	cmp	r7, #98	; 0x62
 8003d26:	d80a      	bhi.n	8003d3e <_printf_i+0x32>
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	f000 80d4 	beq.w	8003ed6 <_printf_i+0x1ca>
 8003d2e:	2f58      	cmp	r7, #88	; 0x58
 8003d30:	f000 80c0 	beq.w	8003eb4 <_printf_i+0x1a8>
 8003d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d3c:	e03a      	b.n	8003db4 <_printf_i+0xa8>
 8003d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d42:	2b15      	cmp	r3, #21
 8003d44:	d8f6      	bhi.n	8003d34 <_printf_i+0x28>
 8003d46:	a101      	add	r1, pc, #4	; (adr r1, 8003d4c <_printf_i+0x40>)
 8003d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	08003d35 	.word	0x08003d35
 8003d58:	08003d35 	.word	0x08003d35
 8003d5c:	08003d35 	.word	0x08003d35
 8003d60:	08003d35 	.word	0x08003d35
 8003d64:	08003db9 	.word	0x08003db9
 8003d68:	08003d35 	.word	0x08003d35
 8003d6c:	08003d35 	.word	0x08003d35
 8003d70:	08003d35 	.word	0x08003d35
 8003d74:	08003d35 	.word	0x08003d35
 8003d78:	08003ebd 	.word	0x08003ebd
 8003d7c:	08003de5 	.word	0x08003de5
 8003d80:	08003e77 	.word	0x08003e77
 8003d84:	08003d35 	.word	0x08003d35
 8003d88:	08003d35 	.word	0x08003d35
 8003d8c:	08003edf 	.word	0x08003edf
 8003d90:	08003d35 	.word	0x08003d35
 8003d94:	08003de5 	.word	0x08003de5
 8003d98:	08003d35 	.word	0x08003d35
 8003d9c:	08003d35 	.word	0x08003d35
 8003da0:	08003e7f 	.word	0x08003e7f
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db4:	2301      	movs	r3, #1
 8003db6:	e09f      	b.n	8003ef8 <_printf_i+0x1ec>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	0607      	lsls	r7, r0, #24
 8003dbe:	f103 0104 	add.w	r1, r3, #4
 8003dc2:	6029      	str	r1, [r5, #0]
 8003dc4:	d501      	bpl.n	8003dca <_printf_i+0xbe>
 8003dc6:	681e      	ldr	r6, [r3, #0]
 8003dc8:	e003      	b.n	8003dd2 <_printf_i+0xc6>
 8003dca:	0646      	lsls	r6, r0, #25
 8003dcc:	d5fb      	bpl.n	8003dc6 <_printf_i+0xba>
 8003dce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	da03      	bge.n	8003dde <_printf_i+0xd2>
 8003dd6:	232d      	movs	r3, #45	; 0x2d
 8003dd8:	4276      	negs	r6, r6
 8003dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dde:	485a      	ldr	r0, [pc, #360]	; (8003f48 <_printf_i+0x23c>)
 8003de0:	230a      	movs	r3, #10
 8003de2:	e012      	b.n	8003e0a <_printf_i+0xfe>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	6029      	str	r1, [r5, #0]
 8003dec:	0605      	lsls	r5, r0, #24
 8003dee:	d501      	bpl.n	8003df4 <_printf_i+0xe8>
 8003df0:	681e      	ldr	r6, [r3, #0]
 8003df2:	e002      	b.n	8003dfa <_printf_i+0xee>
 8003df4:	0641      	lsls	r1, r0, #25
 8003df6:	d5fb      	bpl.n	8003df0 <_printf_i+0xe4>
 8003df8:	881e      	ldrh	r6, [r3, #0]
 8003dfa:	4853      	ldr	r0, [pc, #332]	; (8003f48 <_printf_i+0x23c>)
 8003dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8003dfe:	bf0c      	ite	eq
 8003e00:	2308      	moveq	r3, #8
 8003e02:	230a      	movne	r3, #10
 8003e04:	2100      	movs	r1, #0
 8003e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e0a:	6865      	ldr	r5, [r4, #4]
 8003e0c:	60a5      	str	r5, [r4, #8]
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	bfa2      	ittt	ge
 8003e12:	6821      	ldrge	r1, [r4, #0]
 8003e14:	f021 0104 	bicge.w	r1, r1, #4
 8003e18:	6021      	strge	r1, [r4, #0]
 8003e1a:	b90e      	cbnz	r6, 8003e20 <_printf_i+0x114>
 8003e1c:	2d00      	cmp	r5, #0
 8003e1e:	d04b      	beq.n	8003eb8 <_printf_i+0x1ac>
 8003e20:	4615      	mov	r5, r2
 8003e22:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e26:	fb03 6711 	mls	r7, r3, r1, r6
 8003e2a:	5dc7      	ldrb	r7, [r0, r7]
 8003e2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e30:	4637      	mov	r7, r6
 8003e32:	42bb      	cmp	r3, r7
 8003e34:	460e      	mov	r6, r1
 8003e36:	d9f4      	bls.n	8003e22 <_printf_i+0x116>
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d10b      	bne.n	8003e54 <_printf_i+0x148>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	07de      	lsls	r6, r3, #31
 8003e40:	d508      	bpl.n	8003e54 <_printf_i+0x148>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	6861      	ldr	r1, [r4, #4]
 8003e46:	4299      	cmp	r1, r3
 8003e48:	bfde      	ittt	le
 8003e4a:	2330      	movle	r3, #48	; 0x30
 8003e4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e54:	1b52      	subs	r2, r2, r5
 8003e56:	6122      	str	r2, [r4, #16]
 8003e58:	f8cd a000 	str.w	sl, [sp]
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	aa03      	add	r2, sp, #12
 8003e60:	4621      	mov	r1, r4
 8003e62:	4640      	mov	r0, r8
 8003e64:	f7ff fee4 	bl	8003c30 <_printf_common>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d14a      	bne.n	8003f02 <_printf_i+0x1f6>
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e70:	b004      	add	sp, #16
 8003e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	f043 0320 	orr.w	r3, r3, #32
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	4833      	ldr	r0, [pc, #204]	; (8003f4c <_printf_i+0x240>)
 8003e80:	2778      	movs	r7, #120	; 0x78
 8003e82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	6829      	ldr	r1, [r5, #0]
 8003e8a:	061f      	lsls	r7, r3, #24
 8003e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e90:	d402      	bmi.n	8003e98 <_printf_i+0x18c>
 8003e92:	065f      	lsls	r7, r3, #25
 8003e94:	bf48      	it	mi
 8003e96:	b2b6      	uxthmi	r6, r6
 8003e98:	07df      	lsls	r7, r3, #31
 8003e9a:	bf48      	it	mi
 8003e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003ea0:	6029      	str	r1, [r5, #0]
 8003ea2:	bf48      	it	mi
 8003ea4:	6023      	strmi	r3, [r4, #0]
 8003ea6:	b91e      	cbnz	r6, 8003eb0 <_printf_i+0x1a4>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	f023 0320 	bic.w	r3, r3, #32
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	e7a7      	b.n	8003e04 <_printf_i+0xf8>
 8003eb4:	4824      	ldr	r0, [pc, #144]	; (8003f48 <_printf_i+0x23c>)
 8003eb6:	e7e4      	b.n	8003e82 <_printf_i+0x176>
 8003eb8:	4615      	mov	r5, r2
 8003eba:	e7bd      	b.n	8003e38 <_printf_i+0x12c>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	6826      	ldr	r6, [r4, #0]
 8003ec0:	6961      	ldr	r1, [r4, #20]
 8003ec2:	1d18      	adds	r0, r3, #4
 8003ec4:	6028      	str	r0, [r5, #0]
 8003ec6:	0635      	lsls	r5, r6, #24
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	d501      	bpl.n	8003ed0 <_printf_i+0x1c4>
 8003ecc:	6019      	str	r1, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <_printf_i+0x1ca>
 8003ed0:	0670      	lsls	r0, r6, #25
 8003ed2:	d5fb      	bpl.n	8003ecc <_printf_i+0x1c0>
 8003ed4:	8019      	strh	r1, [r3, #0]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	4615      	mov	r5, r2
 8003edc:	e7bc      	b.n	8003e58 <_printf_i+0x14c>
 8003ede:	682b      	ldr	r3, [r5, #0]
 8003ee0:	1d1a      	adds	r2, r3, #4
 8003ee2:	602a      	str	r2, [r5, #0]
 8003ee4:	681d      	ldr	r5, [r3, #0]
 8003ee6:	6862      	ldr	r2, [r4, #4]
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4628      	mov	r0, r5
 8003eec:	f7fc f970 	bl	80001d0 <memchr>
 8003ef0:	b108      	cbz	r0, 8003ef6 <_printf_i+0x1ea>
 8003ef2:	1b40      	subs	r0, r0, r5
 8003ef4:	6060      	str	r0, [r4, #4]
 8003ef6:	6863      	ldr	r3, [r4, #4]
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	2300      	movs	r3, #0
 8003efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f00:	e7aa      	b.n	8003e58 <_printf_i+0x14c>
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	462a      	mov	r2, r5
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	47d0      	blx	sl
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d0ad      	beq.n	8003e6c <_printf_i+0x160>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	079b      	lsls	r3, r3, #30
 8003f14:	d413      	bmi.n	8003f3e <_printf_i+0x232>
 8003f16:	68e0      	ldr	r0, [r4, #12]
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	4298      	cmp	r0, r3
 8003f1c:	bfb8      	it	lt
 8003f1e:	4618      	movlt	r0, r3
 8003f20:	e7a6      	b.n	8003e70 <_printf_i+0x164>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4632      	mov	r2, r6
 8003f26:	4649      	mov	r1, r9
 8003f28:	4640      	mov	r0, r8
 8003f2a:	47d0      	blx	sl
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d09d      	beq.n	8003e6c <_printf_i+0x160>
 8003f30:	3501      	adds	r5, #1
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	9903      	ldr	r1, [sp, #12]
 8003f36:	1a5b      	subs	r3, r3, r1
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dcf2      	bgt.n	8003f22 <_printf_i+0x216>
 8003f3c:	e7eb      	b.n	8003f16 <_printf_i+0x20a>
 8003f3e:	2500      	movs	r5, #0
 8003f40:	f104 0619 	add.w	r6, r4, #25
 8003f44:	e7f5      	b.n	8003f32 <_printf_i+0x226>
 8003f46:	bf00      	nop
 8003f48:	08004461 	.word	0x08004461
 8003f4c:	08004472 	.word	0x08004472

08003f50 <__sflush_r>:
 8003f50:	898a      	ldrh	r2, [r1, #12]
 8003f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f56:	4605      	mov	r5, r0
 8003f58:	0710      	lsls	r0, r2, #28
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	d458      	bmi.n	8004010 <__sflush_r+0xc0>
 8003f5e:	684b      	ldr	r3, [r1, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	dc05      	bgt.n	8003f70 <__sflush_r+0x20>
 8003f64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dc02      	bgt.n	8003f70 <__sflush_r+0x20>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d0f9      	beq.n	8003f6a <__sflush_r+0x1a>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f7c:	682f      	ldr	r7, [r5, #0]
 8003f7e:	6a21      	ldr	r1, [r4, #32]
 8003f80:	602b      	str	r3, [r5, #0]
 8003f82:	d032      	beq.n	8003fea <__sflush_r+0x9a>
 8003f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	075a      	lsls	r2, r3, #29
 8003f8a:	d505      	bpl.n	8003f98 <__sflush_r+0x48>
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	1ac0      	subs	r0, r0, r3
 8003f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f92:	b10b      	cbz	r3, 8003f98 <__sflush_r+0x48>
 8003f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f96:	1ac0      	subs	r0, r0, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f9e:	6a21      	ldr	r1, [r4, #32]
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b0      	blx	r6
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	d106      	bne.n	8003fb8 <__sflush_r+0x68>
 8003faa:	6829      	ldr	r1, [r5, #0]
 8003fac:	291d      	cmp	r1, #29
 8003fae:	d82b      	bhi.n	8004008 <__sflush_r+0xb8>
 8003fb0:	4a29      	ldr	r2, [pc, #164]	; (8004058 <__sflush_r+0x108>)
 8003fb2:	410a      	asrs	r2, r1
 8003fb4:	07d6      	lsls	r6, r2, #31
 8003fb6:	d427      	bmi.n	8004008 <__sflush_r+0xb8>
 8003fb8:	2200      	movs	r2, #0
 8003fba:	6062      	str	r2, [r4, #4]
 8003fbc:	04d9      	lsls	r1, r3, #19
 8003fbe:	6922      	ldr	r2, [r4, #16]
 8003fc0:	6022      	str	r2, [r4, #0]
 8003fc2:	d504      	bpl.n	8003fce <__sflush_r+0x7e>
 8003fc4:	1c42      	adds	r2, r0, #1
 8003fc6:	d101      	bne.n	8003fcc <__sflush_r+0x7c>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b903      	cbnz	r3, 8003fce <__sflush_r+0x7e>
 8003fcc:	6560      	str	r0, [r4, #84]	; 0x54
 8003fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd0:	602f      	str	r7, [r5, #0]
 8003fd2:	2900      	cmp	r1, #0
 8003fd4:	d0c9      	beq.n	8003f6a <__sflush_r+0x1a>
 8003fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	d002      	beq.n	8003fe4 <__sflush_r+0x94>
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7ff fbea 	bl	80037b8 <_free_r>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	6360      	str	r0, [r4, #52]	; 0x34
 8003fe8:	e7c0      	b.n	8003f6c <__sflush_r+0x1c>
 8003fea:	2301      	movs	r3, #1
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b0      	blx	r6
 8003ff0:	1c41      	adds	r1, r0, #1
 8003ff2:	d1c8      	bne.n	8003f86 <__sflush_r+0x36>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0c5      	beq.n	8003f86 <__sflush_r+0x36>
 8003ffa:	2b1d      	cmp	r3, #29
 8003ffc:	d001      	beq.n	8004002 <__sflush_r+0xb2>
 8003ffe:	2b16      	cmp	r3, #22
 8004000:	d101      	bne.n	8004006 <__sflush_r+0xb6>
 8004002:	602f      	str	r7, [r5, #0]
 8004004:	e7b1      	b.n	8003f6a <__sflush_r+0x1a>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	e7ad      	b.n	8003f6c <__sflush_r+0x1c>
 8004010:	690f      	ldr	r7, [r1, #16]
 8004012:	2f00      	cmp	r7, #0
 8004014:	d0a9      	beq.n	8003f6a <__sflush_r+0x1a>
 8004016:	0793      	lsls	r3, r2, #30
 8004018:	680e      	ldr	r6, [r1, #0]
 800401a:	bf08      	it	eq
 800401c:	694b      	ldreq	r3, [r1, #20]
 800401e:	600f      	str	r7, [r1, #0]
 8004020:	bf18      	it	ne
 8004022:	2300      	movne	r3, #0
 8004024:	eba6 0807 	sub.w	r8, r6, r7
 8004028:	608b      	str	r3, [r1, #8]
 800402a:	f1b8 0f00 	cmp.w	r8, #0
 800402e:	dd9c      	ble.n	8003f6a <__sflush_r+0x1a>
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004034:	4643      	mov	r3, r8
 8004036:	463a      	mov	r2, r7
 8004038:	4628      	mov	r0, r5
 800403a:	47b0      	blx	r6
 800403c:	2800      	cmp	r0, #0
 800403e:	dc06      	bgt.n	800404e <__sflush_r+0xfe>
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004046:	81a3      	strh	r3, [r4, #12]
 8004048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800404c:	e78e      	b.n	8003f6c <__sflush_r+0x1c>
 800404e:	4407      	add	r7, r0
 8004050:	eba8 0800 	sub.w	r8, r8, r0
 8004054:	e7e9      	b.n	800402a <__sflush_r+0xda>
 8004056:	bf00      	nop
 8004058:	dfbffffe 	.word	0xdfbffffe

0800405c <_fflush_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4605      	mov	r5, r0
 8004062:	460c      	mov	r4, r1
 8004064:	b913      	cbnz	r3, 800406c <_fflush_r+0x10>
 8004066:	2500      	movs	r5, #0
 8004068:	4628      	mov	r0, r5
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	b118      	cbz	r0, 8004076 <_fflush_r+0x1a>
 800406e:	6a03      	ldr	r3, [r0, #32]
 8004070:	b90b      	cbnz	r3, 8004076 <_fflush_r+0x1a>
 8004072:	f7ff fa91 	bl	8003598 <__sinit>
 8004076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f3      	beq.n	8004066 <_fflush_r+0xa>
 800407e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004080:	07d0      	lsls	r0, r2, #31
 8004082:	d404      	bmi.n	800408e <_fflush_r+0x32>
 8004084:	0599      	lsls	r1, r3, #22
 8004086:	d402      	bmi.n	800408e <_fflush_r+0x32>
 8004088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800408a:	f7ff fb92 	bl	80037b2 <__retarget_lock_acquire_recursive>
 800408e:	4628      	mov	r0, r5
 8004090:	4621      	mov	r1, r4
 8004092:	f7ff ff5d 	bl	8003f50 <__sflush_r>
 8004096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004098:	07da      	lsls	r2, r3, #31
 800409a:	4605      	mov	r5, r0
 800409c:	d4e4      	bmi.n	8004068 <_fflush_r+0xc>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	059b      	lsls	r3, r3, #22
 80040a2:	d4e1      	bmi.n	8004068 <_fflush_r+0xc>
 80040a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a6:	f7ff fb85 	bl	80037b4 <__retarget_lock_release_recursive>
 80040aa:	e7dd      	b.n	8004068 <_fflush_r+0xc>

080040ac <_putc_r>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	460d      	mov	r5, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	4606      	mov	r6, r0
 80040b4:	b118      	cbz	r0, 80040be <_putc_r+0x12>
 80040b6:	6a03      	ldr	r3, [r0, #32]
 80040b8:	b90b      	cbnz	r3, 80040be <_putc_r+0x12>
 80040ba:	f7ff fa6d 	bl	8003598 <__sinit>
 80040be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040c0:	07d8      	lsls	r0, r3, #31
 80040c2:	d405      	bmi.n	80040d0 <_putc_r+0x24>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	0599      	lsls	r1, r3, #22
 80040c8:	d402      	bmi.n	80040d0 <_putc_r+0x24>
 80040ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040cc:	f7ff fb71 	bl	80037b2 <__retarget_lock_acquire_recursive>
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	60a3      	str	r3, [r4, #8]
 80040d8:	da05      	bge.n	80040e6 <_putc_r+0x3a>
 80040da:	69a2      	ldr	r2, [r4, #24]
 80040dc:	4293      	cmp	r3, r2
 80040de:	db12      	blt.n	8004106 <_putc_r+0x5a>
 80040e0:	b2eb      	uxtb	r3, r5
 80040e2:	2b0a      	cmp	r3, #10
 80040e4:	d00f      	beq.n	8004106 <_putc_r+0x5a>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	701d      	strb	r5, [r3, #0]
 80040ee:	b2ed      	uxtb	r5, r5
 80040f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f2:	07da      	lsls	r2, r3, #31
 80040f4:	d405      	bmi.n	8004102 <_putc_r+0x56>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	059b      	lsls	r3, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_putc_r+0x56>
 80040fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fe:	f7ff fb59 	bl	80037b4 <__retarget_lock_release_recursive>
 8004102:	4628      	mov	r0, r5
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	4629      	mov	r1, r5
 8004108:	4622      	mov	r2, r4
 800410a:	4630      	mov	r0, r6
 800410c:	f000 f802 	bl	8004114 <__swbuf_r>
 8004110:	4605      	mov	r5, r0
 8004112:	e7ed      	b.n	80040f0 <_putc_r+0x44>

08004114 <__swbuf_r>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	460e      	mov	r6, r1
 8004118:	4614      	mov	r4, r2
 800411a:	4605      	mov	r5, r0
 800411c:	b118      	cbz	r0, 8004126 <__swbuf_r+0x12>
 800411e:	6a03      	ldr	r3, [r0, #32]
 8004120:	b90b      	cbnz	r3, 8004126 <__swbuf_r+0x12>
 8004122:	f7ff fa39 	bl	8003598 <__sinit>
 8004126:	69a3      	ldr	r3, [r4, #24]
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	071a      	lsls	r2, r3, #28
 800412e:	d525      	bpl.n	800417c <__swbuf_r+0x68>
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	b31b      	cbz	r3, 800417c <__swbuf_r+0x68>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	6922      	ldr	r2, [r4, #16]
 8004138:	1a98      	subs	r0, r3, r2
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	b2f6      	uxtb	r6, r6
 800413e:	4283      	cmp	r3, r0
 8004140:	4637      	mov	r7, r6
 8004142:	dc04      	bgt.n	800414e <__swbuf_r+0x3a>
 8004144:	4621      	mov	r1, r4
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff ff88 	bl	800405c <_fflush_r>
 800414c:	b9e0      	cbnz	r0, 8004188 <__swbuf_r+0x74>
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	3b01      	subs	r3, #1
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	6022      	str	r2, [r4, #0]
 800415a:	701e      	strb	r6, [r3, #0]
 800415c:	6962      	ldr	r2, [r4, #20]
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	429a      	cmp	r2, r3
 8004162:	d004      	beq.n	800416e <__swbuf_r+0x5a>
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	07db      	lsls	r3, r3, #31
 8004168:	d506      	bpl.n	8004178 <__swbuf_r+0x64>
 800416a:	2e0a      	cmp	r6, #10
 800416c:	d104      	bne.n	8004178 <__swbuf_r+0x64>
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f7ff ff73 	bl	800405c <_fflush_r>
 8004176:	b938      	cbnz	r0, 8004188 <__swbuf_r+0x74>
 8004178:	4638      	mov	r0, r7
 800417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417c:	4621      	mov	r1, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f806 	bl	8004190 <__swsetup_r>
 8004184:	2800      	cmp	r0, #0
 8004186:	d0d5      	beq.n	8004134 <__swbuf_r+0x20>
 8004188:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800418c:	e7f4      	b.n	8004178 <__swbuf_r+0x64>
	...

08004190 <__swsetup_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4b2a      	ldr	r3, [pc, #168]	; (800423c <__swsetup_r+0xac>)
 8004194:	4605      	mov	r5, r0
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	460c      	mov	r4, r1
 800419a:	b118      	cbz	r0, 80041a4 <__swsetup_r+0x14>
 800419c:	6a03      	ldr	r3, [r0, #32]
 800419e:	b90b      	cbnz	r3, 80041a4 <__swsetup_r+0x14>
 80041a0:	f7ff f9fa 	bl	8003598 <__sinit>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041aa:	0718      	lsls	r0, r3, #28
 80041ac:	d422      	bmi.n	80041f4 <__swsetup_r+0x64>
 80041ae:	06d9      	lsls	r1, r3, #27
 80041b0:	d407      	bmi.n	80041c2 <__swsetup_r+0x32>
 80041b2:	2309      	movs	r3, #9
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c0:	e034      	b.n	800422c <__swsetup_r+0x9c>
 80041c2:	0758      	lsls	r0, r3, #29
 80041c4:	d512      	bpl.n	80041ec <__swsetup_r+0x5c>
 80041c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c8:	b141      	cbz	r1, 80041dc <__swsetup_r+0x4c>
 80041ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ce:	4299      	cmp	r1, r3
 80041d0:	d002      	beq.n	80041d8 <__swsetup_r+0x48>
 80041d2:	4628      	mov	r0, r5
 80041d4:	f7ff faf0 	bl	80037b8 <_free_r>
 80041d8:	2300      	movs	r3, #0
 80041da:	6363      	str	r3, [r4, #52]	; 0x34
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041e2:	81a3      	strh	r3, [r4, #12]
 80041e4:	2300      	movs	r3, #0
 80041e6:	6063      	str	r3, [r4, #4]
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f043 0308 	orr.w	r3, r3, #8
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b94b      	cbnz	r3, 800420c <__swsetup_r+0x7c>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004202:	d003      	beq.n	800420c <__swsetup_r+0x7c>
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f850 	bl	80042ac <__smakebuf_r>
 800420c:	89a0      	ldrh	r0, [r4, #12]
 800420e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004212:	f010 0301 	ands.w	r3, r0, #1
 8004216:	d00a      	beq.n	800422e <__swsetup_r+0x9e>
 8004218:	2300      	movs	r3, #0
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6963      	ldr	r3, [r4, #20]
 800421e:	425b      	negs	r3, r3
 8004220:	61a3      	str	r3, [r4, #24]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	b943      	cbnz	r3, 8004238 <__swsetup_r+0xa8>
 8004226:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800422a:	d1c4      	bne.n	80041b6 <__swsetup_r+0x26>
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	0781      	lsls	r1, r0, #30
 8004230:	bf58      	it	pl
 8004232:	6963      	ldrpl	r3, [r4, #20]
 8004234:	60a3      	str	r3, [r4, #8]
 8004236:	e7f4      	b.n	8004222 <__swsetup_r+0x92>
 8004238:	2000      	movs	r0, #0
 800423a:	e7f7      	b.n	800422c <__swsetup_r+0x9c>
 800423c:	20000064 	.word	0x20000064

08004240 <_sbrk_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4d06      	ldr	r5, [pc, #24]	; (800425c <_sbrk_r+0x1c>)
 8004244:	2300      	movs	r3, #0
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f7fc fdec 	bl	8000e28 <_sbrk>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_sbrk_r+0x1a>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_sbrk_r+0x1a>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	20000288 	.word	0x20000288

08004260 <__swhatbuf_r>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	460c      	mov	r4, r1
 8004264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004268:	2900      	cmp	r1, #0
 800426a:	b096      	sub	sp, #88	; 0x58
 800426c:	4615      	mov	r5, r2
 800426e:	461e      	mov	r6, r3
 8004270:	da0d      	bge.n	800428e <__swhatbuf_r+0x2e>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	bf0c      	ite	eq
 800427e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004282:	2340      	movne	r3, #64	; 0x40
 8004284:	2000      	movs	r0, #0
 8004286:	6031      	str	r1, [r6, #0]
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	b016      	add	sp, #88	; 0x58
 800428c:	bd70      	pop	{r4, r5, r6, pc}
 800428e:	466a      	mov	r2, sp
 8004290:	f000 f848 	bl	8004324 <_fstat_r>
 8004294:	2800      	cmp	r0, #0
 8004296:	dbec      	blt.n	8004272 <__swhatbuf_r+0x12>
 8004298:	9901      	ldr	r1, [sp, #4]
 800429a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800429e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042a2:	4259      	negs	r1, r3
 80042a4:	4159      	adcs	r1, r3
 80042a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042aa:	e7eb      	b.n	8004284 <__swhatbuf_r+0x24>

080042ac <__smakebuf_r>:
 80042ac:	898b      	ldrh	r3, [r1, #12]
 80042ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042b0:	079d      	lsls	r5, r3, #30
 80042b2:	4606      	mov	r6, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	d507      	bpl.n	80042c8 <__smakebuf_r+0x1c>
 80042b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	2301      	movs	r3, #1
 80042c2:	6163      	str	r3, [r4, #20]
 80042c4:	b002      	add	sp, #8
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	ab01      	add	r3, sp, #4
 80042ca:	466a      	mov	r2, sp
 80042cc:	f7ff ffc8 	bl	8004260 <__swhatbuf_r>
 80042d0:	9900      	ldr	r1, [sp, #0]
 80042d2:	4605      	mov	r5, r0
 80042d4:	4630      	mov	r0, r6
 80042d6:	f7ff fadb 	bl	8003890 <_malloc_r>
 80042da:	b948      	cbnz	r0, 80042f0 <__smakebuf_r+0x44>
 80042dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e0:	059a      	lsls	r2, r3, #22
 80042e2:	d4ef      	bmi.n	80042c4 <__smakebuf_r+0x18>
 80042e4:	f023 0303 	bic.w	r3, r3, #3
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	e7e3      	b.n	80042b8 <__smakebuf_r+0xc>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	6020      	str	r0, [r4, #0]
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	6163      	str	r3, [r4, #20]
 80042fe:	9b01      	ldr	r3, [sp, #4]
 8004300:	6120      	str	r0, [r4, #16]
 8004302:	b15b      	cbz	r3, 800431c <__smakebuf_r+0x70>
 8004304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f81d 	bl	8004348 <_isatty_r>
 800430e:	b128      	cbz	r0, 800431c <__smakebuf_r+0x70>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	431d      	orrs	r5, r3
 8004320:	81a5      	strh	r5, [r4, #12]
 8004322:	e7cf      	b.n	80042c4 <__smakebuf_r+0x18>

08004324 <_fstat_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d07      	ldr	r5, [pc, #28]	; (8004344 <_fstat_r+0x20>)
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	f7fc fd50 	bl	8000dd6 <_fstat>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d102      	bne.n	8004340 <_fstat_r+0x1c>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	b103      	cbz	r3, 8004340 <_fstat_r+0x1c>
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	20000288 	.word	0x20000288

08004348 <_isatty_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	; (8004364 <_isatty_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fd4f 	bl	8000df6 <_isatty>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_isatty_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_isatty_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000288 	.word	0x20000288

08004368 <_init>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr

08004374 <_fini>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr
