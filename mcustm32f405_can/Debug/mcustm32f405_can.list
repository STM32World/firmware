
mcustm32f405_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004938  08004938  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004940  08004940  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000260  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a3eb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b9a  00000000  00000000  0002a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000988  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000736  00000000  00000000  0002c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fa7c  00000000  00000000  0002d11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a34e  00000000  00000000  0004cb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc895  00000000  00000000  00056ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e58  00000000  00000000  00113780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001165d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004658 	.word	0x08004658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004658 	.word	0x08004658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 fd32 	bl	8002ff8 <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox0CompleteCallback");
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80005c2:	f003 f997 	bl	80038f4 <iprintf>
 80005c6:	200a      	movs	r0, #10
 80005c8:	f003 f9a6 	bl	8003918 <putchar>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08004670 	.word	0x08004670

080005d8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox1CompleteCallback");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80005e2:	f003 f987 	bl	80038f4 <iprintf>
 80005e6:	200a      	movs	r0, #10
 80005e8:	f003 f996 	bl	8003918 <putchar>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004694 	.word	0x08004694

080005f8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox2CompleteCallback");
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000602:	f003 f977 	bl	80038f4 <iprintf>
 8000606:	200a      	movs	r0, #10
 8000608:	f003 f986 	bl	8003918 <putchar>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080046b8 	.word	0x080046b8

08000618 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox0AbortCallback");
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 8000622:	f003 f967 	bl	80038f4 <iprintf>
 8000626:	200a      	movs	r0, #10
 8000628:	f003 f976 	bl	8003918 <putchar>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	080046dc 	.word	0x080046dc

08000638 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox1AbortCallback");
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <HAL_CAN_TxMailbox1AbortCallback+0x1c>)
 8000642:	f003 f957 	bl	80038f4 <iprintf>
 8000646:	200a      	movs	r0, #10
 8000648:	f003 f966 	bl	8003918 <putchar>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	080046fc 	.word	0x080046fc

08000658 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_TxMailbox2AbortCallback");
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <HAL_CAN_TxMailbox2AbortCallback+0x1c>)
 8000662:	f003 f947 	bl	80038f4 <iprintf>
 8000666:	200a      	movs	r0, #10
 8000668:	f003 f956 	bl	8003918 <putchar>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800471c 	.word	0x0800471c

08000678 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo0MsgPendingCallback");
 8000680:	4863      	ldr	r0, [pc, #396]	; (8000810 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8000682:	f003 f937 	bl	80038f4 <iprintf>
 8000686:	200a      	movs	r0, #10
 8000688:	f003 f946 	bl	8003918 <putchar>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) Error_Handler();
 800068c:	4b61      	ldr	r3, [pc, #388]	; (8000814 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800068e:	4a62      	ldr	r2, [pc, #392]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000690:	2100      	movs	r1, #0
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f001 f968 	bl	8001968 <HAL_CAN_GetRxMessage>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 800069e:	f000 fb4b 	bl	8000d38 <Error_Handler>

    if (hcan->Instance == CAN1) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a5d      	ldr	r2, [pc, #372]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d170      	bne.n	800078e <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
        if (RxHeader.RTR == CAN_RTR_REMOTE) {
 80006ac:	4b5a      	ldr	r3, [pc, #360]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d165      	bne.n	8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
            if (RxHeader.StdId == CAN_ID_NOW) {
 80006b4:	4b58      	ldr	r3, [pc, #352]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006bc:	d126      	bne.n	800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>

                DBG("CAN1 got NOW request");
 80006be:	4858      	ldr	r0, [pc, #352]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80006c0:	f003 f918 	bl	80038f4 <iprintf>
 80006c4:	200a      	movs	r0, #10
 80006c6:	f003 f927 	bl	8003918 <putchar>

                uint32_t now = HAL_GetTick();
 80006ca:	f000 fe51 	bl	8001370 <HAL_GetTick>
 80006ce:	4603      	mov	r3, r0
 80006d0:	60fb      	str	r3, [r7, #12]

                TxHeader.DLC = 4;
 80006d2:	4b54      	ldr	r3, [pc, #336]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
                TxHeader.ExtId = 0;
 80006d8:	4b52      	ldr	r3, [pc, #328]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
                TxHeader.IDE = CAN_ID_STD;
 80006de:	4b51      	ldr	r3, [pc, #324]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
                TxHeader.RTR = CAN_RTR_DATA;
 80006e4:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
                TxHeader.StdId = CAN_ID_NOW;
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006f0:	601a      	str	r2, [r3, #0]

                if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t *)&now, &TxMailbox) != HAL_OK) Error_Handler();
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80006f8:	494a      	ldr	r1, [pc, #296]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80006fa:	484c      	ldr	r0, [pc, #304]	; (800082c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80006fc:	f001 f864 	bl	80017c8 <HAL_CAN_AddTxMessage>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d07b      	beq.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
 8000706:	f000 fb17 	bl	8000d38 <Error_Handler>
 800070a:	e078      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>

            } else if (RxHeader.StdId == CAN_ID_RND) {
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000714:	d12d      	bne.n	8000772 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>

                DBG("CAN1 got RND request");
 8000716:	4846      	ldr	r0, [pc, #280]	; (8000830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000718:	f003 f8ec 	bl	80038f4 <iprintf>
 800071c:	200a      	movs	r0, #10
 800071e:	f003 f8fb 	bl	8003918 <putchar>

                uint32_t rnd;
                if (HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK) Error_Handler();
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	4842      	ldr	r0, [pc, #264]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800072a:	f002 fbbf 	bl	8002eac <HAL_RNG_GenerateRandomNumber>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
 8000734:	f000 fb00 	bl	8000d38 <Error_Handler>

                TxHeader.DLC = 4;
 8000738:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800073a:	2204      	movs	r2, #4
 800073c:	611a      	str	r2, [r3, #16]
                TxHeader.ExtId = 0;
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
                TxHeader.IDE = CAN_ID_STD;
 8000744:	4b37      	ldr	r3, [pc, #220]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
                TxHeader.RTR = CAN_RTR_DATA;
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
                TxHeader.StdId = CAN_ID_RND;
 8000750:	4b34      	ldr	r3, [pc, #208]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000756:	601a      	str	r2, [r3, #0]

                if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t *)&rnd, &TxMailbox) != HAL_OK) Error_Handler();
 8000758:	f107 0208 	add.w	r2, r7, #8
 800075c:	4b32      	ldr	r3, [pc, #200]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800075e:	4931      	ldr	r1, [pc, #196]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000760:	4832      	ldr	r0, [pc, #200]	; (800082c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000762:	f001 f831 	bl	80017c8 <HAL_CAN_AddTxMessage>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d048      	beq.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
 800076c:	f000 fae4 	bl	8000d38 <Error_Handler>
 8000770:	e045      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>


            } else {
                DBG("CAN1 Unknown ID");
 8000772:	4831      	ldr	r0, [pc, #196]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000774:	f003 f8be 	bl	80038f4 <iprintf>
 8000778:	200a      	movs	r0, #10
 800077a:	f003 f8cd 	bl	8003918 <putchar>
 800077e:	e03e      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
            }
        } else {
            DBG("CAN1 Received data");
 8000780:	482e      	ldr	r0, [pc, #184]	; (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000782:	f003 f8b7 	bl	80038f4 <iprintf>
 8000786:	200a      	movs	r0, #10
 8000788:	f003 f8c6 	bl	8003918 <putchar>
 800078c:	e037      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
        }
    } else if (hcan->Instance == CAN2) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d12c      	bne.n	80007f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
        if (RxHeader.RTR == CAN_RTR_DATA) {
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d12e      	bne.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
             if (RxHeader.StdId == CAN_ID_NOW) {
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80007a8:	d10b      	bne.n	80007c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>

                 uint32_t *now = (uint32_t *)&RxData[0];
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80007ac:	613b      	str	r3, [r7, #16]

                 DBG("CAN2 Got NOW data!  now = %lu", *now);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4823      	ldr	r0, [pc, #140]	; (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80007b6:	f003 f89d 	bl	80038f4 <iprintf>
 80007ba:	200a      	movs	r0, #10
 80007bc:	f003 f8ac 	bl	8003918 <putchar>
 80007c0:	e01d      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>

             } else if (RxHeader.StdId == CAN_ID_RND) {
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ca:	d10b      	bne.n	80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>

                 uint32_t *rnd = (uint32_t *)&RxData[0];
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80007ce:	617b      	str	r3, [r7, #20]

                 DBG("CAN2 Got RND data!  rnd = 0x%08lx", *rnd);
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80007d8:	f003 f88c 	bl	80038f4 <iprintf>
 80007dc:	200a      	movs	r0, #10
 80007de:	f003 f89b 	bl	8003918 <putchar>
 80007e2:	e00c      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>

             } else {
                 DBG("CAN2 Unknown ID");
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80007e6:	f003 f885 	bl	80038f4 <iprintf>
 80007ea:	200a      	movs	r0, #10
 80007ec:	f003 f894 	bl	8003918 <putchar>
 80007f0:	e005      	b.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
             }
         }
    } else {
        DBG("Unknown CAN Instance");
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80007f4:	f003 f87e 	bl	80038f4 <iprintf>
 80007f8:	200a      	movs	r0, #10
 80007fa:	f003 f88d 	bl	8003918 <putchar>


//    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
//        DBG("Got message %lu - id = 0x%04lx len = 0x%lx, data=%02x%02x%02x%02x%02x%02x%02x%02x", msg_count + 1, RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
//    }
    msg_count++;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	0800473c 	.word	0x0800473c
 8000814:	20000164 	.word	0x20000164
 8000818:	20000144 	.word	0x20000144
 800081c:	40006400 	.word	0x40006400
 8000820:	08004760 	.word	0x08004760
 8000824:	2000012c 	.word	0x2000012c
 8000828:	20000160 	.word	0x20000160
 800082c:	20000084 	.word	0x20000084
 8000830:	08004778 	.word	0x08004778
 8000834:	200000d4 	.word	0x200000d4
 8000838:	08004790 	.word	0x08004790
 800083c:	080047a0 	.word	0x080047a0
 8000840:	40006800 	.word	0x40006800
 8000844:	080047b4 	.word	0x080047b4
 8000848:	080047d4 	.word	0x080047d4
 800084c:	080047f8 	.word	0x080047f8
 8000850:	08004808 	.word	0x08004808
 8000854:	2000016c 	.word	0x2000016c

08000858 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo0FullCallback");
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8000862:	f003 f847 	bl	80038f4 <iprintf>
 8000866:	200a      	movs	r0, #10
 8000868:	f003 f856 	bl	8003918 <putchar>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08004820 	.word	0x08004820

08000878 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo1MsgPendingCallback");
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 8000882:	f003 f837 	bl	80038f4 <iprintf>
 8000886:	200a      	movs	r0, #10
 8000888:	f003 f846 	bl	8003918 <putchar>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800483c 	.word	0x0800483c

08000898 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo1FullCallback");
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <HAL_CAN_RxFifo1FullCallback+0x1c>)
 80008a2:	f003 f827 	bl	80038f4 <iprintf>
 80008a6:	200a      	movs	r0, #10
 80008a8:	f003 f836 	bl	8003918 <putchar>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	08004860 	.word	0x08004860

080008b8 <HAL_CAN_SleepCallback>:

void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_SleepCallback");
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <HAL_CAN_SleepCallback+0x1c>)
 80008c2:	f003 f817 	bl	80038f4 <iprintf>
 80008c6:	200a      	movs	r0, #10
 80008c8:	f003 f826 	bl	8003918 <putchar>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800487c 	.word	0x0800487c

080008d8 <HAL_CAN_WakeUpFromRxMsgCallback>:

void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_WakeUpFromRxMsgCallback");
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <HAL_CAN_WakeUpFromRxMsgCallback+0x1c>)
 80008e2:	f003 f807 	bl	80038f4 <iprintf>
 80008e6:	200a      	movs	r0, #10
 80008e8:	f003 f816 	bl	8003918 <putchar>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08004894 	.word	0x08004894

080008f8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_ErrorCallback");
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <HAL_CAN_ErrorCallback+0x1c>)
 8000902:	f002 fff7 	bl	80038f4 <iprintf>
 8000906:	200a      	movs	r0, #10
 8000908:	f003 f806 	bl	8003918 <putchar>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	080048b4 	.word	0x080048b4

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fcc1 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f895 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f9a7 	bl	8000c78 <MX_GPIO_Init>
  MX_CAN1_Init();
 800092a:	f000 f8fb 	bl	8000b24 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800092e:	f000 f979 	bl	8000c24 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 8000932:	f000 f92d 	bl	8000b90 <MX_CAN2_Init>
  MX_RNG_Init();
 8000936:	f000 f961 	bl	8000bfc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

    DBG("\n\n\n\n\n------------\nCAN Starting");
 800093a:	483e      	ldr	r0, [pc, #248]	; (8000a34 <main+0x11c>)
 800093c:	f002 ffda 	bl	80038f4 <iprintf>
 8000940:	200a      	movs	r0, #10
 8000942:	f002 ffe9 	bl	8003918 <putchar>

    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
    canfilterconfig.FilterBank = 12;  // anything between 0 to SlaveStartFilterBank
 800094a:	230c      	movs	r3, #12
 800094c:	61fb      	str	r3, [r7, #28]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
    //canfilterconfig.FilterIdHigh = 0x103<<5;
    canfilterconfig.FilterIdHigh = 0x0000;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterIdLow = 0x0000;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
    //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
    canfilterconfig.FilterMaskIdHigh = 0x0;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterMaskIdLow = 0x0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 800096a:	230d      	movs	r3, #13
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4619      	mov	r1, r3
 8000974:	4830      	ldr	r0, [pc, #192]	; (8000a38 <main+0x120>)
 8000976:	f000 fe03 	bl	8001580 <HAL_CAN_ConfigFilter>

    canfilterconfig.FilterBank = 13;
 800097a:	230d      	movs	r3, #13
 800097c:	61fb      	str	r3, [r7, #28]

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	482d      	ldr	r0, [pc, #180]	; (8000a3c <main+0x124>)
 8000986:	f000 fdfb 	bl	8001580 <HAL_CAN_ConfigFilter>

    HAL_CAN_Start(&hcan1);
 800098a:	482b      	ldr	r0, [pc, #172]	; (8000a38 <main+0x120>)
 800098c:	f000 fed8 	bl	8001740 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(
 8000990:	492b      	ldr	r1, [pc, #172]	; (8000a40 <main+0x128>)
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <main+0x120>)
 8000994:	f001 f90a 	bl	8001bac <HAL_CAN_ActivateNotification>
            CAN_IT_BUSOFF |
            CAN_IT_LAST_ERROR_CODE |
            CAN_IT_ERROR
        );

    HAL_CAN_Start(&hcan2);
 8000998:	4828      	ldr	r0, [pc, #160]	; (8000a3c <main+0x124>)
 800099a:	f000 fed1 	bl	8001740 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(
 800099e:	4928      	ldr	r1, [pc, #160]	; (8000a40 <main+0x128>)
 80009a0:	4826      	ldr	r0, [pc, #152]	; (8000a3c <main+0x124>)
 80009a2:	f001 f903 	bl	8001bac <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_tx = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30

    while (1) {

        now = HAL_GetTick();
 80009b2:	f000 fcdd 	bl	8001370 <HAL_GetTick>
 80009b6:	4603      	mov	r3, r0
 80009b8:	607b      	str	r3, [r7, #4]

        if (now - last_tx >= 1000) {
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009c4:	d328      	bcc.n	8000a18 <main+0x100>

            //TxHeader.DLC = 4;
            TxHeader.ExtId = 0;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <main+0x12c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
            TxHeader.IDE = CAN_ID_STD;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <main+0x12c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
            TxHeader.RTR = CAN_RTR_REMOTE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <main+0x12c>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	60da      	str	r2, [r3, #12]
            TxHeader.StdId = CAN_ID_NOW;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <main+0x12c>)
 80009da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009de:	601a      	str	r2, [r3, #0]
            //TxHeader.TransmitGlobalTime = DISABLE;

            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, (uint8_t *)&now, &TxMailbox) != HAL_OK)
 80009e0:	1d3a      	adds	r2, r7, #4
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <main+0x130>)
 80009e4:	4917      	ldr	r1, [pc, #92]	; (8000a44 <main+0x12c>)
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <main+0x124>)
 80009e8:	f000 feee 	bl	80017c8 <HAL_CAN_AddTxMessage>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <main+0xde>
            {
                Error_Handler();
 80009f2:	f000 f9a1 	bl	8000d38 <Error_Handler>
            }

            TxHeader.StdId = CAN_ID_RND;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <main+0x12c>)
 80009f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fc:	601a      	str	r2, [r3, #0]
            //TxHeader.TransmitGlobalTime = DISABLE;

            if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, (uint8_t *)&now, &TxMailbox) != HAL_OK)
 80009fe:	1d3a      	adds	r2, r7, #4
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0x130>)
 8000a02:	4910      	ldr	r1, [pc, #64]	; (8000a44 <main+0x12c>)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <main+0x124>)
 8000a06:	f000 fedf 	bl	80017c8 <HAL_CAN_AddTxMessage>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <main+0xfc>
            {
                Error_Handler();
 8000a10:	f000 f992 	bl	8000d38 <Error_Handler>
            }

            last_tx = now;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
        }

        if (now - last_blink >= 500) {
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a22:	d3c6      	bcc.n	80009b2 <main+0x9a>

            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <main+0x134>)
 8000a2a:	f001 fd64 	bl	80024f6 <HAL_GPIO_TogglePin>

            last_blink = now;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
        now = HAL_GetTick();
 8000a32:	e7be      	b.n	80009b2 <main+0x9a>
 8000a34:	080048cc 	.word	0x080048cc
 8000a38:	20000084 	.word	0x20000084
 8000a3c:	200000ac 	.word	0x200000ac
 8000a40:	00038f7e 	.word	0x00038f7e
 8000a44:	2000012c 	.word	0x2000012c
 8000a48:	20000160 	.word	0x20000160
 8000a4c:	40020800 	.word	0x40020800

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 ffa5 	bl	80039ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac4:	23a8      	movs	r3, #168	; 0xa8
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 fd29 	bl	800252c <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae0:	f000 f92a 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2105      	movs	r1, #5
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 ff8a 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 f913 	bl	8000d38 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <MX_CAN1_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b42:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000b46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_CAN1_Init+0x64>)
 8000b76:	f000 fc07 	bl	8001388 <HAL_CAN_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b80:	f000 f8da 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000084 	.word	0x20000084
 8000b8c:	40006400 	.word	0x40006400

08000b90 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_CAN2_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bae:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000bb2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000be2:	f000 fbd1 	bl	8001388 <HAL_CAN_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000bec:	f000 f8a4 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000ac 	.word	0x200000ac
 8000bf8:	40006800 	.word	0x40006800

08000bfc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_RNG_Init+0x20>)
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <MX_RNG_Init+0x24>)
 8000c04:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_RNG_Init+0x20>)
 8000c08:	f002 f926 	bl	8002e58 <HAL_RNG_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c12:	f000 f891 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000d4 	.word	0x200000d4
 8000c20:	50060800 	.word	0x50060800

08000c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_USART1_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c30:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f002 f97c 	bl	8002f58 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f000 f867 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e4 	.word	0x200000e4
 8000c74:	40011000 	.word	0x40011000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000d06:	f001 fbdd 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d10:	2311      	movs	r3, #17
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000d24:	f001 fa32 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a63      	ldr	r2, [pc, #396]	; (8000f40 <HAL_CAN_MspInit+0x1ac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d156      	bne.n	8000e64 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000db6:	4b63      	ldr	r3, [pc, #396]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a61      	ldr	r2, [pc, #388]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dc0:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10d      	bne.n	8000de4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	4b5e      	ldr	r3, [pc, #376]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a5d      	ldr	r2, [pc, #372]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e12:	2309      	movs	r3, #9
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	484b      	ldr	r0, [pc, #300]	; (8000f4c <HAL_CAN_MspInit+0x1b8>)
 8000e1e:	f001 f9b5 	bl	800218c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2013      	movs	r0, #19
 8000e28:	f001 f979 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e2c:	2013      	movs	r0, #19
 8000e2e:	f001 f992 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2014      	movs	r0, #20
 8000e38:	f001 f971 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e3c:	2014      	movs	r0, #20
 8000e3e:	f001 f98a 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2015      	movs	r0, #21
 8000e48:	f001 f969 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f001 f982 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2016      	movs	r0, #22
 8000e58:	f001 f961 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e5c:	2016      	movs	r0, #22
 8000e5e:	f001 f97a 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e62:	e068      	b.n	8000f36 <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a39      	ldr	r2, [pc, #228]	; (8000f50 <HAL_CAN_MspInit+0x1bc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d163      	bne.n	8000f36 <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a34      	ldr	r2, [pc, #208]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000e92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <HAL_CAN_MspInit+0x1b0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10d      	bne.n	8000eb8 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a28      	ldr	r2, [pc, #160]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_CAN_MspInit+0x1b4>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ed4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ee6:	2309      	movs	r3, #9
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4816      	ldr	r0, [pc, #88]	; (8000f4c <HAL_CAN_MspInit+0x1b8>)
 8000ef2:	f001 f94b 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	203f      	movs	r0, #63	; 0x3f
 8000efc:	f001 f90f 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000f00:	203f      	movs	r0, #63	; 0x3f
 8000f02:	f001 f928 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2040      	movs	r0, #64	; 0x40
 8000f0c:	f001 f907 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f10:	2040      	movs	r0, #64	; 0x40
 8000f12:	f001 f920 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2041      	movs	r0, #65	; 0x41
 8000f1c:	f001 f8ff 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000f20:	2041      	movs	r0, #65	; 0x41
 8000f22:	f001 f918 	bl	8002156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2042      	movs	r0, #66	; 0x42
 8000f2c:	f001 f8f7 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000f30:	2042      	movs	r0, #66	; 0x42
 8000f32:	f001 f910 	bl	8002156 <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40006400 	.word	0x40006400
 8000f44:	20000170 	.word	0x20000170
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40006800 	.word	0x40006800

08000f54 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_RNG_MspInit+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_RNG_MspInit+0x40>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <HAL_RNG_MspInit+0x40>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	6353      	str	r3, [r2, #52]	; 0x34
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_RNG_MspInit+0x40>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	50060800 	.word	0x50060800
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12c      	bne.n	8001014 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001004:	2307      	movs	r3, #7
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 8001010:	f001 f8bc 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40011000 	.word	0x40011000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f968 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <CAN1_TX_IRQHandler+0x10>)
 8001082:	f000 fdb9 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000084 	.word	0x20000084

08001090 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <CAN1_RX0_IRQHandler+0x10>)
 8001096:	f000 fdaf 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000084 	.word	0x20000084

080010a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CAN1_RX1_IRQHandler+0x10>)
 80010aa:	f000 fda5 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000084 	.word	0x20000084

080010b8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <CAN1_SCE_IRQHandler+0x10>)
 80010be:	f000 fd9b 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000084 	.word	0x20000084

080010cc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <CAN2_TX_IRQHandler+0x10>)
 80010d2:	f000 fd91 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000ac 	.word	0x200000ac

080010e0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <CAN2_RX0_IRQHandler+0x10>)
 80010e6:	f000 fd87 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000ac 	.word	0x200000ac

080010f4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <CAN2_RX1_IRQHandler+0x10>)
 80010fa:	f000 fd7d 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000ac 	.word	0x200000ac

08001108 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <CAN2_SCE_IRQHandler+0x10>)
 800110e:	f000 fd73 	bl	8001bf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000ac 	.word	0x200000ac

0800111c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00a      	b.n	8001144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112e:	f3af 8000 	nop.w
 8001132:	4601      	mov	r1, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf0      	blt.n	800112e <_read+0x12>
  }

  return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117e:	605a      	str	r2, [r3, #4]
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_isatty>:

int _isatty(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f002 fc2c 	bl	8003a4c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20020000 	.word	0x20020000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000174 	.word	0x20000174
 8001228:	200002c8 	.word	0x200002c8

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800127e:	f002 fbeb 	bl	8003a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fb49 	bl	8000918 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001294:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8001298:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800129c:	200002c8 	.word	0x200002c8

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 ff1b 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fd34 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 ff33 	bl	8002172 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001324:	f000 fefb 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	20000178 	.word	0x20000178

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000178 	.word	0x20000178

08001388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0ed      	b.n	8001576 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fcf4 	bl	8000d94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff ffd8 	bl	8001370 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013c2:	e012      	b.n	80013ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c4:	f7ff ffd4 	bl	8001370 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d90b      	bls.n	80013ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2205      	movs	r2, #5
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0c5      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0e5      	beq.n	80013c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0202 	bic.w	r2, r2, #2
 8001406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff ffb2 	bl	8001370 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140e:	e012      	b.n	8001436 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001410:	f7ff ffae 	bl	8001370 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d90b      	bls.n	8001436 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2205      	movs	r2, #5
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e09f      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e5      	bne.n	8001410 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7e1b      	ldrb	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e007      	b.n	800146e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e5b      	ldrb	r3, [r3, #25]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e007      	b.n	8001498 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0220 	bic.w	r2, r2, #32
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7edb      	ldrb	r3, [r3, #27]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0210 	bic.w	r2, r2, #16
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0210 	orr.w	r2, r2, #16
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7f1b      	ldrb	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7f5b      	ldrb	r3, [r3, #29]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0204 	orr.w	r2, r2, #4
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	ea42 0103 	orr.w	r1, r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001596:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d003      	beq.n	80015a6 <HAL_CAN_ConfigFilter+0x26>
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	f040 80be 	bne.w	8001722 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_CAN_ConfigFilter+0x1bc>)
 80015a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	2201      	movs	r2, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d123      	bne.n	8001650 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800162a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3248      	adds	r2, #72	; 0x48
 8001630:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001644:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	3348      	adds	r3, #72	; 0x48
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d122      	bne.n	800169e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001678:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3248      	adds	r2, #72	; 0x48
 800167e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001692:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001694:	6979      	ldr	r1, [r7, #20]
 8001696:	3348      	adds	r3, #72	; 0x48
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	401a      	ands	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016b8:	e007      	b.n	80016ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001714:	f023 0201 	bic.w	r2, r3, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e006      	b.n	8001730 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40006400 	.word	0x40006400

08001740 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d12e      	bne.n	80017b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fe00 	bl	8001370 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001772:	e012      	b.n	800179a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001774:	f7ff fdfc 	bl	8001370 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b0a      	cmp	r3, #10
 8001780:	d90b      	bls.n	800179a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2205      	movs	r2, #5
 8001792:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e012      	b.n	80017c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e5      	bne.n	8001774 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e006      	b.n	80017c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d003      	beq.n	80017f4 <HAL_CAN_AddTxMessage+0x2c>
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f040 80ad 	bne.w	800194e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8095 	beq.w	800193e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	0e1b      	lsrs	r3, r3, #24
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800181e:	2201      	movs	r2, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10d      	bne.n	800184c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800183a:	68f9      	ldr	r1, [r7, #12]
 800183c:	6809      	ldr	r1, [r1, #0]
 800183e:	431a      	orrs	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3318      	adds	r3, #24
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	440b      	add	r3, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e00f      	b.n	800186c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001856:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800185c:	68f9      	ldr	r1, [r7, #12]
 800185e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001860:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3318      	adds	r3, #24
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	440b      	add	r3, r1
 800186a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3318      	adds	r3, #24
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	3304      	adds	r3, #4
 800187e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	7d1b      	ldrb	r3, [r3, #20]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d111      	bne.n	80018ac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3318      	adds	r3, #24
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	3304      	adds	r3, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	6811      	ldr	r1, [r2, #0]
 800189c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3318      	adds	r3, #24
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	440b      	add	r3, r1
 80018a8:	3304      	adds	r3, #4
 80018aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3307      	adds	r3, #7
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	061a      	lsls	r2, r3, #24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3306      	adds	r3, #6
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	041b      	lsls	r3, r3, #16
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3305      	adds	r3, #5
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4313      	orrs	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	3204      	adds	r2, #4
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	4610      	mov	r0, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	ea43 0200 	orr.w	r2, r3, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	440b      	add	r3, r1
 80018de:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3303      	adds	r3, #3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	061a      	lsls	r2, r3, #24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3302      	adds	r3, #2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3301      	adds	r3, #1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	4313      	orrs	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	4610      	mov	r0, r2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	6811      	ldr	r1, [r2, #0]
 800190a:	ea43 0200 	orr.w	r2, r3, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	440b      	add	r3, r1
 8001914:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001918:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3318      	adds	r3, #24
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	6811      	ldr	r1, [r2, #0]
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3318      	adds	r3, #24
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	440b      	add	r3, r1
 8001938:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e00e      	b.n	800195c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e006      	b.n	800195c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3724      	adds	r7, #36	; 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d003      	beq.n	800198c <HAL_CAN_GetRxMessage+0x24>
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b02      	cmp	r3, #2
 8001988:	f040 8103 	bne.w	8001b92 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d116      	bne.n	80019ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0f7      	b.n	8001ba0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0e8      	b.n	8001ba0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	331b      	adds	r3, #27
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0204 	and.w	r2, r3, #4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	331b      	adds	r3, #27
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0d5b      	lsrs	r3, r3, #21
 80019fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e00b      	b.n	8001a1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0202 	and.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	331b      	adds	r3, #27
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2208      	movs	r2, #8
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e00b      	b.n	8001a6c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	331b      	adds	r3, #27
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	331b      	adds	r3, #27
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	331b      	adds	r3, #27
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0a1a      	lsrs	r2, r3, #8
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0c1a      	lsrs	r2, r3, #16
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0e1a      	lsrs	r2, r3, #24
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3303      	adds	r3, #3
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3304      	adds	r3, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0a1a      	lsrs	r2, r3, #8
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3305      	adds	r3, #5
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0c1a      	lsrs	r2, r3, #16
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3306      	adds	r3, #6
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0e1a      	lsrs	r2, r3, #24
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3307      	adds	r3, #7
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e006      	b.n	8001ba0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <HAL_CAN_ActivateNotification+0x1e>
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d109      	bne.n	8001bde <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6959      	ldr	r1, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e006      	b.n	8001bec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d07c      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d023      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fcac 	bl	80005b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c60:	e016      	b.n	8001c90 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	e00c      	b.n	8001c90 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e002      	b.n	8001c90 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7fe fcc4 	bl	8000618 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d024      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fc92 	bl	80005d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cb4:	e016      	b.n	8001ce4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	e00c      	b.n	8001ce4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e002      	b.n	8001ce4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fcaa 	bl	8000638 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fc78 	bl	80005f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d08:	e016      	b.n	8001d38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e00c      	b.n	8001d38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e002      	b.n	8001d38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe fc90 	bl	8000658 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2210      	movs	r2, #16
 8001d5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fd6d 	bl	8000858 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fc6e 	bl	8000678 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fd5b 	bl	8000898 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fd3c 	bl	8000878 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fd4b 	bl	80008b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd4a 	bl	80008d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d07b      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d072      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d043      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03e      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec6:	2b60      	cmp	r3, #96	; 0x60
 8001ec8:	d02b      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x32a>
 8001eca:	2b60      	cmp	r3, #96	; 0x60
 8001ecc:	d82e      	bhi.n	8001f2c <HAL_CAN_IRQHandler+0x334>
 8001ece:	2b50      	cmp	r3, #80	; 0x50
 8001ed0:	d022      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x320>
 8001ed2:	2b50      	cmp	r3, #80	; 0x50
 8001ed4:	d82a      	bhi.n	8001f2c <HAL_CAN_IRQHandler+0x334>
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d019      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x316>
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d826      	bhi.n	8001f2c <HAL_CAN_IRQHandler+0x334>
 8001ede:	2b30      	cmp	r3, #48	; 0x30
 8001ee0:	d010      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x30c>
 8001ee2:	2b30      	cmp	r3, #48	; 0x30
 8001ee4:	d822      	bhi.n	8001f2c <HAL_CAN_IRQHandler+0x334>
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d002      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x2f8>
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d005      	beq.n	8001efa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eee:	e01d      	b.n	8001f2c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef8:	e019      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f02:	e014      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f0c:	e00f      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f16:	e00a      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f20:	e005      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2a:	e000      	b.n	8001f2e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f2c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f3c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe fccd 	bl	80008f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e16b      	b.n	8002480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 815a 	bne.w	800247a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80b4 	beq.w	800247a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b60      	ldr	r3, [pc, #384]	; (8002498 <HAL_GPIO_Init+0x30c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a5f      	ldr	r2, [pc, #380]	; (8002498 <HAL_GPIO_Init+0x30c>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_GPIO_Init+0x30c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a5b      	ldr	r2, [pc, #364]	; (800249c <HAL_GPIO_Init+0x310>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x314>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <HAL_GPIO_Init+0x226>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x318>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x222>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_GPIO_Init+0x31c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x21e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x320>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x21a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <HAL_GPIO_Init+0x324>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x216>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_GPIO_Init+0x328>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x212>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_GPIO_Init+0x32c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_GPIO_Init+0x330>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x20a>
 8002392:	2307      	movs	r3, #7
 8002394:	e00e      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 8002396:	2308      	movs	r3, #8
 8002398:	e00c      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 800239a:	2306      	movs	r3, #6
 800239c:	e00a      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 800239e:	2305      	movs	r3, #5
 80023a0:	e008      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x228>
 80023b2:	2300      	movs	r3, #0
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	f002 0203 	and.w	r2, r2, #3
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c4:	4935      	ldr	r1, [pc, #212]	; (800249c <HAL_GPIO_Init+0x310>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_GPIO_Init+0x334>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f6:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <HAL_GPIO_Init+0x334>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_GPIO_Init+0x334>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002420:	4a27      	ldr	r2, [pc, #156]	; (80024c0 <HAL_GPIO_Init+0x334>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_GPIO_Init+0x334>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244a:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_GPIO_Init+0x334>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_GPIO_Init+0x334>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <HAL_GPIO_Init+0x334>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	f67f ae90 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40013800 	.word	0x40013800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40021400 	.word	0x40021400
 80024b8:	40021800 	.word	0x40021800
 80024bc:	40021c00 	.word	0x40021c00
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	041a      	lsls	r2, r3, #16
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43d9      	mvns	r1, r3
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	400b      	ands	r3, r1
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e267      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d075      	beq.n	8002636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d00c      	beq.n	8002570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256e:	d10b      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	4b7e      	ldr	r3, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05b      	beq.n	8002634 <HAL_RCC_OscConfig+0x108>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d157      	bne.n	8002634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e242      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x74>
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6c      	ldr	r2, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025c4:	4b69      	ldr	r3, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a68      	ldr	r2, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fec4 	bl	8001370 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fec0 	bl	8001370 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e207      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xc0>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe feb0 	bl	8001370 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe feac 	bl	8001370 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1f3      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0xe8>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b44      	ldr	r3, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c7      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fe65 	bl	8001370 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fe61 	bl	8001370 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a8      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4925      	ldr	r1, [pc, #148]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fe44 	bl	8001370 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe fe40 	bl	8001370 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e187      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d036      	beq.n	8002784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fe24 	bl	8001370 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fe20 	bl	8001370 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e167      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x200>
 800274a:	e01b      	b.n	8002784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe fe0d 	bl	8001370 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	e00e      	b.n	8002778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275a:	f7fe fe09 	bl	8001370 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d907      	bls.n	8002778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e150      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	42470000 	.word	0x42470000
 8002774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ea      	bne.n	800275a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8097 	beq.w	80028c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a7c      	ldr	r2, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b77      	ldr	r3, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b74      	ldr	r3, [pc, #464]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7fe fdc9 	bl	8001370 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fdc5 	bl	8001370 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e10c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x2ea>
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a63      	ldr	r2, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x30c>
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fd8a 	bl	8001370 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe fd86 	bl	8001370 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0cb      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ee      	beq.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe fd74 	bl	8001370 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fd70 	bl	8001370 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0b5      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ee      	bne.n	800288c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a38      	ldr	r2, [pc, #224]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a1 	beq.w	8002a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d05c      	beq.n	8002990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d141      	bne.n	8002962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fd44 	bl	8001370 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fd40 	bl	8001370 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e087      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe fd19 	bl	8001370 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe fd15 	bl	8001370 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e05c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x416>
 8002960:	e054      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fd02 	bl	8001370 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fcfe 	bl	8001370 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e045      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
 800298e:	e03d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e038      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4ec>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d028      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d121      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11a      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0cc      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d90c      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b65      	ldr	r3, [pc, #404]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d044      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d119      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e067      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4934      	ldr	r1, [pc, #208]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fc30 	bl	8001370 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fe fc2c 	bl	8001370 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d20c      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fb90 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	080048ec 	.word	0x080048ec
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b094      	sub	sp, #80	; 0x50
 8002bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	f200 80e1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1a:	e0db      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c20:	e0db      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b72      	ldr	r3, [pc, #456]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e0d8      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
 8002c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4621      	mov	r1, r4
 8002c74:	1a51      	subs	r1, r2, r1
 8002c76:	6139      	str	r1, [r7, #16]
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	018b      	lsls	r3, r1, #6
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c96:	4651      	mov	r1, sl
 8002c98:	018a      	lsls	r2, r1, #6
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	eb18 0303 	adds.w	r3, r8, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	eb49 0303 	adc.w	r3, r9, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	028b      	lsls	r3, r1, #10
 8002cde:	4621      	mov	r1, r4
 8002ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	028a      	lsls	r2, r1, #10
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf8:	f7fd faba 	bl	8000270 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	e058      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4611      	mov	r1, r2
 8002d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d58:	ebb2 040a 	subs.w	r4, r2, sl
 8002d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	eb45 0303 	adc.w	r3, r5, r3
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	f7fd fa60 	bl	8000270 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3750      	adds	r7, #80	; 0x50
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e0c:	f7ff fff0 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	080048fc 	.word	0x080048fc

08002e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e34:	f7ff ffdc 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0b5b      	lsrs	r3, r3, #13
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	080048fc 	.word	0x080048fc

08002e58 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e01c      	b.n	8002ea4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	795b      	ldrb	r3, [r3, #5]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f86a 	bl	8000f54 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0204 	orr.w	r2, r2, #4
 8002e94:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e044      	b.n	8002f50 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	795b      	ldrb	r3, [r3, #5]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d133      	bne.n	8002f3e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fa48 	bl	8001370 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ee2:	e018      	b.n	8002f16 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ee4:	f7fe fa44 	bl	8001370 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d911      	bls.n	8002f16 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d00a      	beq.n	8002f16 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e01c      	b.n	8002f50 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d1df      	bne.n	8002ee4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	715a      	strb	r2, [r3, #5]
 8002f3c:	e004      	b.n	8002f48 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	711a      	strb	r2, [r3, #4]

  return status;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f80a 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f973 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	d175      	bne.n	8003104 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Transmit+0x2c>
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e06e      	b.n	8003106 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2221      	movs	r2, #33	; 0x21
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003036:	f7fe f99b 	bl	8001370 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003050:	d108      	bne.n	8003064 <HAL_UART_Transmit+0x6c>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e003      	b.n	800306c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800306c:	e02e      	b.n	80030cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f848 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e03a      	b.n	8003106 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3302      	adds	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e007      	b.n	80030be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1cb      	bne.n	800306e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f814 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	e03b      	b.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003126:	d037      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe f922 	bl	8001370 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <UART_WaitOnFlagUntilTimeout+0x30>
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03a      	b.n	80031b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d020      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d01d      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b08      	cmp	r3, #8
 8003168:	d116      	bne.n	8003198 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f81d 	bl	80031c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2208      	movs	r2, #8
 800318a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e00f      	b.n	80031b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d0b4      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b095      	sub	sp, #84	; 0x54
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	330c      	adds	r3, #12
 80031e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e8:	643a      	str	r2, [r7, #64]	; 0x40
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3314      	adds	r3, #20
 8003202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	61fb      	str	r3, [r7, #28]
   return(result);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3314      	adds	r3, #20
 800321a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800321c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e5      	bne.n	80031fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	2b01      	cmp	r3, #1
 8003236:	d119      	bne.n	800326c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	60bb      	str	r3, [r7, #8]
   return(result);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003258:	61ba      	str	r2, [r7, #24]
 800325a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	6979      	ldr	r1, [r7, #20]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	613b      	str	r3, [r7, #16]
   return(result);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e5      	bne.n	8003238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
}
 800327a:	bf00      	nop
 800327c:	3754      	adds	r7, #84	; 0x54
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b0c0      	sub	sp, #256	; 0x100
 800328e:	af00      	add	r7, sp, #0
 8003290:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	ea40 0301 	orr.w	r3, r0, r1
 80032b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032e0:	f021 010c 	bic.w	r1, r1, #12
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ee:	430b      	orrs	r3, r1
 80032f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003302:	6999      	ldr	r1, [r3, #24]
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	ea40 0301 	orr.w	r3, r0, r1
 800330e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b8f      	ldr	r3, [pc, #572]	; (8003554 <UART_SetConfig+0x2cc>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d005      	beq.n	8003328 <UART_SetConfig+0xa0>
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b8d      	ldr	r3, [pc, #564]	; (8003558 <UART_SetConfig+0x2d0>)
 8003324:	429a      	cmp	r2, r3
 8003326:	d104      	bne.n	8003332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7ff fd82 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 800332c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003330:	e003      	b.n	800333a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003332:	f7ff fd69 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8003336:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	f040 810c 	bne.w	8003560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003352:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800335a:	4622      	mov	r2, r4
 800335c:	462b      	mov	r3, r5
 800335e:	1891      	adds	r1, r2, r2
 8003360:	65b9      	str	r1, [r7, #88]	; 0x58
 8003362:	415b      	adcs	r3, r3
 8003364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800336a:	4621      	mov	r1, r4
 800336c:	eb12 0801 	adds.w	r8, r2, r1
 8003370:	4629      	mov	r1, r5
 8003372:	eb43 0901 	adc.w	r9, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb18 0303 	adds.w	r3, r8, r3
 8003394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003398:	462b      	mov	r3, r5
 800339a:	eb49 0303 	adc.w	r3, r9, r3
 800339e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033b6:	460b      	mov	r3, r1
 80033b8:	18db      	adds	r3, r3, r3
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
 80033bc:	4613      	mov	r3, r2
 80033be:	eb42 0303 	adc.w	r3, r2, r3
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
 80033c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033cc:	f7fc ff50 	bl	8000270 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4b61      	ldr	r3, [pc, #388]	; (800355c <UART_SetConfig+0x2d4>)
 80033d6:	fba3 2302 	umull	r2, r3, r3, r2
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	011c      	lsls	r4, r3, #4
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80033f8:	415b      	adcs	r3, r3
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003400:	4641      	mov	r1, r8
 8003402:	eb12 0a01 	adds.w	sl, r2, r1
 8003406:	4649      	mov	r1, r9
 8003408:	eb43 0b01 	adc.w	fp, r3, r1
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800341c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003420:	4692      	mov	sl, r2
 8003422:	469b      	mov	fp, r3
 8003424:	4643      	mov	r3, r8
 8003426:	eb1a 0303 	adds.w	r3, sl, r3
 800342a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800342e:	464b      	mov	r3, r9
 8003430:	eb4b 0303 	adc.w	r3, fp, r3
 8003434:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003444:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800344c:	460b      	mov	r3, r1
 800344e:	18db      	adds	r3, r3, r3
 8003450:	643b      	str	r3, [r7, #64]	; 0x40
 8003452:	4613      	mov	r3, r2
 8003454:	eb42 0303 	adc.w	r3, r2, r3
 8003458:	647b      	str	r3, [r7, #68]	; 0x44
 800345a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800345e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003462:	f7fc ff05 	bl	8000270 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4611      	mov	r1, r2
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <UART_SetConfig+0x2d4>)
 800346e:	fba3 2301 	umull	r2, r3, r3, r1
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2264      	movs	r2, #100	; 0x64
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	1acb      	subs	r3, r1, r3
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003482:	4b36      	ldr	r3, [pc, #216]	; (800355c <UART_SetConfig+0x2d4>)
 8003484:	fba3 2302 	umull	r2, r3, r3, r2
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003490:	441c      	add	r4, r3
 8003492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800349c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034a4:	4642      	mov	r2, r8
 80034a6:	464b      	mov	r3, r9
 80034a8:	1891      	adds	r1, r2, r2
 80034aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80034ac:	415b      	adcs	r3, r3
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034b4:	4641      	mov	r1, r8
 80034b6:	1851      	adds	r1, r2, r1
 80034b8:	6339      	str	r1, [r7, #48]	; 0x30
 80034ba:	4649      	mov	r1, r9
 80034bc:	414b      	adcs	r3, r1
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034cc:	4659      	mov	r1, fp
 80034ce:	00cb      	lsls	r3, r1, #3
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d6:	4651      	mov	r1, sl
 80034d8:	00ca      	lsls	r2, r1, #3
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	4642      	mov	r2, r8
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034e8:	464b      	mov	r3, r9
 80034ea:	460a      	mov	r2, r1
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003500:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003508:	460b      	mov	r3, r1
 800350a:	18db      	adds	r3, r3, r3
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 800350e:	4613      	mov	r3, r2
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800351a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800351e:	f7fc fea7 	bl	8000270 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <UART_SetConfig+0x2d4>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3332      	adds	r3, #50	; 0x32
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <UART_SetConfig+0x2d4>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4422      	add	r2, r4
 800354e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003550:	e106      	b.n	8003760 <UART_SetConfig+0x4d8>
 8003552:	bf00      	nop
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003564:	2200      	movs	r2, #0
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800356a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800356e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	1891      	adds	r1, r2, r2
 8003578:	6239      	str	r1, [r7, #32]
 800357a:	415b      	adcs	r3, r3
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003582:	4641      	mov	r1, r8
 8003584:	1854      	adds	r4, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0501 	adc.w	r5, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035a8:	464b      	mov	r3, r9
 80035aa:	eb45 0303 	adc.w	r3, r5, r3
 80035ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ce:	4629      	mov	r1, r5
 80035d0:	008b      	lsls	r3, r1, #2
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d8:	4621      	mov	r1, r4
 80035da:	008a      	lsls	r2, r1, #2
 80035dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035e0:	f7fc fe46 	bl	8000270 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4b60      	ldr	r3, [pc, #384]	; (800376c <UART_SetConfig+0x4e4>)
 80035ea:	fba3 2302 	umull	r2, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	011c      	lsls	r4, r3, #4
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	61b9      	str	r1, [r7, #24]
 800360c:	415b      	adcs	r3, r3
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6139      	str	r1, [r7, #16]
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	67bb      	str	r3, [r7, #120]	; 0x78
 800365e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800366c:	4649      	mov	r1, r9
 800366e:	008b      	lsls	r3, r1, #2
 8003670:	4641      	mov	r1, r8
 8003672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003676:	4641      	mov	r1, r8
 8003678:	008a      	lsls	r2, r1, #2
 800367a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800367e:	f7fc fdf7 	bl	8000270 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4611      	mov	r1, r2
 8003688:	4b38      	ldr	r3, [pc, #224]	; (800376c <UART_SetConfig+0x4e4>)
 800368a:	fba3 2301 	umull	r2, r3, r3, r1
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2264      	movs	r2, #100	; 0x64
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	1acb      	subs	r3, r1, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a33      	ldr	r2, [pc, #204]	; (800376c <UART_SetConfig+0x4e4>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	441c      	add	r4, r3
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ae:	2200      	movs	r2, #0
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
 80036b2:	677a      	str	r2, [r7, #116]	; 0x74
 80036b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	415b      	adcs	r3, r3
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c8:	4641      	mov	r1, r8
 80036ca:	1851      	adds	r1, r2, r1
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	4649      	mov	r1, r9
 80036d0:	414b      	adcs	r3, r1
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036e0:	4659      	mov	r1, fp
 80036e2:	00cb      	lsls	r3, r1, #3
 80036e4:	4651      	mov	r1, sl
 80036e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ea:	4651      	mov	r1, sl
 80036ec:	00ca      	lsls	r2, r1, #3
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	4642      	mov	r2, r8
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fa:	464b      	mov	r3, r9
 80036fc:	460a      	mov	r2, r1
 80036fe:	eb42 0303 	adc.w	r3, r2, r3
 8003702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	663b      	str	r3, [r7, #96]	; 0x60
 800370e:	667a      	str	r2, [r7, #100]	; 0x64
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800372e:	f7fc fd9f 	bl	8000270 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <UART_SetConfig+0x4e4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <UART_SetConfig+0x4e4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4422      	add	r2, r4
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003766:	46bd      	mov	sp, r7
 8003768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376c:	51eb851f 	.word	0x51eb851f

08003770 <std>:
 8003770:	2300      	movs	r3, #0
 8003772:	b510      	push	{r4, lr}
 8003774:	4604      	mov	r4, r0
 8003776:	e9c0 3300 	strd	r3, r3, [r0]
 800377a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800377e:	6083      	str	r3, [r0, #8]
 8003780:	8181      	strh	r1, [r0, #12]
 8003782:	6643      	str	r3, [r0, #100]	; 0x64
 8003784:	81c2      	strh	r2, [r0, #14]
 8003786:	6183      	str	r3, [r0, #24]
 8003788:	4619      	mov	r1, r3
 800378a:	2208      	movs	r2, #8
 800378c:	305c      	adds	r0, #92	; 0x5c
 800378e:	f000 f90e 	bl	80039ae <memset>
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <std+0x58>)
 8003794:	6263      	str	r3, [r4, #36]	; 0x24
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <std+0x5c>)
 8003798:	62a3      	str	r3, [r4, #40]	; 0x28
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <std+0x60>)
 800379c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <std+0x64>)
 80037a0:	6323      	str	r3, [r4, #48]	; 0x30
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <std+0x68>)
 80037a4:	6224      	str	r4, [r4, #32]
 80037a6:	429c      	cmp	r4, r3
 80037a8:	d006      	beq.n	80037b8 <std+0x48>
 80037aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80037ae:	4294      	cmp	r4, r2
 80037b0:	d002      	beq.n	80037b8 <std+0x48>
 80037b2:	33d0      	adds	r3, #208	; 0xd0
 80037b4:	429c      	cmp	r4, r3
 80037b6:	d105      	bne.n	80037c4 <std+0x54>
 80037b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c0:	f000 b96e 	b.w	8003aa0 <__retarget_lock_init_recursive>
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	bf00      	nop
 80037c8:	08003929 	.word	0x08003929
 80037cc:	0800394b 	.word	0x0800394b
 80037d0:	08003983 	.word	0x08003983
 80037d4:	080039a7 	.word	0x080039a7
 80037d8:	2000017c 	.word	0x2000017c

080037dc <stdio_exit_handler>:
 80037dc:	4a02      	ldr	r2, [pc, #8]	; (80037e8 <stdio_exit_handler+0xc>)
 80037de:	4903      	ldr	r1, [pc, #12]	; (80037ec <stdio_exit_handler+0x10>)
 80037e0:	4803      	ldr	r0, [pc, #12]	; (80037f0 <stdio_exit_handler+0x14>)
 80037e2:	f000 b869 	b.w	80038b8 <_fwalk_sglue>
 80037e6:	bf00      	nop
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	0800434d 	.word	0x0800434d
 80037f0:	20000018 	.word	0x20000018

080037f4 <cleanup_stdio>:
 80037f4:	6841      	ldr	r1, [r0, #4]
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <cleanup_stdio+0x34>)
 80037f8:	4299      	cmp	r1, r3
 80037fa:	b510      	push	{r4, lr}
 80037fc:	4604      	mov	r4, r0
 80037fe:	d001      	beq.n	8003804 <cleanup_stdio+0x10>
 8003800:	f000 fda4 	bl	800434c <_fflush_r>
 8003804:	68a1      	ldr	r1, [r4, #8]
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <cleanup_stdio+0x38>)
 8003808:	4299      	cmp	r1, r3
 800380a:	d002      	beq.n	8003812 <cleanup_stdio+0x1e>
 800380c:	4620      	mov	r0, r4
 800380e:	f000 fd9d 	bl	800434c <_fflush_r>
 8003812:	68e1      	ldr	r1, [r4, #12]
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <cleanup_stdio+0x3c>)
 8003816:	4299      	cmp	r1, r3
 8003818:	d004      	beq.n	8003824 <cleanup_stdio+0x30>
 800381a:	4620      	mov	r0, r4
 800381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003820:	f000 bd94 	b.w	800434c <_fflush_r>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	bf00      	nop
 8003828:	2000017c 	.word	0x2000017c
 800382c:	200001e4 	.word	0x200001e4
 8003830:	2000024c 	.word	0x2000024c

08003834 <global_stdio_init.part.0>:
 8003834:	b510      	push	{r4, lr}
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <global_stdio_init.part.0+0x30>)
 8003838:	4c0b      	ldr	r4, [pc, #44]	; (8003868 <global_stdio_init.part.0+0x34>)
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <global_stdio_init.part.0+0x38>)
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4620      	mov	r0, r4
 8003840:	2200      	movs	r2, #0
 8003842:	2104      	movs	r1, #4
 8003844:	f7ff ff94 	bl	8003770 <std>
 8003848:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800384c:	2201      	movs	r2, #1
 800384e:	2109      	movs	r1, #9
 8003850:	f7ff ff8e 	bl	8003770 <std>
 8003854:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003858:	2202      	movs	r2, #2
 800385a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385e:	2112      	movs	r1, #18
 8003860:	f7ff bf86 	b.w	8003770 <std>
 8003864:	200002b4 	.word	0x200002b4
 8003868:	2000017c 	.word	0x2000017c
 800386c:	080037dd 	.word	0x080037dd

08003870 <__sfp_lock_acquire>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__sfp_lock_acquire+0x8>)
 8003872:	f000 b916 	b.w	8003aa2 <__retarget_lock_acquire_recursive>
 8003876:	bf00      	nop
 8003878:	200002bd 	.word	0x200002bd

0800387c <__sfp_lock_release>:
 800387c:	4801      	ldr	r0, [pc, #4]	; (8003884 <__sfp_lock_release+0x8>)
 800387e:	f000 b911 	b.w	8003aa4 <__retarget_lock_release_recursive>
 8003882:	bf00      	nop
 8003884:	200002bd 	.word	0x200002bd

08003888 <__sinit>:
 8003888:	b510      	push	{r4, lr}
 800388a:	4604      	mov	r4, r0
 800388c:	f7ff fff0 	bl	8003870 <__sfp_lock_acquire>
 8003890:	6a23      	ldr	r3, [r4, #32]
 8003892:	b11b      	cbz	r3, 800389c <__sinit+0x14>
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f7ff bff0 	b.w	800387c <__sfp_lock_release>
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__sinit+0x28>)
 800389e:	6223      	str	r3, [r4, #32]
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__sinit+0x2c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f5      	bne.n	8003894 <__sinit+0xc>
 80038a8:	f7ff ffc4 	bl	8003834 <global_stdio_init.part.0>
 80038ac:	e7f2      	b.n	8003894 <__sinit+0xc>
 80038ae:	bf00      	nop
 80038b0:	080037f5 	.word	0x080037f5
 80038b4:	200002b4 	.word	0x200002b4

080038b8 <_fwalk_sglue>:
 80038b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038bc:	4607      	mov	r7, r0
 80038be:	4688      	mov	r8, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	2600      	movs	r6, #0
 80038c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038c8:	f1b9 0901 	subs.w	r9, r9, #1
 80038cc:	d505      	bpl.n	80038da <_fwalk_sglue+0x22>
 80038ce:	6824      	ldr	r4, [r4, #0]
 80038d0:	2c00      	cmp	r4, #0
 80038d2:	d1f7      	bne.n	80038c4 <_fwalk_sglue+0xc>
 80038d4:	4630      	mov	r0, r6
 80038d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038da:	89ab      	ldrh	r3, [r5, #12]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d907      	bls.n	80038f0 <_fwalk_sglue+0x38>
 80038e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038e4:	3301      	adds	r3, #1
 80038e6:	d003      	beq.n	80038f0 <_fwalk_sglue+0x38>
 80038e8:	4629      	mov	r1, r5
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c0      	blx	r8
 80038ee:	4306      	orrs	r6, r0
 80038f0:	3568      	adds	r5, #104	; 0x68
 80038f2:	e7e9      	b.n	80038c8 <_fwalk_sglue+0x10>

080038f4 <iprintf>:
 80038f4:	b40f      	push	{r0, r1, r2, r3}
 80038f6:	b507      	push	{r0, r1, r2, lr}
 80038f8:	4906      	ldr	r1, [pc, #24]	; (8003914 <iprintf+0x20>)
 80038fa:	ab04      	add	r3, sp, #16
 80038fc:	6808      	ldr	r0, [r1, #0]
 80038fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003902:	6881      	ldr	r1, [r0, #8]
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	f000 f9f1 	bl	8003cec <_vfiprintf_r>
 800390a:	b003      	add	sp, #12
 800390c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003910:	b004      	add	sp, #16
 8003912:	4770      	bx	lr
 8003914:	20000064 	.word	0x20000064

08003918 <putchar>:
 8003918:	4b02      	ldr	r3, [pc, #8]	; (8003924 <putchar+0xc>)
 800391a:	4601      	mov	r1, r0
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	6882      	ldr	r2, [r0, #8]
 8003920:	f000 bd3c 	b.w	800439c <_putc_r>
 8003924:	20000064 	.word	0x20000064

08003928 <__sread>:
 8003928:	b510      	push	{r4, lr}
 800392a:	460c      	mov	r4, r1
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	f000 f868 	bl	8003a04 <_read_r>
 8003934:	2800      	cmp	r0, #0
 8003936:	bfab      	itete	ge
 8003938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800393a:	89a3      	ldrhlt	r3, [r4, #12]
 800393c:	181b      	addge	r3, r3, r0
 800393e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003942:	bfac      	ite	ge
 8003944:	6563      	strge	r3, [r4, #84]	; 0x54
 8003946:	81a3      	strhlt	r3, [r4, #12]
 8003948:	bd10      	pop	{r4, pc}

0800394a <__swrite>:
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	461f      	mov	r7, r3
 8003950:	898b      	ldrh	r3, [r1, #12]
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	4605      	mov	r5, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4616      	mov	r6, r2
 800395a:	d505      	bpl.n	8003968 <__swrite+0x1e>
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	2302      	movs	r3, #2
 8003962:	2200      	movs	r2, #0
 8003964:	f000 f83c 	bl	80039e0 <_lseek_r>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800396e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	4632      	mov	r2, r6
 8003976:	463b      	mov	r3, r7
 8003978:	4628      	mov	r0, r5
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	f000 b853 	b.w	8003a28 <_write_r>

08003982 <__sseek>:
 8003982:	b510      	push	{r4, lr}
 8003984:	460c      	mov	r4, r1
 8003986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398a:	f000 f829 	bl	80039e0 <_lseek_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	bf15      	itete	ne
 8003994:	6560      	strne	r0, [r4, #84]	; 0x54
 8003996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800399a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800399e:	81a3      	strheq	r3, [r4, #12]
 80039a0:	bf18      	it	ne
 80039a2:	81a3      	strhne	r3, [r4, #12]
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <__sclose>:
 80039a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039aa:	f000 b809 	b.w	80039c0 <_close_r>

080039ae <memset>:
 80039ae:	4402      	add	r2, r0
 80039b0:	4603      	mov	r3, r0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d100      	bne.n	80039b8 <memset+0xa>
 80039b6:	4770      	bx	lr
 80039b8:	f803 1b01 	strb.w	r1, [r3], #1
 80039bc:	e7f9      	b.n	80039b2 <memset+0x4>
	...

080039c0 <_close_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	; (80039dc <_close_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd fbc3 	bl	8001156 <_close>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_close_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_close_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	200002b8 	.word	0x200002b8

080039e0 <_lseek_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4d07      	ldr	r5, [pc, #28]	; (8003a00 <_lseek_r+0x20>)
 80039e4:	4604      	mov	r4, r0
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	2200      	movs	r2, #0
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fd fbd8 	bl	80011a4 <_lseek>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_lseek_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_lseek_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	200002b8 	.word	0x200002b8

08003a04 <_read_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d07      	ldr	r5, [pc, #28]	; (8003a24 <_read_r+0x20>)
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	602a      	str	r2, [r5, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7fd fb82 	bl	800111c <_read>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_read_r+0x1e>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_read_r+0x1e>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	200002b8 	.word	0x200002b8

08003a28 <_write_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4d07      	ldr	r5, [pc, #28]	; (8003a48 <_write_r+0x20>)
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	4608      	mov	r0, r1
 8003a30:	4611      	mov	r1, r2
 8003a32:	2200      	movs	r2, #0
 8003a34:	602a      	str	r2, [r5, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f7fc fd98 	bl	800056c <_write>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_write_r+0x1e>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_write_r+0x1e>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	200002b8 	.word	0x200002b8

08003a4c <__errno>:
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <__errno+0x8>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000064 	.word	0x20000064

08003a58 <__libc_init_array>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4d0d      	ldr	r5, [pc, #52]	; (8003a90 <__libc_init_array+0x38>)
 8003a5c:	4c0d      	ldr	r4, [pc, #52]	; (8003a94 <__libc_init_array+0x3c>)
 8003a5e:	1b64      	subs	r4, r4, r5
 8003a60:	10a4      	asrs	r4, r4, #2
 8003a62:	2600      	movs	r6, #0
 8003a64:	42a6      	cmp	r6, r4
 8003a66:	d109      	bne.n	8003a7c <__libc_init_array+0x24>
 8003a68:	4d0b      	ldr	r5, [pc, #44]	; (8003a98 <__libc_init_array+0x40>)
 8003a6a:	4c0c      	ldr	r4, [pc, #48]	; (8003a9c <__libc_init_array+0x44>)
 8003a6c:	f000 fdf4 	bl	8004658 <_init>
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	2600      	movs	r6, #0
 8003a76:	42a6      	cmp	r6, r4
 8003a78:	d105      	bne.n	8003a86 <__libc_init_array+0x2e>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a80:	4798      	blx	r3
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7ee      	b.n	8003a64 <__libc_init_array+0xc>
 8003a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8a:	4798      	blx	r3
 8003a8c:	3601      	adds	r6, #1
 8003a8e:	e7f2      	b.n	8003a76 <__libc_init_array+0x1e>
 8003a90:	08004940 	.word	0x08004940
 8003a94:	08004940 	.word	0x08004940
 8003a98:	08004940 	.word	0x08004940
 8003a9c:	08004944 	.word	0x08004944

08003aa0 <__retarget_lock_init_recursive>:
 8003aa0:	4770      	bx	lr

08003aa2 <__retarget_lock_acquire_recursive>:
 8003aa2:	4770      	bx	lr

08003aa4 <__retarget_lock_release_recursive>:
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_free_r>:
 8003aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	d044      	beq.n	8003b38 <_free_r+0x90>
 8003aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab2:	9001      	str	r0, [sp, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8003aba:	bfb8      	it	lt
 8003abc:	18e4      	addlt	r4, r4, r3
 8003abe:	f000 f8df 	bl	8003c80 <__malloc_lock>
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <_free_r+0x94>)
 8003ac4:	9801      	ldr	r0, [sp, #4]
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	b933      	cbnz	r3, 8003ad8 <_free_r+0x30>
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	6014      	str	r4, [r2, #0]
 8003ace:	b003      	add	sp, #12
 8003ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ad4:	f000 b8da 	b.w	8003c8c <__malloc_unlock>
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d908      	bls.n	8003aee <_free_r+0x46>
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	1961      	adds	r1, r4, r5
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	bf01      	itttt	eq
 8003ae4:	6819      	ldreq	r1, [r3, #0]
 8003ae6:	685b      	ldreq	r3, [r3, #4]
 8003ae8:	1949      	addeq	r1, r1, r5
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	e7ed      	b.n	8003aca <_free_r+0x22>
 8003aee:	461a      	mov	r2, r3
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b10b      	cbz	r3, 8003af8 <_free_r+0x50>
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d9fa      	bls.n	8003aee <_free_r+0x46>
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	1855      	adds	r5, r2, r1
 8003afc:	42a5      	cmp	r5, r4
 8003afe:	d10b      	bne.n	8003b18 <_free_r+0x70>
 8003b00:	6824      	ldr	r4, [r4, #0]
 8003b02:	4421      	add	r1, r4
 8003b04:	1854      	adds	r4, r2, r1
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	d1e0      	bne.n	8003ace <_free_r+0x26>
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6053      	str	r3, [r2, #4]
 8003b12:	440c      	add	r4, r1
 8003b14:	6014      	str	r4, [r2, #0]
 8003b16:	e7da      	b.n	8003ace <_free_r+0x26>
 8003b18:	d902      	bls.n	8003b20 <_free_r+0x78>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	6003      	str	r3, [r0, #0]
 8003b1e:	e7d6      	b.n	8003ace <_free_r+0x26>
 8003b20:	6825      	ldr	r5, [r4, #0]
 8003b22:	1961      	adds	r1, r4, r5
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf04      	itt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	bf04      	itt	eq
 8003b30:	1949      	addeq	r1, r1, r5
 8003b32:	6021      	streq	r1, [r4, #0]
 8003b34:	6054      	str	r4, [r2, #4]
 8003b36:	e7ca      	b.n	8003ace <_free_r+0x26>
 8003b38:	b003      	add	sp, #12
 8003b3a:	bd30      	pop	{r4, r5, pc}
 8003b3c:	200002c0 	.word	0x200002c0

08003b40 <sbrk_aligned>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4e0e      	ldr	r6, [pc, #56]	; (8003b7c <sbrk_aligned+0x3c>)
 8003b44:	460c      	mov	r4, r1
 8003b46:	6831      	ldr	r1, [r6, #0]
 8003b48:	4605      	mov	r5, r0
 8003b4a:	b911      	cbnz	r1, 8003b52 <sbrk_aligned+0x12>
 8003b4c:	f000 fcf0 	bl	8004530 <_sbrk_r>
 8003b50:	6030      	str	r0, [r6, #0]
 8003b52:	4621      	mov	r1, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 fceb 	bl	8004530 <_sbrk_r>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	d00a      	beq.n	8003b74 <sbrk_aligned+0x34>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d007      	beq.n	8003b78 <sbrk_aligned+0x38>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f000 fce0 	bl	8004530 <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d101      	bne.n	8003b78 <sbrk_aligned+0x38>
 8003b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b78:	4620      	mov	r0, r4
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	200002c4 	.word	0x200002c4

08003b80 <_malloc_r>:
 8003b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b84:	1ccd      	adds	r5, r1, #3
 8003b86:	f025 0503 	bic.w	r5, r5, #3
 8003b8a:	3508      	adds	r5, #8
 8003b8c:	2d0c      	cmp	r5, #12
 8003b8e:	bf38      	it	cc
 8003b90:	250c      	movcc	r5, #12
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	4607      	mov	r7, r0
 8003b96:	db01      	blt.n	8003b9c <_malloc_r+0x1c>
 8003b98:	42a9      	cmp	r1, r5
 8003b9a:	d905      	bls.n	8003ba8 <_malloc_r+0x28>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c7c <_malloc_r+0xfc>
 8003bac:	f000 f868 	bl	8003c80 <__malloc_lock>
 8003bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb4:	461c      	mov	r4, r3
 8003bb6:	bb5c      	cbnz	r4, 8003c10 <_malloc_r+0x90>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f7ff ffc0 	bl	8003b40 <sbrk_aligned>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	d155      	bne.n	8003c72 <_malloc_r+0xf2>
 8003bc6:	f8d8 4000 	ldr.w	r4, [r8]
 8003bca:	4626      	mov	r6, r4
 8003bcc:	2e00      	cmp	r6, #0
 8003bce:	d145      	bne.n	8003c5c <_malloc_r+0xdc>
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	d048      	beq.n	8003c66 <_malloc_r+0xe6>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	4638      	mov	r0, r7
 8003bda:	eb04 0903 	add.w	r9, r4, r3
 8003bde:	f000 fca7 	bl	8004530 <_sbrk_r>
 8003be2:	4581      	cmp	r9, r0
 8003be4:	d13f      	bne.n	8003c66 <_malloc_r+0xe6>
 8003be6:	6821      	ldr	r1, [r4, #0]
 8003be8:	1a6d      	subs	r5, r5, r1
 8003bea:	4629      	mov	r1, r5
 8003bec:	4638      	mov	r0, r7
 8003bee:	f7ff ffa7 	bl	8003b40 <sbrk_aligned>
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d037      	beq.n	8003c66 <_malloc_r+0xe6>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	442b      	add	r3, r5
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d038      	beq.n	8003c76 <_malloc_r+0xf6>
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	42a2      	cmp	r2, r4
 8003c08:	d12b      	bne.n	8003c62 <_malloc_r+0xe2>
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e00f      	b.n	8003c30 <_malloc_r+0xb0>
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	1b52      	subs	r2, r2, r5
 8003c14:	d41f      	bmi.n	8003c56 <_malloc_r+0xd6>
 8003c16:	2a0b      	cmp	r2, #11
 8003c18:	d917      	bls.n	8003c4a <_malloc_r+0xca>
 8003c1a:	1961      	adds	r1, r4, r5
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	6025      	str	r5, [r4, #0]
 8003c20:	bf18      	it	ne
 8003c22:	6059      	strne	r1, [r3, #4]
 8003c24:	6863      	ldr	r3, [r4, #4]
 8003c26:	bf08      	it	eq
 8003c28:	f8c8 1000 	streq.w	r1, [r8]
 8003c2c:	5162      	str	r2, [r4, r5]
 8003c2e:	604b      	str	r3, [r1, #4]
 8003c30:	4638      	mov	r0, r7
 8003c32:	f104 060b 	add.w	r6, r4, #11
 8003c36:	f000 f829 	bl	8003c8c <__malloc_unlock>
 8003c3a:	f026 0607 	bic.w	r6, r6, #7
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	1af2      	subs	r2, r6, r3
 8003c42:	d0ae      	beq.n	8003ba2 <_malloc_r+0x22>
 8003c44:	1b9b      	subs	r3, r3, r6
 8003c46:	50a3      	str	r3, [r4, r2]
 8003c48:	e7ab      	b.n	8003ba2 <_malloc_r+0x22>
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	6862      	ldr	r2, [r4, #4]
 8003c4e:	d1dd      	bne.n	8003c0c <_malloc_r+0x8c>
 8003c50:	f8c8 2000 	str.w	r2, [r8]
 8003c54:	e7ec      	b.n	8003c30 <_malloc_r+0xb0>
 8003c56:	4623      	mov	r3, r4
 8003c58:	6864      	ldr	r4, [r4, #4]
 8003c5a:	e7ac      	b.n	8003bb6 <_malloc_r+0x36>
 8003c5c:	4634      	mov	r4, r6
 8003c5e:	6876      	ldr	r6, [r6, #4]
 8003c60:	e7b4      	b.n	8003bcc <_malloc_r+0x4c>
 8003c62:	4613      	mov	r3, r2
 8003c64:	e7cc      	b.n	8003c00 <_malloc_r+0x80>
 8003c66:	230c      	movs	r3, #12
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f000 f80e 	bl	8003c8c <__malloc_unlock>
 8003c70:	e797      	b.n	8003ba2 <_malloc_r+0x22>
 8003c72:	6025      	str	r5, [r4, #0]
 8003c74:	e7dc      	b.n	8003c30 <_malloc_r+0xb0>
 8003c76:	605b      	str	r3, [r3, #4]
 8003c78:	deff      	udf	#255	; 0xff
 8003c7a:	bf00      	nop
 8003c7c:	200002c0 	.word	0x200002c0

08003c80 <__malloc_lock>:
 8003c80:	4801      	ldr	r0, [pc, #4]	; (8003c88 <__malloc_lock+0x8>)
 8003c82:	f7ff bf0e 	b.w	8003aa2 <__retarget_lock_acquire_recursive>
 8003c86:	bf00      	nop
 8003c88:	200002bc 	.word	0x200002bc

08003c8c <__malloc_unlock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	; (8003c94 <__malloc_unlock+0x8>)
 8003c8e:	f7ff bf09 	b.w	8003aa4 <__retarget_lock_release_recursive>
 8003c92:	bf00      	nop
 8003c94:	200002bc 	.word	0x200002bc

08003c98 <__sfputc_r>:
 8003c98:	6893      	ldr	r3, [r2, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	b410      	push	{r4}
 8003ca0:	6093      	str	r3, [r2, #8]
 8003ca2:	da08      	bge.n	8003cb6 <__sfputc_r+0x1e>
 8003ca4:	6994      	ldr	r4, [r2, #24]
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	db01      	blt.n	8003cae <__sfputc_r+0x16>
 8003caa:	290a      	cmp	r1, #10
 8003cac:	d103      	bne.n	8003cb6 <__sfputc_r+0x1e>
 8003cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb2:	f000 bba7 	b.w	8004404 <__swbuf_r>
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	1c58      	adds	r0, r3, #1
 8003cba:	6010      	str	r0, [r2, #0]
 8003cbc:	7019      	strb	r1, [r3, #0]
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <__sfputs_r>:
 8003cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	18d5      	adds	r5, r2, r3
 8003cd0:	42ac      	cmp	r4, r5
 8003cd2:	d101      	bne.n	8003cd8 <__sfputs_r+0x12>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e007      	b.n	8003ce8 <__sfputs_r+0x22>
 8003cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cdc:	463a      	mov	r2, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ffda 	bl	8003c98 <__sfputc_r>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d1f3      	bne.n	8003cd0 <__sfputs_r+0xa>
 8003ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cec <_vfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	b09d      	sub	sp, #116	; 0x74
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	4698      	mov	r8, r3
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	b118      	cbz	r0, 8003d04 <_vfiprintf_r+0x18>
 8003cfc:	6a03      	ldr	r3, [r0, #32]
 8003cfe:	b90b      	cbnz	r3, 8003d04 <_vfiprintf_r+0x18>
 8003d00:	f7ff fdc2 	bl	8003888 <__sinit>
 8003d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_vfiprintf_r+0x2a>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	059a      	lsls	r2, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_vfiprintf_r+0x2a>
 8003d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d12:	f7ff fec6 	bl	8003aa2 <__retarget_lock_acquire_recursive>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	d501      	bpl.n	8003d20 <_vfiprintf_r+0x34>
 8003d1c:	692b      	ldr	r3, [r5, #16]
 8003d1e:	b99b      	cbnz	r3, 8003d48 <_vfiprintf_r+0x5c>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 fbac 	bl	8004480 <__swsetup_r>
 8003d28:	b170      	cbz	r0, 8003d48 <_vfiprintf_r+0x5c>
 8003d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2c:	07dc      	lsls	r4, r3, #31
 8003d2e:	d504      	bpl.n	8003d3a <_vfiprintf_r+0x4e>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d34:	b01d      	add	sp, #116	; 0x74
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	0598      	lsls	r0, r3, #22
 8003d3e:	d4f7      	bmi.n	8003d30 <_vfiprintf_r+0x44>
 8003d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d42:	f7ff feaf 	bl	8003aa4 <__retarget_lock_release_recursive>
 8003d46:	e7f3      	b.n	8003d30 <_vfiprintf_r+0x44>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d56:	2330      	movs	r3, #48	; 0x30
 8003d58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003f0c <_vfiprintf_r+0x220>
 8003d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d60:	f04f 0901 	mov.w	r9, #1
 8003d64:	4623      	mov	r3, r4
 8003d66:	469a      	mov	sl, r3
 8003d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d6c:	b10a      	cbz	r2, 8003d72 <_vfiprintf_r+0x86>
 8003d6e:	2a25      	cmp	r2, #37	; 0x25
 8003d70:	d1f9      	bne.n	8003d66 <_vfiprintf_r+0x7a>
 8003d72:	ebba 0b04 	subs.w	fp, sl, r4
 8003d76:	d00b      	beq.n	8003d90 <_vfiprintf_r+0xa4>
 8003d78:	465b      	mov	r3, fp
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7ff ffa1 	bl	8003cc6 <__sfputs_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	f000 80a9 	beq.w	8003edc <_vfiprintf_r+0x1f0>
 8003d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d8c:	445a      	add	r2, fp
 8003d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a1 	beq.w	8003edc <_vfiprintf_r+0x1f0>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003da4:	f10a 0a01 	add.w	sl, sl, #1
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	9307      	str	r3, [sp, #28]
 8003dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003db0:	931a      	str	r3, [sp, #104]	; 0x68
 8003db2:	4654      	mov	r4, sl
 8003db4:	2205      	movs	r2, #5
 8003db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dba:	4854      	ldr	r0, [pc, #336]	; (8003f0c <_vfiprintf_r+0x220>)
 8003dbc:	f7fc fa08 	bl	80001d0 <memchr>
 8003dc0:	9a04      	ldr	r2, [sp, #16]
 8003dc2:	b9d8      	cbnz	r0, 8003dfc <_vfiprintf_r+0x110>
 8003dc4:	06d1      	lsls	r1, r2, #27
 8003dc6:	bf44      	itt	mi
 8003dc8:	2320      	movmi	r3, #32
 8003dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dce:	0713      	lsls	r3, r2, #28
 8003dd0:	bf44      	itt	mi
 8003dd2:	232b      	movmi	r3, #43	; 0x2b
 8003dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dde:	d015      	beq.n	8003e0c <_vfiprintf_r+0x120>
 8003de0:	9a07      	ldr	r2, [sp, #28]
 8003de2:	4654      	mov	r4, sl
 8003de4:	2000      	movs	r0, #0
 8003de6:	f04f 0c0a 	mov.w	ip, #10
 8003dea:	4621      	mov	r1, r4
 8003dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df0:	3b30      	subs	r3, #48	; 0x30
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d94d      	bls.n	8003e92 <_vfiprintf_r+0x1a6>
 8003df6:	b1b0      	cbz	r0, 8003e26 <_vfiprintf_r+0x13a>
 8003df8:	9207      	str	r2, [sp, #28]
 8003dfa:	e014      	b.n	8003e26 <_vfiprintf_r+0x13a>
 8003dfc:	eba0 0308 	sub.w	r3, r0, r8
 8003e00:	fa09 f303 	lsl.w	r3, r9, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	9304      	str	r3, [sp, #16]
 8003e08:	46a2      	mov	sl, r4
 8003e0a:	e7d2      	b.n	8003db2 <_vfiprintf_r+0xc6>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1d19      	adds	r1, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9103      	str	r1, [sp, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bfbb      	ittet	lt
 8003e18:	425b      	neglt	r3, r3
 8003e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e1e:	9307      	strge	r3, [sp, #28]
 8003e20:	9307      	strlt	r3, [sp, #28]
 8003e22:	bfb8      	it	lt
 8003e24:	9204      	strlt	r2, [sp, #16]
 8003e26:	7823      	ldrb	r3, [r4, #0]
 8003e28:	2b2e      	cmp	r3, #46	; 0x2e
 8003e2a:	d10c      	bne.n	8003e46 <_vfiprintf_r+0x15a>
 8003e2c:	7863      	ldrb	r3, [r4, #1]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d134      	bne.n	8003e9c <_vfiprintf_r+0x1b0>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	9203      	str	r2, [sp, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bfb8      	it	lt
 8003e3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e42:	3402      	adds	r4, #2
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003f1c <_vfiprintf_r+0x230>
 8003e4a:	7821      	ldrb	r1, [r4, #0]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4650      	mov	r0, sl
 8003e50:	f7fc f9be 	bl	80001d0 <memchr>
 8003e54:	b138      	cbz	r0, 8003e66 <_vfiprintf_r+0x17a>
 8003e56:	9b04      	ldr	r3, [sp, #16]
 8003e58:	eba0 000a 	sub.w	r0, r0, sl
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	4082      	lsls	r2, r0
 8003e60:	4313      	orrs	r3, r2
 8003e62:	3401      	adds	r4, #1
 8003e64:	9304      	str	r3, [sp, #16]
 8003e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e6a:	4829      	ldr	r0, [pc, #164]	; (8003f10 <_vfiprintf_r+0x224>)
 8003e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e70:	2206      	movs	r2, #6
 8003e72:	f7fc f9ad 	bl	80001d0 <memchr>
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d03f      	beq.n	8003efa <_vfiprintf_r+0x20e>
 8003e7a:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <_vfiprintf_r+0x228>)
 8003e7c:	bb1b      	cbnz	r3, 8003ec6 <_vfiprintf_r+0x1da>
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	3307      	adds	r3, #7
 8003e82:	f023 0307 	bic.w	r3, r3, #7
 8003e86:	3308      	adds	r3, #8
 8003e88:	9303      	str	r3, [sp, #12]
 8003e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e8c:	443b      	add	r3, r7
 8003e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e90:	e768      	b.n	8003d64 <_vfiprintf_r+0x78>
 8003e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e96:	460c      	mov	r4, r1
 8003e98:	2001      	movs	r0, #1
 8003e9a:	e7a6      	b.n	8003dea <_vfiprintf_r+0xfe>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	9305      	str	r3, [sp, #20]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f04f 0c0a 	mov.w	ip, #10
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eae:	3a30      	subs	r2, #48	; 0x30
 8003eb0:	2a09      	cmp	r2, #9
 8003eb2:	d903      	bls.n	8003ebc <_vfiprintf_r+0x1d0>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0c6      	beq.n	8003e46 <_vfiprintf_r+0x15a>
 8003eb8:	9105      	str	r1, [sp, #20]
 8003eba:	e7c4      	b.n	8003e46 <_vfiprintf_r+0x15a>
 8003ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e7f0      	b.n	8003ea8 <_vfiprintf_r+0x1bc>
 8003ec6:	ab03      	add	r3, sp, #12
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	462a      	mov	r2, r5
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <_vfiprintf_r+0x22c>)
 8003ece:	a904      	add	r1, sp, #16
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f3af 8000 	nop.w
 8003ed6:	4607      	mov	r7, r0
 8003ed8:	1c78      	adds	r0, r7, #1
 8003eda:	d1d6      	bne.n	8003e8a <_vfiprintf_r+0x19e>
 8003edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ede:	07d9      	lsls	r1, r3, #31
 8003ee0:	d405      	bmi.n	8003eee <_vfiprintf_r+0x202>
 8003ee2:	89ab      	ldrh	r3, [r5, #12]
 8003ee4:	059a      	lsls	r2, r3, #22
 8003ee6:	d402      	bmi.n	8003eee <_vfiprintf_r+0x202>
 8003ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eea:	f7ff fddb 	bl	8003aa4 <__retarget_lock_release_recursive>
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	065b      	lsls	r3, r3, #25
 8003ef2:	f53f af1d 	bmi.w	8003d30 <_vfiprintf_r+0x44>
 8003ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ef8:	e71c      	b.n	8003d34 <_vfiprintf_r+0x48>
 8003efa:	ab03      	add	r3, sp, #12
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	462a      	mov	r2, r5
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <_vfiprintf_r+0x22c>)
 8003f02:	a904      	add	r1, sp, #16
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f879 	bl	8003ffc <_printf_i>
 8003f0a:	e7e4      	b.n	8003ed6 <_vfiprintf_r+0x1ea>
 8003f0c:	08004904 	.word	0x08004904
 8003f10:	0800490e 	.word	0x0800490e
 8003f14:	00000000 	.word	0x00000000
 8003f18:	08003cc7 	.word	0x08003cc7
 8003f1c:	0800490a 	.word	0x0800490a

08003f20 <_printf_common>:
 8003f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	4616      	mov	r6, r2
 8003f26:	4699      	mov	r9, r3
 8003f28:	688a      	ldr	r2, [r1, #8]
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bfb8      	it	lt
 8003f34:	4613      	movlt	r3, r2
 8003f36:	6033      	str	r3, [r6, #0]
 8003f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	b10a      	cbz	r2, 8003f46 <_printf_common+0x26>
 8003f42:	3301      	adds	r3, #1
 8003f44:	6033      	str	r3, [r6, #0]
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	0699      	lsls	r1, r3, #26
 8003f4a:	bf42      	ittt	mi
 8003f4c:	6833      	ldrmi	r3, [r6, #0]
 8003f4e:	3302      	addmi	r3, #2
 8003f50:	6033      	strmi	r3, [r6, #0]
 8003f52:	6825      	ldr	r5, [r4, #0]
 8003f54:	f015 0506 	ands.w	r5, r5, #6
 8003f58:	d106      	bne.n	8003f68 <_printf_common+0x48>
 8003f5a:	f104 0a19 	add.w	sl, r4, #25
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	6832      	ldr	r2, [r6, #0]
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	dc26      	bgt.n	8003fb6 <_printf_common+0x96>
 8003f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f6c:	1e13      	subs	r3, r2, #0
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	bf18      	it	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	0692      	lsls	r2, r2, #26
 8003f76:	d42b      	bmi.n	8003fd0 <_printf_common+0xb0>
 8003f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	4638      	mov	r0, r7
 8003f80:	47c0      	blx	r8
 8003f82:	3001      	adds	r0, #1
 8003f84:	d01e      	beq.n	8003fc4 <_printf_common+0xa4>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	6922      	ldr	r2, [r4, #16]
 8003f8a:	f003 0306 	and.w	r3, r3, #6
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf02      	ittt	eq
 8003f92:	68e5      	ldreq	r5, [r4, #12]
 8003f94:	6833      	ldreq	r3, [r6, #0]
 8003f96:	1aed      	subeq	r5, r5, r3
 8003f98:	68a3      	ldr	r3, [r4, #8]
 8003f9a:	bf0c      	ite	eq
 8003f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fa0:	2500      	movne	r5, #0
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	bfc4      	itt	gt
 8003fa6:	1a9b      	subgt	r3, r3, r2
 8003fa8:	18ed      	addgt	r5, r5, r3
 8003faa:	2600      	movs	r6, #0
 8003fac:	341a      	adds	r4, #26
 8003fae:	42b5      	cmp	r5, r6
 8003fb0:	d11a      	bne.n	8003fe8 <_printf_common+0xc8>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e008      	b.n	8003fc8 <_printf_common+0xa8>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4652      	mov	r2, sl
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	47c0      	blx	r8
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d103      	bne.n	8003fcc <_printf_common+0xac>
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fcc:	3501      	adds	r5, #1
 8003fce:	e7c6      	b.n	8003f5e <_printf_common+0x3e>
 8003fd0:	18e1      	adds	r1, r4, r3
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	2030      	movs	r0, #48	; 0x30
 8003fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fda:	4422      	add	r2, r4
 8003fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	e7c7      	b.n	8003f78 <_printf_common+0x58>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4622      	mov	r2, r4
 8003fec:	4649      	mov	r1, r9
 8003fee:	4638      	mov	r0, r7
 8003ff0:	47c0      	blx	r8
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0e6      	beq.n	8003fc4 <_printf_common+0xa4>
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7d9      	b.n	8003fae <_printf_common+0x8e>
	...

08003ffc <_printf_i>:
 8003ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	7e0f      	ldrb	r7, [r1, #24]
 8004002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004004:	2f78      	cmp	r7, #120	; 0x78
 8004006:	4691      	mov	r9, r2
 8004008:	4680      	mov	r8, r0
 800400a:	460c      	mov	r4, r1
 800400c:	469a      	mov	sl, r3
 800400e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004012:	d807      	bhi.n	8004024 <_printf_i+0x28>
 8004014:	2f62      	cmp	r7, #98	; 0x62
 8004016:	d80a      	bhi.n	800402e <_printf_i+0x32>
 8004018:	2f00      	cmp	r7, #0
 800401a:	f000 80d4 	beq.w	80041c6 <_printf_i+0x1ca>
 800401e:	2f58      	cmp	r7, #88	; 0x58
 8004020:	f000 80c0 	beq.w	80041a4 <_printf_i+0x1a8>
 8004024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800402c:	e03a      	b.n	80040a4 <_printf_i+0xa8>
 800402e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004032:	2b15      	cmp	r3, #21
 8004034:	d8f6      	bhi.n	8004024 <_printf_i+0x28>
 8004036:	a101      	add	r1, pc, #4	; (adr r1, 800403c <_printf_i+0x40>)
 8004038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800403c:	08004095 	.word	0x08004095
 8004040:	080040a9 	.word	0x080040a9
 8004044:	08004025 	.word	0x08004025
 8004048:	08004025 	.word	0x08004025
 800404c:	08004025 	.word	0x08004025
 8004050:	08004025 	.word	0x08004025
 8004054:	080040a9 	.word	0x080040a9
 8004058:	08004025 	.word	0x08004025
 800405c:	08004025 	.word	0x08004025
 8004060:	08004025 	.word	0x08004025
 8004064:	08004025 	.word	0x08004025
 8004068:	080041ad 	.word	0x080041ad
 800406c:	080040d5 	.word	0x080040d5
 8004070:	08004167 	.word	0x08004167
 8004074:	08004025 	.word	0x08004025
 8004078:	08004025 	.word	0x08004025
 800407c:	080041cf 	.word	0x080041cf
 8004080:	08004025 	.word	0x08004025
 8004084:	080040d5 	.word	0x080040d5
 8004088:	08004025 	.word	0x08004025
 800408c:	08004025 	.word	0x08004025
 8004090:	0800416f 	.word	0x0800416f
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	1d1a      	adds	r2, r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	602a      	str	r2, [r5, #0]
 800409c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040a4:	2301      	movs	r3, #1
 80040a6:	e09f      	b.n	80041e8 <_printf_i+0x1ec>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	0607      	lsls	r7, r0, #24
 80040ae:	f103 0104 	add.w	r1, r3, #4
 80040b2:	6029      	str	r1, [r5, #0]
 80040b4:	d501      	bpl.n	80040ba <_printf_i+0xbe>
 80040b6:	681e      	ldr	r6, [r3, #0]
 80040b8:	e003      	b.n	80040c2 <_printf_i+0xc6>
 80040ba:	0646      	lsls	r6, r0, #25
 80040bc:	d5fb      	bpl.n	80040b6 <_printf_i+0xba>
 80040be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	da03      	bge.n	80040ce <_printf_i+0xd2>
 80040c6:	232d      	movs	r3, #45	; 0x2d
 80040c8:	4276      	negs	r6, r6
 80040ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ce:	485a      	ldr	r0, [pc, #360]	; (8004238 <_printf_i+0x23c>)
 80040d0:	230a      	movs	r3, #10
 80040d2:	e012      	b.n	80040fa <_printf_i+0xfe>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	1d19      	adds	r1, r3, #4
 80040da:	6029      	str	r1, [r5, #0]
 80040dc:	0605      	lsls	r5, r0, #24
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0xe8>
 80040e0:	681e      	ldr	r6, [r3, #0]
 80040e2:	e002      	b.n	80040ea <_printf_i+0xee>
 80040e4:	0641      	lsls	r1, r0, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0xe4>
 80040e8:	881e      	ldrh	r6, [r3, #0]
 80040ea:	4853      	ldr	r0, [pc, #332]	; (8004238 <_printf_i+0x23c>)
 80040ec:	2f6f      	cmp	r7, #111	; 0x6f
 80040ee:	bf0c      	ite	eq
 80040f0:	2308      	moveq	r3, #8
 80040f2:	230a      	movne	r3, #10
 80040f4:	2100      	movs	r1, #0
 80040f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040fa:	6865      	ldr	r5, [r4, #4]
 80040fc:	60a5      	str	r5, [r4, #8]
 80040fe:	2d00      	cmp	r5, #0
 8004100:	bfa2      	ittt	ge
 8004102:	6821      	ldrge	r1, [r4, #0]
 8004104:	f021 0104 	bicge.w	r1, r1, #4
 8004108:	6021      	strge	r1, [r4, #0]
 800410a:	b90e      	cbnz	r6, 8004110 <_printf_i+0x114>
 800410c:	2d00      	cmp	r5, #0
 800410e:	d04b      	beq.n	80041a8 <_printf_i+0x1ac>
 8004110:	4615      	mov	r5, r2
 8004112:	fbb6 f1f3 	udiv	r1, r6, r3
 8004116:	fb03 6711 	mls	r7, r3, r1, r6
 800411a:	5dc7      	ldrb	r7, [r0, r7]
 800411c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004120:	4637      	mov	r7, r6
 8004122:	42bb      	cmp	r3, r7
 8004124:	460e      	mov	r6, r1
 8004126:	d9f4      	bls.n	8004112 <_printf_i+0x116>
 8004128:	2b08      	cmp	r3, #8
 800412a:	d10b      	bne.n	8004144 <_printf_i+0x148>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	07de      	lsls	r6, r3, #31
 8004130:	d508      	bpl.n	8004144 <_printf_i+0x148>
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6861      	ldr	r1, [r4, #4]
 8004136:	4299      	cmp	r1, r3
 8004138:	bfde      	ittt	le
 800413a:	2330      	movle	r3, #48	; 0x30
 800413c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004140:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004144:	1b52      	subs	r2, r2, r5
 8004146:	6122      	str	r2, [r4, #16]
 8004148:	f8cd a000 	str.w	sl, [sp]
 800414c:	464b      	mov	r3, r9
 800414e:	aa03      	add	r2, sp, #12
 8004150:	4621      	mov	r1, r4
 8004152:	4640      	mov	r0, r8
 8004154:	f7ff fee4 	bl	8003f20 <_printf_common>
 8004158:	3001      	adds	r0, #1
 800415a:	d14a      	bne.n	80041f2 <_printf_i+0x1f6>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004160:	b004      	add	sp, #16
 8004162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	4833      	ldr	r0, [pc, #204]	; (800423c <_printf_i+0x240>)
 8004170:	2778      	movs	r7, #120	; 0x78
 8004172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	6829      	ldr	r1, [r5, #0]
 800417a:	061f      	lsls	r7, r3, #24
 800417c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004180:	d402      	bmi.n	8004188 <_printf_i+0x18c>
 8004182:	065f      	lsls	r7, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2b6      	uxthmi	r6, r6
 8004188:	07df      	lsls	r7, r3, #31
 800418a:	bf48      	it	mi
 800418c:	f043 0320 	orrmi.w	r3, r3, #32
 8004190:	6029      	str	r1, [r5, #0]
 8004192:	bf48      	it	mi
 8004194:	6023      	strmi	r3, [r4, #0]
 8004196:	b91e      	cbnz	r6, 80041a0 <_printf_i+0x1a4>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f023 0320 	bic.w	r3, r3, #32
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	2310      	movs	r3, #16
 80041a2:	e7a7      	b.n	80040f4 <_printf_i+0xf8>
 80041a4:	4824      	ldr	r0, [pc, #144]	; (8004238 <_printf_i+0x23c>)
 80041a6:	e7e4      	b.n	8004172 <_printf_i+0x176>
 80041a8:	4615      	mov	r5, r2
 80041aa:	e7bd      	b.n	8004128 <_printf_i+0x12c>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	6826      	ldr	r6, [r4, #0]
 80041b0:	6961      	ldr	r1, [r4, #20]
 80041b2:	1d18      	adds	r0, r3, #4
 80041b4:	6028      	str	r0, [r5, #0]
 80041b6:	0635      	lsls	r5, r6, #24
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0x1c4>
 80041bc:	6019      	str	r1, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0x1ca>
 80041c0:	0670      	lsls	r0, r6, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0x1c0>
 80041c4:	8019      	strh	r1, [r3, #0]
 80041c6:	2300      	movs	r3, #0
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	4615      	mov	r5, r2
 80041cc:	e7bc      	b.n	8004148 <_printf_i+0x14c>
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	602a      	str	r2, [r5, #0]
 80041d4:	681d      	ldr	r5, [r3, #0]
 80041d6:	6862      	ldr	r2, [r4, #4]
 80041d8:	2100      	movs	r1, #0
 80041da:	4628      	mov	r0, r5
 80041dc:	f7fb fff8 	bl	80001d0 <memchr>
 80041e0:	b108      	cbz	r0, 80041e6 <_printf_i+0x1ea>
 80041e2:	1b40      	subs	r0, r0, r5
 80041e4:	6060      	str	r0, [r4, #4]
 80041e6:	6863      	ldr	r3, [r4, #4]
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	2300      	movs	r3, #0
 80041ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f0:	e7aa      	b.n	8004148 <_printf_i+0x14c>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	462a      	mov	r2, r5
 80041f6:	4649      	mov	r1, r9
 80041f8:	4640      	mov	r0, r8
 80041fa:	47d0      	blx	sl
 80041fc:	3001      	adds	r0, #1
 80041fe:	d0ad      	beq.n	800415c <_printf_i+0x160>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	079b      	lsls	r3, r3, #30
 8004204:	d413      	bmi.n	800422e <_printf_i+0x232>
 8004206:	68e0      	ldr	r0, [r4, #12]
 8004208:	9b03      	ldr	r3, [sp, #12]
 800420a:	4298      	cmp	r0, r3
 800420c:	bfb8      	it	lt
 800420e:	4618      	movlt	r0, r3
 8004210:	e7a6      	b.n	8004160 <_printf_i+0x164>
 8004212:	2301      	movs	r3, #1
 8004214:	4632      	mov	r2, r6
 8004216:	4649      	mov	r1, r9
 8004218:	4640      	mov	r0, r8
 800421a:	47d0      	blx	sl
 800421c:	3001      	adds	r0, #1
 800421e:	d09d      	beq.n	800415c <_printf_i+0x160>
 8004220:	3501      	adds	r5, #1
 8004222:	68e3      	ldr	r3, [r4, #12]
 8004224:	9903      	ldr	r1, [sp, #12]
 8004226:	1a5b      	subs	r3, r3, r1
 8004228:	42ab      	cmp	r3, r5
 800422a:	dcf2      	bgt.n	8004212 <_printf_i+0x216>
 800422c:	e7eb      	b.n	8004206 <_printf_i+0x20a>
 800422e:	2500      	movs	r5, #0
 8004230:	f104 0619 	add.w	r6, r4, #25
 8004234:	e7f5      	b.n	8004222 <_printf_i+0x226>
 8004236:	bf00      	nop
 8004238:	08004915 	.word	0x08004915
 800423c:	08004926 	.word	0x08004926

08004240 <__sflush_r>:
 8004240:	898a      	ldrh	r2, [r1, #12]
 8004242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	0710      	lsls	r0, r2, #28
 800424a:	460c      	mov	r4, r1
 800424c:	d458      	bmi.n	8004300 <__sflush_r+0xc0>
 800424e:	684b      	ldr	r3, [r1, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	dc05      	bgt.n	8004260 <__sflush_r+0x20>
 8004254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	dc02      	bgt.n	8004260 <__sflush_r+0x20>
 800425a:	2000      	movs	r0, #0
 800425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004262:	2e00      	cmp	r6, #0
 8004264:	d0f9      	beq.n	800425a <__sflush_r+0x1a>
 8004266:	2300      	movs	r3, #0
 8004268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800426c:	682f      	ldr	r7, [r5, #0]
 800426e:	6a21      	ldr	r1, [r4, #32]
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	d032      	beq.n	80042da <__sflush_r+0x9a>
 8004274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	075a      	lsls	r2, r3, #29
 800427a:	d505      	bpl.n	8004288 <__sflush_r+0x48>
 800427c:	6863      	ldr	r3, [r4, #4]
 800427e:	1ac0      	subs	r0, r0, r3
 8004280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004282:	b10b      	cbz	r3, 8004288 <__sflush_r+0x48>
 8004284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004286:	1ac0      	subs	r0, r0, r3
 8004288:	2300      	movs	r3, #0
 800428a:	4602      	mov	r2, r0
 800428c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800428e:	6a21      	ldr	r1, [r4, #32]
 8004290:	4628      	mov	r0, r5
 8004292:	47b0      	blx	r6
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	d106      	bne.n	80042a8 <__sflush_r+0x68>
 800429a:	6829      	ldr	r1, [r5, #0]
 800429c:	291d      	cmp	r1, #29
 800429e:	d82b      	bhi.n	80042f8 <__sflush_r+0xb8>
 80042a0:	4a29      	ldr	r2, [pc, #164]	; (8004348 <__sflush_r+0x108>)
 80042a2:	410a      	asrs	r2, r1
 80042a4:	07d6      	lsls	r6, r2, #31
 80042a6:	d427      	bmi.n	80042f8 <__sflush_r+0xb8>
 80042a8:	2200      	movs	r2, #0
 80042aa:	6062      	str	r2, [r4, #4]
 80042ac:	04d9      	lsls	r1, r3, #19
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	d504      	bpl.n	80042be <__sflush_r+0x7e>
 80042b4:	1c42      	adds	r2, r0, #1
 80042b6:	d101      	bne.n	80042bc <__sflush_r+0x7c>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b903      	cbnz	r3, 80042be <__sflush_r+0x7e>
 80042bc:	6560      	str	r0, [r4, #84]	; 0x54
 80042be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042c0:	602f      	str	r7, [r5, #0]
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d0c9      	beq.n	800425a <__sflush_r+0x1a>
 80042c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ca:	4299      	cmp	r1, r3
 80042cc:	d002      	beq.n	80042d4 <__sflush_r+0x94>
 80042ce:	4628      	mov	r0, r5
 80042d0:	f7ff fbea 	bl	8003aa8 <_free_r>
 80042d4:	2000      	movs	r0, #0
 80042d6:	6360      	str	r0, [r4, #52]	; 0x34
 80042d8:	e7c0      	b.n	800425c <__sflush_r+0x1c>
 80042da:	2301      	movs	r3, #1
 80042dc:	4628      	mov	r0, r5
 80042de:	47b0      	blx	r6
 80042e0:	1c41      	adds	r1, r0, #1
 80042e2:	d1c8      	bne.n	8004276 <__sflush_r+0x36>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0c5      	beq.n	8004276 <__sflush_r+0x36>
 80042ea:	2b1d      	cmp	r3, #29
 80042ec:	d001      	beq.n	80042f2 <__sflush_r+0xb2>
 80042ee:	2b16      	cmp	r3, #22
 80042f0:	d101      	bne.n	80042f6 <__sflush_r+0xb6>
 80042f2:	602f      	str	r7, [r5, #0]
 80042f4:	e7b1      	b.n	800425a <__sflush_r+0x1a>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	e7ad      	b.n	800425c <__sflush_r+0x1c>
 8004300:	690f      	ldr	r7, [r1, #16]
 8004302:	2f00      	cmp	r7, #0
 8004304:	d0a9      	beq.n	800425a <__sflush_r+0x1a>
 8004306:	0793      	lsls	r3, r2, #30
 8004308:	680e      	ldr	r6, [r1, #0]
 800430a:	bf08      	it	eq
 800430c:	694b      	ldreq	r3, [r1, #20]
 800430e:	600f      	str	r7, [r1, #0]
 8004310:	bf18      	it	ne
 8004312:	2300      	movne	r3, #0
 8004314:	eba6 0807 	sub.w	r8, r6, r7
 8004318:	608b      	str	r3, [r1, #8]
 800431a:	f1b8 0f00 	cmp.w	r8, #0
 800431e:	dd9c      	ble.n	800425a <__sflush_r+0x1a>
 8004320:	6a21      	ldr	r1, [r4, #32]
 8004322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004324:	4643      	mov	r3, r8
 8004326:	463a      	mov	r2, r7
 8004328:	4628      	mov	r0, r5
 800432a:	47b0      	blx	r6
 800432c:	2800      	cmp	r0, #0
 800432e:	dc06      	bgt.n	800433e <__sflush_r+0xfe>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800433c:	e78e      	b.n	800425c <__sflush_r+0x1c>
 800433e:	4407      	add	r7, r0
 8004340:	eba8 0800 	sub.w	r8, r8, r0
 8004344:	e7e9      	b.n	800431a <__sflush_r+0xda>
 8004346:	bf00      	nop
 8004348:	dfbffffe 	.word	0xdfbffffe

0800434c <_fflush_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4605      	mov	r5, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b913      	cbnz	r3, 800435c <_fflush_r+0x10>
 8004356:	2500      	movs	r5, #0
 8004358:	4628      	mov	r0, r5
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	b118      	cbz	r0, 8004366 <_fflush_r+0x1a>
 800435e:	6a03      	ldr	r3, [r0, #32]
 8004360:	b90b      	cbnz	r3, 8004366 <_fflush_r+0x1a>
 8004362:	f7ff fa91 	bl	8003888 <__sinit>
 8004366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f3      	beq.n	8004356 <_fflush_r+0xa>
 800436e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004370:	07d0      	lsls	r0, r2, #31
 8004372:	d404      	bmi.n	800437e <_fflush_r+0x32>
 8004374:	0599      	lsls	r1, r3, #22
 8004376:	d402      	bmi.n	800437e <_fflush_r+0x32>
 8004378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800437a:	f7ff fb92 	bl	8003aa2 <__retarget_lock_acquire_recursive>
 800437e:	4628      	mov	r0, r5
 8004380:	4621      	mov	r1, r4
 8004382:	f7ff ff5d 	bl	8004240 <__sflush_r>
 8004386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004388:	07da      	lsls	r2, r3, #31
 800438a:	4605      	mov	r5, r0
 800438c:	d4e4      	bmi.n	8004358 <_fflush_r+0xc>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	059b      	lsls	r3, r3, #22
 8004392:	d4e1      	bmi.n	8004358 <_fflush_r+0xc>
 8004394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004396:	f7ff fb85 	bl	8003aa4 <__retarget_lock_release_recursive>
 800439a:	e7dd      	b.n	8004358 <_fflush_r+0xc>

0800439c <_putc_r>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	460d      	mov	r5, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	4606      	mov	r6, r0
 80043a4:	b118      	cbz	r0, 80043ae <_putc_r+0x12>
 80043a6:	6a03      	ldr	r3, [r0, #32]
 80043a8:	b90b      	cbnz	r3, 80043ae <_putc_r+0x12>
 80043aa:	f7ff fa6d 	bl	8003888 <__sinit>
 80043ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043b0:	07d8      	lsls	r0, r3, #31
 80043b2:	d405      	bmi.n	80043c0 <_putc_r+0x24>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	0599      	lsls	r1, r3, #22
 80043b8:	d402      	bmi.n	80043c0 <_putc_r+0x24>
 80043ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043bc:	f7ff fb71 	bl	8003aa2 <__retarget_lock_acquire_recursive>
 80043c0:	68a3      	ldr	r3, [r4, #8]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	da05      	bge.n	80043d6 <_putc_r+0x3a>
 80043ca:	69a2      	ldr	r2, [r4, #24]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	db12      	blt.n	80043f6 <_putc_r+0x5a>
 80043d0:	b2eb      	uxtb	r3, r5
 80043d2:	2b0a      	cmp	r3, #10
 80043d4:	d00f      	beq.n	80043f6 <_putc_r+0x5a>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	701d      	strb	r5, [r3, #0]
 80043de:	b2ed      	uxtb	r5, r5
 80043e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_putc_r+0x56>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_putc_r+0x56>
 80043ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ee:	f7ff fb59 	bl	8003aa4 <__retarget_lock_release_recursive>
 80043f2:	4628      	mov	r0, r5
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	4629      	mov	r1, r5
 80043f8:	4622      	mov	r2, r4
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f802 	bl	8004404 <__swbuf_r>
 8004400:	4605      	mov	r5, r0
 8004402:	e7ed      	b.n	80043e0 <_putc_r+0x44>

08004404 <__swbuf_r>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	460e      	mov	r6, r1
 8004408:	4614      	mov	r4, r2
 800440a:	4605      	mov	r5, r0
 800440c:	b118      	cbz	r0, 8004416 <__swbuf_r+0x12>
 800440e:	6a03      	ldr	r3, [r0, #32]
 8004410:	b90b      	cbnz	r3, 8004416 <__swbuf_r+0x12>
 8004412:	f7ff fa39 	bl	8003888 <__sinit>
 8004416:	69a3      	ldr	r3, [r4, #24]
 8004418:	60a3      	str	r3, [r4, #8]
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	071a      	lsls	r2, r3, #28
 800441e:	d525      	bpl.n	800446c <__swbuf_r+0x68>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	b31b      	cbz	r3, 800446c <__swbuf_r+0x68>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	6922      	ldr	r2, [r4, #16]
 8004428:	1a98      	subs	r0, r3, r2
 800442a:	6963      	ldr	r3, [r4, #20]
 800442c:	b2f6      	uxtb	r6, r6
 800442e:	4283      	cmp	r3, r0
 8004430:	4637      	mov	r7, r6
 8004432:	dc04      	bgt.n	800443e <__swbuf_r+0x3a>
 8004434:	4621      	mov	r1, r4
 8004436:	4628      	mov	r0, r5
 8004438:	f7ff ff88 	bl	800434c <_fflush_r>
 800443c:	b9e0      	cbnz	r0, 8004478 <__swbuf_r+0x74>
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	3b01      	subs	r3, #1
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	701e      	strb	r6, [r3, #0]
 800444c:	6962      	ldr	r2, [r4, #20]
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	429a      	cmp	r2, r3
 8004452:	d004      	beq.n	800445e <__swbuf_r+0x5a>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	07db      	lsls	r3, r3, #31
 8004458:	d506      	bpl.n	8004468 <__swbuf_r+0x64>
 800445a:	2e0a      	cmp	r6, #10
 800445c:	d104      	bne.n	8004468 <__swbuf_r+0x64>
 800445e:	4621      	mov	r1, r4
 8004460:	4628      	mov	r0, r5
 8004462:	f7ff ff73 	bl	800434c <_fflush_r>
 8004466:	b938      	cbnz	r0, 8004478 <__swbuf_r+0x74>
 8004468:	4638      	mov	r0, r7
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446c:	4621      	mov	r1, r4
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f806 	bl	8004480 <__swsetup_r>
 8004474:	2800      	cmp	r0, #0
 8004476:	d0d5      	beq.n	8004424 <__swbuf_r+0x20>
 8004478:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800447c:	e7f4      	b.n	8004468 <__swbuf_r+0x64>
	...

08004480 <__swsetup_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4b2a      	ldr	r3, [pc, #168]	; (800452c <__swsetup_r+0xac>)
 8004484:	4605      	mov	r5, r0
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	460c      	mov	r4, r1
 800448a:	b118      	cbz	r0, 8004494 <__swsetup_r+0x14>
 800448c:	6a03      	ldr	r3, [r0, #32]
 800448e:	b90b      	cbnz	r3, 8004494 <__swsetup_r+0x14>
 8004490:	f7ff f9fa 	bl	8003888 <__sinit>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800449a:	0718      	lsls	r0, r3, #28
 800449c:	d422      	bmi.n	80044e4 <__swsetup_r+0x64>
 800449e:	06d9      	lsls	r1, r3, #27
 80044a0:	d407      	bmi.n	80044b2 <__swsetup_r+0x32>
 80044a2:	2309      	movs	r3, #9
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b0:	e034      	b.n	800451c <__swsetup_r+0x9c>
 80044b2:	0758      	lsls	r0, r3, #29
 80044b4:	d512      	bpl.n	80044dc <__swsetup_r+0x5c>
 80044b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044b8:	b141      	cbz	r1, 80044cc <__swsetup_r+0x4c>
 80044ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044be:	4299      	cmp	r1, r3
 80044c0:	d002      	beq.n	80044c8 <__swsetup_r+0x48>
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7ff faf0 	bl	8003aa8 <_free_r>
 80044c8:	2300      	movs	r3, #0
 80044ca:	6363      	str	r3, [r4, #52]	; 0x34
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	2300      	movs	r3, #0
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f043 0308 	orr.w	r3, r3, #8
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	b94b      	cbnz	r3, 80044fc <__swsetup_r+0x7c>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f2:	d003      	beq.n	80044fc <__swsetup_r+0x7c>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f850 	bl	800459c <__smakebuf_r>
 80044fc:	89a0      	ldrh	r0, [r4, #12]
 80044fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004502:	f010 0301 	ands.w	r3, r0, #1
 8004506:	d00a      	beq.n	800451e <__swsetup_r+0x9e>
 8004508:	2300      	movs	r3, #0
 800450a:	60a3      	str	r3, [r4, #8]
 800450c:	6963      	ldr	r3, [r4, #20]
 800450e:	425b      	negs	r3, r3
 8004510:	61a3      	str	r3, [r4, #24]
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	b943      	cbnz	r3, 8004528 <__swsetup_r+0xa8>
 8004516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800451a:	d1c4      	bne.n	80044a6 <__swsetup_r+0x26>
 800451c:	bd38      	pop	{r3, r4, r5, pc}
 800451e:	0781      	lsls	r1, r0, #30
 8004520:	bf58      	it	pl
 8004522:	6963      	ldrpl	r3, [r4, #20]
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	e7f4      	b.n	8004512 <__swsetup_r+0x92>
 8004528:	2000      	movs	r0, #0
 800452a:	e7f7      	b.n	800451c <__swsetup_r+0x9c>
 800452c:	20000064 	.word	0x20000064

08004530 <_sbrk_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d06      	ldr	r5, [pc, #24]	; (800454c <_sbrk_r+0x1c>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc fe40 	bl	80011c0 <_sbrk>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_sbrk_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_sbrk_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	200002b8 	.word	0x200002b8

08004550 <__swhatbuf_r>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	460c      	mov	r4, r1
 8004554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004558:	2900      	cmp	r1, #0
 800455a:	b096      	sub	sp, #88	; 0x58
 800455c:	4615      	mov	r5, r2
 800455e:	461e      	mov	r6, r3
 8004560:	da0d      	bge.n	800457e <__swhatbuf_r+0x2e>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	bf0c      	ite	eq
 800456e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004572:	2340      	movne	r3, #64	; 0x40
 8004574:	2000      	movs	r0, #0
 8004576:	6031      	str	r1, [r6, #0]
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	b016      	add	sp, #88	; 0x58
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	466a      	mov	r2, sp
 8004580:	f000 f848 	bl	8004614 <_fstat_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	dbec      	blt.n	8004562 <__swhatbuf_r+0x12>
 8004588:	9901      	ldr	r1, [sp, #4]
 800458a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800458e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004592:	4259      	negs	r1, r3
 8004594:	4159      	adcs	r1, r3
 8004596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800459a:	e7eb      	b.n	8004574 <__swhatbuf_r+0x24>

0800459c <__smakebuf_r>:
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045a0:	079d      	lsls	r5, r3, #30
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	d507      	bpl.n	80045b8 <__smakebuf_r+0x1c>
 80045a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2301      	movs	r3, #1
 80045b2:	6163      	str	r3, [r4, #20]
 80045b4:	b002      	add	sp, #8
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	ab01      	add	r3, sp, #4
 80045ba:	466a      	mov	r2, sp
 80045bc:	f7ff ffc8 	bl	8004550 <__swhatbuf_r>
 80045c0:	9900      	ldr	r1, [sp, #0]
 80045c2:	4605      	mov	r5, r0
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff fadb 	bl	8003b80 <_malloc_r>
 80045ca:	b948      	cbnz	r0, 80045e0 <__smakebuf_r+0x44>
 80045cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d4ef      	bmi.n	80045b4 <__smakebuf_r+0x18>
 80045d4:	f023 0303 	bic.w	r3, r3, #3
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	e7e3      	b.n	80045a8 <__smakebuf_r+0xc>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	6020      	str	r0, [r4, #0]
 80045e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	9b00      	ldr	r3, [sp, #0]
 80045ec:	6163      	str	r3, [r4, #20]
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	6120      	str	r0, [r4, #16]
 80045f2:	b15b      	cbz	r3, 800460c <__smakebuf_r+0x70>
 80045f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f81d 	bl	8004638 <_isatty_r>
 80045fe:	b128      	cbz	r0, 800460c <__smakebuf_r+0x70>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	431d      	orrs	r5, r3
 8004610:	81a5      	strh	r5, [r4, #12]
 8004612:	e7cf      	b.n	80045b4 <__smakebuf_r+0x18>

08004614 <_fstat_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4d07      	ldr	r5, [pc, #28]	; (8004634 <_fstat_r+0x20>)
 8004618:	2300      	movs	r3, #0
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	f7fc fda4 	bl	800116e <_fstat>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d102      	bne.n	8004630 <_fstat_r+0x1c>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	b103      	cbz	r3, 8004630 <_fstat_r+0x1c>
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	200002b8 	.word	0x200002b8

08004638 <_isatty_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4d06      	ldr	r5, [pc, #24]	; (8004654 <_isatty_r+0x1c>)
 800463c:	2300      	movs	r3, #0
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fc fda3 	bl	800118e <_isatty>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_isatty_r+0x1a>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_isatty_r+0x1a>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	200002b8 	.word	0x200002b8

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
