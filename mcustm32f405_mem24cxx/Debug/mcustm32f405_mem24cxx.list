
mcustm32f405_mem24cxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e44  08004e44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b587  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bae  00000000  00000000  0002b662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a48  00000000  00000000  0002d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007fa  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe8f  00000000  00000000  0002e452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d597  00000000  00000000  0004e2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc663  00000000  00000000  0005b878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003210  00000000  00000000  00117edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c90 	.word	0x08004c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c90 	.word	0x08004c90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 ff37 	bl	8003402 <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        HAL_MAX_DELAY);
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e0 	.word	0x200000e0

080005b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ca      	sub	sp, #296	; 0x128
 80005bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80005be:	f000 fd89 	bl	80010d4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80005c2:	f000 fa83 	bl	8000acc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005c6:	f000 fb57 	bl	8000c78 <MX_GPIO_Init>
    MX_I2C1_Init();
 80005ca:	f000 fafd 	bl	8000bc8 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 80005ce:	f000 fb29 	bl	8000c24 <MX_USART1_UART_Init>
    MX_CRC_Init();
 80005d2:	f000 fae5 	bl	8000ba0 <MX_CRC_Init>
    /* USER CODE BEGIN 2 */

    DBG("\n\n\n--------\nStarting");
 80005d6:	48c9      	ldr	r0, [pc, #804]	; (80008fc <main+0x344>)
 80005d8:	f003 fcaa 	bl	8003f30 <iprintf>
 80005dc:	200a      	movs	r0, #10
 80005de:	f003 fcb9 	bl	8003f54 <putchar>

    // Wait a few ms to get ready
    HAL_Delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 fde8 	bl	80011b8 <HAL_Delay>

    DBG("Scanning I2C bus:");
 80005e8:	48c5      	ldr	r0, [pc, #788]	; (8000900 <main+0x348>)
 80005ea:	f003 fca1 	bl	8003f30 <iprintf>
 80005ee:	200a      	movs	r0, #10
 80005f0:	f003 fcb0 	bl	8003f54 <putchar>
    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80005fa:	e029      	b.n	8000650 <main+0x98>

        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 80005fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000600:	b29b      	uxth	r3, r3
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	b299      	uxth	r1, r3
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	2203      	movs	r2, #3
 800060a:	48be      	ldr	r0, [pc, #760]	; (8000904 <main+0x34c>)
 800060c:	f001 fd8c 	bl	8002128 <HAL_I2C_IsDeviceReady>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <main+0x6c>
            // We got an ack
            printf("%2x ", i);
 8000616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800061a:	4619      	mov	r1, r3
 800061c:	48ba      	ldr	r0, [pc, #744]	; (8000908 <main+0x350>)
 800061e:	f003 fc87 	bl	8003f30 <iprintf>
 8000622:	e002      	b.n	800062a <main+0x72>
        } else {
            printf("-- ");
 8000624:	48b9      	ldr	r0, [pc, #740]	; (800090c <main+0x354>)
 8000626:	f003 fc83 	bl	8003f30 <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 800062a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800062e:	2b00      	cmp	r3, #0
 8000630:	d009      	beq.n	8000646 <main+0x8e>
 8000632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000636:	3301      	adds	r3, #1
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <main+0x8e>
            printf("\n");
 8000640:	200a      	movs	r0, #10
 8000642:	f003 fc87 	bl	8003f54 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 8000646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800064a:	3301      	adds	r3, #1
 800064c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8000650:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad1      	bge.n	80005fc <main+0x44>

    }

    printf("\n");
 8000658:	200a      	movs	r0, #10
 800065a:	f003 fc7b 	bl	8003f54 <putchar>

    DBG("Initializing %s - %lu kB EEPROM", M24CXX_TYPE, M24CXX_SIZE / 1024);
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	49ab      	ldr	r1, [pc, #684]	; (8000910 <main+0x358>)
 8000664:	48ab      	ldr	r0, [pc, #684]	; (8000914 <main+0x35c>)
 8000666:	f003 fc63 	bl	8003f30 <iprintf>
 800066a:	200a      	movs	r0, #10
 800066c:	f003 fc72 	bl	8003f54 <putchar>

    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000670:	2250      	movs	r2, #80	; 0x50
 8000672:	49a4      	ldr	r1, [pc, #656]	; (8000904 <main+0x34c>)
 8000674:	48a8      	ldr	r0, [pc, #672]	; (8000918 <main+0x360>)
 8000676:	f003 fa5d 	bl	8003b34 <m24cxx_init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <main+0xd8>
        DBG("M24CXX Failed to initialize");
 8000680:	48a6      	ldr	r0, [pc, #664]	; (800091c <main+0x364>)
 8000682:	f003 fc55 	bl	8003f30 <iprintf>
 8000686:	200a      	movs	r0, #10
 8000688:	f003 fc64 	bl	8003f54 <putchar>
        Error_Handler();
 800068c:	f000 fb54 	bl	8000d38 <Error_Handler>
    }

    uint32_t start_time;

    DBG("Erasing all");
 8000690:	48a3      	ldr	r0, [pc, #652]	; (8000920 <main+0x368>)
 8000692:	f003 fc4d 	bl	8003f30 <iprintf>
 8000696:	200a      	movs	r0, #10
 8000698:	f003 fc5c 	bl	8003f54 <putchar>
    start_time = HAL_GetTick();
 800069c:	f000 fd80 	bl	80011a0 <HAL_GetTick>
 80006a0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    if (m24cxx_erase_all(&m24cxx) != M24CXX_Ok) {
 80006a4:	489c      	ldr	r0, [pc, #624]	; (8000918 <main+0x360>)
 80006a6:	f003 fb57 	bl	8003d58 <m24cxx_erase_all>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d007      	beq.n	80006c0 <main+0x108>
        DBG("Erase all failed");
 80006b0:	489c      	ldr	r0, [pc, #624]	; (8000924 <main+0x36c>)
 80006b2:	f003 fc3d 	bl	8003f30 <iprintf>
 80006b6:	200a      	movs	r0, #10
 80006b8:	f003 fc4c 	bl	8003f54 <putchar>
        Error_Handler();
 80006bc:	f000 fb3c 	bl	8000d38 <Error_Handler>
    }
    DBG("Erase all took - %lu s", (HAL_GetTick() - start_time) / 1000);
 80006c0:	f000 fd6e 	bl	80011a0 <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a96      	ldr	r2, [pc, #600]	; (8000928 <main+0x370>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	099b      	lsrs	r3, r3, #6
 80006d4:	4619      	mov	r1, r3
 80006d6:	4895      	ldr	r0, [pc, #596]	; (800092c <main+0x374>)
 80006d8:	f003 fc2a 	bl	8003f30 <iprintf>
 80006dc:	200a      	movs	r0, #10
 80006de:	f003 fc39 	bl	8003f54 <putchar>

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];
    uint32_t crc;

    start_time = HAL_GetTick();
 80006e2:	f000 fd5d 	bl	80011a0 <HAL_GetTick>
 80006e6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80006f0:	e02d      	b.n	800074e <main+0x196>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80006f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80006f6:	0219      	lsls	r1, r3, #8
 80006f8:	463a      	mov	r2, r7
 80006fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fe:	4886      	ldr	r0, [pc, #536]	; (8000918 <main+0x360>)
 8000700:	f003 fa4c 	bl	8003b9c <m24cxx_read>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <main+0x162>
            DBG("Read Error");
 800070a:	4889      	ldr	r0, [pc, #548]	; (8000930 <main+0x378>)
 800070c:	f003 fc10 	bl	8003f30 <iprintf>
 8000710:	200a      	movs	r0, #10
 8000712:	f003 fc1f 	bl	8003f54 <putchar>
            Error_Handler();
 8000716:	f000 fb0f 	bl	8000d38 <Error_Handler>
        }
        if (i == 0)
 800071a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800071e:	2b00      	cmp	r3, #0
 8000720:	d108      	bne.n	8000734 <main+0x17c>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000722:	463b      	mov	r3, r7
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	4619      	mov	r1, r3
 8000728:	4882      	ldr	r0, [pc, #520]	; (8000934 <main+0x37c>)
 800072a:	f000 fe95 	bl	8001458 <HAL_CRC_Calculate>
 800072e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8000732:	e007      	b.n	8000744 <main+0x18c>
        else
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000734:	463b      	mov	r3, r7
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	4619      	mov	r1, r3
 800073a:	487e      	ldr	r0, [pc, #504]	; (8000934 <main+0x37c>)
 800073c:	f000 fe61 	bl	8001402 <HAL_CRC_Accumulate>
 8000740:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000748:	3301      	adds	r3, #1
 800074a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800074e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000756:	d3cc      	bcc.n	80006f2 <main+0x13a>
    }
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000758:	f000 fd22 	bl	80011a0 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	4a70      	ldr	r2, [pc, #448]	; (8000928 <main+0x370>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	099b      	lsrs	r3, r3, #6
 800076c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000770:	4619      	mov	r1, r3
 8000772:	4871      	ldr	r0, [pc, #452]	; (8000938 <main+0x380>)
 8000774:	f003 fbdc 	bl	8003f30 <iprintf>
 8000778:	200a      	movs	r0, #10
 800077a:	f003 fbeb 	bl	8003f54 <putchar>

    memset(buf, 0x00, sizeof(buf));
 800077e:	463b      	mov	r3, r7
 8000780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fc2f 	bl	8003fea <memset>

    DBG("Writing all zeros");
 800078c:	486b      	ldr	r0, [pc, #428]	; (800093c <main+0x384>)
 800078e:	f003 fbcf 	bl	8003f30 <iprintf>
 8000792:	200a      	movs	r0, #10
 8000794:	f003 fbde 	bl	8003f54 <putchar>
    start_time = HAL_GetTick();
 8000798:	f000 fd02 	bl	80011a0 <HAL_GetTick>
 800079c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80007a6:	e02d      	b.n	8000804 <main+0x24c>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80007a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007ac:	0219      	lsls	r1, r3, #8
 80007ae:	463a      	mov	r2, r7
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b4:	4858      	ldr	r0, [pc, #352]	; (8000918 <main+0x360>)
 80007b6:	f003 fa58 	bl	8003c6a <m24cxx_write>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d007      	beq.n	80007d0 <main+0x218>
            DBG("Write Error");
 80007c0:	485f      	ldr	r0, [pc, #380]	; (8000940 <main+0x388>)
 80007c2:	f003 fbb5 	bl	8003f30 <iprintf>
 80007c6:	200a      	movs	r0, #10
 80007c8:	f003 fbc4 	bl	8003f54 <putchar>
            Error_Handler();
 80007cc:	f000 fab4 	bl	8000d38 <Error_Handler>
        }
        if (i == 0)
 80007d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d108      	bne.n	80007ea <main+0x232>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80007d8:	463b      	mov	r3, r7
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	4619      	mov	r1, r3
 80007de:	4855      	ldr	r0, [pc, #340]	; (8000934 <main+0x37c>)
 80007e0:	f000 fe3a 	bl	8001458 <HAL_CRC_Calculate>
 80007e4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 80007e8:	e007      	b.n	80007fa <main+0x242>
        else
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80007ea:	463b      	mov	r3, r7
 80007ec:	2240      	movs	r2, #64	; 0x40
 80007ee:	4619      	mov	r1, r3
 80007f0:	4850      	ldr	r0, [pc, #320]	; (8000934 <main+0x37c>)
 80007f2:	f000 fe06 	bl	8001402 <HAL_CRC_Accumulate>
 80007f6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80007fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007fe:	3301      	adds	r3, #1
 8000800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000804:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080c:	d3cc      	bcc.n	80007a8 <main+0x1f0>
    }
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 800080e:	f000 fcc7 	bl	80011a0 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	4a43      	ldr	r2, [pc, #268]	; (8000928 <main+0x370>)
 800081c:	fba2 2303 	umull	r2, r3, r2, r3
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000826:	4619      	mov	r1, r3
 8000828:	4846      	ldr	r0, [pc, #280]	; (8000944 <main+0x38c>)
 800082a:	f003 fb81 	bl	8003f30 <iprintf>
 800082e:	200a      	movs	r0, #10
 8000830:	f003 fb90 	bl	8003f54 <putchar>

    start_time = HAL_GetTick();
 8000834:	f000 fcb4 	bl	80011a0 <HAL_GetTick>
 8000838:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000842:	e02d      	b.n	80008a0 <main+0x2e8>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000848:	0219      	lsls	r1, r3, #8
 800084a:	463a      	mov	r2, r7
 800084c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000850:	4831      	ldr	r0, [pc, #196]	; (8000918 <main+0x360>)
 8000852:	f003 f9a3 	bl	8003b9c <m24cxx_read>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d007      	beq.n	800086c <main+0x2b4>
            DBG("Read Error");
 800085c:	4834      	ldr	r0, [pc, #208]	; (8000930 <main+0x378>)
 800085e:	f003 fb67 	bl	8003f30 <iprintf>
 8000862:	200a      	movs	r0, #10
 8000864:	f003 fb76 	bl	8003f54 <putchar>
            Error_Handler();
 8000868:	f000 fa66 	bl	8000d38 <Error_Handler>
        }
        if (i == 0)
 800086c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000870:	2b00      	cmp	r3, #0
 8000872:	d108      	bne.n	8000886 <main+0x2ce>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000874:	463b      	mov	r3, r7
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	4619      	mov	r1, r3
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <main+0x37c>)
 800087c:	f000 fdec 	bl	8001458 <HAL_CRC_Calculate>
 8000880:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8000884:	e007      	b.n	8000896 <main+0x2de>
        else
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000886:	463b      	mov	r3, r7
 8000888:	2240      	movs	r2, #64	; 0x40
 800088a:	4619      	mov	r1, r3
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <main+0x37c>)
 800088e:	f000 fdb8 	bl	8001402 <HAL_CRC_Accumulate>
 8000892:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800089a:	3301      	adds	r3, #1
 800089c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008a8:	d3cc      	bcc.n	8000844 <main+0x28c>
    }
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80008aa:	f000 fc79 	bl	80011a0 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <main+0x370>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	099b      	lsrs	r3, r3, #6
 80008be:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80008c2:	4619      	mov	r1, r3
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <main+0x380>)
 80008c6:	f003 fb33 	bl	8003f30 <iprintf>
 80008ca:	200a      	movs	r0, #10
 80008cc:	f003 fb42 	bl	8003f54 <putchar>

    memset(buf, 0xaa, sizeof(buf));
 80008d0:	463b      	mov	r3, r7
 80008d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d6:	21aa      	movs	r1, #170	; 0xaa
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fb86 	bl	8003fea <memset>

    DBG("Writing 10101010");
 80008de:	481a      	ldr	r0, [pc, #104]	; (8000948 <main+0x390>)
 80008e0:	f003 fb26 	bl	8003f30 <iprintf>
 80008e4:	200a      	movs	r0, #10
 80008e6:	f003 fb35 	bl	8003f54 <putchar>
    start_time = HAL_GetTick();
 80008ea:	f000 fc59 	bl	80011a0 <HAL_GetTick>
 80008ee:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80008f8:	e056      	b.n	80009a8 <main+0x3f0>
 80008fa:	bf00      	nop
 80008fc:	08004ca8 	.word	0x08004ca8
 8000900:	08004cc0 	.word	0x08004cc0
 8000904:	2000008c 	.word	0x2000008c
 8000908:	08004cd4 	.word	0x08004cd4
 800090c:	08004cdc 	.word	0x08004cdc
 8000910:	08004ce0 	.word	0x08004ce0
 8000914:	08004cec 	.word	0x08004cec
 8000918:	20000124 	.word	0x20000124
 800091c:	08004d0c 	.word	0x08004d0c
 8000920:	08004d28 	.word	0x08004d28
 8000924:	08004d34 	.word	0x08004d34
 8000928:	10624dd3 	.word	0x10624dd3
 800092c:	08004d48 	.word	0x08004d48
 8000930:	08004d60 	.word	0x08004d60
 8000934:	20000084 	.word	0x20000084
 8000938:	08004d6c 	.word	0x08004d6c
 800093c:	08004d94 	.word	0x08004d94
 8000940:	08004da8 	.word	0x08004da8
 8000944:	08004db4 	.word	0x08004db4
 8000948:	08004ddc 	.word	0x08004ddc
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800094c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000950:	0219      	lsls	r1, r3, #8
 8000952:	463a      	mov	r2, r7
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	4854      	ldr	r0, [pc, #336]	; (8000aac <main+0x4f4>)
 800095a:	f003 f986 	bl	8003c6a <m24cxx_write>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <main+0x3bc>
            DBG("Write Error");
 8000964:	4852      	ldr	r0, [pc, #328]	; (8000ab0 <main+0x4f8>)
 8000966:	f003 fae3 	bl	8003f30 <iprintf>
 800096a:	200a      	movs	r0, #10
 800096c:	f003 faf2 	bl	8003f54 <putchar>
            Error_Handler();
 8000970:	f000 f9e2 	bl	8000d38 <Error_Handler>
        }
        if (i == 0)
 8000974:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000978:	2b00      	cmp	r3, #0
 800097a:	d108      	bne.n	800098e <main+0x3d6>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 800097c:	463b      	mov	r3, r7
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	4619      	mov	r1, r3
 8000982:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <main+0x4fc>)
 8000984:	f000 fd68 	bl	8001458 <HAL_CRC_Calculate>
 8000988:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 800098c:	e007      	b.n	800099e <main+0x3e6>
        else
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 800098e:	463b      	mov	r3, r7
 8000990:	2240      	movs	r2, #64	; 0x40
 8000992:	4619      	mov	r1, r3
 8000994:	4847      	ldr	r0, [pc, #284]	; (8000ab4 <main+0x4fc>)
 8000996:	f000 fd34 	bl	8001402 <HAL_CRC_Accumulate>
 800099a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 800099e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009a2:	3301      	adds	r3, #1
 80009a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80009a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009b0:	d3cc      	bcc.n	800094c <main+0x394>
    }
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80009b2:	f000 fbf5 	bl	80011a0 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <main+0x500>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	099b      	lsrs	r3, r3, #6
 80009c6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80009ca:	4619      	mov	r1, r3
 80009cc:	483b      	ldr	r0, [pc, #236]	; (8000abc <main+0x504>)
 80009ce:	f003 faaf 	bl	8003f30 <iprintf>
 80009d2:	200a      	movs	r0, #10
 80009d4:	f003 fabe 	bl	8003f54 <putchar>

    start_time = HAL_GetTick();
 80009d8:	f000 fbe2 	bl	80011a0 <HAL_GetTick>
 80009dc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80009e6:	e02d      	b.n	8000a44 <main+0x48c>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80009e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009ec:	0219      	lsls	r1, r3, #8
 80009ee:	463a      	mov	r2, r7
 80009f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f4:	482d      	ldr	r0, [pc, #180]	; (8000aac <main+0x4f4>)
 80009f6:	f003 f8d1 	bl	8003b9c <m24cxx_read>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d007      	beq.n	8000a10 <main+0x458>
            DBG("Read Error");
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <main+0x508>)
 8000a02:	f003 fa95 	bl	8003f30 <iprintf>
 8000a06:	200a      	movs	r0, #10
 8000a08:	f003 faa4 	bl	8003f54 <putchar>
            Error_Handler();
 8000a0c:	f000 f994 	bl	8000d38 <Error_Handler>
        }
        if (i == 0)
 8000a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d108      	bne.n	8000a2a <main+0x472>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <main+0x4fc>)
 8000a20:	f000 fd1a 	bl	8001458 <HAL_CRC_Calculate>
 8000a24:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8000a28:	e007      	b.n	8000a3a <main+0x482>
        else
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <main+0x4fc>)
 8000a32:	f000 fce6 	bl	8001402 <HAL_CRC_Accumulate>
 8000a36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a3e:	3301      	adds	r3, #1
 8000a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a4c:	d3cc      	bcc.n	80009e8 <main+0x430>
    }
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000a4e:	f000 fba7 	bl	80011a0 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <main+0x500>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	099b      	lsrs	r3, r3, #6
 8000a62:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000a66:	4619      	mov	r1, r3
 8000a68:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <main+0x50c>)
 8000a6a:	f003 fa61 	bl	8003f30 <iprintf>
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f003 fa70 	bl	8003f54 <putchar>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    while (1) {

        now = HAL_GetTick();
 8000a80:	f000 fb8e 	bl	80011a0 <HAL_GetTick>
 8000a84:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100

        if (now - last_blink >= 500) {
 8000a88:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a96:	d3f3      	bcc.n	8000a80 <main+0x4c8>

            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <main+0x510>)
 8000a9e:	f000 fec4 	bl	800182a <HAL_GPIO_TogglePin>

            last_blink = now;
 8000aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000aa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        now = HAL_GetTick();
 8000aaa:	e7e9      	b.n	8000a80 <main+0x4c8>
 8000aac:	20000124 	.word	0x20000124
 8000ab0:	08004da8 	.word	0x08004da8
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	10624dd3 	.word	0x10624dd3
 8000abc:	08004db4 	.word	0x08004db4
 8000ac0:	08004d60 	.word	0x08004d60
 8000ac4:	08004d6c 	.word	0x08004d6c
 8000ac8:	40020800 	.word	0x40020800

08000acc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fa85 	bl	8003fea <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <SystemClock_Config+0xcc>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <SystemClock_Config+0xcc>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000b40:	23a8      	movs	r3, #168	; 0xa8
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 ff73 	bl	8002a3c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x94>
        Error_Handler();
 8000b5c:	f000 f8ec 	bl	8000d38 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b70:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f9d4 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xc2>
        Error_Handler();
 8000b8a:	f000 f8d5 	bl	8000d38 <Error_Handler>
    }
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_CRC_Init+0x20>)
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <MX_CRC_Init+0x24>)
 8000ba8:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_CRC_Init+0x20>)
 8000bac:	f000 fc0d 	bl	80013ca <HAL_CRC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_CRC_Init+0x1a>
        Error_Handler();
 8000bb6:	f000 f8bf 	bl	8000d38 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	40023000 	.word	0x40023000

08000bc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <MX_I2C1_Init+0x54>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x58>)
 8000bd6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bea:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_I2C1_Init+0x50>)
 8000c06:	f000 fe2b 	bl	8001860 <HAL_I2C_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000c10:	f000 f892 	bl	8000d38 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	00061a80 	.word	0x00061a80

08000c24 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_USART1_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c30:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c34:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f002 fb84 	bl	8003368 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8000c66:	f000 f867 	bl	8000d38 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e0 	.word	0x200000e0
 8000c74:	40011000 	.word	0x40011000

08000c78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0xb8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000d06:	f000 fd77 	bl	80017f8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d10:	2311      	movs	r3, #17
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000d24:	f000 fbcc 	bl	80014c0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800

08000d38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_CRC_MspInit+0x3c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10d      	bne.n	8000dc2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_CRC_MspInit+0x40>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_CRC_MspInit+0x40>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_CRC_MspInit+0x40>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023000 	.word	0x40023000
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_I2C_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12b      	bne.n	8000e52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e26:	2304      	movs	r3, #4
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_I2C_MspInit+0x8c>)
 8000e32:	f000 fb45 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_UART_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000ee0:	f000 faee 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f918 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e00a      	b.n	8000f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5e:	f3af 8000 	nop.w
 8000f62:	4601      	mov	r1, r0
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf0      	blt.n	8000f5e <_read+0x12>
  }

  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f003 f832 	bl	8004088 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000012c 	.word	0x2000012c
 8001058:	20000280 	.word	0x20000280

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f002 fff1 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa81 	bl	80005b8 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010c4:	08004e4c 	.word	0x08004e4c
  ldr r2, =_sbss
 80010c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010cc:	20000280 	.word	0x20000280

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f931 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe1c 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f93b 	bl	80013b2 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f000 f911 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000130 	.word	0x20000130

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000130 	.word	0x20000130

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5c 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e00e      	b.n	80013fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fcd1 	bl	8000d94 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001402:	b480      	push	{r7}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2202      	movs	r2, #2
 8001416:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e00a      	b.n	8001434 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	441a      	add	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f0      	bcc.n	800141e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800144a:	693b      	ldr	r3, [r7, #16]
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2202      	movs	r2, #2
 800146c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e00a      	b.n	800149a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	441a      	add	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3f0      	bcc.n	8001484 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80014b0:	693b      	ldr	r3, [r7, #16]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e16b      	b.n	80017b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 815a 	bne.w	80017ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80b4 	beq.w	80017ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_GPIO_Init+0x30c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a5f      	ldr	r2, [pc, #380]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_GPIO_Init+0x310>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x314>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d02b      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x318>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_GPIO_Init+0x31c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x21e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x320>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x328>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x32c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x330>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x20a>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00e      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ca:	2308      	movs	r3, #8
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e6:	2300      	movs	r3, #0
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f8:	4935      	ldr	r1, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x310>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_GPIO_Init+0x334>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	f67f ae90 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183c:	887a      	ldrh	r2, [r7, #2]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43d9      	mvns	r1, r3
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	400b      	ands	r3, r1
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e12b      	b.n	8001aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff faa6 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c4:	f001 fd28 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80018c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <HAL_I2C_Init+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d807      	bhi.n	80018e4 <HAL_I2C_Init+0x84>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a80      	ldr	r2, [pc, #512]	; (8001ad8 <HAL_I2C_Init+0x278>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	e006      	b.n	80018f2 <HAL_I2C_Init+0x92>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a7d      	ldr	r2, [pc, #500]	; (8001adc <HAL_I2C_Init+0x27c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e7      	b.n	8001aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a78      	ldr	r2, [pc, #480]	; (8001ae0 <HAL_I2C_Init+0x280>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a6a      	ldr	r2, [pc, #424]	; (8001ad4 <HAL_I2C_Init+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d802      	bhi.n	8001934 <HAL_I2C_Init+0xd4>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	e009      	b.n	8001948 <HAL_I2C_Init+0xe8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	4a69      	ldr	r2, [pc, #420]	; (8001ae4 <HAL_I2C_Init+0x284>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	3301      	adds	r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800195a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	495c      	ldr	r1, [pc, #368]	; (8001ad4 <HAL_I2C_Init+0x274>)
 8001964:	428b      	cmp	r3, r1
 8001966:	d819      	bhi.n	800199c <HAL_I2C_Init+0x13c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e59      	subs	r1, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fbb1 f3f3 	udiv	r3, r1, r3
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <HAL_I2C_Init+0x138>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e59      	subs	r1, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	e051      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001998:	2304      	movs	r3, #4
 800199a:	e04f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_I2C_Init+0x168>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e012      	b.n	80019ee <HAL_I2C_Init+0x18e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x196>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e022      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10e      	bne.n	8001a1c <HAL_I2C_Init+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e58      	subs	r0, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	440b      	add	r3, r1
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	0099      	lsls	r1, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6809      	ldr	r1, [r1, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6911      	ldr	r1, [r2, #16]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68d2      	ldr	r2, [r2, #12]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	001e847f 	.word	0x001e847f
 8001adc:	003d08ff 	.word	0x003d08ff
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	460b      	mov	r3, r1
 8001afc:	813b      	strh	r3, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b02:	f7ff fb4d 	bl	80011a0 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	f040 80d9 	bne.w	8001cc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2319      	movs	r3, #25
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	496d      	ldr	r1, [pc, #436]	; (8001cd4 <HAL_I2C_Mem_Write+0x1ec>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fdad 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0cc      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_I2C_Mem_Write+0x56>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0c5      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d007      	beq.n	8001b64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2221      	movs	r2, #33	; 0x21
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba6:	88f8      	ldrh	r0, [r7, #6]
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	8979      	ldrh	r1, [r7, #10]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fbe4 	bl	8002384 <I2C_RequestMemoryWrite>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e081      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fe2e 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d107      	bne.n	8001bee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d11b      	bne.n	8001c68 <HAL_I2C_Mem_Write+0x180>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1aa      	bne.n	8001bc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fe1a 	bl	80028ae <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e016      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	00100002 	.word	0x00100002
 8001cd8:	ffff0000 	.word	0xffff0000

08001cdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cf6:	f7ff fa53 	bl	80011a0 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	f040 8208 	bne.w	800211a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2319      	movs	r3, #25
 8001d10:	2201      	movs	r2, #1
 8001d12:	497b      	ldr	r1, [pc, #492]	; (8001f00 <HAL_I2C_Mem_Read+0x224>)
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fcb3 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
 8001d22:	e1fb      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Mem_Read+0x56>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e1f4      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d007      	beq.n	8001d58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2222      	movs	r2, #34	; 0x22
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a5b      	ldr	r2, [pc, #364]	; (8001f04 <HAL_I2C_Mem_Read+0x228>)
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d9a:	88f8      	ldrh	r0, [r7, #6]
 8001d9c:	893a      	ldrh	r2, [r7, #8]
 8001d9e:	8979      	ldrh	r1, [r7, #10]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4603      	mov	r3, r0
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fb80 	bl	80024b0 <I2C_RequestMemoryRead>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1b0      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d113      	bne.n	8001dea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e184      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d11b      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e164      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d11b      	bne.n	8001e6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	e144      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e80:	e138      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	f200 80f1 	bhi.w	800206e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d123      	bne.n	8001edc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fd49 	bl	8002930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e139      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eda:	e10b      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d14e      	bne.n	8001f82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	2200      	movs	r2, #0
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_I2C_Mem_Read+0x22c>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fbc6 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e10e      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
 8001efe:	bf00      	nop
 8001f00:	00100002 	.word	0x00100002
 8001f04:	ffff0000 	.word	0xffff0000
 8001f08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f80:	e0b8      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4966      	ldr	r1, [pc, #408]	; (8002124 <HAL_I2C_Mem_Read+0x448>)
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb77 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0bf      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	494f      	ldr	r1, [pc, #316]	; (8002124 <HAL_I2C_Mem_Read+0x448>)
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fb49 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e091      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800206c:	e042      	b.n	80020f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fc5c 	bl	8002930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e04c      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d118      	bne.n	80020f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f aec2 	bne.w	8001e82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800211a:	2302      	movs	r3, #2
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	00010004 	.word	0x00010004

08002128 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff f832 	bl	80011a0 <HAL_GetTick>
 800213c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	f040 8111 	bne.w	8002372 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	4988      	ldr	r1, [pc, #544]	; (800237c <HAL_I2C_IsDeviceReady+0x254>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa90 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	e104      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_IsDeviceReady+0x50>
 8002174:	2302      	movs	r3, #2
 8002176:	e0fd      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d007      	beq.n	800219e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a70      	ldr	r2, [pc, #448]	; (8002380 <HAL_I2C_IsDeviceReady+0x258>)
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fa4e 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f8:	d103      	bne.n	8002202 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0b6      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002214:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe ffc3 	bl	80011a0 <HAL_GetTick>
 800221a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800224a:	e025      	b.n	8002298 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7fe ffa8 	bl	80011a0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <HAL_I2C_IsDeviceReady+0x13a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22a0      	movs	r2, #160	; 0xa0
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2ba0      	cmp	r3, #160	; 0xa0
 80022a2:	d005      	beq.n	80022b0 <HAL_I2C_IsDeviceReady+0x188>
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_I2C_IsDeviceReady+0x188>
 80022aa:	7dbb      	ldrb	r3, [r7, #22]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0cd      	beq.n	800224c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d129      	bne.n	800231a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2319      	movs	r3, #25
 80022f2:	2201      	movs	r2, #1
 80022f4:	4921      	ldr	r1, [pc, #132]	; (800237c <HAL_I2C_IsDeviceReady+0x254>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f9c2 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e036      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e02c      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002328:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002332:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	490f      	ldr	r1, [pc, #60]	; (800237c <HAL_I2C_IsDeviceReady+0x254>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f99e 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e012      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3301      	adds	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	f4ff af32 	bcc.w	80021c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f960 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d103      	bne.n	80023de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e05f      	b.n	80024a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	492d      	ldr	r1, [pc, #180]	; (80024ac <I2C_RequestMemoryWrite+0x128>)
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f998 	bl	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04c      	b.n	80024a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800241e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fa02 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b04      	cmp	r3, #4
 8002434:	d107      	bne.n	8002446 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e02b      	b.n	80024a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002450:	893b      	ldrh	r3, [r7, #8]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]
 800245a:	e021      	b.n	80024a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b29b      	uxth	r3, r3
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f9dc 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b04      	cmp	r3, #4
 8002480:	d107      	bne.n	8002492 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e005      	b.n	80024a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	00010002 	.word	0x00010002

080024b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8c2 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d103      	bne.n	800251a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0aa      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800252c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	4952      	ldr	r1, [pc, #328]	; (800267c <I2C_RequestMemoryRead+0x1cc>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f8fa 	bl	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e097      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f964 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b04      	cmp	r3, #4
 8002570:	d107      	bne.n	8002582 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e076      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	e021      	b.n	80025dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002598:	893b      	ldrh	r3, [r7, #8]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29b      	uxth	r3, r3
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f93e 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e050      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d2:	893b      	ldrh	r3, [r7, #8]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f923 	bl	800282c <I2C_WaitOnTXEFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d107      	bne.n	8002604 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e035      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002616:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2200      	movs	r2, #0
 8002620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f82b 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d103      	bne.n	8002648 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e013      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800264c:	897b      	ldrh	r3, [r7, #10]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	6a3a      	ldr	r2, [r7, #32]
 8002660:	4906      	ldr	r1, [pc, #24]	; (800267c <I2C_RequestMemoryRead+0x1cc>)
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f863 	bl	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	00010002 	.word	0x00010002

08002680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002690:	e025      	b.n	80026de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002698:	d021      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7fe fd81 	bl	80011a0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e023      	b.n	8002726 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10d      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	e00c      	b.n	800271e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4013      	ands	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	429a      	cmp	r2, r3
 8002722:	d0b6      	beq.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800273c:	e051      	b.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d123      	bne.n	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002766:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0204 	orr.w	r2, r3, #4
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e046      	b.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d021      	beq.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe fcff 	bl	80011a0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e020      	b.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10c      	bne.n	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4013      	ands	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	e00b      	b.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	43da      	mvns	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d18d      	bne.n	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002838:	e02d      	b.n	8002896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f8ce 	bl	80029dc <I2C_IsAcknowledgeFailed>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e02d      	b.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	d021      	beq.n	8002896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7fe fca5 	bl	80011a0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e007      	b.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d1ca      	bne.n	800283a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ba:	e02d      	b.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f88d 	bl	80029dc <I2C_IsAcknowledgeFailed>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e02d      	b.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d2:	d021      	beq.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d4:	f7fe fc64 	bl	80011a0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d302      	bcc.n	80028ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e007      	b.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d1ca      	bne.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800293c:	e042      	b.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b10      	cmp	r3, #16
 800294a:	d119      	bne.n	8002980 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0210 	mvn.w	r2, #16
 8002954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e029      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002980:	f7fe fc0e 	bl	80011a0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e007      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d1b5      	bne.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d11b      	bne.n	8002a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f043 0204 	orr.w	r2, r3, #4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e267      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d075      	beq.n	8002b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d00c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d112      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a72:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4b7e      	ldr	r3, [pc, #504]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d05b      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d157      	bne.n	8002b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e242      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x74>
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a75      	ldr	r2, [pc, #468]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e01d      	b.n	8002aec <HAL_RCC_OscConfig+0xb0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x98>
 8002aba:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6f      	ldr	r2, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6c      	ldr	r2, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0xb0>
 8002ad4:	4b69      	ldr	r3, [pc, #420]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a68      	ldr	r2, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fb54 	bl	80011a0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb50 	bl	80011a0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e207      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0xc0>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb40 	bl	80011a0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb3c 	bl	80011a0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1f3      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0xe8>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d11c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6a:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x152>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1c7      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4937      	ldr	r1, [pc, #220]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	e03a      	b.n	8002c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x244>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe faf5 	bl	80011a0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bba:	f7fe faf1 	bl	80011a0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1a8      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4925      	ldr	r1, [pc, #148]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x244>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fad4 	bl	80011a0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fad0 	bl	80011a0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e187      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d036      	beq.n	8002c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x248>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fab4 	bl	80011a0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fab0 	bl	80011a0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e167      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x240>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x200>
 8002c5a:	e01b      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_OscConfig+0x248>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fa9d 	bl	80011a0 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	e00e      	b.n	8002c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fa99 	bl	80011a0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d907      	bls.n	8002c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e150      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	42470000 	.word	0x42470000
 8002c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ea      	bne.n	8002c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8097 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b81      	ldr	r3, [pc, #516]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a7c      	ldr	r2, [pc, #496]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b7a      	ldr	r3, [pc, #488]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <HAL_RCC_OscConfig+0x474>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <HAL_RCC_OscConfig+0x474>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a73      	ldr	r2, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x474>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fa59 	bl	80011a0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fe fa55 	bl	80011a0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e10c      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_OscConfig+0x474>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2ea>
 8002d18:	4b64      	ldr	r3, [pc, #400]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e01c      	b.n	8002d60 <HAL_RCC_OscConfig+0x324>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x30c>
 8002d2e:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a5b      	ldr	r2, [pc, #364]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0x324>
 8002d48:	4b58      	ldr	r3, [pc, #352]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a57      	ldr	r2, [pc, #348]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	4b55      	ldr	r3, [pc, #340]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe fa1a 	bl	80011a0 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe fa16 	bl	80011a0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0cb      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ee      	beq.n	8002d70 <HAL_RCC_OscConfig+0x334>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7fe fa04 	bl	80011a0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa00 	bl	80011a0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0b5      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ee      	bne.n	8002d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a38      	ldr	r2, [pc, #224]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a1 	beq.w	8002f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d05c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d141      	bne.n	8002e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_OscConfig+0x478>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe f9d4 	bl	80011a0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe f9d0 	bl	80011a0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e087      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	491b      	ldr	r1, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x478>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe f9a9 	bl	80011a0 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e52:	f7fe f9a5 	bl	80011a0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e05c      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x416>
 8002e70:	e054      	b.n	8002f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCC_OscConfig+0x478>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe f992 	bl	80011a0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe f98e 	bl	80011a0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e045      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_OscConfig+0x470>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x444>
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e038      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x4ec>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d028      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d121      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11a      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d111      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	3b01      	subs	r3, #1
 8002f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0cc      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d90c      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d044      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e067      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4934      	ldr	r1, [pc, #208]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe f8c0 	bl	80011a0 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe f8bc 	bl	80011a0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20c      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f821 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f820 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08004df0 	.word	0x08004df0
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b094      	sub	sp, #80	; 0x50
 80030fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	2300      	movs	r3, #0
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003108:	2300      	movs	r3, #0
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003110:	4b79      	ldr	r3, [pc, #484]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d00d      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x40>
 800311c:	2b08      	cmp	r3, #8
 800311e:	f200 80e1 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x34>
 8003126:	2b04      	cmp	r3, #4
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x3a>
 800312a:	e0db      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800312c:	4b73      	ldr	r3, [pc, #460]	; (80032fc <HAL_RCC_GetSysClockFreq+0x204>)
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003130:	e0db      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003132:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_GetSysClockFreq+0x204>)
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003136:	e0d8      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003142:	4b6d      	ldr	r3, [pc, #436]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314e:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	099b      	lsrs	r3, r3, #6
 8003154:	2200      	movs	r2, #0
 8003156:	63bb      	str	r3, [r7, #56]	; 0x38
 8003158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
 8003162:	2300      	movs	r3, #0
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
 8003166:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800316a:	4622      	mov	r2, r4
 800316c:	462b      	mov	r3, r5
 800316e:	f04f 0000 	mov.w	r0, #0
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	0159      	lsls	r1, r3, #5
 8003178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317c:	0150      	lsls	r0, r2, #5
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4621      	mov	r1, r4
 8003184:	1a51      	subs	r1, r2, r1
 8003186:	6139      	str	r1, [r7, #16]
 8003188:	4629      	mov	r1, r5
 800318a:	eb63 0301 	sbc.w	r3, r3, r1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800319c:	4659      	mov	r1, fp
 800319e:	018b      	lsls	r3, r1, #6
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a6:	4651      	mov	r1, sl
 80031a8:	018a      	lsls	r2, r1, #6
 80031aa:	4651      	mov	r1, sl
 80031ac:	ebb2 0801 	subs.w	r8, r2, r1
 80031b0:	4659      	mov	r1, fp
 80031b2:	eb63 0901 	sbc.w	r9, r3, r1
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ca:	4690      	mov	r8, r2
 80031cc:	4699      	mov	r9, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	eb18 0303 	adds.w	r3, r8, r3
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	462b      	mov	r3, r5
 80031d8:	eb49 0303 	adc.w	r3, r9, r3
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	2200      	movs	r2, #0
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 8003202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003208:	f7fd f832 	bl	8000270 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	e058      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	2200      	movs	r2, #0
 800321e:	4618      	mov	r0, r3
 8003220:	4611      	mov	r1, r2
 8003222:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	0159      	lsls	r1, r3, #5
 800323e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003242:	0150      	lsls	r0, r2, #5
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4641      	mov	r1, r8
 800324a:	ebb2 0a01 	subs.w	sl, r2, r1
 800324e:	4649      	mov	r1, r9
 8003250:	eb63 0b01 	sbc.w	fp, r3, r1
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003260:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003264:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003268:	ebb2 040a 	subs.w	r4, r2, sl
 800326c:	eb63 050b 	sbc.w	r5, r3, fp
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	00eb      	lsls	r3, r5, #3
 800327a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327e:	00e2      	lsls	r2, r4, #3
 8003280:	4614      	mov	r4, r2
 8003282:	461d      	mov	r5, r3
 8003284:	4643      	mov	r3, r8
 8003286:	18e3      	adds	r3, r4, r3
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	464b      	mov	r3, r9
 800328c:	eb45 0303 	adc.w	r3, r5, r3
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329e:	4629      	mov	r1, r5
 80032a0:	028b      	lsls	r3, r1, #10
 80032a2:	4621      	mov	r1, r4
 80032a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a8:	4621      	mov	r1, r4
 80032aa:	028a      	lsls	r2, r1, #10
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b2:	2200      	movs	r2, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	61fa      	str	r2, [r7, #28]
 80032b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032bc:	f7fc ffd8 	bl	8000270 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4613      	mov	r3, r2
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetSysClockFreq+0x204>)
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3750      	adds	r7, #80	; 0x50
 80032f0:	46bd      	mov	sp, r7
 80032f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	00f42400 	.word	0x00f42400

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08004e00 	.word	0x08004e00

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08004e00 	.word	0x08004e00

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fd6a 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f929 	bl	8003604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d17c      	bne.n	800351c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Transmit+0x2c>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e075      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x3e>
 800343c:	2302      	movs	r3, #2
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x11c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	; 0x21
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fd fea3 	bl	80011a0 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x82>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003494:	e02a      	b.n	80034ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f840 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e036      	b.n	800351e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cf      	bne.n	8003496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f810 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b090      	sub	sp, #64	; 0x40
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003536:	e050      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800353e:	d04c      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	f7fd fe2b 	bl	80011a0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003552:	429a      	cmp	r2, r3
 8003554:	d241      	bcs.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003576:	637a      	str	r2, [r7, #52]	; 0x34
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	613b      	str	r3, [r7, #16]
   return(result);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	623a      	str	r2, [r7, #32]
 80035ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d09f      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3740      	adds	r7, #64	; 0x40
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0c0      	sub	sp, #256	; 0x100
 800360a:	af00      	add	r7, sp, #0
 800360c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	ea40 0301 	orr.w	r3, r0, r1
 800362c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800365c:	f021 010c 	bic.w	r1, r1, #12
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800366a:	430b      	orrs	r3, r1
 800366c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	6999      	ldr	r1, [r3, #24]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	ea40 0301 	orr.w	r3, r0, r1
 800368a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <UART_SetConfig+0x2cc>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d005      	beq.n	80036a4 <UART_SetConfig+0xa0>
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <UART_SetConfig+0x2d0>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d104      	bne.n	80036ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7ff fe4c 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80036a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036ac:	e003      	b.n	80036b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ae:	f7ff fe33 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80036b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 810c 	bne.w	80038dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036d6:	4622      	mov	r2, r4
 80036d8:	462b      	mov	r3, r5
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80036de:	415b      	adcs	r3, r3
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e6:	4621      	mov	r1, r4
 80036e8:	eb12 0801 	adds.w	r8, r2, r1
 80036ec:	4629      	mov	r1, r5
 80036ee:	eb43 0901 	adc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003714:	462b      	mov	r3, r5
 8003716:	eb49 0303 	adc.w	r3, r9, r3
 800371a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800372a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800372e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003732:	460b      	mov	r3, r1
 8003734:	18db      	adds	r3, r3, r3
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
 8003738:	4613      	mov	r3, r2
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
 8003740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003748:	f7fc fd92 	bl	8000270 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011c      	lsls	r4, r3, #4
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	64b9      	str	r1, [r7, #72]	; 0x48
 8003774:	415b      	adcs	r3, r3
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800377c:	4641      	mov	r1, r8
 800377e:	eb12 0a01 	adds.w	sl, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb43 0b01 	adc.w	fp, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379c:	4692      	mov	sl, r2
 800379e:	469b      	mov	fp, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	eb1a 0303 	adds.w	r3, sl, r3
 80037a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb4b 0303 	adc.w	r3, fp, r3
 80037b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037c8:	460b      	mov	r3, r1
 80037ca:	18db      	adds	r3, r3, r3
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
 80037ce:	4613      	mov	r3, r2
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037de:	f7fc fd47 	bl	8000270 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	; 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003800:	fba3 2302 	umull	r2, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800380c:	441c      	add	r4, r3
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800381c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	415b      	adcs	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003830:	4641      	mov	r1, r8
 8003832:	1851      	adds	r1, r2, r1
 8003834:	6339      	str	r1, [r7, #48]	; 0x30
 8003836:	4649      	mov	r1, r9
 8003838:	414b      	adcs	r3, r1
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003848:	4659      	mov	r1, fp
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4651      	mov	r1, sl
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4642      	mov	r2, r8
 800385e:	189b      	adds	r3, r3, r2
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003864:	464b      	mov	r3, r9
 8003866:	460a      	mov	r2, r1
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	4613      	mov	r3, r2
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800389a:	f7fc fce9 	bl	8000270 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4422      	add	r2, r4
 80038ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038cc:	e106      	b.n	8003adc <UART_SetConfig+0x4d8>
 80038ce:	bf00      	nop
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40011400 	.word	0x40011400
 80038d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	6239      	str	r1, [r7, #32]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038fe:	4641      	mov	r1, r8
 8003900:	1854      	adds	r4, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb43 0501 	adc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003924:	464b      	mov	r3, r9
 8003926:	eb45 0303 	adc.w	r3, r5, r3
 800392a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800394a:	4629      	mov	r1, r5
 800394c:	008b      	lsls	r3, r1, #2
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003954:	4621      	mov	r1, r4
 8003956:	008a      	lsls	r2, r1, #2
 8003958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800395c:	f7fc fc88 	bl	8000270 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4b60      	ldr	r3, [pc, #384]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	011c      	lsls	r4, r3, #4
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800397c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	61b9      	str	r1, [r7, #24]
 8003988:	415b      	adcs	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003990:	4641      	mov	r1, r8
 8003992:	1851      	adds	r1, r2, r1
 8003994:	6139      	str	r1, [r7, #16]
 8003996:	4649      	mov	r1, r9
 8003998:	414b      	adcs	r3, r1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a8:	4659      	mov	r1, fp
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	4651      	mov	r1, sl
 80039ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b2:	4651      	mov	r1, sl
 80039b4:	00ca      	lsls	r2, r1, #3
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	4642      	mov	r2, r8
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c4:	464b      	mov	r3, r9
 80039c6:	460a      	mov	r2, r1
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039e8:	4649      	mov	r1, r9
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f2:	4641      	mov	r1, r8
 80039f4:	008a      	lsls	r2, r1, #2
 80039f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039fa:	f7fc fc39 	bl	8000270 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a06:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2264      	movs	r2, #100	; 0x64
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	1acb      	subs	r3, r1, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a33      	ldr	r2, [pc, #204]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	441c      	add	r4, r3
 8003a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003a2e:	677a      	str	r2, [r7, #116]	; 0x74
 8003a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a76:	464b      	mov	r3, r9
 8003a78:	460a      	mov	r2, r1
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8a:	667a      	str	r2, [r7, #100]	; 0x64
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aaa:	f7fc fbe1 	bl	8000270 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 020f 	and.w	r2, r3, #15
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <i2c_wait>:

#include "m24cxx.h"

/* Private functions */

M24CXX_StatusTypeDef i2c_wait(I2C_HandleTypeDef *i2c, uint16_t i2c_address) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]

    uint32_t start_time = HAL_GetTick();
 8003af8:	f7fd fb52 	bl	80011a0 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8003afe:	e008      	b.n	8003b12 <i2c_wait+0x26>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 8003b00:	f7fd fb4e 	bl	80011a0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b63      	cmp	r3, #99	; 0x63
 8003b0c:	d901      	bls.n	8003b12 <i2c_wait+0x26>
            return M24CXX_Err;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00c      	b.n	8003b2c <i2c_wait+0x40>
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b299      	uxth	r1, r3
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe fb02 	bl	8002128 <HAL_I2C_IsDeviceReady>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ea      	bne.n	8003b00 <i2c_wait+0x14>
    }

    return M24CXX_Ok;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <m24cxx_init>:

/* Public functions */

M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);

    m24cxx->i2c = i2c;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	79fa      	ldrb	r2, [r7, #7]
 8003b4c:	711a      	strb	r2, [r3, #4]

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f80a 	bl	8003b68 <m24cxx_isconnected>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <m24cxx_init+0x2a>
        return M24CXX_Err;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <m24cxx_init+0x2c>

    return M24CXX_Ok;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <m24cxx_isconnected>:

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	791b      	ldrb	r3, [r3, #4]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	b299      	uxth	r1, r3
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b82:	2202      	movs	r2, #2
 8003b84:	f7fe fad0 	bl	8002128 <HAL_I2C_IsDeviceReady>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <m24cxx_isconnected+0x2a>
        return M24CXX_Err;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <m24cxx_isconnected+0x2c>
    }

    return M24CXX_Ok;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b090      	sub	sp, #64	; 0x40
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc4:	e048      	b.n	8003c58 <m24cxx_read+0xbc>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d002      	beq.n	8003bd4 <m24cxx_read+0x38>
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	e000      	b.n	8003bd6 <m24cxx_read+0x3a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d103      	bne.n	8003be8 <m24cxx_read+0x4c>
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	e00b      	b.n	8003c00 <m24cxx_read+0x64>
 8003be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d105      	bne.n	8003bfc <m24cxx_read+0x60>
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	021a      	lsls	r2, r3, #8
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	e001      	b.n	8003c00 <m24cxx_read+0x64>
 8003bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c00:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	791b      	ldrb	r3, [r3, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	b29c      	uxth	r4, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	4413      	add	r3, r2
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c2e:	9502      	str	r5, [sp, #8]
 8003c30:	9201      	str	r2, [sp, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2310      	movs	r3, #16
 8003c36:	4622      	mov	r2, r4
 8003c38:	f7fe f850 	bl	8001cdc <HAL_I2C_Mem_Read>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <m24cxx_read+0xae>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00b      	b.n	8003c62 <m24cxx_read+0xc6>
        }

        data_offset += read_len;
 8003c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4413      	add	r3, r2
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	3301      	adds	r3, #1
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d9b2      	bls.n	8003bc6 <m24cxx_read+0x2a>

    }

    return M24CXX_Ok;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3730      	adds	r7, #48	; 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdb0      	pop	{r4, r5, r7, pc}

08003c6a <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8003c6a:	b5b0      	push	{r4, r5, r7, lr}
 8003c6c:	b092      	sub	sp, #72	; 0x48
 8003c6e:	af04      	add	r7, sp, #16
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	3b01      	subs	r3, #1
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t data_offset = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
 8003c92:	e058      	b.n	8003d46 <m24cxx_write+0xdc>

        uint32_t i2c_address, start_address, start_address_masked, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d002      	beq.n	8003ca2 <m24cxx_write+0x38>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	e000      	b.n	8003ca4 <m24cxx_write+0x3a>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
        start_address_masked = start_address & M24CXX_ADDRESS_MASK;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	623b      	str	r3, [r7, #32]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 8003cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d103      	bne.n	8003cbc <m24cxx_write+0x52>
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	e00b      	b.n	8003cd4 <m24cxx_write+0x6a>
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d105      	bne.n	8003cd0 <m24cxx_write+0x66>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	e001      	b.n	8003cd4 <m24cxx_write+0x6a>
 8003cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd4:	61fb      	str	r3, [r7, #28]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	791b      	ldrb	r3, [r3, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	4413      	add	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%06lx masked = 0x%06lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address_masked, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address_masked, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	b29c      	uxth	r4, r3
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf8:	4413      	add	r3, r2
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d02:	9502      	str	r5, [sp, #8]
 8003d04:	9201      	str	r2, [sp, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2310      	movs	r3, #16
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	f7fd feec 	bl	8001ae8 <HAL_I2C_Mem_Write>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

        if (result != HAL_OK) {
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <m24cxx_write+0xb4>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e018      	b.n	8003d50 <m24cxx_write+0xe6>
        }

        data_offset += write_len;
 8003d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34

        if (i2c_wait(m24cxx->i2c, i2c_address) != M24CXX_Ok) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fedb 	bl	8003aec <i2c_wait>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <m24cxx_write+0xd6>
            M24CXXDBG("M24Cxx Device never got ready");
            return M24CXX_Err;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <m24cxx_write+0xe6>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	3301      	adds	r3, #1
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d9a2      	bls.n	8003c94 <m24cxx_write+0x2a>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdb0      	pop	{r4, r5, r7, pc}

08003d58 <m24cxx_erase_all>:
        return result;

    return M24CXX_Ok;
}

M24CXX_StatusTypeDef m24cxx_erase_all(M24CXX_HandleTypeDef *m24cxx) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0c4      	sub	sp, #272	; 0x110
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d66:	6018      	str	r0, [r3, #0]

    M24CXXDBG("M24CXX erase all");

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];

    memset(buf, 0xff, sizeof(buf));
 8003d68:	f107 0308 	add.w	r3, r7, #8
 8003d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d70:	21ff      	movs	r1, #255	; 0xff
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f939 	bl	8003fea <memset>

    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003d7e:	e01c      	b.n	8003dba <m24cxx_erase_all+0x62>
        M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, i * M24CXX_WRITE_PAGE_SIZE, (uint8_t*) &buf, sizeof(buf));
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d84:	0219      	lsls	r1, r3, #8
 8003d86:	f107 0208 	add.w	r2, r7, #8
 8003d8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d8e:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8003d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	f7ff ff67 	bl	8003c6a <m24cxx_write>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        if (result != M24CXX_Ok)
 8003da2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <m24cxx_erase_all+0x58>
            return result;
 8003daa:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003dae:	e00a      	b.n	8003dc6 <m24cxx_erase_all+0x6e>
    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d3dd      	bcc.n	8003d80 <m24cxx_erase_all+0x28>
    }

    return M24CXX_Ok;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <std>:
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dde:	6083      	str	r3, [r0, #8]
 8003de0:	8181      	strh	r1, [r0, #12]
 8003de2:	6643      	str	r3, [r0, #100]	; 0x64
 8003de4:	81c2      	strh	r2, [r0, #14]
 8003de6:	6183      	str	r3, [r0, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2208      	movs	r2, #8
 8003dec:	305c      	adds	r0, #92	; 0x5c
 8003dee:	f000 f8fc 	bl	8003fea <memset>
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <std+0x38>)
 8003df4:	6263      	str	r3, [r4, #36]	; 0x24
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <std+0x3c>)
 8003df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <std+0x40>)
 8003dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <std+0x44>)
 8003e00:	6224      	str	r4, [r4, #32]
 8003e02:	6323      	str	r3, [r4, #48]	; 0x30
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	08003f65 	.word	0x08003f65
 8003e0c:	08003f87 	.word	0x08003f87
 8003e10:	08003fbf 	.word	0x08003fbf
 8003e14:	08003fe3 	.word	0x08003fe3

08003e18 <stdio_exit_handler>:
 8003e18:	4a02      	ldr	r2, [pc, #8]	; (8003e24 <stdio_exit_handler+0xc>)
 8003e1a:	4903      	ldr	r1, [pc, #12]	; (8003e28 <stdio_exit_handler+0x10>)
 8003e1c:	4803      	ldr	r0, [pc, #12]	; (8003e2c <stdio_exit_handler+0x14>)
 8003e1e:	f000 b869 	b.w	8003ef4 <_fwalk_sglue>
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	08004985 	.word	0x08004985
 8003e2c:	20000018 	.word	0x20000018

08003e30 <cleanup_stdio>:
 8003e30:	6841      	ldr	r1, [r0, #4]
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <cleanup_stdio+0x34>)
 8003e34:	4299      	cmp	r1, r3
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	d001      	beq.n	8003e40 <cleanup_stdio+0x10>
 8003e3c:	f000 fda2 	bl	8004984 <_fflush_r>
 8003e40:	68a1      	ldr	r1, [r4, #8]
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <cleanup_stdio+0x38>)
 8003e44:	4299      	cmp	r1, r3
 8003e46:	d002      	beq.n	8003e4e <cleanup_stdio+0x1e>
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 fd9b 	bl	8004984 <_fflush_r>
 8003e4e:	68e1      	ldr	r1, [r4, #12]
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <cleanup_stdio+0x3c>)
 8003e52:	4299      	cmp	r1, r3
 8003e54:	d004      	beq.n	8003e60 <cleanup_stdio+0x30>
 8003e56:	4620      	mov	r0, r4
 8003e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5c:	f000 bd92 	b.w	8004984 <_fflush_r>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	bf00      	nop
 8003e64:	20000134 	.word	0x20000134
 8003e68:	2000019c 	.word	0x2000019c
 8003e6c:	20000204 	.word	0x20000204

08003e70 <global_stdio_init.part.0>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <global_stdio_init.part.0+0x30>)
 8003e74:	4c0b      	ldr	r4, [pc, #44]	; (8003ea4 <global_stdio_init.part.0+0x34>)
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <global_stdio_init.part.0+0x38>)
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2104      	movs	r1, #4
 8003e80:	f7ff ffa6 	bl	8003dd0 <std>
 8003e84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2109      	movs	r1, #9
 8003e8c:	f7ff ffa0 	bl	8003dd0 <std>
 8003e90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e94:	2202      	movs	r2, #2
 8003e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9a:	2112      	movs	r1, #18
 8003e9c:	f7ff bf98 	b.w	8003dd0 <std>
 8003ea0:	2000026c 	.word	0x2000026c
 8003ea4:	20000134 	.word	0x20000134
 8003ea8:	08003e19 	.word	0x08003e19

08003eac <__sfp_lock_acquire>:
 8003eac:	4801      	ldr	r0, [pc, #4]	; (8003eb4 <__sfp_lock_acquire+0x8>)
 8003eae:	f000 b915 	b.w	80040dc <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	20000275 	.word	0x20000275

08003eb8 <__sfp_lock_release>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	; (8003ec0 <__sfp_lock_release+0x8>)
 8003eba:	f000 b910 	b.w	80040de <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	20000275 	.word	0x20000275

08003ec4 <__sinit>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f7ff fff0 	bl	8003eac <__sfp_lock_acquire>
 8003ecc:	6a23      	ldr	r3, [r4, #32]
 8003ece:	b11b      	cbz	r3, 8003ed8 <__sinit+0x14>
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	f7ff bff0 	b.w	8003eb8 <__sfp_lock_release>
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__sinit+0x28>)
 8003eda:	6223      	str	r3, [r4, #32]
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__sinit+0x2c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f5      	bne.n	8003ed0 <__sinit+0xc>
 8003ee4:	f7ff ffc4 	bl	8003e70 <global_stdio_init.part.0>
 8003ee8:	e7f2      	b.n	8003ed0 <__sinit+0xc>
 8003eea:	bf00      	nop
 8003eec:	08003e31 	.word	0x08003e31
 8003ef0:	2000026c 	.word	0x2000026c

08003ef4 <_fwalk_sglue>:
 8003ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4688      	mov	r8, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	2600      	movs	r6, #0
 8003f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f04:	f1b9 0901 	subs.w	r9, r9, #1
 8003f08:	d505      	bpl.n	8003f16 <_fwalk_sglue+0x22>
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d1f7      	bne.n	8003f00 <_fwalk_sglue+0xc>
 8003f10:	4630      	mov	r0, r6
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d907      	bls.n	8003f2c <_fwalk_sglue+0x38>
 8003f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	d003      	beq.n	8003f2c <_fwalk_sglue+0x38>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	4306      	orrs	r6, r0
 8003f2c:	3568      	adds	r5, #104	; 0x68
 8003f2e:	e7e9      	b.n	8003f04 <_fwalk_sglue+0x10>

08003f30 <iprintf>:
 8003f30:	b40f      	push	{r0, r1, r2, r3}
 8003f32:	b507      	push	{r0, r1, r2, lr}
 8003f34:	4906      	ldr	r1, [pc, #24]	; (8003f50 <iprintf+0x20>)
 8003f36:	ab04      	add	r3, sp, #16
 8003f38:	6808      	ldr	r0, [r1, #0]
 8003f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f3e:	6881      	ldr	r1, [r0, #8]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	f000 f9ef 	bl	8004324 <_vfiprintf_r>
 8003f46:	b003      	add	sp, #12
 8003f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f4c:	b004      	add	sp, #16
 8003f4e:	4770      	bx	lr
 8003f50:	20000064 	.word	0x20000064

08003f54 <putchar>:
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <putchar+0xc>)
 8003f56:	4601      	mov	r1, r0
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	6882      	ldr	r2, [r0, #8]
 8003f5c:	f000 bd3a 	b.w	80049d4 <_putc_r>
 8003f60:	20000064 	.word	0x20000064

08003f64 <__sread>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	460c      	mov	r4, r1
 8003f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6c:	f000 f868 	bl	8004040 <_read_r>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	bfab      	itete	ge
 8003f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f76:	89a3      	ldrhlt	r3, [r4, #12]
 8003f78:	181b      	addge	r3, r3, r0
 8003f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f7e:	bfac      	ite	ge
 8003f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f82:	81a3      	strhlt	r3, [r4, #12]
 8003f84:	bd10      	pop	{r4, pc}

08003f86 <__swrite>:
 8003f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	461f      	mov	r7, r3
 8003f8c:	898b      	ldrh	r3, [r1, #12]
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	4605      	mov	r5, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	4616      	mov	r6, r2
 8003f96:	d505      	bpl.n	8003fa4 <__swrite+0x1e>
 8003f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f000 f83c 	bl	800401c <_lseek_r>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	f000 b853 	b.w	8004064 <_write_r>

08003fbe <__sseek>:
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc6:	f000 f829 	bl	800401c <_lseek_r>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	bf15      	itete	ne
 8003fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fda:	81a3      	strheq	r3, [r4, #12]
 8003fdc:	bf18      	it	ne
 8003fde:	81a3      	strhne	r3, [r4, #12]
 8003fe0:	bd10      	pop	{r4, pc}

08003fe2 <__sclose>:
 8003fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe6:	f000 b809 	b.w	8003ffc <_close_r>

08003fea <memset>:
 8003fea:	4402      	add	r2, r0
 8003fec:	4603      	mov	r3, r0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d100      	bne.n	8003ff4 <memset+0xa>
 8003ff2:	4770      	bx	lr
 8003ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff8:	e7f9      	b.n	8003fee <memset+0x4>
	...

08003ffc <_close_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4d06      	ldr	r5, [pc, #24]	; (8004018 <_close_r+0x1c>)
 8004000:	2300      	movs	r3, #0
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	f7fc ffbd 	bl	8000f86 <_close>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_close_r+0x1a>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_close_r+0x1a>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	20000270 	.word	0x20000270

0800401c <_lseek_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d07      	ldr	r5, [pc, #28]	; (800403c <_lseek_r+0x20>)
 8004020:	4604      	mov	r4, r0
 8004022:	4608      	mov	r0, r1
 8004024:	4611      	mov	r1, r2
 8004026:	2200      	movs	r2, #0
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fc ffd2 	bl	8000fd4 <_lseek>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_lseek_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_lseek_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	20000270 	.word	0x20000270

08004040 <_read_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d07      	ldr	r5, [pc, #28]	; (8004060 <_read_r+0x20>)
 8004044:	4604      	mov	r4, r0
 8004046:	4608      	mov	r0, r1
 8004048:	4611      	mov	r1, r2
 800404a:	2200      	movs	r2, #0
 800404c:	602a      	str	r2, [r5, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f7fc ff7c 	bl	8000f4c <_read>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_read_r+0x1e>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_read_r+0x1e>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20000270 	.word	0x20000270

08004064 <_write_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d07      	ldr	r5, [pc, #28]	; (8004084 <_write_r+0x20>)
 8004068:	4604      	mov	r4, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f7fc fa7a 	bl	800056c <_write>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_write_r+0x1e>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_write_r+0x1e>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000270 	.word	0x20000270

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000064 	.word	0x20000064

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f000 fdf2 	bl	8004c90 <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	08004e44 	.word	0x08004e44
 80040d0:	08004e44 	.word	0x08004e44
 80040d4:	08004e44 	.word	0x08004e44
 80040d8:	08004e48 	.word	0x08004e48

080040dc <__retarget_lock_acquire_recursive>:
 80040dc:	4770      	bx	lr

080040de <__retarget_lock_release_recursive>:
 80040de:	4770      	bx	lr

080040e0 <_free_r>:
 80040e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040e2:	2900      	cmp	r1, #0
 80040e4:	d044      	beq.n	8004170 <_free_r+0x90>
 80040e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ea:	9001      	str	r0, [sp, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f1a1 0404 	sub.w	r4, r1, #4
 80040f2:	bfb8      	it	lt
 80040f4:	18e4      	addlt	r4, r4, r3
 80040f6:	f000 f8df 	bl	80042b8 <__malloc_lock>
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <_free_r+0x94>)
 80040fc:	9801      	ldr	r0, [sp, #4]
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	b933      	cbnz	r3, 8004110 <_free_r+0x30>
 8004102:	6063      	str	r3, [r4, #4]
 8004104:	6014      	str	r4, [r2, #0]
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800410c:	f000 b8da 	b.w	80042c4 <__malloc_unlock>
 8004110:	42a3      	cmp	r3, r4
 8004112:	d908      	bls.n	8004126 <_free_r+0x46>
 8004114:	6825      	ldr	r5, [r4, #0]
 8004116:	1961      	adds	r1, r4, r5
 8004118:	428b      	cmp	r3, r1
 800411a:	bf01      	itttt	eq
 800411c:	6819      	ldreq	r1, [r3, #0]
 800411e:	685b      	ldreq	r3, [r3, #4]
 8004120:	1949      	addeq	r1, r1, r5
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	e7ed      	b.n	8004102 <_free_r+0x22>
 8004126:	461a      	mov	r2, r3
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b10b      	cbz	r3, 8004130 <_free_r+0x50>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d9fa      	bls.n	8004126 <_free_r+0x46>
 8004130:	6811      	ldr	r1, [r2, #0]
 8004132:	1855      	adds	r5, r2, r1
 8004134:	42a5      	cmp	r5, r4
 8004136:	d10b      	bne.n	8004150 <_free_r+0x70>
 8004138:	6824      	ldr	r4, [r4, #0]
 800413a:	4421      	add	r1, r4
 800413c:	1854      	adds	r4, r2, r1
 800413e:	42a3      	cmp	r3, r4
 8004140:	6011      	str	r1, [r2, #0]
 8004142:	d1e0      	bne.n	8004106 <_free_r+0x26>
 8004144:	681c      	ldr	r4, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	6053      	str	r3, [r2, #4]
 800414a:	440c      	add	r4, r1
 800414c:	6014      	str	r4, [r2, #0]
 800414e:	e7da      	b.n	8004106 <_free_r+0x26>
 8004150:	d902      	bls.n	8004158 <_free_r+0x78>
 8004152:	230c      	movs	r3, #12
 8004154:	6003      	str	r3, [r0, #0]
 8004156:	e7d6      	b.n	8004106 <_free_r+0x26>
 8004158:	6825      	ldr	r5, [r4, #0]
 800415a:	1961      	adds	r1, r4, r5
 800415c:	428b      	cmp	r3, r1
 800415e:	bf04      	itt	eq
 8004160:	6819      	ldreq	r1, [r3, #0]
 8004162:	685b      	ldreq	r3, [r3, #4]
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	bf04      	itt	eq
 8004168:	1949      	addeq	r1, r1, r5
 800416a:	6021      	streq	r1, [r4, #0]
 800416c:	6054      	str	r4, [r2, #4]
 800416e:	e7ca      	b.n	8004106 <_free_r+0x26>
 8004170:	b003      	add	sp, #12
 8004172:	bd30      	pop	{r4, r5, pc}
 8004174:	20000278 	.word	0x20000278

08004178 <sbrk_aligned>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4e0e      	ldr	r6, [pc, #56]	; (80041b4 <sbrk_aligned+0x3c>)
 800417c:	460c      	mov	r4, r1
 800417e:	6831      	ldr	r1, [r6, #0]
 8004180:	4605      	mov	r5, r0
 8004182:	b911      	cbnz	r1, 800418a <sbrk_aligned+0x12>
 8004184:	f000 fcf0 	bl	8004b68 <_sbrk_r>
 8004188:	6030      	str	r0, [r6, #0]
 800418a:	4621      	mov	r1, r4
 800418c:	4628      	mov	r0, r5
 800418e:	f000 fceb 	bl	8004b68 <_sbrk_r>
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	d00a      	beq.n	80041ac <sbrk_aligned+0x34>
 8004196:	1cc4      	adds	r4, r0, #3
 8004198:	f024 0403 	bic.w	r4, r4, #3
 800419c:	42a0      	cmp	r0, r4
 800419e:	d007      	beq.n	80041b0 <sbrk_aligned+0x38>
 80041a0:	1a21      	subs	r1, r4, r0
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 fce0 	bl	8004b68 <_sbrk_r>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d101      	bne.n	80041b0 <sbrk_aligned+0x38>
 80041ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80041b0:	4620      	mov	r0, r4
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	2000027c 	.word	0x2000027c

080041b8 <_malloc_r>:
 80041b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041bc:	1ccd      	adds	r5, r1, #3
 80041be:	f025 0503 	bic.w	r5, r5, #3
 80041c2:	3508      	adds	r5, #8
 80041c4:	2d0c      	cmp	r5, #12
 80041c6:	bf38      	it	cc
 80041c8:	250c      	movcc	r5, #12
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	4607      	mov	r7, r0
 80041ce:	db01      	blt.n	80041d4 <_malloc_r+0x1c>
 80041d0:	42a9      	cmp	r1, r5
 80041d2:	d905      	bls.n	80041e0 <_malloc_r+0x28>
 80041d4:	230c      	movs	r3, #12
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	2600      	movs	r6, #0
 80041da:	4630      	mov	r0, r6
 80041dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042b4 <_malloc_r+0xfc>
 80041e4:	f000 f868 	bl	80042b8 <__malloc_lock>
 80041e8:	f8d8 3000 	ldr.w	r3, [r8]
 80041ec:	461c      	mov	r4, r3
 80041ee:	bb5c      	cbnz	r4, 8004248 <_malloc_r+0x90>
 80041f0:	4629      	mov	r1, r5
 80041f2:	4638      	mov	r0, r7
 80041f4:	f7ff ffc0 	bl	8004178 <sbrk_aligned>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	4604      	mov	r4, r0
 80041fc:	d155      	bne.n	80042aa <_malloc_r+0xf2>
 80041fe:	f8d8 4000 	ldr.w	r4, [r8]
 8004202:	4626      	mov	r6, r4
 8004204:	2e00      	cmp	r6, #0
 8004206:	d145      	bne.n	8004294 <_malloc_r+0xdc>
 8004208:	2c00      	cmp	r4, #0
 800420a:	d048      	beq.n	800429e <_malloc_r+0xe6>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	4631      	mov	r1, r6
 8004210:	4638      	mov	r0, r7
 8004212:	eb04 0903 	add.w	r9, r4, r3
 8004216:	f000 fca7 	bl	8004b68 <_sbrk_r>
 800421a:	4581      	cmp	r9, r0
 800421c:	d13f      	bne.n	800429e <_malloc_r+0xe6>
 800421e:	6821      	ldr	r1, [r4, #0]
 8004220:	1a6d      	subs	r5, r5, r1
 8004222:	4629      	mov	r1, r5
 8004224:	4638      	mov	r0, r7
 8004226:	f7ff ffa7 	bl	8004178 <sbrk_aligned>
 800422a:	3001      	adds	r0, #1
 800422c:	d037      	beq.n	800429e <_malloc_r+0xe6>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	442b      	add	r3, r5
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	f8d8 3000 	ldr.w	r3, [r8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d038      	beq.n	80042ae <_malloc_r+0xf6>
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	42a2      	cmp	r2, r4
 8004240:	d12b      	bne.n	800429a <_malloc_r+0xe2>
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e00f      	b.n	8004268 <_malloc_r+0xb0>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	1b52      	subs	r2, r2, r5
 800424c:	d41f      	bmi.n	800428e <_malloc_r+0xd6>
 800424e:	2a0b      	cmp	r2, #11
 8004250:	d917      	bls.n	8004282 <_malloc_r+0xca>
 8004252:	1961      	adds	r1, r4, r5
 8004254:	42a3      	cmp	r3, r4
 8004256:	6025      	str	r5, [r4, #0]
 8004258:	bf18      	it	ne
 800425a:	6059      	strne	r1, [r3, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	bf08      	it	eq
 8004260:	f8c8 1000 	streq.w	r1, [r8]
 8004264:	5162      	str	r2, [r4, r5]
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	4638      	mov	r0, r7
 800426a:	f104 060b 	add.w	r6, r4, #11
 800426e:	f000 f829 	bl	80042c4 <__malloc_unlock>
 8004272:	f026 0607 	bic.w	r6, r6, #7
 8004276:	1d23      	adds	r3, r4, #4
 8004278:	1af2      	subs	r2, r6, r3
 800427a:	d0ae      	beq.n	80041da <_malloc_r+0x22>
 800427c:	1b9b      	subs	r3, r3, r6
 800427e:	50a3      	str	r3, [r4, r2]
 8004280:	e7ab      	b.n	80041da <_malloc_r+0x22>
 8004282:	42a3      	cmp	r3, r4
 8004284:	6862      	ldr	r2, [r4, #4]
 8004286:	d1dd      	bne.n	8004244 <_malloc_r+0x8c>
 8004288:	f8c8 2000 	str.w	r2, [r8]
 800428c:	e7ec      	b.n	8004268 <_malloc_r+0xb0>
 800428e:	4623      	mov	r3, r4
 8004290:	6864      	ldr	r4, [r4, #4]
 8004292:	e7ac      	b.n	80041ee <_malloc_r+0x36>
 8004294:	4634      	mov	r4, r6
 8004296:	6876      	ldr	r6, [r6, #4]
 8004298:	e7b4      	b.n	8004204 <_malloc_r+0x4c>
 800429a:	4613      	mov	r3, r2
 800429c:	e7cc      	b.n	8004238 <_malloc_r+0x80>
 800429e:	230c      	movs	r3, #12
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	4638      	mov	r0, r7
 80042a4:	f000 f80e 	bl	80042c4 <__malloc_unlock>
 80042a8:	e797      	b.n	80041da <_malloc_r+0x22>
 80042aa:	6025      	str	r5, [r4, #0]
 80042ac:	e7dc      	b.n	8004268 <_malloc_r+0xb0>
 80042ae:	605b      	str	r3, [r3, #4]
 80042b0:	deff      	udf	#255	; 0xff
 80042b2:	bf00      	nop
 80042b4:	20000278 	.word	0x20000278

080042b8 <__malloc_lock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_lock+0x8>)
 80042ba:	f7ff bf0f 	b.w	80040dc <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	20000274 	.word	0x20000274

080042c4 <__malloc_unlock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_unlock+0x8>)
 80042c6:	f7ff bf0a 	b.w	80040de <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	20000274 	.word	0x20000274

080042d0 <__sfputc_r>:
 80042d0:	6893      	ldr	r3, [r2, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	b410      	push	{r4}
 80042d8:	6093      	str	r3, [r2, #8]
 80042da:	da08      	bge.n	80042ee <__sfputc_r+0x1e>
 80042dc:	6994      	ldr	r4, [r2, #24]
 80042de:	42a3      	cmp	r3, r4
 80042e0:	db01      	blt.n	80042e6 <__sfputc_r+0x16>
 80042e2:	290a      	cmp	r1, #10
 80042e4:	d103      	bne.n	80042ee <__sfputc_r+0x1e>
 80042e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ea:	f000 bba7 	b.w	8004a3c <__swbuf_r>
 80042ee:	6813      	ldr	r3, [r2, #0]
 80042f0:	1c58      	adds	r0, r3, #1
 80042f2:	6010      	str	r0, [r2, #0]
 80042f4:	7019      	strb	r1, [r3, #0]
 80042f6:	4608      	mov	r0, r1
 80042f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <__sfputs_r>:
 80042fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004300:	4606      	mov	r6, r0
 8004302:	460f      	mov	r7, r1
 8004304:	4614      	mov	r4, r2
 8004306:	18d5      	adds	r5, r2, r3
 8004308:	42ac      	cmp	r4, r5
 800430a:	d101      	bne.n	8004310 <__sfputs_r+0x12>
 800430c:	2000      	movs	r0, #0
 800430e:	e007      	b.n	8004320 <__sfputs_r+0x22>
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	463a      	mov	r2, r7
 8004316:	4630      	mov	r0, r6
 8004318:	f7ff ffda 	bl	80042d0 <__sfputc_r>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d1f3      	bne.n	8004308 <__sfputs_r+0xa>
 8004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004324 <_vfiprintf_r>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	460d      	mov	r5, r1
 800432a:	b09d      	sub	sp, #116	; 0x74
 800432c:	4614      	mov	r4, r2
 800432e:	4698      	mov	r8, r3
 8004330:	4606      	mov	r6, r0
 8004332:	b118      	cbz	r0, 800433c <_vfiprintf_r+0x18>
 8004334:	6a03      	ldr	r3, [r0, #32]
 8004336:	b90b      	cbnz	r3, 800433c <_vfiprintf_r+0x18>
 8004338:	f7ff fdc4 	bl	8003ec4 <__sinit>
 800433c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800433e:	07d9      	lsls	r1, r3, #31
 8004340:	d405      	bmi.n	800434e <_vfiprintf_r+0x2a>
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	059a      	lsls	r2, r3, #22
 8004346:	d402      	bmi.n	800434e <_vfiprintf_r+0x2a>
 8004348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800434a:	f7ff fec7 	bl	80040dc <__retarget_lock_acquire_recursive>
 800434e:	89ab      	ldrh	r3, [r5, #12]
 8004350:	071b      	lsls	r3, r3, #28
 8004352:	d501      	bpl.n	8004358 <_vfiprintf_r+0x34>
 8004354:	692b      	ldr	r3, [r5, #16]
 8004356:	b99b      	cbnz	r3, 8004380 <_vfiprintf_r+0x5c>
 8004358:	4629      	mov	r1, r5
 800435a:	4630      	mov	r0, r6
 800435c:	f000 fbac 	bl	8004ab8 <__swsetup_r>
 8004360:	b170      	cbz	r0, 8004380 <_vfiprintf_r+0x5c>
 8004362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004364:	07dc      	lsls	r4, r3, #31
 8004366:	d504      	bpl.n	8004372 <_vfiprintf_r+0x4e>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436c:	b01d      	add	sp, #116	; 0x74
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	0598      	lsls	r0, r3, #22
 8004376:	d4f7      	bmi.n	8004368 <_vfiprintf_r+0x44>
 8004378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437a:	f7ff feb0 	bl	80040de <__retarget_lock_release_recursive>
 800437e:	e7f3      	b.n	8004368 <_vfiprintf_r+0x44>
 8004380:	2300      	movs	r3, #0
 8004382:	9309      	str	r3, [sp, #36]	; 0x24
 8004384:	2320      	movs	r3, #32
 8004386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800438a:	f8cd 800c 	str.w	r8, [sp, #12]
 800438e:	2330      	movs	r3, #48	; 0x30
 8004390:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004544 <_vfiprintf_r+0x220>
 8004394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004398:	f04f 0901 	mov.w	r9, #1
 800439c:	4623      	mov	r3, r4
 800439e:	469a      	mov	sl, r3
 80043a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a4:	b10a      	cbz	r2, 80043aa <_vfiprintf_r+0x86>
 80043a6:	2a25      	cmp	r2, #37	; 0x25
 80043a8:	d1f9      	bne.n	800439e <_vfiprintf_r+0x7a>
 80043aa:	ebba 0b04 	subs.w	fp, sl, r4
 80043ae:	d00b      	beq.n	80043c8 <_vfiprintf_r+0xa4>
 80043b0:	465b      	mov	r3, fp
 80043b2:	4622      	mov	r2, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	4630      	mov	r0, r6
 80043b8:	f7ff ffa1 	bl	80042fe <__sfputs_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	f000 80a9 	beq.w	8004514 <_vfiprintf_r+0x1f0>
 80043c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043c4:	445a      	add	r2, fp
 80043c6:	9209      	str	r2, [sp, #36]	; 0x24
 80043c8:	f89a 3000 	ldrb.w	r3, [sl]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a1 	beq.w	8004514 <_vfiprintf_r+0x1f0>
 80043d2:	2300      	movs	r3, #0
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043dc:	f10a 0a01 	add.w	sl, sl, #1
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	9307      	str	r3, [sp, #28]
 80043e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e8:	931a      	str	r3, [sp, #104]	; 0x68
 80043ea:	4654      	mov	r4, sl
 80043ec:	2205      	movs	r2, #5
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	4854      	ldr	r0, [pc, #336]	; (8004544 <_vfiprintf_r+0x220>)
 80043f4:	f7fb feec 	bl	80001d0 <memchr>
 80043f8:	9a04      	ldr	r2, [sp, #16]
 80043fa:	b9d8      	cbnz	r0, 8004434 <_vfiprintf_r+0x110>
 80043fc:	06d1      	lsls	r1, r2, #27
 80043fe:	bf44      	itt	mi
 8004400:	2320      	movmi	r3, #32
 8004402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004406:	0713      	lsls	r3, r2, #28
 8004408:	bf44      	itt	mi
 800440a:	232b      	movmi	r3, #43	; 0x2b
 800440c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004410:	f89a 3000 	ldrb.w	r3, [sl]
 8004414:	2b2a      	cmp	r3, #42	; 0x2a
 8004416:	d015      	beq.n	8004444 <_vfiprintf_r+0x120>
 8004418:	9a07      	ldr	r2, [sp, #28]
 800441a:	4654      	mov	r4, sl
 800441c:	2000      	movs	r0, #0
 800441e:	f04f 0c0a 	mov.w	ip, #10
 8004422:	4621      	mov	r1, r4
 8004424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004428:	3b30      	subs	r3, #48	; 0x30
 800442a:	2b09      	cmp	r3, #9
 800442c:	d94d      	bls.n	80044ca <_vfiprintf_r+0x1a6>
 800442e:	b1b0      	cbz	r0, 800445e <_vfiprintf_r+0x13a>
 8004430:	9207      	str	r2, [sp, #28]
 8004432:	e014      	b.n	800445e <_vfiprintf_r+0x13a>
 8004434:	eba0 0308 	sub.w	r3, r0, r8
 8004438:	fa09 f303 	lsl.w	r3, r9, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	46a2      	mov	sl, r4
 8004442:	e7d2      	b.n	80043ea <_vfiprintf_r+0xc6>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	1d19      	adds	r1, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	9103      	str	r1, [sp, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	bfbb      	ittet	lt
 8004450:	425b      	neglt	r3, r3
 8004452:	f042 0202 	orrlt.w	r2, r2, #2
 8004456:	9307      	strge	r3, [sp, #28]
 8004458:	9307      	strlt	r3, [sp, #28]
 800445a:	bfb8      	it	lt
 800445c:	9204      	strlt	r2, [sp, #16]
 800445e:	7823      	ldrb	r3, [r4, #0]
 8004460:	2b2e      	cmp	r3, #46	; 0x2e
 8004462:	d10c      	bne.n	800447e <_vfiprintf_r+0x15a>
 8004464:	7863      	ldrb	r3, [r4, #1]
 8004466:	2b2a      	cmp	r3, #42	; 0x2a
 8004468:	d134      	bne.n	80044d4 <_vfiprintf_r+0x1b0>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	9203      	str	r2, [sp, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	bfb8      	it	lt
 8004476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800447a:	3402      	adds	r4, #2
 800447c:	9305      	str	r3, [sp, #20]
 800447e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004554 <_vfiprintf_r+0x230>
 8004482:	7821      	ldrb	r1, [r4, #0]
 8004484:	2203      	movs	r2, #3
 8004486:	4650      	mov	r0, sl
 8004488:	f7fb fea2 	bl	80001d0 <memchr>
 800448c:	b138      	cbz	r0, 800449e <_vfiprintf_r+0x17a>
 800448e:	9b04      	ldr	r3, [sp, #16]
 8004490:	eba0 000a 	sub.w	r0, r0, sl
 8004494:	2240      	movs	r2, #64	; 0x40
 8004496:	4082      	lsls	r2, r0
 8004498:	4313      	orrs	r3, r2
 800449a:	3401      	adds	r4, #1
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a2:	4829      	ldr	r0, [pc, #164]	; (8004548 <_vfiprintf_r+0x224>)
 80044a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044a8:	2206      	movs	r2, #6
 80044aa:	f7fb fe91 	bl	80001d0 <memchr>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d03f      	beq.n	8004532 <_vfiprintf_r+0x20e>
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <_vfiprintf_r+0x228>)
 80044b4:	bb1b      	cbnz	r3, 80044fe <_vfiprintf_r+0x1da>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	3307      	adds	r3, #7
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	3308      	adds	r3, #8
 80044c0:	9303      	str	r3, [sp, #12]
 80044c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c4:	443b      	add	r3, r7
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	e768      	b.n	800439c <_vfiprintf_r+0x78>
 80044ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80044ce:	460c      	mov	r4, r1
 80044d0:	2001      	movs	r0, #1
 80044d2:	e7a6      	b.n	8004422 <_vfiprintf_r+0xfe>
 80044d4:	2300      	movs	r3, #0
 80044d6:	3401      	adds	r4, #1
 80044d8:	9305      	str	r3, [sp, #20]
 80044da:	4619      	mov	r1, r3
 80044dc:	f04f 0c0a 	mov.w	ip, #10
 80044e0:	4620      	mov	r0, r4
 80044e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e6:	3a30      	subs	r2, #48	; 0x30
 80044e8:	2a09      	cmp	r2, #9
 80044ea:	d903      	bls.n	80044f4 <_vfiprintf_r+0x1d0>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0c6      	beq.n	800447e <_vfiprintf_r+0x15a>
 80044f0:	9105      	str	r1, [sp, #20]
 80044f2:	e7c4      	b.n	800447e <_vfiprintf_r+0x15a>
 80044f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044f8:	4604      	mov	r4, r0
 80044fa:	2301      	movs	r3, #1
 80044fc:	e7f0      	b.n	80044e0 <_vfiprintf_r+0x1bc>
 80044fe:	ab03      	add	r3, sp, #12
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	462a      	mov	r2, r5
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <_vfiprintf_r+0x22c>)
 8004506:	a904      	add	r1, sp, #16
 8004508:	4630      	mov	r0, r6
 800450a:	f3af 8000 	nop.w
 800450e:	4607      	mov	r7, r0
 8004510:	1c78      	adds	r0, r7, #1
 8004512:	d1d6      	bne.n	80044c2 <_vfiprintf_r+0x19e>
 8004514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004516:	07d9      	lsls	r1, r3, #31
 8004518:	d405      	bmi.n	8004526 <_vfiprintf_r+0x202>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	059a      	lsls	r2, r3, #22
 800451e:	d402      	bmi.n	8004526 <_vfiprintf_r+0x202>
 8004520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004522:	f7ff fddc 	bl	80040de <__retarget_lock_release_recursive>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	065b      	lsls	r3, r3, #25
 800452a:	f53f af1d 	bmi.w	8004368 <_vfiprintf_r+0x44>
 800452e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004530:	e71c      	b.n	800436c <_vfiprintf_r+0x48>
 8004532:	ab03      	add	r3, sp, #12
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	462a      	mov	r2, r5
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <_vfiprintf_r+0x22c>)
 800453a:	a904      	add	r1, sp, #16
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f879 	bl	8004634 <_printf_i>
 8004542:	e7e4      	b.n	800450e <_vfiprintf_r+0x1ea>
 8004544:	08004e08 	.word	0x08004e08
 8004548:	08004e12 	.word	0x08004e12
 800454c:	00000000 	.word	0x00000000
 8004550:	080042ff 	.word	0x080042ff
 8004554:	08004e0e 	.word	0x08004e0e

08004558 <_printf_common>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	4616      	mov	r6, r2
 800455e:	4699      	mov	r9, r3
 8004560:	688a      	ldr	r2, [r1, #8]
 8004562:	690b      	ldr	r3, [r1, #16]
 8004564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004568:	4293      	cmp	r3, r2
 800456a:	bfb8      	it	lt
 800456c:	4613      	movlt	r3, r2
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004574:	4607      	mov	r7, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b10a      	cbz	r2, 800457e <_printf_common+0x26>
 800457a:	3301      	adds	r3, #1
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	0699      	lsls	r1, r3, #26
 8004582:	bf42      	ittt	mi
 8004584:	6833      	ldrmi	r3, [r6, #0]
 8004586:	3302      	addmi	r3, #2
 8004588:	6033      	strmi	r3, [r6, #0]
 800458a:	6825      	ldr	r5, [r4, #0]
 800458c:	f015 0506 	ands.w	r5, r5, #6
 8004590:	d106      	bne.n	80045a0 <_printf_common+0x48>
 8004592:	f104 0a19 	add.w	sl, r4, #25
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	6832      	ldr	r2, [r6, #0]
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	42ab      	cmp	r3, r5
 800459e:	dc26      	bgt.n	80045ee <_printf_common+0x96>
 80045a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045a4:	1e13      	subs	r3, r2, #0
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	bf18      	it	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	0692      	lsls	r2, r2, #26
 80045ae:	d42b      	bmi.n	8004608 <_printf_common+0xb0>
 80045b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b4:	4649      	mov	r1, r9
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c0      	blx	r8
 80045ba:	3001      	adds	r0, #1
 80045bc:	d01e      	beq.n	80045fc <_printf_common+0xa4>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	6922      	ldr	r2, [r4, #16]
 80045c2:	f003 0306 	and.w	r3, r3, #6
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf02      	ittt	eq
 80045ca:	68e5      	ldreq	r5, [r4, #12]
 80045cc:	6833      	ldreq	r3, [r6, #0]
 80045ce:	1aed      	subeq	r5, r5, r3
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	bf0c      	ite	eq
 80045d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d8:	2500      	movne	r5, #0
 80045da:	4293      	cmp	r3, r2
 80045dc:	bfc4      	itt	gt
 80045de:	1a9b      	subgt	r3, r3, r2
 80045e0:	18ed      	addgt	r5, r5, r3
 80045e2:	2600      	movs	r6, #0
 80045e4:	341a      	adds	r4, #26
 80045e6:	42b5      	cmp	r5, r6
 80045e8:	d11a      	bne.n	8004620 <_printf_common+0xc8>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e008      	b.n	8004600 <_printf_common+0xa8>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4649      	mov	r1, r9
 80045f4:	4638      	mov	r0, r7
 80045f6:	47c0      	blx	r8
 80045f8:	3001      	adds	r0, #1
 80045fa:	d103      	bne.n	8004604 <_printf_common+0xac>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004604:	3501      	adds	r5, #1
 8004606:	e7c6      	b.n	8004596 <_printf_common+0x3e>
 8004608:	18e1      	adds	r1, r4, r3
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	2030      	movs	r0, #48	; 0x30
 800460e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004612:	4422      	add	r2, r4
 8004614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800461c:	3302      	adds	r3, #2
 800461e:	e7c7      	b.n	80045b0 <_printf_common+0x58>
 8004620:	2301      	movs	r3, #1
 8004622:	4622      	mov	r2, r4
 8004624:	4649      	mov	r1, r9
 8004626:	4638      	mov	r0, r7
 8004628:	47c0      	blx	r8
 800462a:	3001      	adds	r0, #1
 800462c:	d0e6      	beq.n	80045fc <_printf_common+0xa4>
 800462e:	3601      	adds	r6, #1
 8004630:	e7d9      	b.n	80045e6 <_printf_common+0x8e>
	...

08004634 <_printf_i>:
 8004634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	7e0f      	ldrb	r7, [r1, #24]
 800463a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800463c:	2f78      	cmp	r7, #120	; 0x78
 800463e:	4691      	mov	r9, r2
 8004640:	4680      	mov	r8, r0
 8004642:	460c      	mov	r4, r1
 8004644:	469a      	mov	sl, r3
 8004646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800464a:	d807      	bhi.n	800465c <_printf_i+0x28>
 800464c:	2f62      	cmp	r7, #98	; 0x62
 800464e:	d80a      	bhi.n	8004666 <_printf_i+0x32>
 8004650:	2f00      	cmp	r7, #0
 8004652:	f000 80d4 	beq.w	80047fe <_printf_i+0x1ca>
 8004656:	2f58      	cmp	r7, #88	; 0x58
 8004658:	f000 80c0 	beq.w	80047dc <_printf_i+0x1a8>
 800465c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004664:	e03a      	b.n	80046dc <_printf_i+0xa8>
 8004666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800466a:	2b15      	cmp	r3, #21
 800466c:	d8f6      	bhi.n	800465c <_printf_i+0x28>
 800466e:	a101      	add	r1, pc, #4	; (adr r1, 8004674 <_printf_i+0x40>)
 8004670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046e1 	.word	0x080046e1
 800467c:	0800465d 	.word	0x0800465d
 8004680:	0800465d 	.word	0x0800465d
 8004684:	0800465d 	.word	0x0800465d
 8004688:	0800465d 	.word	0x0800465d
 800468c:	080046e1 	.word	0x080046e1
 8004690:	0800465d 	.word	0x0800465d
 8004694:	0800465d 	.word	0x0800465d
 8004698:	0800465d 	.word	0x0800465d
 800469c:	0800465d 	.word	0x0800465d
 80046a0:	080047e5 	.word	0x080047e5
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800479f 	.word	0x0800479f
 80046ac:	0800465d 	.word	0x0800465d
 80046b0:	0800465d 	.word	0x0800465d
 80046b4:	08004807 	.word	0x08004807
 80046b8:	0800465d 	.word	0x0800465d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	0800465d 	.word	0x0800465d
 80046c4:	0800465d 	.word	0x0800465d
 80046c8:	080047a7 	.word	0x080047a7
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046dc:	2301      	movs	r3, #1
 80046de:	e09f      	b.n	8004820 <_printf_i+0x1ec>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	682b      	ldr	r3, [r5, #0]
 80046e4:	0607      	lsls	r7, r0, #24
 80046e6:	f103 0104 	add.w	r1, r3, #4
 80046ea:	6029      	str	r1, [r5, #0]
 80046ec:	d501      	bpl.n	80046f2 <_printf_i+0xbe>
 80046ee:	681e      	ldr	r6, [r3, #0]
 80046f0:	e003      	b.n	80046fa <_printf_i+0xc6>
 80046f2:	0646      	lsls	r6, r0, #25
 80046f4:	d5fb      	bpl.n	80046ee <_printf_i+0xba>
 80046f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	da03      	bge.n	8004706 <_printf_i+0xd2>
 80046fe:	232d      	movs	r3, #45	; 0x2d
 8004700:	4276      	negs	r6, r6
 8004702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004706:	485a      	ldr	r0, [pc, #360]	; (8004870 <_printf_i+0x23c>)
 8004708:	230a      	movs	r3, #10
 800470a:	e012      	b.n	8004732 <_printf_i+0xfe>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	1d19      	adds	r1, r3, #4
 8004712:	6029      	str	r1, [r5, #0]
 8004714:	0605      	lsls	r5, r0, #24
 8004716:	d501      	bpl.n	800471c <_printf_i+0xe8>
 8004718:	681e      	ldr	r6, [r3, #0]
 800471a:	e002      	b.n	8004722 <_printf_i+0xee>
 800471c:	0641      	lsls	r1, r0, #25
 800471e:	d5fb      	bpl.n	8004718 <_printf_i+0xe4>
 8004720:	881e      	ldrh	r6, [r3, #0]
 8004722:	4853      	ldr	r0, [pc, #332]	; (8004870 <_printf_i+0x23c>)
 8004724:	2f6f      	cmp	r7, #111	; 0x6f
 8004726:	bf0c      	ite	eq
 8004728:	2308      	moveq	r3, #8
 800472a:	230a      	movne	r3, #10
 800472c:	2100      	movs	r1, #0
 800472e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004732:	6865      	ldr	r5, [r4, #4]
 8004734:	60a5      	str	r5, [r4, #8]
 8004736:	2d00      	cmp	r5, #0
 8004738:	bfa2      	ittt	ge
 800473a:	6821      	ldrge	r1, [r4, #0]
 800473c:	f021 0104 	bicge.w	r1, r1, #4
 8004740:	6021      	strge	r1, [r4, #0]
 8004742:	b90e      	cbnz	r6, 8004748 <_printf_i+0x114>
 8004744:	2d00      	cmp	r5, #0
 8004746:	d04b      	beq.n	80047e0 <_printf_i+0x1ac>
 8004748:	4615      	mov	r5, r2
 800474a:	fbb6 f1f3 	udiv	r1, r6, r3
 800474e:	fb03 6711 	mls	r7, r3, r1, r6
 8004752:	5dc7      	ldrb	r7, [r0, r7]
 8004754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004758:	4637      	mov	r7, r6
 800475a:	42bb      	cmp	r3, r7
 800475c:	460e      	mov	r6, r1
 800475e:	d9f4      	bls.n	800474a <_printf_i+0x116>
 8004760:	2b08      	cmp	r3, #8
 8004762:	d10b      	bne.n	800477c <_printf_i+0x148>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	07de      	lsls	r6, r3, #31
 8004768:	d508      	bpl.n	800477c <_printf_i+0x148>
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	6861      	ldr	r1, [r4, #4]
 800476e:	4299      	cmp	r1, r3
 8004770:	bfde      	ittt	le
 8004772:	2330      	movle	r3, #48	; 0x30
 8004774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800477c:	1b52      	subs	r2, r2, r5
 800477e:	6122      	str	r2, [r4, #16]
 8004780:	f8cd a000 	str.w	sl, [sp]
 8004784:	464b      	mov	r3, r9
 8004786:	aa03      	add	r2, sp, #12
 8004788:	4621      	mov	r1, r4
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fee4 	bl	8004558 <_printf_common>
 8004790:	3001      	adds	r0, #1
 8004792:	d14a      	bne.n	800482a <_printf_i+0x1f6>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004798:	b004      	add	sp, #16
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	f043 0320 	orr.w	r3, r3, #32
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	4833      	ldr	r0, [pc, #204]	; (8004874 <_printf_i+0x240>)
 80047a8:	2778      	movs	r7, #120	; 0x78
 80047aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	061f      	lsls	r7, r3, #24
 80047b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b8:	d402      	bmi.n	80047c0 <_printf_i+0x18c>
 80047ba:	065f      	lsls	r7, r3, #25
 80047bc:	bf48      	it	mi
 80047be:	b2b6      	uxthmi	r6, r6
 80047c0:	07df      	lsls	r7, r3, #31
 80047c2:	bf48      	it	mi
 80047c4:	f043 0320 	orrmi.w	r3, r3, #32
 80047c8:	6029      	str	r1, [r5, #0]
 80047ca:	bf48      	it	mi
 80047cc:	6023      	strmi	r3, [r4, #0]
 80047ce:	b91e      	cbnz	r6, 80047d8 <_printf_i+0x1a4>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	f023 0320 	bic.w	r3, r3, #32
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	2310      	movs	r3, #16
 80047da:	e7a7      	b.n	800472c <_printf_i+0xf8>
 80047dc:	4824      	ldr	r0, [pc, #144]	; (8004870 <_printf_i+0x23c>)
 80047de:	e7e4      	b.n	80047aa <_printf_i+0x176>
 80047e0:	4615      	mov	r5, r2
 80047e2:	e7bd      	b.n	8004760 <_printf_i+0x12c>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	6826      	ldr	r6, [r4, #0]
 80047e8:	6961      	ldr	r1, [r4, #20]
 80047ea:	1d18      	adds	r0, r3, #4
 80047ec:	6028      	str	r0, [r5, #0]
 80047ee:	0635      	lsls	r5, r6, #24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0x1c4>
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0x1ca>
 80047f8:	0670      	lsls	r0, r6, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0x1c0>
 80047fc:	8019      	strh	r1, [r3, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	4615      	mov	r5, r2
 8004804:	e7bc      	b.n	8004780 <_printf_i+0x14c>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	602a      	str	r2, [r5, #0]
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	2100      	movs	r1, #0
 8004812:	4628      	mov	r0, r5
 8004814:	f7fb fcdc 	bl	80001d0 <memchr>
 8004818:	b108      	cbz	r0, 800481e <_printf_i+0x1ea>
 800481a:	1b40      	subs	r0, r0, r5
 800481c:	6060      	str	r0, [r4, #4]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	2300      	movs	r3, #0
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	e7aa      	b.n	8004780 <_printf_i+0x14c>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	462a      	mov	r2, r5
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d0ad      	beq.n	8004794 <_printf_i+0x160>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	079b      	lsls	r3, r3, #30
 800483c:	d413      	bmi.n	8004866 <_printf_i+0x232>
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	4298      	cmp	r0, r3
 8004844:	bfb8      	it	lt
 8004846:	4618      	movlt	r0, r3
 8004848:	e7a6      	b.n	8004798 <_printf_i+0x164>
 800484a:	2301      	movs	r3, #1
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d09d      	beq.n	8004794 <_printf_i+0x160>
 8004858:	3501      	adds	r5, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	9903      	ldr	r1, [sp, #12]
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	42ab      	cmp	r3, r5
 8004862:	dcf2      	bgt.n	800484a <_printf_i+0x216>
 8004864:	e7eb      	b.n	800483e <_printf_i+0x20a>
 8004866:	2500      	movs	r5, #0
 8004868:	f104 0619 	add.w	r6, r4, #25
 800486c:	e7f5      	b.n	800485a <_printf_i+0x226>
 800486e:	bf00      	nop
 8004870:	08004e19 	.word	0x08004e19
 8004874:	08004e2a 	.word	0x08004e2a

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d458      	bmi.n	8004938 <__sflush_r+0xc0>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	6a21      	ldr	r1, [r4, #32]
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	d032      	beq.n	8004912 <__sflush_r+0x9a>
 80048ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	075a      	lsls	r2, r3, #29
 80048b2:	d505      	bpl.n	80048c0 <__sflush_r+0x48>
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	1ac0      	subs	r0, r0, r3
 80048b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ba:	b10b      	cbz	r3, 80048c0 <__sflush_r+0x48>
 80048bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048be:	1ac0      	subs	r0, r0, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	4602      	mov	r2, r0
 80048c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c6:	6a21      	ldr	r1, [r4, #32]
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b0      	blx	r6
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	d106      	bne.n	80048e0 <__sflush_r+0x68>
 80048d2:	6829      	ldr	r1, [r5, #0]
 80048d4:	291d      	cmp	r1, #29
 80048d6:	d82b      	bhi.n	8004930 <__sflush_r+0xb8>
 80048d8:	4a29      	ldr	r2, [pc, #164]	; (8004980 <__sflush_r+0x108>)
 80048da:	410a      	asrs	r2, r1
 80048dc:	07d6      	lsls	r6, r2, #31
 80048de:	d427      	bmi.n	8004930 <__sflush_r+0xb8>
 80048e0:	2200      	movs	r2, #0
 80048e2:	6062      	str	r2, [r4, #4]
 80048e4:	04d9      	lsls	r1, r3, #19
 80048e6:	6922      	ldr	r2, [r4, #16]
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	d504      	bpl.n	80048f6 <__sflush_r+0x7e>
 80048ec:	1c42      	adds	r2, r0, #1
 80048ee:	d101      	bne.n	80048f4 <__sflush_r+0x7c>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b903      	cbnz	r3, 80048f6 <__sflush_r+0x7e>
 80048f4:	6560      	str	r0, [r4, #84]	; 0x54
 80048f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f8:	602f      	str	r7, [r5, #0]
 80048fa:	2900      	cmp	r1, #0
 80048fc:	d0c9      	beq.n	8004892 <__sflush_r+0x1a>
 80048fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004902:	4299      	cmp	r1, r3
 8004904:	d002      	beq.n	800490c <__sflush_r+0x94>
 8004906:	4628      	mov	r0, r5
 8004908:	f7ff fbea 	bl	80040e0 <_free_r>
 800490c:	2000      	movs	r0, #0
 800490e:	6360      	str	r0, [r4, #52]	; 0x34
 8004910:	e7c0      	b.n	8004894 <__sflush_r+0x1c>
 8004912:	2301      	movs	r3, #1
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	1c41      	adds	r1, r0, #1
 800491a:	d1c8      	bne.n	80048ae <__sflush_r+0x36>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c5      	beq.n	80048ae <__sflush_r+0x36>
 8004922:	2b1d      	cmp	r3, #29
 8004924:	d001      	beq.n	800492a <__sflush_r+0xb2>
 8004926:	2b16      	cmp	r3, #22
 8004928:	d101      	bne.n	800492e <__sflush_r+0xb6>
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	e7b1      	b.n	8004892 <__sflush_r+0x1a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7ad      	b.n	8004894 <__sflush_r+0x1c>
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	2f00      	cmp	r7, #0
 800493c:	d0a9      	beq.n	8004892 <__sflush_r+0x1a>
 800493e:	0793      	lsls	r3, r2, #30
 8004940:	680e      	ldr	r6, [r1, #0]
 8004942:	bf08      	it	eq
 8004944:	694b      	ldreq	r3, [r1, #20]
 8004946:	600f      	str	r7, [r1, #0]
 8004948:	bf18      	it	ne
 800494a:	2300      	movne	r3, #0
 800494c:	eba6 0807 	sub.w	r8, r6, r7
 8004950:	608b      	str	r3, [r1, #8]
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	dd9c      	ble.n	8004892 <__sflush_r+0x1a>
 8004958:	6a21      	ldr	r1, [r4, #32]
 800495a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800495c:	4643      	mov	r3, r8
 800495e:	463a      	mov	r2, r7
 8004960:	4628      	mov	r0, r5
 8004962:	47b0      	blx	r6
 8004964:	2800      	cmp	r0, #0
 8004966:	dc06      	bgt.n	8004976 <__sflush_r+0xfe>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004974:	e78e      	b.n	8004894 <__sflush_r+0x1c>
 8004976:	4407      	add	r7, r0
 8004978:	eba8 0800 	sub.w	r8, r8, r0
 800497c:	e7e9      	b.n	8004952 <__sflush_r+0xda>
 800497e:	bf00      	nop
 8004980:	dfbffffe 	.word	0xdfbffffe

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6a03      	ldr	r3, [r0, #32]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f7ff fa93 	bl	8003ec4 <__sinit>
 800499e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f3      	beq.n	800498e <_fflush_r+0xa>
 80049a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049a8:	07d0      	lsls	r0, r2, #31
 80049aa:	d404      	bmi.n	80049b6 <_fflush_r+0x32>
 80049ac:	0599      	lsls	r1, r3, #22
 80049ae:	d402      	bmi.n	80049b6 <_fflush_r+0x32>
 80049b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049b2:	f7ff fb93 	bl	80040dc <__retarget_lock_acquire_recursive>
 80049b6:	4628      	mov	r0, r5
 80049b8:	4621      	mov	r1, r4
 80049ba:	f7ff ff5d 	bl	8004878 <__sflush_r>
 80049be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c0:	07da      	lsls	r2, r3, #31
 80049c2:	4605      	mov	r5, r0
 80049c4:	d4e4      	bmi.n	8004990 <_fflush_r+0xc>
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	059b      	lsls	r3, r3, #22
 80049ca:	d4e1      	bmi.n	8004990 <_fflush_r+0xc>
 80049cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ce:	f7ff fb86 	bl	80040de <__retarget_lock_release_recursive>
 80049d2:	e7dd      	b.n	8004990 <_fflush_r+0xc>

080049d4 <_putc_r>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	460d      	mov	r5, r1
 80049d8:	4614      	mov	r4, r2
 80049da:	4606      	mov	r6, r0
 80049dc:	b118      	cbz	r0, 80049e6 <_putc_r+0x12>
 80049de:	6a03      	ldr	r3, [r0, #32]
 80049e0:	b90b      	cbnz	r3, 80049e6 <_putc_r+0x12>
 80049e2:	f7ff fa6f 	bl	8003ec4 <__sinit>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07d8      	lsls	r0, r3, #31
 80049ea:	d405      	bmi.n	80049f8 <_putc_r+0x24>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	0599      	lsls	r1, r3, #22
 80049f0:	d402      	bmi.n	80049f8 <_putc_r+0x24>
 80049f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f4:	f7ff fb72 	bl	80040dc <__retarget_lock_acquire_recursive>
 80049f8:	68a3      	ldr	r3, [r4, #8]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	da05      	bge.n	8004a0e <_putc_r+0x3a>
 8004a02:	69a2      	ldr	r2, [r4, #24]
 8004a04:	4293      	cmp	r3, r2
 8004a06:	db12      	blt.n	8004a2e <_putc_r+0x5a>
 8004a08:	b2eb      	uxtb	r3, r5
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d00f      	beq.n	8004a2e <_putc_r+0x5a>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	6022      	str	r2, [r4, #0]
 8004a14:	701d      	strb	r5, [r3, #0]
 8004a16:	b2ed      	uxtb	r5, r5
 8004a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a1a:	07da      	lsls	r2, r3, #31
 8004a1c:	d405      	bmi.n	8004a2a <_putc_r+0x56>
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	059b      	lsls	r3, r3, #22
 8004a22:	d402      	bmi.n	8004a2a <_putc_r+0x56>
 8004a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a26:	f7ff fb5a 	bl	80040de <__retarget_lock_release_recursive>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4622      	mov	r2, r4
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 f802 	bl	8004a3c <__swbuf_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	e7ed      	b.n	8004a18 <_putc_r+0x44>

08004a3c <__swbuf_r>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	460e      	mov	r6, r1
 8004a40:	4614      	mov	r4, r2
 8004a42:	4605      	mov	r5, r0
 8004a44:	b118      	cbz	r0, 8004a4e <__swbuf_r+0x12>
 8004a46:	6a03      	ldr	r3, [r0, #32]
 8004a48:	b90b      	cbnz	r3, 8004a4e <__swbuf_r+0x12>
 8004a4a:	f7ff fa3b 	bl	8003ec4 <__sinit>
 8004a4e:	69a3      	ldr	r3, [r4, #24]
 8004a50:	60a3      	str	r3, [r4, #8]
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	071a      	lsls	r2, r3, #28
 8004a56:	d525      	bpl.n	8004aa4 <__swbuf_r+0x68>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	b31b      	cbz	r3, 8004aa4 <__swbuf_r+0x68>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	6922      	ldr	r2, [r4, #16]
 8004a60:	1a98      	subs	r0, r3, r2
 8004a62:	6963      	ldr	r3, [r4, #20]
 8004a64:	b2f6      	uxtb	r6, r6
 8004a66:	4283      	cmp	r3, r0
 8004a68:	4637      	mov	r7, r6
 8004a6a:	dc04      	bgt.n	8004a76 <__swbuf_r+0x3a>
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7ff ff88 	bl	8004984 <_fflush_r>
 8004a74:	b9e0      	cbnz	r0, 8004ab0 <__swbuf_r+0x74>
 8004a76:	68a3      	ldr	r3, [r4, #8]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	60a3      	str	r3, [r4, #8]
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	701e      	strb	r6, [r3, #0]
 8004a84:	6962      	ldr	r2, [r4, #20]
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d004      	beq.n	8004a96 <__swbuf_r+0x5a>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	07db      	lsls	r3, r3, #31
 8004a90:	d506      	bpl.n	8004aa0 <__swbuf_r+0x64>
 8004a92:	2e0a      	cmp	r6, #10
 8004a94:	d104      	bne.n	8004aa0 <__swbuf_r+0x64>
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7ff ff73 	bl	8004984 <_fflush_r>
 8004a9e:	b938      	cbnz	r0, 8004ab0 <__swbuf_r+0x74>
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 f806 	bl	8004ab8 <__swsetup_r>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d0d5      	beq.n	8004a5c <__swbuf_r+0x20>
 8004ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ab4:	e7f4      	b.n	8004aa0 <__swbuf_r+0x64>
	...

08004ab8 <__swsetup_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <__swsetup_r+0xac>)
 8004abc:	4605      	mov	r5, r0
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	b118      	cbz	r0, 8004acc <__swsetup_r+0x14>
 8004ac4:	6a03      	ldr	r3, [r0, #32]
 8004ac6:	b90b      	cbnz	r3, 8004acc <__swsetup_r+0x14>
 8004ac8:	f7ff f9fc 	bl	8003ec4 <__sinit>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad2:	0718      	lsls	r0, r3, #28
 8004ad4:	d422      	bmi.n	8004b1c <__swsetup_r+0x64>
 8004ad6:	06d9      	lsls	r1, r3, #27
 8004ad8:	d407      	bmi.n	8004aea <__swsetup_r+0x32>
 8004ada:	2309      	movs	r3, #9
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ae8:	e034      	b.n	8004b54 <__swsetup_r+0x9c>
 8004aea:	0758      	lsls	r0, r3, #29
 8004aec:	d512      	bpl.n	8004b14 <__swsetup_r+0x5c>
 8004aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af0:	b141      	cbz	r1, 8004b04 <__swsetup_r+0x4c>
 8004af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d002      	beq.n	8004b00 <__swsetup_r+0x48>
 8004afa:	4628      	mov	r0, r5
 8004afc:	f7ff faf0 	bl	80040e0 <_free_r>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6363      	str	r3, [r4, #52]	; 0x34
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	b94b      	cbnz	r3, 8004b34 <__swsetup_r+0x7c>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d003      	beq.n	8004b34 <__swsetup_r+0x7c>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f850 	bl	8004bd4 <__smakebuf_r>
 8004b34:	89a0      	ldrh	r0, [r4, #12]
 8004b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3a:	f010 0301 	ands.w	r3, r0, #1
 8004b3e:	d00a      	beq.n	8004b56 <__swsetup_r+0x9e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	60a3      	str	r3, [r4, #8]
 8004b44:	6963      	ldr	r3, [r4, #20]
 8004b46:	425b      	negs	r3, r3
 8004b48:	61a3      	str	r3, [r4, #24]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	b943      	cbnz	r3, 8004b60 <__swsetup_r+0xa8>
 8004b4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b52:	d1c4      	bne.n	8004ade <__swsetup_r+0x26>
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
 8004b56:	0781      	lsls	r1, r0, #30
 8004b58:	bf58      	it	pl
 8004b5a:	6963      	ldrpl	r3, [r4, #20]
 8004b5c:	60a3      	str	r3, [r4, #8]
 8004b5e:	e7f4      	b.n	8004b4a <__swsetup_r+0x92>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e7f7      	b.n	8004b54 <__swsetup_r+0x9c>
 8004b64:	20000064 	.word	0x20000064

08004b68 <_sbrk_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	; (8004b84 <_sbrk_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc fa3c 	bl	8000ff0 <_sbrk>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_sbrk_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_sbrk_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000270 	.word	0x20000270

08004b88 <__swhatbuf_r>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b90:	2900      	cmp	r1, #0
 8004b92:	b096      	sub	sp, #88	; 0x58
 8004b94:	4615      	mov	r5, r2
 8004b96:	461e      	mov	r6, r3
 8004b98:	da0d      	bge.n	8004bb6 <__swhatbuf_r+0x2e>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004baa:	2340      	movne	r3, #64	; 0x40
 8004bac:	2000      	movs	r0, #0
 8004bae:	6031      	str	r1, [r6, #0]
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	b016      	add	sp, #88	; 0x58
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	f000 f848 	bl	8004c4c <_fstat_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dbec      	blt.n	8004b9a <__swhatbuf_r+0x12>
 8004bc0:	9901      	ldr	r1, [sp, #4]
 8004bc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004bc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bca:	4259      	negs	r1, r3
 8004bcc:	4159      	adcs	r1, r3
 8004bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd2:	e7eb      	b.n	8004bac <__swhatbuf_r+0x24>

08004bd4 <__smakebuf_r>:
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bd8:	079d      	lsls	r5, r3, #30
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	d507      	bpl.n	8004bf0 <__smakebuf_r+0x1c>
 8004be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	2301      	movs	r3, #1
 8004bea:	6163      	str	r3, [r4, #20]
 8004bec:	b002      	add	sp, #8
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	ab01      	add	r3, sp, #4
 8004bf2:	466a      	mov	r2, sp
 8004bf4:	f7ff ffc8 	bl	8004b88 <__swhatbuf_r>
 8004bf8:	9900      	ldr	r1, [sp, #0]
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7ff fadb 	bl	80041b8 <_malloc_r>
 8004c02:	b948      	cbnz	r0, 8004c18 <__smakebuf_r+0x44>
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	059a      	lsls	r2, r3, #22
 8004c0a:	d4ef      	bmi.n	8004bec <__smakebuf_r+0x18>
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	e7e3      	b.n	8004be0 <__smakebuf_r+0xc>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	6020      	str	r0, [r4, #0]
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	9b00      	ldr	r3, [sp, #0]
 8004c24:	6163      	str	r3, [r4, #20]
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	6120      	str	r0, [r4, #16]
 8004c2a:	b15b      	cbz	r3, 8004c44 <__smakebuf_r+0x70>
 8004c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f81d 	bl	8004c70 <_isatty_r>
 8004c36:	b128      	cbz	r0, 8004c44 <__smakebuf_r+0x70>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	431d      	orrs	r5, r3
 8004c48:	81a5      	strh	r5, [r4, #12]
 8004c4a:	e7cf      	b.n	8004bec <__smakebuf_r+0x18>

08004c4c <_fstat_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	; (8004c6c <_fstat_r+0x20>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	602b      	str	r3, [r5, #0]
 8004c5a:	f7fc f9a0 	bl	8000f9e <_fstat>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d102      	bne.n	8004c68 <_fstat_r+0x1c>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b103      	cbz	r3, 8004c68 <_fstat_r+0x1c>
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000270 	.word	0x20000270

08004c70 <_isatty_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d06      	ldr	r5, [pc, #24]	; (8004c8c <_isatty_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fc f99f 	bl	8000fbe <_isatty>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_isatty_r+0x1a>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_isatty_r+0x1a>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	20000270 	.word	0x20000270

08004c90 <_init>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr

08004c9c <_fini>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr
