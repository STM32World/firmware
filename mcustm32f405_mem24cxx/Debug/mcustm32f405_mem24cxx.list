
mcustm32f405_mem24cxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003978  08003978  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ec73  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc6  00000000  00000000  0002ed4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00006e5e  00000000  00000000  00030b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009d0  00000000  00000000  00037978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000803  00000000  00000000  00038348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fced  00000000  00000000  00038b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011cd5  00000000  00000000  00058838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bbea8  00000000  00000000  0006a50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000231c  00000000  00000000  001263b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001286d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037c4 	.word	0x080037c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080037c4 	.word	0x080037c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000570:	2400      	movs	r4, #0
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]
 8000578:	9408      	str	r4, [sp, #32]
 800057a:	9409      	str	r4, [sp, #36]	; 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	9401      	str	r4, [sp, #4]
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_GPIO_Init+0xa0>)
 8000580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000582:	f042 0204 	orr.w	r2, r2, #4
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	f002 0204 	and.w	r2, r2, #4
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	9402      	str	r4, [sp, #8]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005a2:	9202      	str	r2, [sp, #8]
 80005a4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0201 	orr.w	r2, r2, #1
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0201 	and.w	r2, r2, #1
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | EEPROM_WP_Pin, GPIO_PIN_SET);
 80005ce:	4d10      	ldr	r5, [pc, #64]	; (8000610 <MX_GPIO_Init+0xa4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 fdde 	bl	8001198 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e2:	2311      	movs	r3, #17
 80005e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	a905      	add	r1, sp, #20
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 fcdd 	bl	8000fac <HAL_GPIO_Init>

    /*Configure GPIO pin : EEPROM_WP_Pin */
    GPIO_InitStruct.Pin = EEPROM_WP_Pin;
 80005f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(EEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8000600:	a905      	add	r1, sp, #20
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fcd2 	bl	8000fac <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000608:	b00b      	add	sp, #44	; 0x2c
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020800 	.word	0x40020800

08000614 <_write>:
    if (fd == 1 || fd == 2) {
 8000614:	3801      	subs	r0, #1
 8000616:	2801      	cmp	r0, #1
 8000618:	d80a      	bhi.n	8000630 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800061a:	b510      	push	{r4, lr}
 800061c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	b292      	uxth	r2, r2
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <_write+0x28>)
 8000626:	f002 f812 	bl	800264e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800062a:	b920      	cbnz	r0, 8000636 <_write+0x22>
            return len;
 800062c:	4620      	mov	r0, r4
}
 800062e:	bd10      	pop	{r4, pc}
    return -1;
 8000630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000634:	4770      	bx	lr
            return -1;
 8000636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063a:	e7f8      	b.n	800062e <_write+0x1a>
 800063c:	200000e0 	.word	0x200000e0

08000640 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x2>

08000644 <MX_I2C1_Init>:
static void MX_I2C1_Init(void) {
 8000644:	b508      	push	{r3, lr}
    hi2c1.Instance = I2C1;
 8000646:	480a      	ldr	r0, [pc, #40]	; (8000670 <MX_I2C1_Init+0x2c>)
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x30>)
 800064a:	6003      	str	r3, [r0, #0]
    hi2c1.Init.ClockSpeed = 400000;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x34>)
 800064e:	6043      	str	r3, [r0, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	2300      	movs	r3, #0
 8000652:	6083      	str	r3, [r0, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000654:	60c3      	str	r3, [r0, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	6102      	str	r2, [r0, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	6143      	str	r3, [r0, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800065e:	6183      	str	r3, [r0, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	61c3      	str	r3, [r0, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	6203      	str	r3, [r0, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000664:	f000 fff4 	bl	8001650 <HAL_I2C_Init>
 8000668:	b900      	cbnz	r0, 800066c <MX_I2C1_Init+0x28>
}
 800066a:	bd08      	pop	{r3, pc}
        Error_Handler();
 800066c:	f7ff ffe8 	bl	8000640 <Error_Handler>
 8000670:	2000008c 	.word	0x2000008c
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 800067c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <MX_USART1_UART_Init+0x2c>)
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_USART1_UART_Init+0x30>)
 8000682:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000684:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000688:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	2300      	movs	r3, #0
 800068c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800068e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000690:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000692:	220c      	movs	r2, #12
 8000694:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800069a:	f001 ffa9 	bl	80025f0 <HAL_UART_Init>
 800069e:	b900      	cbnz	r0, 80006a2 <MX_USART1_UART_Init+0x26>
}
 80006a0:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006a2:	f7ff ffcd 	bl	8000640 <Error_Handler>
 80006a6:	bf00      	nop
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	40011000 	.word	0x40011000

080006b0 <MX_CRC_Init>:
static void MX_CRC_Init(void) {
 80006b0:	b508      	push	{r3, lr}
    hcrc.Instance = CRC;
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CRC_Init+0x14>)
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MX_CRC_Init+0x18>)
 80006b6:	6003      	str	r3, [r0, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80006b8:	f000 fc26 	bl	8000f08 <HAL_CRC_Init>
 80006bc:	b900      	cbnz	r0, 80006c0 <MX_CRC_Init+0x10>
}
 80006be:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006c0:	f7ff ffbe 	bl	8000640 <Error_Handler>
 80006c4:	20000084 	.word	0x20000084
 80006c8:	40023000 	.word	0x40023000

080006cc <SystemClock_Config>:
void SystemClock_Config(void) {
 80006cc:	b500      	push	{lr}
 80006ce:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006d0:	2230      	movs	r2, #48	; 0x30
 80006d2:	2100      	movs	r1, #0
 80006d4:	a808      	add	r0, sp, #32
 80006d6:	f002 fa22 	bl	8002b1e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006da:	2300      	movs	r3, #0
 80006dc:	9303      	str	r3, [sp, #12]
 80006de:	9304      	str	r3, [sp, #16]
 80006e0:	9305      	str	r3, [sp, #20]
 80006e2:	9306      	str	r3, [sp, #24]
 80006e4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xa0>)
 80006ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80006ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80006f0:	6411      	str	r1, [r2, #64]	; 0x40
 80006f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <SystemClock_Config+0xa4>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000724:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000726:	2208      	movs	r2, #8
 8000728:	9210      	str	r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800072a:	22a8      	movs	r2, #168	; 0xa8
 800072c:	9211      	str	r2, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	a808      	add	r0, sp, #32
 8000736:	f001 fb57 	bl	8001de8 <HAL_RCC_OscConfig>
 800073a:	b998      	cbnz	r0, 8000764 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800073c:	230f      	movs	r3, #15
 800073e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000754:	2105      	movs	r1, #5
 8000756:	a803      	add	r0, sp, #12
 8000758:	f001 fdaa 	bl	80022b0 <HAL_RCC_ClockConfig>
 800075c:	b920      	cbnz	r0, 8000768 <SystemClock_Config+0x9c>
}
 800075e:	b015      	add	sp, #84	; 0x54
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000764:	f7ff ff6c 	bl	8000640 <Error_Handler>
        Error_Handler();
 8000768:	f7ff ff6a 	bl	8000640 <Error_Handler>
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <main>:
int main(void) {
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	b0c0      	sub	sp, #256	; 0x100
    HAL_Init();
 8000778:	f000 fb28 	bl	8000dcc <HAL_Init>
    SystemClock_Config();
 800077c:	f7ff ffa6 	bl	80006cc <SystemClock_Config>
    MX_GPIO_Init();
 8000780:	f7ff fef4 	bl	800056c <MX_GPIO_Init>
    MX_I2C1_Init();
 8000784:	f7ff ff5e 	bl	8000644 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000788:	f7ff ff78 	bl	800067c <MX_USART1_UART_Init>
    MX_CRC_Init();
 800078c:	f7ff ff90 	bl	80006b0 <MX_CRC_Init>
    DBG("\n\n\n--------\nStarting");
 8000790:	48c4      	ldr	r0, [pc, #784]	; (8000aa4 <main+0x330>)
 8000792:	f002 f967 	bl	8002a64 <iprintf>
 8000796:	200a      	movs	r0, #10
 8000798:	f002 f976 	bl	8002a88 <putchar>
    HAL_Delay(10);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 fb41 	bl	8000e24 <HAL_Delay>
    DBG("Scanning I2C bus:");
 80007a2:	48c1      	ldr	r0, [pc, #772]	; (8000aa8 <main+0x334>)
 80007a4:	f002 f95e 	bl	8002a64 <iprintf>
 80007a8:	200a      	movs	r0, #10
 80007aa:	f002 f96d 	bl	8002a88 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80007ae:	2400      	movs	r4, #0
 80007b0:	e005      	b.n	80007be <main+0x4a>
            printf("-- ");
 80007b2:	48be      	ldr	r0, [pc, #760]	; (8000aac <main+0x338>)
 80007b4:	f002 f956 	bl	8002a64 <iprintf>
 80007b8:	e010      	b.n	80007dc <main+0x68>
    for (uint8_t i = 0; i < 128; i++) {
 80007ba:	3401      	adds	r4, #1
 80007bc:	b2e4      	uxtb	r4, r4
 80007be:	f014 0f80 	tst.w	r4, #128	; 0x80
 80007c2:	d115      	bne.n	80007f0 <main+0x7c>
        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2203      	movs	r2, #3
 80007c8:	0061      	lsls	r1, r4, #1
 80007ca:	48b9      	ldr	r0, [pc, #740]	; (8000ab0 <main+0x33c>)
 80007cc:	f001 fa42 	bl	8001c54 <HAL_I2C_IsDeviceReady>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d1ee      	bne.n	80007b2 <main+0x3e>
            printf("%2x ", i);
 80007d4:	4621      	mov	r1, r4
 80007d6:	48b7      	ldr	r0, [pc, #732]	; (8000ab4 <main+0x340>)
 80007d8:	f002 f944 	bl	8002a64 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0)
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d0ec      	beq.n	80007ba <main+0x46>
 80007e0:	1c63      	adds	r3, r4, #1
 80007e2:	f013 0f0f 	tst.w	r3, #15
 80007e6:	d1e8      	bne.n	80007ba <main+0x46>
            printf("\n");
 80007e8:	200a      	movs	r0, #10
 80007ea:	f002 f94d 	bl	8002a88 <putchar>
 80007ee:	e7e4      	b.n	80007ba <main+0x46>
    printf("\n");
 80007f0:	200a      	movs	r0, #10
 80007f2:	f002 f949 	bl	8002a88 <putchar>
    DBG("Initializing %s - %u kB EEPROM", M24CXX_TYPE, M24CXX_SIZE / 1024);
 80007f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fa:	49af      	ldr	r1, [pc, #700]	; (8000ab8 <main+0x344>)
 80007fc:	48af      	ldr	r0, [pc, #700]	; (8000abc <main+0x348>)
 80007fe:	f002 f931 	bl	8002a64 <iprintf>
 8000802:	200a      	movs	r0, #10
 8000804:	f002 f940 	bl	8002a88 <putchar>
    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000808:	2250      	movs	r2, #80	; 0x50
 800080a:	49a9      	ldr	r1, [pc, #676]	; (8000ab0 <main+0x33c>)
 800080c:	48ac      	ldr	r0, [pc, #688]	; (8000ac0 <main+0x34c>)
 800080e:	f001 ffaf 	bl	8002770 <m24cxx_init>
 8000812:	b138      	cbz	r0, 8000824 <main+0xb0>
        DBG("M24CXX Failed to initialize");
 8000814:	48ab      	ldr	r0, [pc, #684]	; (8000ac4 <main+0x350>)
 8000816:	f002 f925 	bl	8002a64 <iprintf>
 800081a:	200a      	movs	r0, #10
 800081c:	f002 f934 	bl	8002a88 <putchar>
        Error_Handler();
 8000820:	f7ff ff0e 	bl	8000640 <Error_Handler>
    DBG("Erasing all");
 8000824:	48a8      	ldr	r0, [pc, #672]	; (8000ac8 <main+0x354>)
 8000826:	f002 f91d 	bl	8002a64 <iprintf>
 800082a:	200a      	movs	r0, #10
 800082c:	f002 f92c 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 8000830:	f000 faf2 	bl	8000e18 <HAL_GetTick>
 8000834:	4604      	mov	r4, r0
    if (m24cxx_erase_all(&m24cxx) != M24CXX_Ok) {
 8000836:	48a2      	ldr	r0, [pc, #648]	; (8000ac0 <main+0x34c>)
 8000838:	f002 f848 	bl	80028cc <m24cxx_erase_all>
 800083c:	b138      	cbz	r0, 800084e <main+0xda>
        DBG("Erase all failed");
 800083e:	48a3      	ldr	r0, [pc, #652]	; (8000acc <main+0x358>)
 8000840:	f002 f910 	bl	8002a64 <iprintf>
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f91f 	bl	8002a88 <putchar>
        Error_Handler();
 800084a:	f7ff fef9 	bl	8000640 <Error_Handler>
    DBG("Erase all took - %lu s", (HAL_GetTick() - start_time) / 1000);
 800084e:	f000 fae3 	bl	8000e18 <HAL_GetTick>
 8000852:	1b00      	subs	r0, r0, r4
 8000854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000858:	fbb0 f1f1 	udiv	r1, r0, r1
 800085c:	489c      	ldr	r0, [pc, #624]	; (8000ad0 <main+0x35c>)
 800085e:	f002 f901 	bl	8002a64 <iprintf>
 8000862:	200a      	movs	r0, #10
 8000864:	f002 f910 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 8000868:	f000 fad6 	bl	8000e18 <HAL_GetTick>
 800086c:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 800086e:	2400      	movs	r4, #0
    uint32_t crc = 0;
 8000870:	4625      	mov	r5, r4
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000872:	e00e      	b.n	8000892 <main+0x11e>
            DBG("Read Error");
 8000874:	4897      	ldr	r0, [pc, #604]	; (8000ad4 <main+0x360>)
 8000876:	f002 f8f5 	bl	8002a64 <iprintf>
 800087a:	200a      	movs	r0, #10
 800087c:	f002 f904 	bl	8002a88 <putchar>
            Error_Handler();
 8000880:	f7ff fede 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	4669      	mov	r1, sp
 8000888:	4893      	ldr	r0, [pc, #588]	; (8000ad8 <main+0x364>)
 800088a:	f000 fb6a 	bl	8000f62 <HAL_CRC_Calculate>
 800088e:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000890:	3401      	adds	r4, #1
 8000892:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000896:	d211      	bcs.n	80008bc <main+0x148>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089c:	466a      	mov	r2, sp
 800089e:	0221      	lsls	r1, r4, #8
 80008a0:	4887      	ldr	r0, [pc, #540]	; (8000ac0 <main+0x34c>)
 80008a2:	f001 ff79 	bl	8002798 <m24cxx_read>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d1e4      	bne.n	8000874 <main+0x100>
        if (i == 0)
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	d0ea      	beq.n	8000884 <main+0x110>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80008ae:	2240      	movs	r2, #64	; 0x40
 80008b0:	4669      	mov	r1, sp
 80008b2:	4889      	ldr	r0, [pc, #548]	; (8000ad8 <main+0x364>)
 80008b4:	f000 fb37 	bl	8000f26 <HAL_CRC_Accumulate>
 80008b8:	4605      	mov	r5, r0
 80008ba:	e7e9      	b.n	8000890 <main+0x11c>
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80008bc:	f000 faac 	bl	8000e18 <HAL_GetTick>
 80008c0:	1b80      	subs	r0, r0, r6
 80008c2:	462a      	mov	r2, r5
 80008c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c8:	fbb0 f1f1 	udiv	r1, r0, r1
 80008cc:	4883      	ldr	r0, [pc, #524]	; (8000adc <main+0x368>)
 80008ce:	f002 f8c9 	bl	8002a64 <iprintf>
 80008d2:	200a      	movs	r0, #10
 80008d4:	f002 f8d8 	bl	8002a88 <putchar>
    memset(buf, 0x00, sizeof(buf));
 80008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008dc:	2100      	movs	r1, #0
 80008de:	4668      	mov	r0, sp
 80008e0:	f002 f91d 	bl	8002b1e <memset>
    DBG("Writing all zeros");
 80008e4:	487e      	ldr	r0, [pc, #504]	; (8000ae0 <main+0x36c>)
 80008e6:	f002 f8bd 	bl	8002a64 <iprintf>
 80008ea:	200a      	movs	r0, #10
 80008ec:	f002 f8cc 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 80008f0:	f000 fa92 	bl	8000e18 <HAL_GetTick>
 80008f4:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80008f6:	2400      	movs	r4, #0
 80008f8:	e00e      	b.n	8000918 <main+0x1a4>
            DBG("Write Error");
 80008fa:	487a      	ldr	r0, [pc, #488]	; (8000ae4 <main+0x370>)
 80008fc:	f002 f8b2 	bl	8002a64 <iprintf>
 8000900:	200a      	movs	r0, #10
 8000902:	f002 f8c1 	bl	8002a88 <putchar>
            Error_Handler();
 8000906:	f7ff fe9b 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	4669      	mov	r1, sp
 800090e:	4872      	ldr	r0, [pc, #456]	; (8000ad8 <main+0x364>)
 8000910:	f000 fb27 	bl	8000f62 <HAL_CRC_Calculate>
 8000914:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000916:	3401      	adds	r4, #1
 8000918:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800091c:	d211      	bcs.n	8000942 <main+0x1ce>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800091e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000922:	466a      	mov	r2, sp
 8000924:	0221      	lsls	r1, r4, #8
 8000926:	4866      	ldr	r0, [pc, #408]	; (8000ac0 <main+0x34c>)
 8000928:	f001 ff76 	bl	8002818 <m24cxx_write>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1e4      	bne.n	80008fa <main+0x186>
        if (i == 0)
 8000930:	2c00      	cmp	r4, #0
 8000932:	d0ea      	beq.n	800090a <main+0x196>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	4669      	mov	r1, sp
 8000938:	4867      	ldr	r0, [pc, #412]	; (8000ad8 <main+0x364>)
 800093a:	f000 faf4 	bl	8000f26 <HAL_CRC_Accumulate>
 800093e:	4605      	mov	r5, r0
 8000940:	e7e9      	b.n	8000916 <main+0x1a2>
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000942:	f000 fa69 	bl	8000e18 <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	462a      	mov	r2, r5
 800094a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800094e:	fbb0 f1f1 	udiv	r1, r0, r1
 8000952:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <main+0x374>)
 8000954:	f002 f886 	bl	8002a64 <iprintf>
 8000958:	200a      	movs	r0, #10
 800095a:	f002 f895 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 800095e:	f000 fa5b 	bl	8000e18 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000964:	2400      	movs	r4, #0
 8000966:	e00e      	b.n	8000986 <main+0x212>
            DBG("Read Error");
 8000968:	485a      	ldr	r0, [pc, #360]	; (8000ad4 <main+0x360>)
 800096a:	f002 f87b 	bl	8002a64 <iprintf>
 800096e:	200a      	movs	r0, #10
 8000970:	f002 f88a 	bl	8002a88 <putchar>
            Error_Handler();
 8000974:	f7ff fe64 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	4669      	mov	r1, sp
 800097c:	4856      	ldr	r0, [pc, #344]	; (8000ad8 <main+0x364>)
 800097e:	f000 faf0 	bl	8000f62 <HAL_CRC_Calculate>
 8000982:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000984:	3401      	adds	r4, #1
 8000986:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800098a:	d211      	bcs.n	80009b0 <main+0x23c>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	466a      	mov	r2, sp
 8000992:	0221      	lsls	r1, r4, #8
 8000994:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <main+0x34c>)
 8000996:	f001 feff 	bl	8002798 <m24cxx_read>
 800099a:	2800      	cmp	r0, #0
 800099c:	d1e4      	bne.n	8000968 <main+0x1f4>
        if (i == 0)
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d0ea      	beq.n	8000978 <main+0x204>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	4669      	mov	r1, sp
 80009a6:	484c      	ldr	r0, [pc, #304]	; (8000ad8 <main+0x364>)
 80009a8:	f000 fabd 	bl	8000f26 <HAL_CRC_Accumulate>
 80009ac:	4605      	mov	r5, r0
 80009ae:	e7e9      	b.n	8000984 <main+0x210>
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80009b0:	f000 fa32 	bl	8000e18 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	462a      	mov	r2, r5
 80009b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009bc:	fbb0 f1f1 	udiv	r1, r0, r1
 80009c0:	4846      	ldr	r0, [pc, #280]	; (8000adc <main+0x368>)
 80009c2:	f002 f84f 	bl	8002a64 <iprintf>
 80009c6:	200a      	movs	r0, #10
 80009c8:	f002 f85e 	bl	8002a88 <putchar>
    memset(buf, 0xaa, sizeof(buf));
 80009cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d0:	21aa      	movs	r1, #170	; 0xaa
 80009d2:	4668      	mov	r0, sp
 80009d4:	f002 f8a3 	bl	8002b1e <memset>
    DBG("Writing 10101010");
 80009d8:	4844      	ldr	r0, [pc, #272]	; (8000aec <main+0x378>)
 80009da:	f002 f843 	bl	8002a64 <iprintf>
 80009de:	200a      	movs	r0, #10
 80009e0:	f002 f852 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 80009e4:	f000 fa18 	bl	8000e18 <HAL_GetTick>
 80009e8:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80009ea:	2400      	movs	r4, #0
 80009ec:	e00e      	b.n	8000a0c <main+0x298>
            DBG("Write Error");
 80009ee:	483d      	ldr	r0, [pc, #244]	; (8000ae4 <main+0x370>)
 80009f0:	f002 f838 	bl	8002a64 <iprintf>
 80009f4:	200a      	movs	r0, #10
 80009f6:	f002 f847 	bl	8002a88 <putchar>
            Error_Handler();
 80009fa:	f7ff fe21 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	4669      	mov	r1, sp
 8000a02:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <main+0x364>)
 8000a04:	f000 faad 	bl	8000f62 <HAL_CRC_Calculate>
 8000a08:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a0a:	3401      	adds	r4, #1
 8000a0c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000a10:	d211      	bcs.n	8000a36 <main+0x2c2>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	466a      	mov	r2, sp
 8000a18:	0221      	lsls	r1, r4, #8
 8000a1a:	4829      	ldr	r0, [pc, #164]	; (8000ac0 <main+0x34c>)
 8000a1c:	f001 fefc 	bl	8002818 <m24cxx_write>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1e4      	bne.n	80009ee <main+0x27a>
        if (i == 0)
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d0ea      	beq.n	80009fe <main+0x28a>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	4669      	mov	r1, sp
 8000a2c:	482a      	ldr	r0, [pc, #168]	; (8000ad8 <main+0x364>)
 8000a2e:	f000 fa7a 	bl	8000f26 <HAL_CRC_Accumulate>
 8000a32:	4605      	mov	r5, r0
 8000a34:	e7e9      	b.n	8000a0a <main+0x296>
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000a36:	f000 f9ef 	bl	8000e18 <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	462a      	mov	r2, r5
 8000a3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a42:	fbb0 f1f1 	udiv	r1, r0, r1
 8000a46:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <main+0x374>)
 8000a48:	f002 f80c 	bl	8002a64 <iprintf>
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 f81b 	bl	8002a88 <putchar>
    start_time = HAL_GetTick();
 8000a52:	f000 f9e1 	bl	8000e18 <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a58:	2400      	movs	r4, #0
 8000a5a:	e00e      	b.n	8000a7a <main+0x306>
            DBG("Read Error");
 8000a5c:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <main+0x360>)
 8000a5e:	f002 f801 	bl	8002a64 <iprintf>
 8000a62:	200a      	movs	r0, #10
 8000a64:	f002 f810 	bl	8002a88 <putchar>
            Error_Handler();
 8000a68:	f7ff fdea 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a6c:	2240      	movs	r2, #64	; 0x40
 8000a6e:	4669      	mov	r1, sp
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <main+0x364>)
 8000a72:	f000 fa76 	bl	8000f62 <HAL_CRC_Calculate>
 8000a76:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a78:	3401      	adds	r4, #1
 8000a7a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000a7e:	d237      	bcs.n	8000af0 <main+0x37c>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	466a      	mov	r2, sp
 8000a86:	0221      	lsls	r1, r4, #8
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <main+0x34c>)
 8000a8a:	f001 fe85 	bl	8002798 <m24cxx_read>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d1e4      	bne.n	8000a5c <main+0x2e8>
        if (i == 0)
 8000a92:	2c00      	cmp	r4, #0
 8000a94:	d0ea      	beq.n	8000a6c <main+0x2f8>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	4669      	mov	r1, sp
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <main+0x364>)
 8000a9c:	f000 fa43 	bl	8000f26 <HAL_CRC_Accumulate>
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	e7e9      	b.n	8000a78 <main+0x304>
 8000aa4:	080037dc 	.word	0x080037dc
 8000aa8:	080037f4 	.word	0x080037f4
 8000aac:	08003810 	.word	0x08003810
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	08003808 	.word	0x08003808
 8000ab8:	08003814 	.word	0x08003814
 8000abc:	08003820 	.word	0x08003820
 8000ac0:	20000124 	.word	0x20000124
 8000ac4:	08003840 	.word	0x08003840
 8000ac8:	0800385c 	.word	0x0800385c
 8000acc:	08003868 	.word	0x08003868
 8000ad0:	0800387c 	.word	0x0800387c
 8000ad4:	08003894 	.word	0x08003894
 8000ad8:	20000084 	.word	0x20000084
 8000adc:	080038a0 	.word	0x080038a0
 8000ae0:	080038c8 	.word	0x080038c8
 8000ae4:	080038dc 	.word	0x080038dc
 8000ae8:	080038e8 	.word	0x080038e8
 8000aec:	08003910 	.word	0x08003910
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000af0:	f000 f992 	bl	8000e18 <HAL_GetTick>
 8000af4:	1b80      	subs	r0, r0, r6
 8000af6:	462a      	mov	r2, r5
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8000b00:	480a      	ldr	r0, [pc, #40]	; (8000b2c <main+0x3b8>)
 8000b02:	f001 ffaf 	bl	8002a64 <iprintf>
 8000b06:	200a      	movs	r0, #10
 8000b08:	f001 ffbe 	bl	8002a88 <putchar>
    uint32_t now = 0, last_blink = 0;
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	4625      	mov	r5, r4
        now = HAL_GetTick();
 8000b10:	f000 f982 	bl	8000e18 <HAL_GetTick>
 8000b14:	4604      	mov	r4, r0
        if (now - last_blink >= 500) {
 8000b16:	1b43      	subs	r3, r0, r5
 8000b18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b1c:	d3f8      	bcc.n	8000b10 <main+0x39c>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <main+0x3bc>)
 8000b24:	f000 fb3e 	bl	80011a4 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000b28:	e7f1      	b.n	8000b0e <main+0x39a>
 8000b2a:	bf00      	nop
 8000b2c:	080038a0 	.word	0x080038a0
 8000b30:	40020800 	.word	0x40020800

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2100      	movs	r1, #0
 8000b38:	9100      	str	r1, [sp, #0]
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_MspInit+0x34>)
 8000b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b42:	645a      	str	r2, [r3, #68]	; 0x44
 8000b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	9101      	str	r1, [sp, #4]
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	b002      	add	sp, #8
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000b6c:	6802      	ldr	r2, [r0, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_CRC_MspInit+0x28>)
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d000      	beq.n	8000b76 <HAL_CRC_MspInit+0xa>
 8000b74:	4770      	bx	lr
{
 8000b76:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_CRC_MspInit+0x2c>)
 8000b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b90:	b002      	add	sp, #8
 8000b92:	4770      	bx	lr
 8000b94:	40023000 	.word	0x40023000
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b530      	push	{r4, r5, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	9304      	str	r3, [sp, #16]
 8000ba6:	9305      	str	r3, [sp, #20]
 8000ba8:	9306      	str	r3, [sp, #24]
 8000baa:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000bac:	6802      	ldr	r2, [r0, #0]
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_I2C_MspInit+0x64>)
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d001      	beq.n	8000bb8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb4:	b009      	add	sp, #36	; 0x24
 8000bb6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	2500      	movs	r5, #0
 8000bba:	9501      	str	r5, [sp, #4]
 8000bbc:	4c11      	ldr	r4, [pc, #68]	; (8000c04 <HAL_I2C_MspInit+0x68>)
 8000bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6323      	str	r3, [r4, #48]	; 0x30
 8000bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd0:	23c0      	movs	r3, #192	; 0xc0
 8000bd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	a903      	add	r1, sp, #12
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <HAL_I2C_MspInit+0x6c>)
 8000be4:	f000 f9e2 	bl	8000fac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	9502      	str	r5, [sp, #8]
 8000bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6423      	str	r3, [r4, #64]	; 0x40
 8000bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	9b02      	ldr	r3, [sp, #8]
}
 8000bfc:	e7da      	b.n	8000bb4 <HAL_I2C_MspInit+0x18>
 8000bfe:	bf00      	nop
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b500      	push	{lr}
 8000c0e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	2300      	movs	r3, #0
 8000c12:	9303      	str	r3, [sp, #12]
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	9306      	str	r3, [sp, #24]
 8000c1a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000c1c:	6802      	ldr	r2, [r0, #0]
 8000c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c22:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d002      	beq.n	8000c30 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c2a:	b009      	add	sp, #36	; 0x24
 8000c2c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c30:	2100      	movs	r1, #0
 8000c32:	9101      	str	r1, [sp, #4]
 8000c34:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c3a:	f042 0210 	orr.w	r2, r2, #16
 8000c3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c42:	f002 0210 	and.w	r2, r2, #16
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	9102      	str	r1, [sp, #8]
 8000c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	a903      	add	r1, sp, #12
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <HAL_UART_MspInit+0x70>)
 8000c74:	f000 f99a 	bl	8000fac <HAL_GPIO_Init>
}
 8000c78:	e7d7      	b.n	8000c2a <HAL_UART_MspInit+0x1e>
 8000c7a:	bf00      	nop
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler>

08000c82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler>

08000c84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler>

08000c86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler>

08000c88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler>

08000c8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f8b5 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bd08      	pop	{r3, pc}

08000c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e006      	b.n	8000cb0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000cae:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	42b5      	cmp	r5, r6
 8000cb2:	dbf6      	blt.n	8000ca2 <_read+0xa>
  }

  return len;
}
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}

08000cb8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000cc8:	2001      	movs	r0, #1
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000ccc:	2000      	movs	r0, #0
 8000cce:	4770      	bx	lr

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <_sbrk+0x38>)
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <_sbrk+0x40>)
 8000cda:	6800      	ldr	r0, [r0, #0]
 8000cdc:	b140      	cbz	r0, 8000cf0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <_sbrk+0x40>)
 8000ce0:	6800      	ldr	r0, [r0, #0]
 8000ce2:	4403      	add	r3, r0
 8000ce4:	1a52      	subs	r2, r2, r1
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d806      	bhi.n	8000cf8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <_sbrk+0x40>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000cee:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <_sbrk+0x40>)
 8000cf2:	4c08      	ldr	r4, [pc, #32]	; (8000d14 <_sbrk+0x44>)
 8000cf4:	6004      	str	r4, [r0, #0]
 8000cf6:	e7f2      	b.n	8000cde <_sbrk+0xe>
    errno = ENOMEM;
 8000cf8:	f001 ff60 	bl	8002bbc <__errno>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d04:	e7f3      	b.n	8000cee <_sbrk+0x1e>
 8000d06:	bf00      	nop
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	2000012c 	.word	0x2000012c
 8000d14:	20000280 	.word	0x20000280

08000d18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <SystemInit+0x10>)
 8000d1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ffdf 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f001 ff35 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fd09 	bl	8000774 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d70:	08003980 	.word	0x08003980
  ldr r2, =_sbss
 8000d74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d78:	20000280 	.word	0x20000280

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_InitTick+0x40>)
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_InitTick+0x44>)
 8000d92:	6810      	ldr	r0, [r2, #0]
 8000d94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d98:	f000 f8a2 	bl	8000ee0 <HAL_SYSTICK_Config>
 8000d9c:	b968      	cbnz	r0, 8000dba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	2c0f      	cmp	r4, #15
 8000da0:	d901      	bls.n	8000da6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e00a      	b.n	8000dbc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	4621      	mov	r1, r4
 8000daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dae:	f000 f85f 	bl	8000e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_InitTick+0x48>)
 8000db4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2000      	movs	r0, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_Init>:
{
 8000dcc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x30>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000de6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f82f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff ffc6 	bl	8000d80 <HAL_InitTick>
  HAL_MspInit();
 8000df4:	f7ff fe9e 	bl	8000b34 <HAL_MspInit>
}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	bd08      	pop	{r3, pc}
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x10>)
 8000e02:	6811      	ldr	r1, [r2, #0]
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_IncTick+0x14>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000130 	.word	0x20000130
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <HAL_GetTick+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000130 	.word	0x20000130

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff6 	bl	8000e18 <HAL_GetTick>
 8000e2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000e32:	d002      	beq.n	8000e3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_Delay+0x24>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	f7ff ffed 	bl	8000e18 <HAL_GetTick>
 8000e3e:	1b40      	subs	r0, r0, r5
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d3fa      	bcc.n	8000e3a <HAL_Delay+0x16>
  {
  }
}
 8000e44:	bd38      	pop	{r3, r4, r5, pc}
 8000e46:	bf00      	nop
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	0200      	lsls	r0, r0, #8
 8000e5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_NVIC_SetPriority+0x68>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7a:	f1c3 0c07 	rsb	ip, r3, #7
 8000e7e:	f1bc 0f04 	cmp.w	ip, #4
 8000e82:	bf28      	it	cs
 8000e84:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e88:	f103 0e04 	add.w	lr, r3, #4
 8000e8c:	f1be 0f06 	cmp.w	lr, #6
 8000e90:	d918      	bls.n	8000ec4 <HAL_NVIC_SetPriority+0x54>
 8000e92:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000e98:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e9c:	ea21 010c 	bic.w	r1, r1, ip
 8000ea0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ea6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eaa:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000eac:	2800      	cmp	r0, #0
 8000eae:	db0b      	blt.n	8000ec8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000eb8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ebc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ec0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e7e5      	b.n	8000e94 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	f000 000f 	and.w	r0, r0, #15
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_NVIC_SetPriority+0x6c>)
 8000ed2:	541a      	strb	r2, [r3, r0]
 8000ed4:	e7f4      	b.n	8000ec0 <HAL_NVIC_SetPriority+0x50>
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	e000ed14 	.word	0xe000ed14

08000ee0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ee6:	d20b      	bcs.n	8000f00 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000eec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_SYSTICK_Config+0x24>)
 8000ef0:	21f0      	movs	r1, #240	; 0xf0
 8000ef2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	2207      	movs	r2, #7
 8000efc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f00:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f08:	b158      	cbz	r0, 8000f22 <HAL_CRC_Init+0x1a>
{
 8000f0a:	b510      	push	{r4, lr}
 8000f0c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f0e:	7943      	ldrb	r3, [r0, #5]
 8000f10:	b11b      	cbz	r3, 8000f1a <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f12:	2301      	movs	r3, #1
 8000f14:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000f16:	2000      	movs	r0, #0
}
 8000f18:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000f1a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000f1c:	f7ff fe26 	bl	8000b6c <HAL_CRC_MspInit>
 8000f20:	e7f7      	b.n	8000f12 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
}
 8000f24:	4770      	bx	lr

08000f26 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f26:	4684      	mov	ip, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	7143      	strb	r3, [r0, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d211      	bcs.n	8000f56 <HAL_CRC_Accumulate+0x30>
{
 8000f32:	b410      	push	{r4}
  {
    hcrc->Instance->DR = pBuffer[index];
 8000f34:	f8dc 0000 	ldr.w	r0, [ip]
 8000f38:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000f3c:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d3f7      	bcc.n	8000f34 <HAL_CRC_Accumulate+0xe>
  }
  temp = hcrc->Instance->DR;
 8000f44:	f8dc 3000 	ldr.w	r3, [ip]
 8000f48:	6818      	ldr	r0, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f88c 3005 	strb.w	r3, [ip, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f54:	4770      	bx	lr
  temp = hcrc->Instance->DR;
 8000f56:	6803      	ldr	r3, [r0, #0]
 8000f58:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f88c 3005 	strb.w	r3, [ip, #5]
}
 8000f60:	4770      	bx	lr

08000f62 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f62:	4684      	mov	ip, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f64:	2302      	movs	r3, #2
 8000f66:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000f68:	6800      	ldr	r0, [r0, #0]
 8000f6a:	6883      	ldr	r3, [r0, #8]
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6083      	str	r3, [r0, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d211      	bcs.n	8000f9c <HAL_CRC_Calculate+0x3a>
{
 8000f78:	b410      	push	{r4}
  {
    hcrc->Instance->DR = pBuffer[index];
 8000f7a:	f8dc 0000 	ldr.w	r0, [ip]
 8000f7e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000f82:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 8000f84:	3301      	adds	r3, #1
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d3f7      	bcc.n	8000f7a <HAL_CRC_Calculate+0x18>
  }
  temp = hcrc->Instance->DR;
 8000f8a:	f8dc 3000 	ldr.w	r3, [ip]
 8000f8e:	6818      	ldr	r0, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f88c 3005 	strb.w	r3, [ip, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f9a:	4770      	bx	lr
  temp = hcrc->Instance->DR;
 8000f9c:	f8dc 3000 	ldr.w	r3, [ip]
 8000fa0:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f88c 3005 	strb.w	r3, [ip, #5]
}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f200 80e9 	bhi.w	8001186 <HAL_GPIO_Init+0x1da>
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	e065      	b.n	8001086 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000fc0:	2403      	movs	r4, #3
 8000fc2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000fc6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	68cc      	ldr	r4, [r1, #12]
 8000fcc:	fa04 f40e 	lsl.w	r4, r4, lr
 8000fd0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000fd2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	684a      	ldr	r2, [r1, #4]
 8000fdc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000fe4:	6042      	str	r2, [r0, #4]
 8000fe6:	e05c      	b.n	80010a2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	08dc      	lsrs	r4, r3, #3
 8000fea:	3408      	adds	r4, #8
 8000fec:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff0:	f003 0507 	and.w	r5, r3, #7
 8000ff4:	00ad      	lsls	r5, r5, #2
 8000ff6:	f04f 0e0f 	mov.w	lr, #15
 8000ffa:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ffe:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001002:	690a      	ldr	r2, [r1, #16]
 8001004:	40aa      	lsls	r2, r5
 8001006:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800100e:	e05c      	b.n	80010ca <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001010:	2207      	movs	r2, #7
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 8001014:	2200      	movs	r2, #0
 8001016:	fa02 f20e 	lsl.w	r2, r2, lr
 800101a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	3402      	adds	r4, #2
 800101e:	4d5a      	ldr	r5, [pc, #360]	; (8001188 <HAL_GPIO_Init+0x1dc>)
 8001020:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001024:	4a59      	ldr	r2, [pc, #356]	; (800118c <HAL_GPIO_Init+0x1e0>)
 8001026:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001028:	ea6f 020c 	mvn.w	r2, ip
 800102c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001030:	684e      	ldr	r6, [r1, #4]
 8001032:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001036:	d001      	beq.n	800103c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001038:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800103c:	4c53      	ldr	r4, [pc, #332]	; (800118c <HAL_GPIO_Init+0x1e0>)
 800103e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001040:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001042:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001046:	684e      	ldr	r6, [r1, #4]
 8001048:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800104c:	d001      	beq.n	8001052 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800104e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001052:	4c4e      	ldr	r4, [pc, #312]	; (800118c <HAL_GPIO_Init+0x1e0>)
 8001054:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001056:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001058:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105c:	684e      	ldr	r6, [r1, #4]
 800105e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001062:	d001      	beq.n	8001068 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001064:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001068:	4c48      	ldr	r4, [pc, #288]	; (800118c <HAL_GPIO_Init+0x1e0>)
 800106a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800106e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	684d      	ldr	r5, [r1, #4]
 8001072:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001076:	d001      	beq.n	800107c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001078:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800107c:	4c43      	ldr	r4, [pc, #268]	; (800118c <HAL_GPIO_Init+0x1e0>)
 800107e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001080:	3301      	adds	r3, #1
 8001082:	2b0f      	cmp	r3, #15
 8001084:	d87d      	bhi.n	8001182 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001086:	2201      	movs	r2, #1
 8001088:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	680c      	ldr	r4, [r1, #0]
 800108c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001090:	ea32 0404 	bics.w	r4, r2, r4
 8001094:	d1f4      	bne.n	8001080 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	684c      	ldr	r4, [r1, #4]
 8001098:	f004 0403 	and.w	r4, r4, #3
 800109c:	3c01      	subs	r4, #1
 800109e:	2c01      	cmp	r4, #1
 80010a0:	d98b      	bls.n	8000fba <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a2:	684a      	ldr	r2, [r1, #4]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	2a03      	cmp	r2, #3
 80010aa:	d009      	beq.n	80010c0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80010ac:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	005d      	lsls	r5, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	40aa      	lsls	r2, r5
 80010b4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	688a      	ldr	r2, [r1, #8]
 80010ba:	40aa      	lsls	r2, r5
 80010bc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80010be:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	684a      	ldr	r2, [r1, #4]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	2a02      	cmp	r2, #2
 80010c8:	d08e      	beq.n	8000fe8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80010ca:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f20e 	lsl.w	r2, r2, lr
 80010d6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010da:	684a      	ldr	r2, [r1, #4]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	fa02 f20e 	lsl.w	r2, r2, lr
 80010e4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80010e6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	684a      	ldr	r2, [r1, #4]
 80010ea:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80010ee:	d0c7      	beq.n	8001080 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	2200      	movs	r2, #0
 80010f2:	9201      	str	r2, [sp, #4]
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x1e4>)
 80010f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80010f8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80010fc:	6454      	str	r4, [r2, #68]	; 0x44
 80010fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001100:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001108:	089c      	lsrs	r4, r3, #2
 800110a:	1ca5      	adds	r5, r4, #2
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_GPIO_Init+0x1dc>)
 800110e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001112:	f003 0e03 	and.w	lr, r3, #3
 8001116:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001120:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x1e8>)
 8001126:	4290      	cmp	r0, r2
 8001128:	f43f af74 	beq.w	8001014 <HAL_GPIO_Init+0x68>
 800112c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001130:	4290      	cmp	r0, r2
 8001132:	d01a      	beq.n	800116a <HAL_GPIO_Init+0x1be>
 8001134:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001138:	4290      	cmp	r0, r2
 800113a:	d018      	beq.n	800116e <HAL_GPIO_Init+0x1c2>
 800113c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001140:	4290      	cmp	r0, r2
 8001142:	d016      	beq.n	8001172 <HAL_GPIO_Init+0x1c6>
 8001144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001148:	4290      	cmp	r0, r2
 800114a:	d014      	beq.n	8001176 <HAL_GPIO_Init+0x1ca>
 800114c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001150:	4290      	cmp	r0, r2
 8001152:	d012      	beq.n	800117a <HAL_GPIO_Init+0x1ce>
 8001154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001158:	4290      	cmp	r0, r2
 800115a:	d010      	beq.n	800117e <HAL_GPIO_Init+0x1d2>
 800115c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001160:	4290      	cmp	r0, r2
 8001162:	f43f af55 	beq.w	8001010 <HAL_GPIO_Init+0x64>
 8001166:	2208      	movs	r2, #8
 8001168:	e755      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 800116a:	2201      	movs	r2, #1
 800116c:	e753      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 800116e:	2202      	movs	r2, #2
 8001170:	e751      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 8001172:	2203      	movs	r2, #3
 8001174:	e74f      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 8001176:	2204      	movs	r2, #4
 8001178:	e74d      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 800117a:	2205      	movs	r2, #5
 800117c:	e74b      	b.n	8001016 <HAL_GPIO_Init+0x6a>
 800117e:	2206      	movs	r2, #6
 8001180:	e749      	b.n	8001016 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001182:	b002      	add	sp, #8
 8001184:	bd70      	pop	{r4, r5, r6, pc}
 8001186:	4770      	bx	lr
 8001188:	40013800 	.word	0x40013800
 800118c:	40013c00 	.word	0x40013c00
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	b10a      	cbz	r2, 800119e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119a:	6181      	str	r1, [r0, #24]
 800119c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	0409      	lsls	r1, r1, #16
 80011a0:	6181      	str	r1, [r0, #24]
  }
}
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a6:	ea01 0203 	and.w	r2, r1, r3
 80011aa:	ea21 0103 	bic.w	r1, r1, r3
 80011ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011b2:	6181      	str	r1, [r0, #24]
}
 80011b4:	4770      	bx	lr

080011b6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011b6:	6803      	ldr	r3, [r0, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80011be:	d101      	bne.n	80011c4 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80011c0:	2000      	movs	r0, #0
}
 80011c2:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80011c8:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80011ce:	2220      	movs	r2, #32
 80011d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011da:	f042 0204 	orr.w	r2, r2, #4
 80011de:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80011e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	4770      	bx	lr

080011e8 <I2C_WaitOnFlagUntilTimeout>:
{
 80011e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ec:	4607      	mov	r7, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	4690      	mov	r8, r2
 80011f2:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f4:	e024      	b.n	8001240 <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f6:	f7ff fe0f 	bl	8000e18 <HAL_GetTick>
 80011fa:	9b06      	ldr	r3, [sp, #24]
 80011fc:	1ac0      	subs	r0, r0, r3
 80011fe:	42b0      	cmp	r0, r6
 8001200:	d800      	bhi.n	8001204 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001202:	b9ee      	cbnz	r6, 8001240 <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001208:	2220      	movs	r2, #32
 800120a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800120e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001214:	f042 0220 	orr.w	r2, r2, #32
 8001218:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800121a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 800121e:	2001      	movs	r0, #1
 8001220:	e01e      	b.n	8001260 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	699c      	ldr	r4, [r3, #24]
 8001226:	ea25 0c04 	bic.w	ip, r5, r4
 800122a:	fa1f fc8c 	uxth.w	ip, ip
 800122e:	fabc fc8c 	clz	ip, ip
 8001232:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001236:	45e0      	cmp	r8, ip
 8001238:	d111      	bne.n	800125e <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800123a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800123e:	d1da      	bne.n	80011f6 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001240:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001244:	2b01      	cmp	r3, #1
 8001246:	d1ec      	bne.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	ea25 0c03 	bic.w	ip, r5, r3
 8001250:	fa1f fc8c 	uxth.w	ip, ip
 8001254:	fabc fc8c 	clz	ip, ip
 8001258:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800125c:	e7eb      	b.n	8001236 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 800125e:	2000      	movs	r0, #0
}
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001268:	4605      	mov	r5, r0
 800126a:	460e      	mov	r6, r1
 800126c:	4617      	mov	r7, r2
 800126e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001270:	e03d      	b.n	80012ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001278:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001280:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001286:	2220      	movs	r2, #32
 8001288:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800128c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001290:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001292:	f042 0204 	orr.w	r2, r2, #4
 8001296:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001298:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e034      	b.n	800130a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a0:	f7ff fdba 	bl	8000e18 <HAL_GetTick>
 80012a4:	eba0 0008 	sub.w	r0, r0, r8
 80012a8:	42b8      	cmp	r0, r7
 80012aa:	d800      	bhi.n	80012ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80012ac:	b9ff      	cbnz	r7, 80012ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012b2:	2220      	movs	r2, #32
 80012b4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012b8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012be:	f042 0220 	orr.w	r2, r2, #32
 80012c2:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80012c4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
 80012ca:	e01e      	b.n	800130a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	699c      	ldr	r4, [r3, #24]
 80012d0:	ea26 0404 	bic.w	r4, r6, r4
 80012d4:	b2a4      	uxth	r4, r4
 80012d6:	3c00      	subs	r4, #0
 80012d8:	bf18      	it	ne
 80012da:	2401      	movne	r4, #1
 80012dc:	b1a4      	cbz	r4, 8001308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012e6:	d1c4      	bne.n	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80012e8:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80012ec:	d1d8      	bne.n	80012a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012ee:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d1ea      	bne.n	80012cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	695c      	ldr	r4, [r3, #20]
 80012fa:	ea26 0404 	bic.w	r4, r6, r4
 80012fe:	b2a4      	uxth	r4, r4
 8001300:	3c00      	subs	r4, #0
 8001302:	bf18      	it	ne
 8001304:	2401      	movne	r4, #1
 8001306:	e7e9      	b.n	80012dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001308:	2000      	movs	r0, #0
}
 800130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800130e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800130e:	b570      	push	{r4, r5, r6, lr}
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
 8001314:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800131e:	d11c      	bne.n	800135a <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff ff48 	bl	80011b6 <I2C_IsAcknowledgeFailed>
 8001326:	b9d0      	cbnz	r0, 800135e <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001328:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800132c:	d0f3      	beq.n	8001316 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800132e:	f7ff fd73 	bl	8000e18 <HAL_GetTick>
 8001332:	1b80      	subs	r0, r0, r6
 8001334:	42a8      	cmp	r0, r5
 8001336:	d801      	bhi.n	800133c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001338:	2d00      	cmp	r5, #0
 800133a:	d1ec      	bne.n	8001316 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001340:	2220      	movs	r2, #32
 8001342:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800134a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
 8001358:	e000      	b.n	800135c <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
}
 800135c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e7fc      	b.n	800135c <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08001364 <I2C_RequestMemoryWrite>:
{
 8001364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001368:	b085      	sub	sp, #20
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	4691      	mov	r9, r2
 8001370:	461f      	mov	r7, r3
 8001372:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8001376:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001378:	6803      	ldr	r3, [r0, #0]
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001380:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001382:	9600      	str	r6, [sp, #0]
 8001384:	4643      	mov	r3, r8
 8001386:	2200      	movs	r2, #0
 8001388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800138c:	f7ff ff2c 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001390:	b960      	cbnz	r0, 80013ac <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001398:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800139a:	4633      	mov	r3, r6
 800139c:	4642      	mov	r2, r8
 800139e:	4926      	ldr	r1, [pc, #152]	; (8001438 <I2C_RequestMemoryWrite+0xd4>)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff ff5f 	bl	8001264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013a6:	b168      	cbz	r0, 80013c4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	e008      	b.n	80013be <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013b4:	d002      	beq.n	80013bc <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80013bc:	2003      	movs	r0, #3
}
 80013be:	b005      	add	sp, #20
 80013c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c4:	2300      	movs	r3, #0
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	9203      	str	r2, [sp, #12]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d4:	4632      	mov	r2, r6
 80013d6:	4641      	mov	r1, r8
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff ff98 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 80013de:	b930      	cbnz	r0, 80013ee <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013e0:	2f01      	cmp	r7, #1
 80013e2:	d10f      	bne.n	8001404 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	fa5f f689 	uxtb.w	r6, r9
 80013ea:	611e      	str	r6, [r3, #16]
 80013ec:	e7e7      	b.n	80013be <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d001      	beq.n	80013f8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
 80013f6:	e7e2      	b.n	80013be <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f8:	6822      	ldr	r2, [r4, #0]
 80013fa:	6813      	ldr	r3, [r2, #0]
 80013fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e7f7      	b.n	80013f4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800140a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800140c:	4632      	mov	r2, r6
 800140e:	4641      	mov	r1, r8
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff7c 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 8001416:	b920      	cbnz	r0, 8001422 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	fa5f f689 	uxtb.w	r6, r9
 800141e:	611e      	str	r6, [r3, #16]
 8001420:	e7cd      	b.n	80013be <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001424:	2b04      	cmp	r3, #4
 8001426:	d001      	beq.n	800142c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001428:	2001      	movs	r0, #1
 800142a:	e7c8      	b.n	80013be <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e7f7      	b.n	8001428 <I2C_RequestMemoryWrite+0xc4>
 8001438:	00010002 	.word	0x00010002

0800143c <I2C_RequestMemoryRead>:
{
 800143c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	4616      	mov	r6, r2
 8001448:	4699      	mov	r9, r3
 800144a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800144c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001458:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145a:	6803      	ldr	r3, [r0, #0]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001462:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001464:	f8cd 8000 	str.w	r8, [sp]
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001470:	f7ff feba 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001474:	b970      	cbnz	r0, 8001494 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001476:	fa5f fa85 	uxtb.w	sl, r5
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001480:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001482:	4643      	mov	r3, r8
 8001484:	463a      	mov	r2, r7
 8001486:	4941      	ldr	r1, [pc, #260]	; (800158c <I2C_RequestMemoryRead+0x150>)
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff feeb 	bl	8001264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800148e:	b168      	cbz	r0, 80014ac <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	e008      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f413 7f80 	tst.w	r3, #256	; 0x100
 800149c:	d002      	beq.n	80014a4 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
}
 80014a6:	b004      	add	sp, #16
 80014a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	9203      	str	r2, [sp, #12]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014bc:	4642      	mov	r2, r8
 80014be:	4639      	mov	r1, r7
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ff24 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 80014c6:	b980      	cbnz	r0, 80014ea <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014c8:	f1b9 0f01 	cmp.w	r9, #1
 80014cc:	d118      	bne.n	8001500 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	b2f6      	uxtb	r6, r6
 80014d2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d4:	4642      	mov	r2, r8
 80014d6:	4639      	mov	r1, r7
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff ff18 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 80014de:	b368      	cbz	r0, 800153c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d024      	beq.n	8001530 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	e7dd      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d001      	beq.n	80014f4 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
 80014f2:	e7d8      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e7f7      	b.n	80014f0 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	0a32      	lsrs	r2, r6, #8
 8001504:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001506:	4642      	mov	r2, r8
 8001508:	4639      	mov	r1, r7
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff feff 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 8001510:	b918      	cbnz	r0, 800151a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	b2f6      	uxtb	r6, r6
 8001516:	611e      	str	r6, [r3, #16]
 8001518:	e7dc      	b.n	80014d4 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800151a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800151c:	2b04      	cmp	r3, #4
 800151e:	d001      	beq.n	8001524 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	e7c0      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e7f7      	b.n	8001520 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e7d4      	b.n	80014e6 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001546:	f8cd 8000 	str.w	r8, [sp]
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fe48 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001558:	b968      	cbnz	r0, 8001576 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	f04a 0301 	orr.w	r3, sl, #1
 8001560:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001562:	4643      	mov	r3, r8
 8001564:	463a      	mov	r2, r7
 8001566:	4909      	ldr	r1, [pc, #36]	; (800158c <I2C_RequestMemoryRead+0x150>)
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff fe7b 	bl	8001264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800156e:	2800      	cmp	r0, #0
 8001570:	d099      	beq.n	80014a6 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	e797      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800157e:	d002      	beq.n	8001586 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001586:	2003      	movs	r0, #3
 8001588:	e78d      	b.n	80014a6 <I2C_RequestMemoryRead+0x6a>
 800158a:	bf00      	nop
 800158c:	00010002 	.word	0x00010002

08001590 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4604      	mov	r4, r0
 8001594:	460d      	mov	r5, r1
 8001596:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f013 0f04 	tst.w	r3, #4
 80015a0:	d11c      	bne.n	80015dc <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff fe07 	bl	80011b6 <I2C_IsAcknowledgeFailed>
 80015a8:	b9d0      	cbnz	r0, 80015e0 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80015aa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80015ae:	d0f3      	beq.n	8001598 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b0:	f7ff fc32 	bl	8000e18 <HAL_GetTick>
 80015b4:	1b80      	subs	r0, r0, r6
 80015b6:	42a8      	cmp	r0, r5
 80015b8:	d801      	bhi.n	80015be <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80015ba:	2d00      	cmp	r5, #0
 80015bc:	d1ec      	bne.n	8001598 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015c2:	2220      	movs	r2, #32
 80015c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015ce:	f042 0220 	orr.w	r2, r2, #32
 80015d2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80015d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
 80015da:	e000      	b.n	80015de <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80015dc:	2000      	movs	r0, #0
}
 80015de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e7fc      	b.n	80015de <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080015e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	4605      	mov	r5, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	6959      	ldr	r1, [r3, #20]
 80015f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015f4:	d129      	bne.n	800164a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015f6:	6959      	ldr	r1, [r3, #20]
 80015f8:	f011 0f10 	tst.w	r1, #16
 80015fc:	d115      	bne.n	800162a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fe:	f7ff fc0b 	bl	8000e18 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	42a0      	cmp	r0, r4
 8001606:	d801      	bhi.n	800160c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d1ef      	bne.n	80015ec <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001610:	2220      	movs	r2, #32
 8001612:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001616:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001622:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
}
 8001628:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800162a:	f06f 0210 	mvn.w	r2, #16
 800162e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001634:	2220      	movs	r2, #32
 8001636:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800163a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800163e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001640:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001642:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	e7ee      	b.n	8001628 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800164a:	2000      	movs	r0, #0
 800164c:	e7ec      	b.n	8001628 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001650 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001650:	2800      	cmp	r0, #0
 8001652:	f000 80cc 	beq.w	80017ee <HAL_I2C_Init+0x19e>
{
 8001656:	b570      	push	{r4, r5, r6, lr}
 8001658:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800165e:	2b00      	cmp	r3, #0
 8001660:	d077      	beq.n	8001752 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001662:	2324      	movs	r3, #36	; 0x24
 8001664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001684:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001686:	f000 fec9 	bl	800241c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800168a:	6862      	ldr	r2, [r4, #4]
 800168c:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_I2C_Init+0x1a8>)
 800168e:	429a      	cmp	r2, r3
 8001690:	d864      	bhi.n	800175c <HAL_I2C_Init+0x10c>
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HAL_I2C_Init+0x1ac>)
 8001694:	4298      	cmp	r0, r3
 8001696:	bf8c      	ite	hi
 8001698:	2300      	movhi	r3, #0
 800169a:	2301      	movls	r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 80a8 	bne.w	80017f2 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80016a2:	4957      	ldr	r1, [pc, #348]	; (8001800 <HAL_I2C_Init+0x1b0>)
 80016a4:	fba1 3100 	umull	r3, r1, r1, r0
 80016a8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016aa:	6825      	ldr	r5, [r4, #0]
 80016ac:	686a      	ldr	r2, [r5, #4]
 80016ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80016b2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80016b6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b8:	6821      	ldr	r1, [r4, #0]
 80016ba:	6a0a      	ldr	r2, [r1, #32]
 80016bc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80016c0:	6866      	ldr	r6, [r4, #4]
 80016c2:	4d4d      	ldr	r5, [pc, #308]	; (80017f8 <HAL_I2C_Init+0x1a8>)
 80016c4:	42ae      	cmp	r6, r5
 80016c6:	d84f      	bhi.n	8001768 <HAL_I2C_Init+0x118>
 80016c8:	3301      	adds	r3, #1
 80016ca:	4313      	orrs	r3, r2
 80016cc:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016ce:	6821      	ldr	r1, [r4, #0]
 80016d0:	69ca      	ldr	r2, [r1, #28]
 80016d2:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80016d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016da:	6865      	ldr	r5, [r4, #4]
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_I2C_Init+0x1a8>)
 80016de:	429d      	cmp	r5, r3
 80016e0:	d84c      	bhi.n	800177c <HAL_I2C_Init+0x12c>
 80016e2:	1e43      	subs	r3, r0, #1
 80016e4:	006d      	lsls	r5, r5, #1
 80016e6:	fbb3 f3f5 	udiv	r3, r3, r5
 80016ea:	3301      	adds	r3, #1
 80016ec:	f640 70fc 	movw	r0, #4092	; 0xffc
 80016f0:	4203      	tst	r3, r0
 80016f2:	d078      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	431a      	orrs	r2, r3
 80016fa:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016fc:	6821      	ldr	r1, [r4, #0]
 80016fe:	680b      	ldr	r3, [r1, #0]
 8001700:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001704:	69e2      	ldr	r2, [r4, #28]
 8001706:	6a20      	ldr	r0, [r4, #32]
 8001708:	4302      	orrs	r2, r0
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800170e:	6821      	ldr	r1, [r4, #0]
 8001710:	688b      	ldr	r3, [r1, #8]
 8001712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800171a:	6922      	ldr	r2, [r4, #16]
 800171c:	68e0      	ldr	r0, [r4, #12]
 800171e:	4302      	orrs	r2, r0
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001724:	6821      	ldr	r1, [r4, #0]
 8001726:	68cb      	ldr	r3, [r1, #12]
 8001728:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800172c:	6962      	ldr	r2, [r4, #20]
 800172e:	69a0      	ldr	r0, [r4, #24]
 8001730:	4302      	orrs	r2, r0
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	2000      	movs	r0, #0
 8001742:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001744:	2320      	movs	r3, #32
 8001746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001750:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001756:	f7ff fa21 	bl	8000b9c <HAL_I2C_MspInit>
 800175a:	e782      	b.n	8001662 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_I2C_Init+0x1b4>)
 800175e:	4298      	cmp	r0, r3
 8001760:	bf8c      	ite	hi
 8001762:	2300      	movhi	r3, #0
 8001764:	2301      	movls	r3, #1
 8001766:	e799      	b.n	800169c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001768:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800176c:	fb05 f303 	mul.w	r3, r5, r3
 8001770:	4d25      	ldr	r5, [pc, #148]	; (8001808 <HAL_I2C_Init+0x1b8>)
 8001772:	fba5 5303 	umull	r5, r3, r5, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	3301      	adds	r3, #1
 800177a:	e7a6      	b.n	80016ca <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800177c:	68a6      	ldr	r6, [r4, #8]
 800177e:	b9be      	cbnz	r6, 80017b0 <HAL_I2C_Init+0x160>
 8001780:	1e43      	subs	r3, r0, #1
 8001782:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001786:	fbb3 f3fc 	udiv	r3, r3, ip
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	bb43      	cbnz	r3, 80017ea <HAL_I2C_Init+0x19a>
 8001798:	b9c6      	cbnz	r6, 80017cc <HAL_I2C_Init+0x17c>
 800179a:	1e43      	subs	r3, r0, #1
 800179c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017a0:	fbb3 f3f5 	udiv	r3, r3, r5
 80017a4:	3301      	adds	r3, #1
 80017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	e7a3      	b.n	80016f8 <HAL_I2C_Init+0xa8>
 80017b0:	1e43      	subs	r3, r0, #1
 80017b2:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80017b6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80017ba:	fbb3 f3fc 	udiv	r3, r3, ip
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	e7e4      	b.n	8001796 <HAL_I2C_Init+0x146>
 80017cc:	1e43      	subs	r3, r0, #1
 80017ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80017d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80017d6:	fbb3 f3f5 	udiv	r3, r3, r5
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e4:	e788      	b.n	80016f8 <HAL_I2C_Init+0xa8>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e786      	b.n	80016f8 <HAL_I2C_Init+0xa8>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e784      	b.n	80016f8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
}
 80017f0:	4770      	bx	lr
    return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	e7ac      	b.n	8001750 <HAL_I2C_Init+0x100>
 80017f6:	bf00      	nop
 80017f8:	000186a0 	.word	0x000186a0
 80017fc:	001e847f 	.word	0x001e847f
 8001800:	431bde83 	.word	0x431bde83
 8001804:	003d08ff 	.word	0x003d08ff
 8001808:	10624dd3 	.word	0x10624dd3

0800180c <HAL_I2C_Mem_Write>:
{
 800180c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001810:	b083      	sub	sp, #12
 8001812:	4604      	mov	r4, r0
 8001814:	460f      	mov	r7, r1
 8001816:	4690      	mov	r8, r2
 8001818:	4699      	mov	r9, r3
 800181a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fafc 	bl	8000e18 <HAL_GetTick>
 8001820:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001826:	b2c0      	uxtb	r0, r0
 8001828:	2820      	cmp	r0, #32
 800182a:	d003      	beq.n	8001834 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800182c:	2002      	movs	r0, #2
}
 800182e:	b003      	add	sp, #12
 8001830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	9500      	str	r5, [sp, #0]
 8001836:	2319      	movs	r3, #25
 8001838:	2201      	movs	r2, #1
 800183a:	494b      	ldr	r1, [pc, #300]	; (8001968 <HAL_I2C_Mem_Write+0x15c>)
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fcd3 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001842:	2800      	cmp	r0, #0
 8001844:	f040 8089 	bne.w	800195a <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001848:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
 800184e:	f000 8086 	beq.w	800195e <HAL_I2C_Mem_Write+0x152>
 8001852:	2301      	movs	r3, #1
 8001854:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f012 0f01 	tst.w	r2, #1
 8001860:	d103      	bne.n	800186a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001872:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001874:	2321      	movs	r3, #33	; 0x21
 8001876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	2300      	movs	r3, #0
 8001882:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001886:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001888:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800188c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800188e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001890:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_I2C_Mem_Write+0x160>)
 8001894:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001896:	9501      	str	r5, [sp, #4]
 8001898:	9600      	str	r6, [sp, #0]
 800189a:	464b      	mov	r3, r9
 800189c:	4642      	mov	r2, r8
 800189e:	4639      	mov	r1, r7
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff fd5f 	bl	8001364 <I2C_RequestMemoryWrite>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d15b      	bne.n	8001962 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80018aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d035      	beq.n	800191c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	462a      	mov	r2, r5
 80018b2:	4631      	mov	r1, r6
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fd2a 	bl	800130e <I2C_WaitOnTXEFlagUntilTimeout>
 80018ba:	bb20      	cbnz	r0, 8001906 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80018c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018c6:	1c53      	adds	r3, r2, #1
 80018c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80018ca:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80018cc:	3901      	subs	r1, #1
 80018ce:	b289      	uxth	r1, r1
 80018d0:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80018d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29b      	uxth	r3, r3
 80018da:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	6958      	ldr	r0, [r3, #20]
 80018e0:	f010 0f04 	tst.w	r0, #4
 80018e4:	d0e1      	beq.n	80018aa <HAL_I2C_Mem_Write+0x9e>
 80018e6:	2900      	cmp	r1, #0
 80018e8:	d0df      	beq.n	80018aa <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ea:	7852      	ldrb	r2, [r2, #1]
 80018ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80018ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018f0:	3301      	adds	r3, #1
 80018f2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80018f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018f6:	3b01      	subs	r3, #1
 80018f8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001904:	e7d1      	b.n	80018aa <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001908:	2b04      	cmp	r3, #4
 800190a:	d001      	beq.n	8001910 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e78e      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e7f7      	b.n	800190c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	462a      	mov	r2, r5
 800191e:	4631      	mov	r1, r6
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff fe35 	bl	8001590 <I2C_WaitOnBTFFlagUntilTimeout>
 8001926:	b150      	cbz	r0, 800193e <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800192a:	2b04      	cmp	r3, #4
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	e77d      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6813      	ldr	r3, [r2, #0]
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e7f7      	b.n	800192e <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001948:	2320      	movs	r3, #32
 800194a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001954:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001958:	e769      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800195a:	2002      	movs	r0, #2
 800195c:	e767      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800195e:	2002      	movs	r0, #2
 8001960:	e765      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
 8001964:	e763      	b.n	800182e <HAL_I2C_Mem_Write+0x22>
 8001966:	bf00      	nop
 8001968:	00100002 	.word	0x00100002
 800196c:	ffff0000 	.word	0xffff0000

08001970 <HAL_I2C_Mem_Read>:
{
 8001970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001974:	b087      	sub	sp, #28
 8001976:	4604      	mov	r4, r0
 8001978:	460f      	mov	r7, r1
 800197a:	4690      	mov	r8, r2
 800197c:	4699      	mov	r9, r3
 800197e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff fa4a 	bl	8000e18 <HAL_GetTick>
 8001984:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001986:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800198a:	b2c0      	uxtb	r0, r0
 800198c:	2820      	cmp	r0, #32
 800198e:	d004      	beq.n	800199a <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001990:	2702      	movs	r7, #2
}
 8001992:	4638      	mov	r0, r7
 8001994:	b007      	add	sp, #28
 8001996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199a:	9500      	str	r5, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	4988      	ldr	r1, [pc, #544]	; (8001bc4 <HAL_I2C_Mem_Read+0x254>)
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fc20 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f040 8143 	bne.w	8001c34 <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 80019ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	f000 8140 	beq.w	8001c38 <HAL_I2C_Mem_Read+0x2c8>
 80019b8:	2301      	movs	r3, #1
 80019ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f012 0f01 	tst.w	r2, #1
 80019c6:	d103      	bne.n	80019d0 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d0:	6822      	ldr	r2, [r4, #0]
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019d8:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019da:	2322      	movs	r3, #34	; 0x22
 80019dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80019ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019ec:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80019f2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f8:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_I2C_Mem_Read+0x258>)
 80019fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019fc:	9501      	str	r5, [sp, #4]
 80019fe:	9600      	str	r6, [sp, #0]
 8001a00:	464b      	mov	r3, r9
 8001a02:	4642      	mov	r2, r8
 8001a04:	4639      	mov	r1, r7
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fd18 	bl	800143c <I2C_RequestMemoryRead>
 8001a0c:	4607      	mov	r7, r0
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	f040 8114 	bne.w	8001c3c <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 8001a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a16:	b95b      	cbnz	r3, 8001a30 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	9202      	str	r2, [sp, #8]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e075      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00a      	beq.n	8001a4a <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d01a      	beq.n	8001a6e <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9305      	str	r3, [sp, #20]
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	9205      	str	r2, [sp, #20]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	9b05      	ldr	r3, [sp, #20]
 8001a48:	e068      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a54:	2300      	movs	r3, #0
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	9203      	str	r2, [sp, #12]
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	9203      	str	r2, [sp, #12]
 8001a62:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e056      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	6822      	ldr	r2, [r4, #0]
 8001a70:	6813      	ldr	r3, [r2, #0]
 8001a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	9204      	str	r2, [sp, #16]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	9304      	str	r3, [sp, #16]
 8001a90:	9b04      	ldr	r3, [sp, #16]
 8001a92:	e043      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a94:	462a      	mov	r2, r5
 8001a96:	4631      	mov	r1, r6
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fda3 	bl	80015e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	f040 80ce 	bne.w	8001c40 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aaa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aae:	3301      	adds	r3, #1
 8001ab0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ab2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ac2:	e02b      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac4:	9500      	str	r5, [sp, #0]
 8001ac6:	4633      	mov	r3, r6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4940      	ldr	r1, [pc, #256]	; (8001bcc <HAL_I2C_Mem_Read+0x25c>)
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff fb8b 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	f040 80b6 	bne.w	8001c44 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001aec:	1c53      	adds	r3, r2, #1
 8001aee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001af0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001af6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d07f      	beq.n	8001c22 <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d854      	bhi.n	8001bd0 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d0b4      	beq.n	8001a94 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d0ca      	beq.n	8001ac4 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2e:	9500      	str	r5, [sp, #0]
 8001b30:	4633      	mov	r3, r6
 8001b32:	2200      	movs	r2, #0
 8001b34:	4925      	ldr	r1, [pc, #148]	; (8001bcc <HAL_I2C_Mem_Read+0x25c>)
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff fb56 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	f040 8083 	bne.w	8001c48 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b52:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b56:	3301      	adds	r3, #1
 8001b58:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	9500      	str	r5, [sp, #0]
 8001b6c:	4633      	mov	r3, r6
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_I2C_Mem_Read+0x25c>)
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff fb38 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d167      	bne.n	8001c4c <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	6822      	ldr	r2, [r4, #0]
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b84:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b8c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b90:	1c53      	adds	r3, r2, #1
 8001b92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bac:	3301      	adds	r3, #1
 8001bae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001bb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001bc0:	e7ac      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
 8001bc2:	bf00      	nop
 8001bc4:	00100002 	.word	0x00100002
 8001bc8:	ffff0000 	.word	0xffff0000
 8001bcc:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd0:	462a      	mov	r2, r5
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fd05 	bl	80015e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d138      	bne.n	8001c50 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001be6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001be8:	1c53      	adds	r3, r2, #1
 8001bea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001bf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	f011 0f04 	tst.w	r1, #4
 8001c04:	d08a      	beq.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c12:	3b01      	subs	r3, #1
 8001c14:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001c20:	e77c      	b.n	8001b1c <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	2320      	movs	r3, #32
 8001c24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001c2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001c32:	e6ae      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8001c34:	2702      	movs	r7, #2
 8001c36:	e6ac      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001c38:	2702      	movs	r7, #2
 8001c3a:	e6aa      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8001c3c:	2701      	movs	r7, #1
 8001c3e:	e6a8      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001c40:	2701      	movs	r7, #1
 8001c42:	e6a6      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001c44:	2701      	movs	r7, #1
 8001c46:	e6a4      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001c48:	2701      	movs	r7, #1
 8001c4a:	e6a2      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001c4c:	2701      	movs	r7, #1
 8001c4e:	e6a0      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8001c50:	2701      	movs	r7, #1
 8001c52:	e69e      	b.n	8001992 <HAL_I2C_Mem_Read+0x22>

08001c54 <HAL_I2C_IsDeviceReady>:
{
 8001c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4688      	mov	r8, r1
 8001c5e:	4691      	mov	r9, r2
 8001c60:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff f8d9 	bl	8000e18 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d003      	beq.n	8001c78 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001c70:	2002      	movs	r0, #2
}
 8001c72:	b005      	add	sp, #20
 8001c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c78:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c7a:	9000      	str	r0, [sp, #0]
 8001c7c:	2319      	movs	r3, #25
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4957      	ldr	r1, [pc, #348]	; (8001de0 <HAL_I2C_IsDeviceReady+0x18c>)
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff fab0 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f040 80a0 	bne.w	8001dce <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8001c8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f000 809d 	beq.w	8001dd2 <HAL_I2C_IsDeviceReady+0x17e>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f012 0f01 	tst.w	r2, #1
 8001ca6:	d103      	bne.n	8001cb0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cb8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cba:	2324      	movs	r3, #36	; 0x24
 8001cbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	2700      	movs	r7, #0
 8001cc2:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_I2C_IsDeviceReady+0x190>)
 8001cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cc8:	e040      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cd2:	d002      	beq.n	8001cda <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	e7c9      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cde:	23a0      	movs	r3, #160	; 0xa0
 8001ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	6953      	ldr	r3, [r2, #20]
 8001ce8:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cec:	6952      	ldr	r2, [r2, #20]
 8001cee:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cf2:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8001cf6:	fa5f fc8c 	uxtb.w	ip, ip
 8001cfa:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8001cfe:	d009      	beq.n	8001d14 <HAL_I2C_IsDeviceReady+0xc0>
 8001d00:	b943      	cbnz	r3, 8001d14 <HAL_I2C_IsDeviceReady+0xc0>
 8001d02:	b93a      	cbnz	r2, 8001d14 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff f888 	bl	8000e18 <HAL_GetTick>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	42a8      	cmp	r0, r5
 8001d0c:	d8e7      	bhi.n	8001cde <HAL_I2C_IsDeviceReady+0x8a>
 8001d0e:	2d00      	cmp	r5, #0
 8001d10:	d1e8      	bne.n	8001ce4 <HAL_I2C_IsDeviceReady+0x90>
 8001d12:	e7e4      	b.n	8001cde <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	2320      	movs	r3, #32
 8001d16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	f012 0f02 	tst.w	r2, #2
 8001d22:	d131      	bne.n	8001d88 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d32:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d34:	9600      	str	r6, [sp, #0]
 8001d36:	2319      	movs	r3, #25
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4929      	ldr	r1, [pc, #164]	; (8001de0 <HAL_I2C_IsDeviceReady+0x18c>)
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff fa53 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d149      	bne.n	8001dda <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8001d46:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001d48:	454f      	cmp	r7, r9
 8001d4a:	d238      	bcs.n	8001dbe <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4c:	6822      	ldr	r2, [r4, #0]
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d56:	9600      	str	r6, [sp, #0]
 8001d58:	462b      	mov	r3, r5
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff fa41 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d1af      	bne.n	8001cca <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8001d70:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001d72:	f7ff f851 	bl	8000e18 <HAL_GetTick>
 8001d76:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	6953      	ldr	r3, [r2, #20]
 8001d7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d80:	6952      	ldr	r2, [r2, #20]
 8001d82:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d86:	e7b4      	b.n	8001cf2 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d90:	2300      	movs	r3, #0
 8001d92:	9303      	str	r3, [sp, #12]
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	9203      	str	r2, [sp, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	9303      	str	r3, [sp, #12]
 8001d9e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da0:	9600      	str	r6, [sp, #0]
 8001da2:	2319      	movs	r3, #25
 8001da4:	2201      	movs	r2, #1
 8001da6:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_I2C_IsDeviceReady+0x18c>)
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fa1d 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001dae:	b990      	cbnz	r0, 8001dd6 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	2320      	movs	r3, #32
 8001db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001db6:	2300      	movs	r3, #0
 8001db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8001dbc:	e759      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e751      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8001dce:	2002      	movs	r0, #2
 8001dd0:	e74f      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	e74d      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e74b      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e749      	b.n	8001c72 <HAL_I2C_IsDeviceReady+0x1e>
 8001dde:	bf00      	nop
 8001de0:	00100002 	.word	0x00100002
 8001de4:	ffff0000 	.word	0xffff0000

08001de8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f000 81e0 	beq.w	80021ae <HAL_RCC_OscConfig+0x3c6>
{
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df4:	6803      	ldr	r3, [r0, #0]
 8001df6:	f013 0f01 	tst.w	r3, #1
 8001dfa:	d03b      	beq.n	8001e74 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfc:	4b9f      	ldr	r3, [pc, #636]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d02c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e08:	4b9c      	ldr	r3, [pc, #624]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d021      	beq.n	8001e58 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	6863      	ldr	r3, [r4, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d04f      	beq.n	8001ebc <HAL_RCC_OscConfig+0xd4>
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d052      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe0>
 8001e22:	4b96      	ldr	r3, [pc, #600]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d050      	beq.n	8001edc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ffed 	bl	8000e18 <HAL_GetTick>
 8001e3e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e48:	d114      	bne.n	8001e74 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4a:	f7fe ffe5 	bl	8000e18 <HAL_GetTick>
 8001e4e:	1b40      	subs	r0, r0, r5
 8001e50:	2864      	cmp	r0, #100	; 0x64
 8001e52:	d9f5      	bls.n	8001e40 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001e54:	2003      	movs	r0, #3
 8001e56:	e1b1      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e58:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e60:	d0d8      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b86      	ldr	r3, [pc, #536]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_OscConfig+0x8c>
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 819f 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	f013 0f02 	tst.w	r3, #2
 8001e7a:	d054      	beq.n	8001f26 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e7c:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f013 0f0c 	tst.w	r3, #12
 8001e84:	d03e      	beq.n	8001f04 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b7d      	ldr	r3, [pc, #500]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d033      	beq.n	8001efa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e92:	68e3      	ldr	r3, [r4, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d068      	beq.n	8001f6a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7fe ffbb 	bl	8000e18 <HAL_GetTick>
 8001ea2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f013 0f02 	tst.w	r3, #2
 8001eac:	d154      	bne.n	8001f58 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eae:	f7fe ffb3 	bl	8000e18 <HAL_GetTick>
 8001eb2:	1b40      	subs	r0, r0, r5
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	d9f5      	bls.n	8001ea4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001eb8:	2003      	movs	r0, #3
 8001eba:	e17f      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	4a6f      	ldr	r2, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e7b5      	b.n	8001e34 <HAL_RCC_OscConfig+0x4c>
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e7ab      	b.n	8001e34 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff9c 	bl	8000e18 <HAL_GetTick>
 8001ee0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001eea:	d0c3      	beq.n	8001e74 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7fe ff94 	bl	8000e18 <HAL_GetTick>
 8001ef0:	1b40      	subs	r0, r0, r5
 8001ef2:	2864      	cmp	r0, #100	; 0x64
 8001ef4:	d9f5      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	e160      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f02:	d1c6      	bne.n	8001e92 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f04:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f013 0f02 	tst.w	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_OscConfig+0x12e>
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 8150 	bne.w	80021b6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f1e:	6921      	ldr	r1, [r4, #16]
 8001f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f24:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f013 0f08 	tst.w	r3, #8
 8001f2c:	d042      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2e:	6963      	ldr	r3, [r4, #20]
 8001f30:	b36b      	cbz	r3, 8001f8e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ff6d 	bl	8000e18 <HAL_GetTick>
 8001f3e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f013 0f02 	tst.w	r3, #2
 8001f48:	d134      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7fe ff65 	bl	8000e18 <HAL_GetTick>
 8001f4e:	1b40      	subs	r0, r0, r5
 8001f50:	2802      	cmp	r0, #2
 8001f52:	d9f5      	bls.n	8001f40 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001f54:	2003      	movs	r0, #3
 8001f56:	e131      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f60:	6921      	ldr	r1, [r4, #16]
 8001f62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e7dd      	b.n	8001f26 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff52 	bl	8000e18 <HAL_GetTick>
 8001f74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f013 0f02 	tst.w	r3, #2
 8001f7e:	d0d2      	beq.n	8001f26 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe ff4a 	bl	8000e18 <HAL_GetTick>
 8001f84:	1b40      	subs	r0, r0, r5
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f5      	bls.n	8001f76 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	e116      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe ff3f 	bl	8000e18 <HAL_GetTick>
 8001f9a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa0:	f013 0f02 	tst.w	r3, #2
 8001fa4:	d006      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7fe ff37 	bl	8000e18 <HAL_GetTick>
 8001faa:	1b40      	subs	r0, r0, r5
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f5      	bls.n	8001f9c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	e103      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f013 0f04 	tst.w	r3, #4
 8001fba:	d077      	beq.n	80020ac <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001fc4:	d133      	bne.n	800202e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fde:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCC_OscConfig+0x29c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fe8:	d023      	beq.n	8002032 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	68a3      	ldr	r3, [r4, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d034      	beq.n	800205a <HAL_RCC_OscConfig+0x272>
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d038      	beq.n	8002066 <HAL_RCC_OscConfig+0x27e>
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8001ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	671a      	str	r2, [r3, #112]	; 0x70
 8001ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002000:	f022 0204 	bic.w	r2, r2, #4
 8002004:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002006:	68a3      	ldr	r3, [r4, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03d      	beq.n	8002088 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7fe ff04 	bl	8000e18 <HAL_GetTick>
 8002010:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	f013 0f02 	tst.w	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7fe fefc 	bl	8000e18 <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	f241 3388 	movw	r3, #5000	; 0x1388
 8002026:	4298      	cmp	r0, r3
 8002028:	d9f3      	bls.n	8002012 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
 800202c:	e0c6      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2500      	movs	r5, #0
 8002030:	e7d6      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_RCC_OscConfig+0x29c>)
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800203c:	f7fe feec 	bl	8000e18 <HAL_GetTick>
 8002040:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_OscConfig+0x29c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f413 7f80 	tst.w	r3, #256	; 0x100
 800204a:	d1ce      	bne.n	8001fea <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe fee4 	bl	8000e18 <HAL_GetTick>
 8002050:	1b80      	subs	r0, r0, r6
 8002052:	2802      	cmp	r0, #2
 8002054:	d9f5      	bls.n	8002042 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002056:	2003      	movs	r0, #3
 8002058:	e0b0      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_OscConfig+0x294>)
 800205c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	e7cf      	b.n	8002006 <HAL_RCC_OscConfig+0x21e>
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_OscConfig+0x294>)
 8002068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800206a:	f042 0204 	orr.w	r2, r2, #4
 800206e:	671a      	str	r2, [r3, #112]	; 0x70
 8002070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	671a      	str	r2, [r3, #112]	; 0x70
 8002078:	e7c5      	b.n	8002006 <HAL_RCC_OscConfig+0x21e>
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	42470000 	.word	0x42470000
 8002084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe fec6 	bl	8000e18 <HAL_GetTick>
 800208c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208e:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f013 0f02 	tst.w	r3, #2
 8002096:	d008      	beq.n	80020aa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe febe 	bl	8000e18 <HAL_GetTick>
 800209c:	1b80      	subs	r0, r0, r6
 800209e:	f241 3388 	movw	r3, #5000	; 0x1388
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d9f3      	bls.n	800208e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80020a6:	2003      	movs	r0, #3
 80020a8:	e088      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020aa:	b9ed      	cbnz	r5, 80020e8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ac:	69a3      	ldr	r3, [r4, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8083 	beq.w	80021ba <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 80020b6:	6892      	ldr	r2, [r2, #8]
 80020b8:	f002 020c 	and.w	r2, r2, #12
 80020bc:	2a08      	cmp	r2, #8
 80020be:	d051      	beq.n	8002164 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d017      	beq.n	80020f4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b45      	ldr	r3, [pc, #276]	; (80021dc <HAL_RCC_OscConfig+0x3f4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fea5 	bl	8000e18 <HAL_GetTick>
 80020ce:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020d8:	d042      	beq.n	8002160 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe fe9d 	bl	8000e18 <HAL_GetTick>
 80020de:	1b00      	subs	r0, r0, r4
 80020e0:	2802      	cmp	r0, #2
 80020e2:	d9f5      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020e4:	2003      	movs	r0, #3
 80020e6:	e069      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 80020ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	e7db      	b.n	80020ac <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_OscConfig+0x3f4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80020fa:	f7fe fe8d 	bl	8000e18 <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002108:	d006      	beq.n	8002118 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fe85 	bl	8000e18 <HAL_GetTick>
 800210e:	1b40      	subs	r0, r0, r5
 8002110:	2802      	cmp	r0, #2
 8002112:	d9f5      	bls.n	8002100 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002114:	2003      	movs	r0, #3
 8002116:	e051      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002118:	69e3      	ldr	r3, [r4, #28]
 800211a:	6a22      	ldr	r2, [r4, #32]
 800211c:	4313      	orrs	r3, r2
 800211e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002124:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002126:	0852      	lsrs	r2, r2, #1
 8002128:	3a01      	subs	r2, #1
 800212a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800212e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002130:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 8002136:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x3f4>)
 800213a:	2201      	movs	r2, #1
 800213c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800213e:	f7fe fe6b 	bl	8000e18 <HAL_GetTick>
 8002142:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe fe63 	bl	8000e18 <HAL_GetTick>
 8002152:	1b00      	subs	r0, r0, r4
 8002154:	2802      	cmp	r0, #2
 8002156:	d9f5      	bls.n	8002144 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
 800215a:	e02f      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800215c:	2000      	movs	r0, #0
 800215e:	e02d      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 8002160:	2000      	movs	r0, #0
 8002162:	e02b      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	2b01      	cmp	r3, #1
 8002166:	d02b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x3f0>)
 800216a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002170:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	4291      	cmp	r1, r2
 8002174:	d126      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217c:	428a      	cmp	r2, r1
 800217e:	d123      	bne.n	80021c8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002180:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002182:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002186:	401a      	ands	r2, r3
 8002188:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800218c:	d11e      	bne.n	80021cc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002192:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002194:	0852      	lsrs	r2, r2, #1
 8002196:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002198:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800219e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80021a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80021a8:	d114      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80021aa:	2000      	movs	r0, #0
 80021ac:	e006      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	4770      	bx	lr
        return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e002      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80021ba:	2000      	movs	r0, #0
}
 80021bc:	b002      	add	sp, #8
 80021be:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7fb      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e7f9      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 80021c8:	2001      	movs	r0, #1
 80021ca:	e7f7      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 80021cc:	2001      	movs	r0, #1
 80021ce:	e7f5      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 80021d0:	2001      	movs	r0, #1
 80021d2:	e7f3      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 80021d4:	2001      	movs	r0, #1
 80021d6:	e7f1      	b.n	80021bc <HAL_RCC_OscConfig+0x3d4>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	42470000 	.word	0x42470000

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ee:	482f      	ldr	r0, [pc, #188]	; (80022ac <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021f0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002200:	d02c      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002204:	6858      	ldr	r0, [r3, #4]
 8002206:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800220a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800220e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002212:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002216:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800221a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800221e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002222:	ebb1 010c 	subs.w	r1, r1, ip
 8002226:	eb63 030e 	sbc.w	r3, r3, lr
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002230:	00c9      	lsls	r1, r1, #3
 8002232:	eb11 0c00 	adds.w	ip, r1, r0
 8002236:	f143 0300 	adc.w	r3, r3, #0
 800223a:	0299      	lsls	r1, r3, #10
 800223c:	2300      	movs	r3, #0
 800223e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002242:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002246:	f7fe f813 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002256:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800225a:	e7c9      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800225e:	6858      	ldr	r0, [r3, #4]
 8002260:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002264:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002268:	ebbc 0c00 	subs.w	ip, ip, r0
 800226c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002270:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002274:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002278:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800227c:	ebb1 010c 	subs.w	r1, r1, ip
 8002280:	eb63 030e 	sbc.w	r3, r3, lr
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228a:	00c9      	lsls	r1, r1, #3
 800228c:	eb11 0c00 	adds.w	ip, r1, r0
 8002290:	f143 0300 	adc.w	r3, r3, #0
 8002294:	0299      	lsls	r1, r3, #10
 8002296:	2300      	movs	r3, #0
 8002298:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800229c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80022a0:	f7fd ffe6 	bl	8000270 <__aeabi_uldivmod>
 80022a4:	e7d1      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x6a>
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400

080022b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80022b0:	2800      	cmp	r0, #0
 80022b2:	f000 809b 	beq.w	80023ec <HAL_RCC_ClockConfig+0x13c>
{
 80022b6:	b570      	push	{r4, r5, r6, lr}
 80022b8:	460d      	mov	r5, r1
 80022ba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_ClockConfig+0x14c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	428b      	cmp	r3, r1
 80022c6:	d208      	bcs.n	80022da <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c8:	b2cb      	uxtb	r3, r1
 80022ca:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <HAL_RCC_ClockConfig+0x14c>)
 80022cc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	428b      	cmp	r3, r1
 80022d6:	f040 808b 	bne.w	80023f0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	f013 0f02 	tst.w	r3, #2
 80022e0:	d017      	beq.n	8002312 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e2:	f013 0f04 	tst.w	r3, #4
 80022e6:	d004      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4a45      	ldr	r2, [pc, #276]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 80022ea:	6893      	ldr	r3, [r2, #8]
 80022ec:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f013 0f08 	tst.w	r3, #8
 80022f8:	d004      	beq.n	8002304 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 80022fc:	6893      	ldr	r3, [r2, #8]
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002306:	6893      	ldr	r3, [r2, #8]
 8002308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230c:	68a1      	ldr	r1, [r4, #8]
 800230e:	430b      	orrs	r3, r1
 8002310:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	f013 0f01 	tst.w	r3, #1
 8002318:	d032      	beq.n	8002380 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	6863      	ldr	r3, [r4, #4]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d021      	beq.n	8002364 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002320:	1e9a      	subs	r2, r3, #2
 8002322:	2a01      	cmp	r2, #1
 8002324:	d925      	bls.n	8002372 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f012 0f02 	tst.w	r2, #2
 800232e:	d061      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002330:	4933      	ldr	r1, [pc, #204]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002332:	688a      	ldr	r2, [r1, #8]
 8002334:	f022 0203 	bic.w	r2, r2, #3
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800233c:	f7fe fd6c 	bl	8000e18 <HAL_GetTick>
 8002340:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	6862      	ldr	r2, [r4, #4]
 800234c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002350:	d016      	beq.n	8002380 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7fe fd61 	bl	8000e18 <HAL_GetTick>
 8002356:	1b80      	subs	r0, r0, r6
 8002358:	f241 3388 	movw	r3, #5000	; 0x1388
 800235c:	4298      	cmp	r0, r3
 800235e:	d9f0      	bls.n	8002342 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
 8002362:	e042      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800236c:	d1e0      	bne.n	8002330 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
 8002370:	e03b      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4a23      	ldr	r2, [pc, #140]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800237a:	d1d9      	bne.n	8002330 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
 800237e:	e034      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCC_ClockConfig+0x14c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	42ab      	cmp	r3, r5
 800238a:	d907      	bls.n	800239c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238c:	b2ea      	uxtb	r2, r5
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_ClockConfig+0x14c>)
 8002390:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	42ab      	cmp	r3, r5
 800239a:	d12d      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f013 0f04 	tst.w	r3, #4
 80023a2:	d006      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 80023a6:	6893      	ldr	r3, [r2, #8]
 80023a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023ac:	68e1      	ldr	r1, [r4, #12]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	f013 0f08 	tst.w	r3, #8
 80023b8:	d007      	beq.n	80023ca <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 80023bc:	6893      	ldr	r3, [r2, #8]
 80023be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023c2:	6921      	ldr	r1, [r4, #16]
 80023c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023c8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ca:	f7ff ff09 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_RCC_ClockConfig+0x150>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x154>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	40d8      	lsrs	r0, r3
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x158>)
 80023de:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_ClockConfig+0x15c>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f7fe fccc 	bl	8000d80 <HAL_InitTick>
  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
}
 80023ee:	4770      	bx	lr
      return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
 80023f2:	e7fa      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	e7f8      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7f6      	b.n	80023ea <HAL_RCC_ClockConfig+0x13a>
 80023fc:	40023c00 	.word	0x40023c00
 8002400:	40023800 	.word	0x40023800
 8002404:	08003924 	.word	0x08003924
 8002408:	20000000 	.word	0x20000000
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <HAL_RCC_GetHCLKFreq+0x8>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241e:	f7ff fff7 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800242a:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
}
 800242e:	40d8      	lsrs	r0, r3
 8002430:	bd08      	pop	{r3, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	08003934 	.word	0x08003934

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243e:	f7ff ffe7 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800244a:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
}
 800244e:	40d8      	lsrs	r0, r3
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	08003934 	.word	0x08003934

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	b510      	push	{r4, lr}
 800245e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	6802      	ldr	r2, [r0, #0]
 8002462:	6913      	ldr	r3, [r2, #16]
 8002464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002468:	68c1      	ldr	r1, [r0, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800246e:	6883      	ldr	r3, [r0, #8]
 8002470:	6902      	ldr	r2, [r0, #16]
 8002472:	431a      	orrs	r2, r3
 8002474:	6943      	ldr	r3, [r0, #20]
 8002476:	431a      	orrs	r2, r3
 8002478:	69c3      	ldr	r3, [r0, #28]
 800247a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800247c:	6801      	ldr	r1, [r0, #0]
 800247e:	68cb      	ldr	r3, [r1, #12]
 8002480:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002484:	f023 030c 	bic.w	r3, r3, #12
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	6802      	ldr	r2, [r0, #0]
 800248e:	6953      	ldr	r3, [r2, #20]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	6981      	ldr	r1, [r0, #24]
 8002496:	430b      	orrs	r3, r1
 8002498:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800249a:	6803      	ldr	r3, [r0, #0]
 800249c:	4a31      	ldr	r2, [pc, #196]	; (8002564 <UART_SetConfig+0x108>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d006      	beq.n	80024b0 <UART_SetConfig+0x54>
 80024a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d002      	beq.n	80024b0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024aa:	f7ff ffb7 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 80024ae:	e001      	b.n	80024b4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b0:	f7ff ffc4 	bl	800243c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b4:	69e3      	ldr	r3, [r4, #28]
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d029      	beq.n	8002510 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024bc:	2100      	movs	r1, #0
 80024be:	1803      	adds	r3, r0, r0
 80024c0:	4149      	adcs	r1, r1
 80024c2:	181b      	adds	r3, r3, r0
 80024c4:	f141 0100 	adc.w	r1, r1, #0
 80024c8:	00c9      	lsls	r1, r1, #3
 80024ca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1818      	adds	r0, r3, r0
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80024d8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80024dc:	f141 0100 	adc.w	r1, r1, #0
 80024e0:	f7fd fec6 	bl	8000270 <__aeabi_uldivmod>
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <UART_SetConfig+0x10c>)
 80024e6:	fba2 3100 	umull	r3, r1, r2, r0
 80024ea:	0949      	lsrs	r1, r1, #5
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	fb03 0311 	mls	r3, r3, r1, r0
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	3332      	adds	r3, #50	; 0x32
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002500:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	6821      	ldr	r1, [r4, #0]
 800250a:	4413      	add	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }
}
 800250e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002510:	2300      	movs	r3, #0
 8002512:	1802      	adds	r2, r0, r0
 8002514:	eb43 0103 	adc.w	r1, r3, r3
 8002518:	1812      	adds	r2, r2, r0
 800251a:	f141 0100 	adc.w	r1, r1, #0
 800251e:	00c9      	lsls	r1, r1, #3
 8002520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002524:	00d2      	lsls	r2, r2, #3
 8002526:	1810      	adds	r0, r2, r0
 8002528:	f141 0100 	adc.w	r1, r1, #0
 800252c:	6862      	ldr	r2, [r4, #4]
 800252e:	1892      	adds	r2, r2, r2
 8002530:	415b      	adcs	r3, r3
 8002532:	f7fd fe9d 	bl	8000270 <__aeabi_uldivmod>
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <UART_SetConfig+0x10c>)
 8002538:	fba2 3100 	umull	r3, r1, r2, r0
 800253c:	0949      	lsrs	r1, r1, #5
 800253e:	2364      	movs	r3, #100	; 0x64
 8002540:	fb03 0311 	mls	r3, r3, r1, r0
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005a      	lsls	r2, r3, #1
 8002550:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002554:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	6821      	ldr	r1, [r4, #0]
 800255e:	4413      	add	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
 8002562:	e7d4      	b.n	800250e <UART_SetConfig+0xb2>
 8002564:	40011000 	.word	0x40011000
 8002568:	51eb851f 	.word	0x51eb851f

0800256c <UART_WaitOnFlagUntilTimeout>:
{
 800256c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002570:	4605      	mov	r5, r0
 8002572:	460f      	mov	r7, r1
 8002574:	4616      	mov	r6, r2
 8002576:	4699      	mov	r9, r3
 8002578:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	681c      	ldr	r4, [r3, #0]
 8002580:	ea37 0404 	bics.w	r4, r7, r4
 8002584:	bf0c      	ite	eq
 8002586:	2401      	moveq	r4, #1
 8002588:	2400      	movne	r4, #0
 800258a:	42b4      	cmp	r4, r6
 800258c:	d12d      	bne.n	80025ea <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 800258e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002592:	d0f3      	beq.n	800257c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002594:	f1b8 0f00 	cmp.w	r8, #0
 8002598:	d005      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x3a>
 800259a:	f7fe fc3d 	bl	8000e18 <HAL_GetTick>
 800259e:	eba0 0009 	sub.w	r0, r0, r9
 80025a2:	4540      	cmp	r0, r8
 80025a4:	d9ea      	bls.n	800257c <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025a6:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	f102 030c 	add.w	r3, r2, #12
 80025ac:	e853 3f00 	ldrex	r3, [r3]
 80025b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	320c      	adds	r2, #12
 80025b6:	e842 3100 	strex	r1, r3, [r2]
 80025ba:	2900      	cmp	r1, #0
 80025bc:	d1f3      	bne.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025be:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	f102 0314 	add.w	r3, r2, #20
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	3214      	adds	r2, #20
 80025ce:	e842 3100 	strex	r1, r3, [r2]
 80025d2:	2900      	cmp	r1, #0
 80025d4:	d1f3      	bne.n	80025be <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80025d6:	2320      	movs	r3, #32
 80025d8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025dc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80025e0:	2300      	movs	r3, #0
 80025e2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80025e6:	2003      	movs	r0, #3
 80025e8:	e000      	b.n	80025ec <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80025ea:	2000      	movs	r0, #0
}
 80025ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080025f0 <HAL_UART_Init>:
  if (huart == NULL)
 80025f0:	b358      	cbz	r0, 800264a <HAL_UART_Init+0x5a>
{
 80025f2:	b510      	push	{r4, lr}
 80025f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025fa:	b30b      	cbz	r3, 8002640 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	2324      	movs	r3, #36	; 0x24
 80025fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	68d3      	ldr	r3, [r2, #12]
 8002606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800260a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff ff25 	bl	800245c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	6913      	ldr	r3, [r2, #16]
 8002616:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800261a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	6953      	ldr	r3, [r2, #20]
 8002620:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002624:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	68d3      	ldr	r3, [r2, #12]
 800262a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800262e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	2000      	movs	r0, #0
 8002632:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002634:	2320      	movs	r3, #32
 8002636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800263a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800263e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002644:	f7fe fae2 	bl	8000c0c <HAL_UART_MspInit>
 8002648:	e7d8      	b.n	80025fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
}
 800264c:	4770      	bx	lr

0800264e <HAL_UART_Transmit>:
{
 800264e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002656:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	d154      	bne.n	800270a <HAL_UART_Transmit+0xbc>
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
 8002664:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002666:	2900      	cmp	r1, #0
 8002668:	d053      	beq.n	8002712 <HAL_UART_Transmit+0xc4>
 800266a:	2a00      	cmp	r2, #0
 800266c:	d053      	beq.n	8002716 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800266e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d051      	beq.n	800271a <HAL_UART_Transmit+0xcc>
 8002676:	2301      	movs	r3, #1
 8002678:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	2300      	movs	r3, #0
 800267e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	2321      	movs	r3, #33	; 0x21
 8002682:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002686:	f7fe fbc7 	bl	8000e18 <HAL_GetTick>
 800268a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800268c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002690:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002694:	68a3      	ldr	r3, [r4, #8]
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d005      	beq.n	80026a8 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800269c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80026a0:	2300      	movs	r3, #0
 80026a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80026a6:	e012      	b.n	80026ce <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a8:	6923      	ldr	r3, [r4, #16]
 80026aa:	b113      	cbz	r3, 80026b2 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80026ac:	f04f 0800 	mov.w	r8, #0
 80026b0:	e7f6      	b.n	80026a0 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 80026b2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80026b4:	2500      	movs	r5, #0
 80026b6:	e7f3      	b.n	80026a0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80026c4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80026c6:	b292      	uxth	r2, r2
 80026c8:	3a01      	subs	r2, #1
 80026ca:	b292      	uxth	r2, r2
 80026cc:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b173      	cbz	r3, 80026f2 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d4:	9600      	str	r6, [sp, #0]
 80026d6:	463b      	mov	r3, r7
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff45 	bl	800256c <UART_WaitOnFlagUntilTimeout>
 80026e2:	b9e0      	cbnz	r0, 800271e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80026e4:	2d00      	cmp	r5, #0
 80026e6:	d0e7      	beq.n	80026b8 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026f0:	e7e8      	b.n	80026c4 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	9600      	str	r6, [sp, #0]
 80026f4:	463b      	mov	r3, r7
 80026f6:	2200      	movs	r2, #0
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff ff36 	bl	800256c <UART_WaitOnFlagUntilTimeout>
 8002700:	b978      	cbnz	r0, 8002722 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8002702:	2320      	movs	r3, #32
 8002704:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002708:	e000      	b.n	800270c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800270a:	2002      	movs	r0, #2
}
 800270c:	b002      	add	sp, #8
 800270e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002712:	2001      	movs	r0, #1
 8002714:	e7fa      	b.n	800270c <HAL_UART_Transmit+0xbe>
 8002716:	2001      	movs	r0, #1
 8002718:	e7f8      	b.n	800270c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800271a:	2002      	movs	r0, #2
 800271c:	e7f6      	b.n	800270c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800271e:	2003      	movs	r0, #3
 8002720:	e7f4      	b.n	800270c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002722:	2003      	movs	r0, #3
 8002724:	e7f2      	b.n	800270c <HAL_UART_Transmit+0xbe>

08002726 <i2c_wait>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @param  i2c_address Target device address
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef i2c_wait(I2C_HandleTypeDef *i2c, uint16_t i2c_address) {
 8002726:	b570      	push	{r4, r5, r6, lr}
 8002728:	4605      	mov	r5, r0
 800272a:	460c      	mov	r4, r1

    uint32_t start_time = HAL_GetTick();
 800272c:	f7fe fb74 	bl	8000e18 <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002732:	0061      	lsls	r1, r4, #1
 8002734:	b289      	uxth	r1, r1
 8002736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800273a:	2201      	movs	r2, #1
 800273c:	4628      	mov	r0, r5
 800273e:	f7ff fa89 	bl	8001c54 <HAL_I2C_IsDeviceReady>
 8002742:	4603      	mov	r3, r0
 8002744:	b128      	cbz	r0, 8002752 <i2c_wait+0x2c>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 8002746:	f7fe fb67 	bl	8000e18 <HAL_GetTick>
 800274a:	1b83      	subs	r3, r0, r6
 800274c:	2b63      	cmp	r3, #99	; 0x63
 800274e:	d9f0      	bls.n	8002732 <i2c_wait+0xc>
            return M24CXX_Err;
 8002750:	2301      	movs	r3, #1
    }

    return M24CXX_Ok;
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd70      	pop	{r4, r5, r6, pc}

08002756 <m24cxx_isconnected>:
 * @brief  Check if m24cxx is connected
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 8002756:	b508      	push	{r3, lr}

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002758:	7901      	ldrb	r1, [r0, #4]
 800275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800275e:	2202      	movs	r2, #2
 8002760:	0049      	lsls	r1, r1, #1
 8002762:	6800      	ldr	r0, [r0, #0]
 8002764:	f7ff fa76 	bl	8001c54 <HAL_I2C_IsDeviceReady>
 8002768:	b900      	cbnz	r0, 800276c <m24cxx_isconnected+0x16>
        return M24CXX_Err;
    }

    return M24CXX_Ok;
}
 800276a:	bd08      	pop	{r3, pc}
        return M24CXX_Err;
 800276c:	2001      	movs	r0, #1
 800276e:	e7fc      	b.n	800276a <m24cxx_isconnected+0x14>

08002770 <m24cxx_init>:
M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 8002770:	b510      	push	{r4, lr}
 8002772:	4604      	mov	r4, r0
    m24cxx->i2c = i2c;
 8002774:	6001      	str	r1, [r0, #0]
    m24cxx->i2c_address = i2c_address;
 8002776:	7102      	strb	r2, [r0, #4]
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <m24cxx_init+0x24>)
 8002780:	f7fe fd0a 	bl	8001198 <HAL_GPIO_WritePin>
    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ffe6 	bl	8002756 <m24cxx_isconnected>
 800278a:	b900      	cbnz	r0, 800278e <m24cxx_init+0x1e>
}
 800278c:	bd10      	pop	{r4, pc}
        return M24CXX_Err;
 800278e:	2001      	movs	r0, #1
 8002790:	e7fc      	b.n	800278c <m24cxx_init+0x1c>
 8002792:	bf00      	nop
 8002794:	40020800 	.word	0x40020800

08002798 <m24cxx_read>:
 * @param  address from which to read data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8002798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279c:	b087      	sub	sp, #28
 800279e:	4680      	mov	r8, r0
 80027a0:	9105      	str	r1, [sp, #20]
 80027a2:	4692      	mov	sl, r2
 80027a4:	469b      	mov	fp, r3

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 80027a6:	ea4f 2911 	mov.w	r9, r1, lsr #8
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 80027aa:	18cf      	adds	r7, r1, r3
 80027ac:	3f01      	subs	r7, #1
 80027ae:	0a3f      	lsrs	r7, r7, #8
    uint32_t data_offset = 0;

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 80027b0:	464c      	mov	r4, r9
    uint32_t data_offset = 0;
 80027b2:	2600      	movs	r6, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 80027b4:	e01a      	b.n	80027ec <m24cxx_read+0x54>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 80027b6:	9a05      	ldr	r2, [sp, #20]
 80027b8:	e01d      	b.n	80027f6 <m24cxx_read+0x5e>
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 80027ba:	ebab 0506 	sub.w	r5, fp, r6
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 80027be:	f898 1004 	ldrb.w	r1, [r8, #4]
 80027c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len,
 80027c6:	0049      	lsls	r1, r1, #1
 80027c8:	b289      	uxth	r1, r1
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	b2ab      	uxth	r3, r5
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	eb0a 0306 	add.w	r3, sl, r6
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2310      	movs	r3, #16
 80027dc:	b292      	uxth	r2, r2
 80027de:	f8d8 0000 	ldr.w	r0, [r8]
 80027e2:	f7ff f8c5 	bl	8001970 <HAL_I2C_Mem_Read>
        HAL_MAX_DELAY);

        if (result != HAL_OK) {
 80027e6:	b9a8      	cbnz	r0, 8002814 <m24cxx_read+0x7c>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
        }

        data_offset += read_len;
 80027e8:	442e      	add	r6, r5
    for (uint32_t page = page_start; page <= page_end; ++page) {
 80027ea:	3401      	adds	r4, #1
 80027ec:	42bc      	cmp	r4, r7
 80027ee:	d80d      	bhi.n	800280c <m24cxx_read+0x74>
        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 80027f0:	454c      	cmp	r4, r9
 80027f2:	d0e0      	beq.n	80027b6 <m24cxx_read+0x1e>
 80027f4:	0222      	lsls	r2, r4, #8
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 80027f6:	42bc      	cmp	r4, r7
 80027f8:	d0df      	beq.n	80027ba <m24cxx_read+0x22>
 80027fa:	454c      	cmp	r4, r9
 80027fc:	d002      	beq.n	8002804 <m24cxx_read+0x6c>
 80027fe:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002802:	e7dc      	b.n	80027be <m24cxx_read+0x26>
 8002804:	1c65      	adds	r5, r4, #1
 8002806:	ebc2 2505 	rsb	r5, r2, r5, lsl #8
 800280a:	e7d8      	b.n	80027be <m24cxx_read+0x26>

    }

    return M24CXX_Ok;
 800280c:	2000      	movs	r0, #0
}
 800280e:	b007      	add	sp, #28
 8002810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 8002814:	2001      	movs	r0, #1
 8002816:	e7fa      	b.n	800280e <m24cxx_read+0x76>

08002818 <m24cxx_write>:
 * @param  address to which to write data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	b087      	sub	sp, #28
 800281e:	4607      	mov	r7, r0
 8002820:	9104      	str	r1, [sp, #16]
 8002822:	4693      	mov	fp, r2
 8002824:	9305      	str	r3, [sp, #20]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 8002826:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 800282a:	eb01 0903 	add.w	r9, r1, r3
 800282e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002832:	ea4f 2919 	mov.w	r9, r9, lsr #8
    uint32_t data_offset = 0;

    M24CXXDBG("Writing %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8002836:	2200      	movs	r2, #0
 8002838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283c:	4822      	ldr	r0, [pc, #136]	; (80028c8 <m24cxx_write+0xb0>)
 800283e:	f7fe fcab 	bl	8001198 <HAL_GPIO_WritePin>
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 8002842:	4655      	mov	r5, sl
    uint32_t data_offset = 0;
 8002844:	f04f 0800 	mov.w	r8, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8002848:	e01f      	b.n	800288a <m24cxx_write+0x72>

        uint32_t i2c_address, start_address, start_address_masked, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800284a:	9a04      	ldr	r2, [sp, #16]
 800284c:	e022      	b.n	8002894 <m24cxx_write+0x7c>
        start_address_masked = start_address & M24CXX_ADDRESS_MASK;
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800284e:	9b05      	ldr	r3, [sp, #20]
 8002850:	eba3 0608 	sub.w	r6, r3, r8
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8002854:	793c      	ldrb	r4, [r7, #4]
 8002856:	eb04 4412 	add.w	r4, r4, r2, lsr #16

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%06lx masked = 0x%06lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address_masked, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address_masked, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 800285a:	b2a4      	uxth	r4, r4
 800285c:	0061      	lsls	r1, r4, #1
 800285e:	b289      	uxth	r1, r1
 8002860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	b2b3      	uxth	r3, r6
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	eb0b 0308 	add.w	r3, fp, r8
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2310      	movs	r3, #16
 8002872:	b292      	uxth	r2, r2
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f7fe ffc9 	bl	800180c <HAL_I2C_Mem_Write>

        if (result != HAL_OK) {
 800287a:	bb00      	cbnz	r0, 80028be <m24cxx_write+0xa6>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
        }

        data_offset += write_len;
 800287c:	44b0      	add	r8, r6

        if (i2c_wait(m24cxx->i2c, i2c_address) != M24CXX_Ok) {
 800287e:	4621      	mov	r1, r4
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7ff ff50 	bl	8002726 <i2c_wait>
 8002886:	b9e0      	cbnz	r0, 80028c2 <m24cxx_write+0xaa>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8002888:	3501      	adds	r5, #1
 800288a:	454d      	cmp	r5, r9
 800288c:	d80d      	bhi.n	80028aa <m24cxx_write+0x92>
        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800288e:	4555      	cmp	r5, sl
 8002890:	d0db      	beq.n	800284a <m24cxx_write+0x32>
 8002892:	022a      	lsls	r2, r5, #8
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 8002894:	454d      	cmp	r5, r9
 8002896:	d0da      	beq.n	800284e <m24cxx_write+0x36>
 8002898:	4555      	cmp	r5, sl
 800289a:	d002      	beq.n	80028a2 <m24cxx_write+0x8a>
 800289c:	f44f 7680 	mov.w	r6, #256	; 0x100
 80028a0:	e7d8      	b.n	8002854 <m24cxx_write+0x3c>
 80028a2:	1c6e      	adds	r6, r5, #1
 80028a4:	ebc2 2606 	rsb	r6, r2, r6, lsl #8
 80028a8:	e7d4      	b.n	8002854 <m24cxx_write+0x3c>
        }

    }

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <m24cxx_write+0xb0>)
 80028b2:	f7fe fc71 	bl	8001198 <HAL_GPIO_WritePin>
#endif

    return M24CXX_Ok;
 80028b6:	2000      	movs	r0, #0
}
 80028b8:	b007      	add	sp, #28
 80028ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 80028be:	2001      	movs	r0, #1
 80028c0:	e7fa      	b.n	80028b8 <m24cxx_write+0xa0>
            return M24CXX_Err;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e7f8      	b.n	80028b8 <m24cxx_write+0xa0>
 80028c6:	bf00      	nop
 80028c8:	40020800 	.word	0x40020800

080028cc <m24cxx_erase_all>:
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */

M24CXX_StatusTypeDef m24cxx_erase_all(M24CXX_HandleTypeDef *m24cxx) {
 80028cc:	b530      	push	{r4, r5, lr}
 80028ce:	b0c1      	sub	sp, #260	; 0x104
 80028d0:	4605      	mov	r5, r0

    M24CXXDBG("M24CXX erase all");

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];

    memset(buf, 0xff, sizeof(buf));
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	21ff      	movs	r1, #255	; 0xff
 80028d8:	4668      	mov	r0, sp
 80028da:	f000 f920 	bl	8002b1e <memset>

    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 80028de:	2400      	movs	r4, #0
 80028e0:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80028e4:	d20a      	bcs.n	80028fc <m24cxx_erase_all+0x30>
        M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, i * M24CXX_WRITE_PAGE_SIZE, (uint8_t*) &buf, sizeof(buf));
 80028e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ea:	466a      	mov	r2, sp
 80028ec:	0221      	lsls	r1, r4, #8
 80028ee:	4628      	mov	r0, r5
 80028f0:	f7ff ff92 	bl	8002818 <m24cxx_write>
        if (result != M24CXX_Ok)
 80028f4:	4603      	mov	r3, r0
 80028f6:	b910      	cbnz	r0, 80028fe <m24cxx_erase_all+0x32>
    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 80028f8:	3401      	adds	r4, #1
 80028fa:	e7f1      	b.n	80028e0 <m24cxx_erase_all+0x14>
            return result;
    }

    return M24CXX_Ok;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	b041      	add	sp, #260	; 0x104
 8002902:	bd30      	pop	{r4, r5, pc}

08002904 <std>:
 8002904:	2300      	movs	r3, #0
 8002906:	b510      	push	{r4, lr}
 8002908:	4604      	mov	r4, r0
 800290a:	e9c0 3300 	strd	r3, r3, [r0]
 800290e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002912:	6083      	str	r3, [r0, #8]
 8002914:	8181      	strh	r1, [r0, #12]
 8002916:	6643      	str	r3, [r0, #100]	; 0x64
 8002918:	81c2      	strh	r2, [r0, #14]
 800291a:	6183      	str	r3, [r0, #24]
 800291c:	4619      	mov	r1, r3
 800291e:	2208      	movs	r2, #8
 8002920:	305c      	adds	r0, #92	; 0x5c
 8002922:	f000 f8fc 	bl	8002b1e <memset>
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <std+0x38>)
 8002928:	6263      	str	r3, [r4, #36]	; 0x24
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <std+0x3c>)
 800292c:	62a3      	str	r3, [r4, #40]	; 0x28
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <std+0x40>)
 8002930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <std+0x44>)
 8002934:	6224      	str	r4, [r4, #32]
 8002936:	6323      	str	r3, [r4, #48]	; 0x30
 8002938:	bd10      	pop	{r4, pc}
 800293a:	bf00      	nop
 800293c:	08002a99 	.word	0x08002a99
 8002940:	08002abb 	.word	0x08002abb
 8002944:	08002af3 	.word	0x08002af3
 8002948:	08002b17 	.word	0x08002b17

0800294c <stdio_exit_handler>:
 800294c:	4a02      	ldr	r2, [pc, #8]	; (8002958 <stdio_exit_handler+0xc>)
 800294e:	4903      	ldr	r1, [pc, #12]	; (800295c <stdio_exit_handler+0x10>)
 8002950:	4803      	ldr	r0, [pc, #12]	; (8002960 <stdio_exit_handler+0x14>)
 8002952:	f000 b869 	b.w	8002a28 <_fwalk_sglue>
 8002956:	bf00      	nop
 8002958:	2000000c 	.word	0x2000000c
 800295c:	080034b9 	.word	0x080034b9
 8002960:	20000018 	.word	0x20000018

08002964 <cleanup_stdio>:
 8002964:	6841      	ldr	r1, [r0, #4]
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <cleanup_stdio+0x34>)
 8002968:	4299      	cmp	r1, r3
 800296a:	b510      	push	{r4, lr}
 800296c:	4604      	mov	r4, r0
 800296e:	d001      	beq.n	8002974 <cleanup_stdio+0x10>
 8002970:	f000 fda2 	bl	80034b8 <_fflush_r>
 8002974:	68a1      	ldr	r1, [r4, #8]
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <cleanup_stdio+0x38>)
 8002978:	4299      	cmp	r1, r3
 800297a:	d002      	beq.n	8002982 <cleanup_stdio+0x1e>
 800297c:	4620      	mov	r0, r4
 800297e:	f000 fd9b 	bl	80034b8 <_fflush_r>
 8002982:	68e1      	ldr	r1, [r4, #12]
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <cleanup_stdio+0x3c>)
 8002986:	4299      	cmp	r1, r3
 8002988:	d004      	beq.n	8002994 <cleanup_stdio+0x30>
 800298a:	4620      	mov	r0, r4
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002990:	f000 bd92 	b.w	80034b8 <_fflush_r>
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	20000134 	.word	0x20000134
 800299c:	2000019c 	.word	0x2000019c
 80029a0:	20000204 	.word	0x20000204

080029a4 <global_stdio_init.part.0>:
 80029a4:	b510      	push	{r4, lr}
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <global_stdio_init.part.0+0x30>)
 80029a8:	4c0b      	ldr	r4, [pc, #44]	; (80029d8 <global_stdio_init.part.0+0x34>)
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <global_stdio_init.part.0+0x38>)
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4620      	mov	r0, r4
 80029b0:	2200      	movs	r2, #0
 80029b2:	2104      	movs	r1, #4
 80029b4:	f7ff ffa6 	bl	8002904 <std>
 80029b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80029bc:	2201      	movs	r2, #1
 80029be:	2109      	movs	r1, #9
 80029c0:	f7ff ffa0 	bl	8002904 <std>
 80029c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80029c8:	2202      	movs	r2, #2
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ce:	2112      	movs	r1, #18
 80029d0:	f7ff bf98 	b.w	8002904 <std>
 80029d4:	2000026c 	.word	0x2000026c
 80029d8:	20000134 	.word	0x20000134
 80029dc:	0800294d 	.word	0x0800294d

080029e0 <__sfp_lock_acquire>:
 80029e0:	4801      	ldr	r0, [pc, #4]	; (80029e8 <__sfp_lock_acquire+0x8>)
 80029e2:	f000 b915 	b.w	8002c10 <__retarget_lock_acquire_recursive>
 80029e6:	bf00      	nop
 80029e8:	20000275 	.word	0x20000275

080029ec <__sfp_lock_release>:
 80029ec:	4801      	ldr	r0, [pc, #4]	; (80029f4 <__sfp_lock_release+0x8>)
 80029ee:	f000 b910 	b.w	8002c12 <__retarget_lock_release_recursive>
 80029f2:	bf00      	nop
 80029f4:	20000275 	.word	0x20000275

080029f8 <__sinit>:
 80029f8:	b510      	push	{r4, lr}
 80029fa:	4604      	mov	r4, r0
 80029fc:	f7ff fff0 	bl	80029e0 <__sfp_lock_acquire>
 8002a00:	6a23      	ldr	r3, [r4, #32]
 8002a02:	b11b      	cbz	r3, 8002a0c <__sinit+0x14>
 8002a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a08:	f7ff bff0 	b.w	80029ec <__sfp_lock_release>
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <__sinit+0x28>)
 8002a0e:	6223      	str	r3, [r4, #32]
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <__sinit+0x2c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f5      	bne.n	8002a04 <__sinit+0xc>
 8002a18:	f7ff ffc4 	bl	80029a4 <global_stdio_init.part.0>
 8002a1c:	e7f2      	b.n	8002a04 <__sinit+0xc>
 8002a1e:	bf00      	nop
 8002a20:	08002965 	.word	0x08002965
 8002a24:	2000026c 	.word	0x2000026c

08002a28 <_fwalk_sglue>:
 8002a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	4688      	mov	r8, r1
 8002a30:	4614      	mov	r4, r2
 8002a32:	2600      	movs	r6, #0
 8002a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a38:	f1b9 0901 	subs.w	r9, r9, #1
 8002a3c:	d505      	bpl.n	8002a4a <_fwalk_sglue+0x22>
 8002a3e:	6824      	ldr	r4, [r4, #0]
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	d1f7      	bne.n	8002a34 <_fwalk_sglue+0xc>
 8002a44:	4630      	mov	r0, r6
 8002a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a4a:	89ab      	ldrh	r3, [r5, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d907      	bls.n	8002a60 <_fwalk_sglue+0x38>
 8002a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a54:	3301      	adds	r3, #1
 8002a56:	d003      	beq.n	8002a60 <_fwalk_sglue+0x38>
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	47c0      	blx	r8
 8002a5e:	4306      	orrs	r6, r0
 8002a60:	3568      	adds	r5, #104	; 0x68
 8002a62:	e7e9      	b.n	8002a38 <_fwalk_sglue+0x10>

08002a64 <iprintf>:
 8002a64:	b40f      	push	{r0, r1, r2, r3}
 8002a66:	b507      	push	{r0, r1, r2, lr}
 8002a68:	4906      	ldr	r1, [pc, #24]	; (8002a84 <iprintf+0x20>)
 8002a6a:	ab04      	add	r3, sp, #16
 8002a6c:	6808      	ldr	r0, [r1, #0]
 8002a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a72:	6881      	ldr	r1, [r0, #8]
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	f000 f9ef 	bl	8002e58 <_vfiprintf_r>
 8002a7a:	b003      	add	sp, #12
 8002a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a80:	b004      	add	sp, #16
 8002a82:	4770      	bx	lr
 8002a84:	20000064 	.word	0x20000064

08002a88 <putchar>:
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <putchar+0xc>)
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	6882      	ldr	r2, [r0, #8]
 8002a90:	f000 bd3a 	b.w	8003508 <_putc_r>
 8002a94:	20000064 	.word	0x20000064

08002a98 <__sread>:
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa0:	f000 f868 	bl	8002b74 <_read_r>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	bfab      	itete	ge
 8002aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8002aac:	181b      	addge	r3, r3, r0
 8002aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ab2:	bfac      	ite	ge
 8002ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ab6:	81a3      	strhlt	r3, [r4, #12]
 8002ab8:	bd10      	pop	{r4, pc}

08002aba <__swrite>:
 8002aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002abe:	461f      	mov	r7, r3
 8002ac0:	898b      	ldrh	r3, [r1, #12]
 8002ac2:	05db      	lsls	r3, r3, #23
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4616      	mov	r6, r2
 8002aca:	d505      	bpl.n	8002ad8 <__swrite+0x1e>
 8002acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f000 f83c 	bl	8002b50 <_lseek_r>
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae2:	81a3      	strh	r3, [r4, #12]
 8002ae4:	4632      	mov	r2, r6
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4628      	mov	r0, r5
 8002aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aee:	f000 b853 	b.w	8002b98 <_write_r>

08002af2 <__sseek>:
 8002af2:	b510      	push	{r4, lr}
 8002af4:	460c      	mov	r4, r1
 8002af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002afa:	f000 f829 	bl	8002b50 <_lseek_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	bf15      	itete	ne
 8002b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b0e:	81a3      	strheq	r3, [r4, #12]
 8002b10:	bf18      	it	ne
 8002b12:	81a3      	strhne	r3, [r4, #12]
 8002b14:	bd10      	pop	{r4, pc}

08002b16 <__sclose>:
 8002b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1a:	f000 b809 	b.w	8002b30 <_close_r>

08002b1e <memset>:
 8002b1e:	4402      	add	r2, r0
 8002b20:	4603      	mov	r3, r0
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d100      	bne.n	8002b28 <memset+0xa>
 8002b26:	4770      	bx	lr
 8002b28:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2c:	e7f9      	b.n	8002b22 <memset+0x4>
	...

08002b30 <_close_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4d06      	ldr	r5, [pc, #24]	; (8002b4c <_close_r+0x1c>)
 8002b34:	2300      	movs	r3, #0
 8002b36:	4604      	mov	r4, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	f7fe f8bc 	bl	8000cb8 <_close>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_close_r+0x1a>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_close_r+0x1a>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	20000270 	.word	0x20000270

08002b50 <_lseek_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	4d07      	ldr	r5, [pc, #28]	; (8002b70 <_lseek_r+0x20>)
 8002b54:	4604      	mov	r4, r0
 8002b56:	4608      	mov	r0, r1
 8002b58:	4611      	mov	r1, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	602a      	str	r2, [r5, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7fe f8b4 	bl	8000ccc <_lseek>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d102      	bne.n	8002b6e <_lseek_r+0x1e>
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	b103      	cbz	r3, 8002b6e <_lseek_r+0x1e>
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	20000270 	.word	0x20000270

08002b74 <_read_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4d07      	ldr	r5, [pc, #28]	; (8002b94 <_read_r+0x20>)
 8002b78:	4604      	mov	r4, r0
 8002b7a:	4608      	mov	r0, r1
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	2200      	movs	r2, #0
 8002b80:	602a      	str	r2, [r5, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7fe f888 	bl	8000c98 <_read>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d102      	bne.n	8002b92 <_read_r+0x1e>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	b103      	cbz	r3, 8002b92 <_read_r+0x1e>
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	20000270 	.word	0x20000270

08002b98 <_write_r>:
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	4d07      	ldr	r5, [pc, #28]	; (8002bb8 <_write_r+0x20>)
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	4608      	mov	r0, r1
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	602a      	str	r2, [r5, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f7fd fd34 	bl	8000614 <_write>
 8002bac:	1c43      	adds	r3, r0, #1
 8002bae:	d102      	bne.n	8002bb6 <_write_r+0x1e>
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	b103      	cbz	r3, 8002bb6 <_write_r+0x1e>
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
 8002bb8:	20000270 	.word	0x20000270

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000064 	.word	0x20000064

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 fdf2 	bl	80037c4 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08003978 	.word	0x08003978
 8002c04:	08003978 	.word	0x08003978
 8002c08:	08003978 	.word	0x08003978
 8002c0c:	0800397c 	.word	0x0800397c

08002c10 <__retarget_lock_acquire_recursive>:
 8002c10:	4770      	bx	lr

08002c12 <__retarget_lock_release_recursive>:
 8002c12:	4770      	bx	lr

08002c14 <_free_r>:
 8002c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d044      	beq.n	8002ca4 <_free_r+0x90>
 8002c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c1e:	9001      	str	r0, [sp, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f1a1 0404 	sub.w	r4, r1, #4
 8002c26:	bfb8      	it	lt
 8002c28:	18e4      	addlt	r4, r4, r3
 8002c2a:	f000 f8df 	bl	8002dec <__malloc_lock>
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <_free_r+0x94>)
 8002c30:	9801      	ldr	r0, [sp, #4]
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	b933      	cbnz	r3, 8002c44 <_free_r+0x30>
 8002c36:	6063      	str	r3, [r4, #4]
 8002c38:	6014      	str	r4, [r2, #0]
 8002c3a:	b003      	add	sp, #12
 8002c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c40:	f000 b8da 	b.w	8002df8 <__malloc_unlock>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d908      	bls.n	8002c5a <_free_r+0x46>
 8002c48:	6825      	ldr	r5, [r4, #0]
 8002c4a:	1961      	adds	r1, r4, r5
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	bf01      	itttt	eq
 8002c50:	6819      	ldreq	r1, [r3, #0]
 8002c52:	685b      	ldreq	r3, [r3, #4]
 8002c54:	1949      	addeq	r1, r1, r5
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	e7ed      	b.n	8002c36 <_free_r+0x22>
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b10b      	cbz	r3, 8002c64 <_free_r+0x50>
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	d9fa      	bls.n	8002c5a <_free_r+0x46>
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	1855      	adds	r5, r2, r1
 8002c68:	42a5      	cmp	r5, r4
 8002c6a:	d10b      	bne.n	8002c84 <_free_r+0x70>
 8002c6c:	6824      	ldr	r4, [r4, #0]
 8002c6e:	4421      	add	r1, r4
 8002c70:	1854      	adds	r4, r2, r1
 8002c72:	42a3      	cmp	r3, r4
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	d1e0      	bne.n	8002c3a <_free_r+0x26>
 8002c78:	681c      	ldr	r4, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	440c      	add	r4, r1
 8002c80:	6014      	str	r4, [r2, #0]
 8002c82:	e7da      	b.n	8002c3a <_free_r+0x26>
 8002c84:	d902      	bls.n	8002c8c <_free_r+0x78>
 8002c86:	230c      	movs	r3, #12
 8002c88:	6003      	str	r3, [r0, #0]
 8002c8a:	e7d6      	b.n	8002c3a <_free_r+0x26>
 8002c8c:	6825      	ldr	r5, [r4, #0]
 8002c8e:	1961      	adds	r1, r4, r5
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf04      	itt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	bf04      	itt	eq
 8002c9c:	1949      	addeq	r1, r1, r5
 8002c9e:	6021      	streq	r1, [r4, #0]
 8002ca0:	6054      	str	r4, [r2, #4]
 8002ca2:	e7ca      	b.n	8002c3a <_free_r+0x26>
 8002ca4:	b003      	add	sp, #12
 8002ca6:	bd30      	pop	{r4, r5, pc}
 8002ca8:	20000278 	.word	0x20000278

08002cac <sbrk_aligned>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4e0e      	ldr	r6, [pc, #56]	; (8002ce8 <sbrk_aligned+0x3c>)
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	6831      	ldr	r1, [r6, #0]
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	b911      	cbnz	r1, 8002cbe <sbrk_aligned+0x12>
 8002cb8:	f000 fcf0 	bl	800369c <_sbrk_r>
 8002cbc:	6030      	str	r0, [r6, #0]
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 fceb 	bl	800369c <_sbrk_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	d00a      	beq.n	8002ce0 <sbrk_aligned+0x34>
 8002cca:	1cc4      	adds	r4, r0, #3
 8002ccc:	f024 0403 	bic.w	r4, r4, #3
 8002cd0:	42a0      	cmp	r0, r4
 8002cd2:	d007      	beq.n	8002ce4 <sbrk_aligned+0x38>
 8002cd4:	1a21      	subs	r1, r4, r0
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f000 fce0 	bl	800369c <_sbrk_r>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d101      	bne.n	8002ce4 <sbrk_aligned+0x38>
 8002ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	2000027c 	.word	0x2000027c

08002cec <_malloc_r>:
 8002cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	1ccd      	adds	r5, r1, #3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	4607      	mov	r7, r0
 8002d02:	db01      	blt.n	8002d08 <_malloc_r+0x1c>
 8002d04:	42a9      	cmp	r1, r5
 8002d06:	d905      	bls.n	8002d14 <_malloc_r+0x28>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	2600      	movs	r6, #0
 8002d0e:	4630      	mov	r0, r6
 8002d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002de8 <_malloc_r+0xfc>
 8002d18:	f000 f868 	bl	8002dec <__malloc_lock>
 8002d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d20:	461c      	mov	r4, r3
 8002d22:	bb5c      	cbnz	r4, 8002d7c <_malloc_r+0x90>
 8002d24:	4629      	mov	r1, r5
 8002d26:	4638      	mov	r0, r7
 8002d28:	f7ff ffc0 	bl	8002cac <sbrk_aligned>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	4604      	mov	r4, r0
 8002d30:	d155      	bne.n	8002dde <_malloc_r+0xf2>
 8002d32:	f8d8 4000 	ldr.w	r4, [r8]
 8002d36:	4626      	mov	r6, r4
 8002d38:	2e00      	cmp	r6, #0
 8002d3a:	d145      	bne.n	8002dc8 <_malloc_r+0xdc>
 8002d3c:	2c00      	cmp	r4, #0
 8002d3e:	d048      	beq.n	8002dd2 <_malloc_r+0xe6>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	4631      	mov	r1, r6
 8002d44:	4638      	mov	r0, r7
 8002d46:	eb04 0903 	add.w	r9, r4, r3
 8002d4a:	f000 fca7 	bl	800369c <_sbrk_r>
 8002d4e:	4581      	cmp	r9, r0
 8002d50:	d13f      	bne.n	8002dd2 <_malloc_r+0xe6>
 8002d52:	6821      	ldr	r1, [r4, #0]
 8002d54:	1a6d      	subs	r5, r5, r1
 8002d56:	4629      	mov	r1, r5
 8002d58:	4638      	mov	r0, r7
 8002d5a:	f7ff ffa7 	bl	8002cac <sbrk_aligned>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d037      	beq.n	8002dd2 <_malloc_r+0xe6>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	442b      	add	r3, r5
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d038      	beq.n	8002de2 <_malloc_r+0xf6>
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	42a2      	cmp	r2, r4
 8002d74:	d12b      	bne.n	8002dce <_malloc_r+0xe2>
 8002d76:	2200      	movs	r2, #0
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e00f      	b.n	8002d9c <_malloc_r+0xb0>
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	1b52      	subs	r2, r2, r5
 8002d80:	d41f      	bmi.n	8002dc2 <_malloc_r+0xd6>
 8002d82:	2a0b      	cmp	r2, #11
 8002d84:	d917      	bls.n	8002db6 <_malloc_r+0xca>
 8002d86:	1961      	adds	r1, r4, r5
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	6025      	str	r5, [r4, #0]
 8002d8c:	bf18      	it	ne
 8002d8e:	6059      	strne	r1, [r3, #4]
 8002d90:	6863      	ldr	r3, [r4, #4]
 8002d92:	bf08      	it	eq
 8002d94:	f8c8 1000 	streq.w	r1, [r8]
 8002d98:	5162      	str	r2, [r4, r5]
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	f104 060b 	add.w	r6, r4, #11
 8002da2:	f000 f829 	bl	8002df8 <__malloc_unlock>
 8002da6:	f026 0607 	bic.w	r6, r6, #7
 8002daa:	1d23      	adds	r3, r4, #4
 8002dac:	1af2      	subs	r2, r6, r3
 8002dae:	d0ae      	beq.n	8002d0e <_malloc_r+0x22>
 8002db0:	1b9b      	subs	r3, r3, r6
 8002db2:	50a3      	str	r3, [r4, r2]
 8002db4:	e7ab      	b.n	8002d0e <_malloc_r+0x22>
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	6862      	ldr	r2, [r4, #4]
 8002dba:	d1dd      	bne.n	8002d78 <_malloc_r+0x8c>
 8002dbc:	f8c8 2000 	str.w	r2, [r8]
 8002dc0:	e7ec      	b.n	8002d9c <_malloc_r+0xb0>
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	6864      	ldr	r4, [r4, #4]
 8002dc6:	e7ac      	b.n	8002d22 <_malloc_r+0x36>
 8002dc8:	4634      	mov	r4, r6
 8002dca:	6876      	ldr	r6, [r6, #4]
 8002dcc:	e7b4      	b.n	8002d38 <_malloc_r+0x4c>
 8002dce:	4613      	mov	r3, r2
 8002dd0:	e7cc      	b.n	8002d6c <_malloc_r+0x80>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4638      	mov	r0, r7
 8002dd8:	f000 f80e 	bl	8002df8 <__malloc_unlock>
 8002ddc:	e797      	b.n	8002d0e <_malloc_r+0x22>
 8002dde:	6025      	str	r5, [r4, #0]
 8002de0:	e7dc      	b.n	8002d9c <_malloc_r+0xb0>
 8002de2:	605b      	str	r3, [r3, #4]
 8002de4:	deff      	udf	#255	; 0xff
 8002de6:	bf00      	nop
 8002de8:	20000278 	.word	0x20000278

08002dec <__malloc_lock>:
 8002dec:	4801      	ldr	r0, [pc, #4]	; (8002df4 <__malloc_lock+0x8>)
 8002dee:	f7ff bf0f 	b.w	8002c10 <__retarget_lock_acquire_recursive>
 8002df2:	bf00      	nop
 8002df4:	20000274 	.word	0x20000274

08002df8 <__malloc_unlock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	; (8002e00 <__malloc_unlock+0x8>)
 8002dfa:	f7ff bf0a 	b.w	8002c12 <__retarget_lock_release_recursive>
 8002dfe:	bf00      	nop
 8002e00:	20000274 	.word	0x20000274

08002e04 <__sfputc_r>:
 8002e04:	6893      	ldr	r3, [r2, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	b410      	push	{r4}
 8002e0c:	6093      	str	r3, [r2, #8]
 8002e0e:	da08      	bge.n	8002e22 <__sfputc_r+0x1e>
 8002e10:	6994      	ldr	r4, [r2, #24]
 8002e12:	42a3      	cmp	r3, r4
 8002e14:	db01      	blt.n	8002e1a <__sfputc_r+0x16>
 8002e16:	290a      	cmp	r1, #10
 8002e18:	d103      	bne.n	8002e22 <__sfputc_r+0x1e>
 8002e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e1e:	f000 bba7 	b.w	8003570 <__swbuf_r>
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	1c58      	adds	r0, r3, #1
 8002e26:	6010      	str	r0, [r2, #0]
 8002e28:	7019      	strb	r1, [r3, #0]
 8002e2a:	4608      	mov	r0, r1
 8002e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <__sfputs_r>:
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e34:	4606      	mov	r6, r0
 8002e36:	460f      	mov	r7, r1
 8002e38:	4614      	mov	r4, r2
 8002e3a:	18d5      	adds	r5, r2, r3
 8002e3c:	42ac      	cmp	r4, r5
 8002e3e:	d101      	bne.n	8002e44 <__sfputs_r+0x12>
 8002e40:	2000      	movs	r0, #0
 8002e42:	e007      	b.n	8002e54 <__sfputs_r+0x22>
 8002e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e48:	463a      	mov	r2, r7
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffda 	bl	8002e04 <__sfputc_r>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d1f3      	bne.n	8002e3c <__sfputs_r+0xa>
 8002e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e58 <_vfiprintf_r>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	b09d      	sub	sp, #116	; 0x74
 8002e60:	4614      	mov	r4, r2
 8002e62:	4698      	mov	r8, r3
 8002e64:	4606      	mov	r6, r0
 8002e66:	b118      	cbz	r0, 8002e70 <_vfiprintf_r+0x18>
 8002e68:	6a03      	ldr	r3, [r0, #32]
 8002e6a:	b90b      	cbnz	r3, 8002e70 <_vfiprintf_r+0x18>
 8002e6c:	f7ff fdc4 	bl	80029f8 <__sinit>
 8002e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e72:	07d9      	lsls	r1, r3, #31
 8002e74:	d405      	bmi.n	8002e82 <_vfiprintf_r+0x2a>
 8002e76:	89ab      	ldrh	r3, [r5, #12]
 8002e78:	059a      	lsls	r2, r3, #22
 8002e7a:	d402      	bmi.n	8002e82 <_vfiprintf_r+0x2a>
 8002e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e7e:	f7ff fec7 	bl	8002c10 <__retarget_lock_acquire_recursive>
 8002e82:	89ab      	ldrh	r3, [r5, #12]
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	d501      	bpl.n	8002e8c <_vfiprintf_r+0x34>
 8002e88:	692b      	ldr	r3, [r5, #16]
 8002e8a:	b99b      	cbnz	r3, 8002eb4 <_vfiprintf_r+0x5c>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f000 fbac 	bl	80035ec <__swsetup_r>
 8002e94:	b170      	cbz	r0, 8002eb4 <_vfiprintf_r+0x5c>
 8002e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e98:	07dc      	lsls	r4, r3, #31
 8002e9a:	d504      	bpl.n	8002ea6 <_vfiprintf_r+0x4e>
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea0:	b01d      	add	sp, #116	; 0x74
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea6:	89ab      	ldrh	r3, [r5, #12]
 8002ea8:	0598      	lsls	r0, r3, #22
 8002eaa:	d4f7      	bmi.n	8002e9c <_vfiprintf_r+0x44>
 8002eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eae:	f7ff feb0 	bl	8002c12 <__retarget_lock_release_recursive>
 8002eb2:	e7f3      	b.n	8002e9c <_vfiprintf_r+0x44>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb8:	2320      	movs	r3, #32
 8002eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec2:	2330      	movs	r3, #48	; 0x30
 8002ec4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003078 <_vfiprintf_r+0x220>
 8002ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ecc:	f04f 0901 	mov.w	r9, #1
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	469a      	mov	sl, r3
 8002ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ed8:	b10a      	cbz	r2, 8002ede <_vfiprintf_r+0x86>
 8002eda:	2a25      	cmp	r2, #37	; 0x25
 8002edc:	d1f9      	bne.n	8002ed2 <_vfiprintf_r+0x7a>
 8002ede:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee2:	d00b      	beq.n	8002efc <_vfiprintf_r+0xa4>
 8002ee4:	465b      	mov	r3, fp
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4630      	mov	r0, r6
 8002eec:	f7ff ffa1 	bl	8002e32 <__sfputs_r>
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	f000 80a9 	beq.w	8003048 <_vfiprintf_r+0x1f0>
 8002ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ef8:	445a      	add	r2, fp
 8002efa:	9209      	str	r2, [sp, #36]	; 0x24
 8002efc:	f89a 3000 	ldrb.w	r3, [sl]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a1 	beq.w	8003048 <_vfiprintf_r+0x1f0>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f10:	f10a 0a01 	add.w	sl, sl, #1
 8002f14:	9304      	str	r3, [sp, #16]
 8002f16:	9307      	str	r3, [sp, #28]
 8002f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8002f1e:	4654      	mov	r4, sl
 8002f20:	2205      	movs	r2, #5
 8002f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f26:	4854      	ldr	r0, [pc, #336]	; (8003078 <_vfiprintf_r+0x220>)
 8002f28:	f7fd f952 	bl	80001d0 <memchr>
 8002f2c:	9a04      	ldr	r2, [sp, #16]
 8002f2e:	b9d8      	cbnz	r0, 8002f68 <_vfiprintf_r+0x110>
 8002f30:	06d1      	lsls	r1, r2, #27
 8002f32:	bf44      	itt	mi
 8002f34:	2320      	movmi	r3, #32
 8002f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f3a:	0713      	lsls	r3, r2, #28
 8002f3c:	bf44      	itt	mi
 8002f3e:	232b      	movmi	r3, #43	; 0x2b
 8002f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f44:	f89a 3000 	ldrb.w	r3, [sl]
 8002f48:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4a:	d015      	beq.n	8002f78 <_vfiprintf_r+0x120>
 8002f4c:	9a07      	ldr	r2, [sp, #28]
 8002f4e:	4654      	mov	r4, sl
 8002f50:	2000      	movs	r0, #0
 8002f52:	f04f 0c0a 	mov.w	ip, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f5c:	3b30      	subs	r3, #48	; 0x30
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d94d      	bls.n	8002ffe <_vfiprintf_r+0x1a6>
 8002f62:	b1b0      	cbz	r0, 8002f92 <_vfiprintf_r+0x13a>
 8002f64:	9207      	str	r2, [sp, #28]
 8002f66:	e014      	b.n	8002f92 <_vfiprintf_r+0x13a>
 8002f68:	eba0 0308 	sub.w	r3, r0, r8
 8002f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	9304      	str	r3, [sp, #16]
 8002f74:	46a2      	mov	sl, r4
 8002f76:	e7d2      	b.n	8002f1e <_vfiprintf_r+0xc6>
 8002f78:	9b03      	ldr	r3, [sp, #12]
 8002f7a:	1d19      	adds	r1, r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	9103      	str	r1, [sp, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bfbb      	ittet	lt
 8002f84:	425b      	neglt	r3, r3
 8002f86:	f042 0202 	orrlt.w	r2, r2, #2
 8002f8a:	9307      	strge	r3, [sp, #28]
 8002f8c:	9307      	strlt	r3, [sp, #28]
 8002f8e:	bfb8      	it	lt
 8002f90:	9204      	strlt	r2, [sp, #16]
 8002f92:	7823      	ldrb	r3, [r4, #0]
 8002f94:	2b2e      	cmp	r3, #46	; 0x2e
 8002f96:	d10c      	bne.n	8002fb2 <_vfiprintf_r+0x15a>
 8002f98:	7863      	ldrb	r3, [r4, #1]
 8002f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9c:	d134      	bne.n	8003008 <_vfiprintf_r+0x1b0>
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	1d1a      	adds	r2, r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	9203      	str	r2, [sp, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfb8      	it	lt
 8002faa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fae:	3402      	adds	r4, #2
 8002fb0:	9305      	str	r3, [sp, #20]
 8002fb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003088 <_vfiprintf_r+0x230>
 8002fb6:	7821      	ldrb	r1, [r4, #0]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4650      	mov	r0, sl
 8002fbc:	f7fd f908 	bl	80001d0 <memchr>
 8002fc0:	b138      	cbz	r0, 8002fd2 <_vfiprintf_r+0x17a>
 8002fc2:	9b04      	ldr	r3, [sp, #16]
 8002fc4:	eba0 000a 	sub.w	r0, r0, sl
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4082      	lsls	r2, r0
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	3401      	adds	r4, #1
 8002fd0:	9304      	str	r3, [sp, #16]
 8002fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd6:	4829      	ldr	r0, [pc, #164]	; (800307c <_vfiprintf_r+0x224>)
 8002fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fdc:	2206      	movs	r2, #6
 8002fde:	f7fd f8f7 	bl	80001d0 <memchr>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d03f      	beq.n	8003066 <_vfiprintf_r+0x20e>
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <_vfiprintf_r+0x228>)
 8002fe8:	bb1b      	cbnz	r3, 8003032 <_vfiprintf_r+0x1da>
 8002fea:	9b03      	ldr	r3, [sp, #12]
 8002fec:	3307      	adds	r3, #7
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	9303      	str	r3, [sp, #12]
 8002ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff8:	443b      	add	r3, r7
 8002ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffc:	e768      	b.n	8002ed0 <_vfiprintf_r+0x78>
 8002ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003002:	460c      	mov	r4, r1
 8003004:	2001      	movs	r0, #1
 8003006:	e7a6      	b.n	8002f56 <_vfiprintf_r+0xfe>
 8003008:	2300      	movs	r3, #0
 800300a:	3401      	adds	r4, #1
 800300c:	9305      	str	r3, [sp, #20]
 800300e:	4619      	mov	r1, r3
 8003010:	f04f 0c0a 	mov.w	ip, #10
 8003014:	4620      	mov	r0, r4
 8003016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800301a:	3a30      	subs	r2, #48	; 0x30
 800301c:	2a09      	cmp	r2, #9
 800301e:	d903      	bls.n	8003028 <_vfiprintf_r+0x1d0>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0c6      	beq.n	8002fb2 <_vfiprintf_r+0x15a>
 8003024:	9105      	str	r1, [sp, #20]
 8003026:	e7c4      	b.n	8002fb2 <_vfiprintf_r+0x15a>
 8003028:	fb0c 2101 	mla	r1, ip, r1, r2
 800302c:	4604      	mov	r4, r0
 800302e:	2301      	movs	r3, #1
 8003030:	e7f0      	b.n	8003014 <_vfiprintf_r+0x1bc>
 8003032:	ab03      	add	r3, sp, #12
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	462a      	mov	r2, r5
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <_vfiprintf_r+0x22c>)
 800303a:	a904      	add	r1, sp, #16
 800303c:	4630      	mov	r0, r6
 800303e:	f3af 8000 	nop.w
 8003042:	4607      	mov	r7, r0
 8003044:	1c78      	adds	r0, r7, #1
 8003046:	d1d6      	bne.n	8002ff6 <_vfiprintf_r+0x19e>
 8003048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800304a:	07d9      	lsls	r1, r3, #31
 800304c:	d405      	bmi.n	800305a <_vfiprintf_r+0x202>
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	059a      	lsls	r2, r3, #22
 8003052:	d402      	bmi.n	800305a <_vfiprintf_r+0x202>
 8003054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003056:	f7ff fddc 	bl	8002c12 <__retarget_lock_release_recursive>
 800305a:	89ab      	ldrh	r3, [r5, #12]
 800305c:	065b      	lsls	r3, r3, #25
 800305e:	f53f af1d 	bmi.w	8002e9c <_vfiprintf_r+0x44>
 8003062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003064:	e71c      	b.n	8002ea0 <_vfiprintf_r+0x48>
 8003066:	ab03      	add	r3, sp, #12
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	462a      	mov	r2, r5
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <_vfiprintf_r+0x22c>)
 800306e:	a904      	add	r1, sp, #16
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f879 	bl	8003168 <_printf_i>
 8003076:	e7e4      	b.n	8003042 <_vfiprintf_r+0x1ea>
 8003078:	0800393c 	.word	0x0800393c
 800307c:	08003946 	.word	0x08003946
 8003080:	00000000 	.word	0x00000000
 8003084:	08002e33 	.word	0x08002e33
 8003088:	08003942 	.word	0x08003942

0800308c <_printf_common>:
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	4616      	mov	r6, r2
 8003092:	4699      	mov	r9, r3
 8003094:	688a      	ldr	r2, [r1, #8]
 8003096:	690b      	ldr	r3, [r1, #16]
 8003098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800309c:	4293      	cmp	r3, r2
 800309e:	bfb8      	it	lt
 80030a0:	4613      	movlt	r3, r2
 80030a2:	6033      	str	r3, [r6, #0]
 80030a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a8:	4607      	mov	r7, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	b10a      	cbz	r2, 80030b2 <_printf_common+0x26>
 80030ae:	3301      	adds	r3, #1
 80030b0:	6033      	str	r3, [r6, #0]
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	0699      	lsls	r1, r3, #26
 80030b6:	bf42      	ittt	mi
 80030b8:	6833      	ldrmi	r3, [r6, #0]
 80030ba:	3302      	addmi	r3, #2
 80030bc:	6033      	strmi	r3, [r6, #0]
 80030be:	6825      	ldr	r5, [r4, #0]
 80030c0:	f015 0506 	ands.w	r5, r5, #6
 80030c4:	d106      	bne.n	80030d4 <_printf_common+0x48>
 80030c6:	f104 0a19 	add.w	sl, r4, #25
 80030ca:	68e3      	ldr	r3, [r4, #12]
 80030cc:	6832      	ldr	r2, [r6, #0]
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	42ab      	cmp	r3, r5
 80030d2:	dc26      	bgt.n	8003122 <_printf_common+0x96>
 80030d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030d8:	1e13      	subs	r3, r2, #0
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	bf18      	it	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	0692      	lsls	r2, r2, #26
 80030e2:	d42b      	bmi.n	800313c <_printf_common+0xb0>
 80030e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030e8:	4649      	mov	r1, r9
 80030ea:	4638      	mov	r0, r7
 80030ec:	47c0      	blx	r8
 80030ee:	3001      	adds	r0, #1
 80030f0:	d01e      	beq.n	8003130 <_printf_common+0xa4>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	6922      	ldr	r2, [r4, #16]
 80030f6:	f003 0306 	and.w	r3, r3, #6
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf02      	ittt	eq
 80030fe:	68e5      	ldreq	r5, [r4, #12]
 8003100:	6833      	ldreq	r3, [r6, #0]
 8003102:	1aed      	subeq	r5, r5, r3
 8003104:	68a3      	ldr	r3, [r4, #8]
 8003106:	bf0c      	ite	eq
 8003108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800310c:	2500      	movne	r5, #0
 800310e:	4293      	cmp	r3, r2
 8003110:	bfc4      	itt	gt
 8003112:	1a9b      	subgt	r3, r3, r2
 8003114:	18ed      	addgt	r5, r5, r3
 8003116:	2600      	movs	r6, #0
 8003118:	341a      	adds	r4, #26
 800311a:	42b5      	cmp	r5, r6
 800311c:	d11a      	bne.n	8003154 <_printf_common+0xc8>
 800311e:	2000      	movs	r0, #0
 8003120:	e008      	b.n	8003134 <_printf_common+0xa8>
 8003122:	2301      	movs	r3, #1
 8003124:	4652      	mov	r2, sl
 8003126:	4649      	mov	r1, r9
 8003128:	4638      	mov	r0, r7
 800312a:	47c0      	blx	r8
 800312c:	3001      	adds	r0, #1
 800312e:	d103      	bne.n	8003138 <_printf_common+0xac>
 8003130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003138:	3501      	adds	r5, #1
 800313a:	e7c6      	b.n	80030ca <_printf_common+0x3e>
 800313c:	18e1      	adds	r1, r4, r3
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	2030      	movs	r0, #48	; 0x30
 8003142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003146:	4422      	add	r2, r4
 8003148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800314c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003150:	3302      	adds	r3, #2
 8003152:	e7c7      	b.n	80030e4 <_printf_common+0x58>
 8003154:	2301      	movs	r3, #1
 8003156:	4622      	mov	r2, r4
 8003158:	4649      	mov	r1, r9
 800315a:	4638      	mov	r0, r7
 800315c:	47c0      	blx	r8
 800315e:	3001      	adds	r0, #1
 8003160:	d0e6      	beq.n	8003130 <_printf_common+0xa4>
 8003162:	3601      	adds	r6, #1
 8003164:	e7d9      	b.n	800311a <_printf_common+0x8e>
	...

08003168 <_printf_i>:
 8003168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	7e0f      	ldrb	r7, [r1, #24]
 800316e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003170:	2f78      	cmp	r7, #120	; 0x78
 8003172:	4691      	mov	r9, r2
 8003174:	4680      	mov	r8, r0
 8003176:	460c      	mov	r4, r1
 8003178:	469a      	mov	sl, r3
 800317a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800317e:	d807      	bhi.n	8003190 <_printf_i+0x28>
 8003180:	2f62      	cmp	r7, #98	; 0x62
 8003182:	d80a      	bhi.n	800319a <_printf_i+0x32>
 8003184:	2f00      	cmp	r7, #0
 8003186:	f000 80d4 	beq.w	8003332 <_printf_i+0x1ca>
 800318a:	2f58      	cmp	r7, #88	; 0x58
 800318c:	f000 80c0 	beq.w	8003310 <_printf_i+0x1a8>
 8003190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003198:	e03a      	b.n	8003210 <_printf_i+0xa8>
 800319a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800319e:	2b15      	cmp	r3, #21
 80031a0:	d8f6      	bhi.n	8003190 <_printf_i+0x28>
 80031a2:	a101      	add	r1, pc, #4	; (adr r1, 80031a8 <_printf_i+0x40>)
 80031a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031a8:	08003201 	.word	0x08003201
 80031ac:	08003215 	.word	0x08003215
 80031b0:	08003191 	.word	0x08003191
 80031b4:	08003191 	.word	0x08003191
 80031b8:	08003191 	.word	0x08003191
 80031bc:	08003191 	.word	0x08003191
 80031c0:	08003215 	.word	0x08003215
 80031c4:	08003191 	.word	0x08003191
 80031c8:	08003191 	.word	0x08003191
 80031cc:	08003191 	.word	0x08003191
 80031d0:	08003191 	.word	0x08003191
 80031d4:	08003319 	.word	0x08003319
 80031d8:	08003241 	.word	0x08003241
 80031dc:	080032d3 	.word	0x080032d3
 80031e0:	08003191 	.word	0x08003191
 80031e4:	08003191 	.word	0x08003191
 80031e8:	0800333b 	.word	0x0800333b
 80031ec:	08003191 	.word	0x08003191
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003191 	.word	0x08003191
 80031f8:	08003191 	.word	0x08003191
 80031fc:	080032db 	.word	0x080032db
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	602a      	str	r2, [r5, #0]
 8003208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003210:	2301      	movs	r3, #1
 8003212:	e09f      	b.n	8003354 <_printf_i+0x1ec>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	0607      	lsls	r7, r0, #24
 800321a:	f103 0104 	add.w	r1, r3, #4
 800321e:	6029      	str	r1, [r5, #0]
 8003220:	d501      	bpl.n	8003226 <_printf_i+0xbe>
 8003222:	681e      	ldr	r6, [r3, #0]
 8003224:	e003      	b.n	800322e <_printf_i+0xc6>
 8003226:	0646      	lsls	r6, r0, #25
 8003228:	d5fb      	bpl.n	8003222 <_printf_i+0xba>
 800322a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800322e:	2e00      	cmp	r6, #0
 8003230:	da03      	bge.n	800323a <_printf_i+0xd2>
 8003232:	232d      	movs	r3, #45	; 0x2d
 8003234:	4276      	negs	r6, r6
 8003236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800323a:	485a      	ldr	r0, [pc, #360]	; (80033a4 <_printf_i+0x23c>)
 800323c:	230a      	movs	r3, #10
 800323e:	e012      	b.n	8003266 <_printf_i+0xfe>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	1d19      	adds	r1, r3, #4
 8003246:	6029      	str	r1, [r5, #0]
 8003248:	0605      	lsls	r5, r0, #24
 800324a:	d501      	bpl.n	8003250 <_printf_i+0xe8>
 800324c:	681e      	ldr	r6, [r3, #0]
 800324e:	e002      	b.n	8003256 <_printf_i+0xee>
 8003250:	0641      	lsls	r1, r0, #25
 8003252:	d5fb      	bpl.n	800324c <_printf_i+0xe4>
 8003254:	881e      	ldrh	r6, [r3, #0]
 8003256:	4853      	ldr	r0, [pc, #332]	; (80033a4 <_printf_i+0x23c>)
 8003258:	2f6f      	cmp	r7, #111	; 0x6f
 800325a:	bf0c      	ite	eq
 800325c:	2308      	moveq	r3, #8
 800325e:	230a      	movne	r3, #10
 8003260:	2100      	movs	r1, #0
 8003262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003266:	6865      	ldr	r5, [r4, #4]
 8003268:	60a5      	str	r5, [r4, #8]
 800326a:	2d00      	cmp	r5, #0
 800326c:	bfa2      	ittt	ge
 800326e:	6821      	ldrge	r1, [r4, #0]
 8003270:	f021 0104 	bicge.w	r1, r1, #4
 8003274:	6021      	strge	r1, [r4, #0]
 8003276:	b90e      	cbnz	r6, 800327c <_printf_i+0x114>
 8003278:	2d00      	cmp	r5, #0
 800327a:	d04b      	beq.n	8003314 <_printf_i+0x1ac>
 800327c:	4615      	mov	r5, r2
 800327e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003282:	fb03 6711 	mls	r7, r3, r1, r6
 8003286:	5dc7      	ldrb	r7, [r0, r7]
 8003288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800328c:	4637      	mov	r7, r6
 800328e:	42bb      	cmp	r3, r7
 8003290:	460e      	mov	r6, r1
 8003292:	d9f4      	bls.n	800327e <_printf_i+0x116>
 8003294:	2b08      	cmp	r3, #8
 8003296:	d10b      	bne.n	80032b0 <_printf_i+0x148>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	07de      	lsls	r6, r3, #31
 800329c:	d508      	bpl.n	80032b0 <_printf_i+0x148>
 800329e:	6923      	ldr	r3, [r4, #16]
 80032a0:	6861      	ldr	r1, [r4, #4]
 80032a2:	4299      	cmp	r1, r3
 80032a4:	bfde      	ittt	le
 80032a6:	2330      	movle	r3, #48	; 0x30
 80032a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80032b0:	1b52      	subs	r2, r2, r5
 80032b2:	6122      	str	r2, [r4, #16]
 80032b4:	f8cd a000 	str.w	sl, [sp]
 80032b8:	464b      	mov	r3, r9
 80032ba:	aa03      	add	r2, sp, #12
 80032bc:	4621      	mov	r1, r4
 80032be:	4640      	mov	r0, r8
 80032c0:	f7ff fee4 	bl	800308c <_printf_common>
 80032c4:	3001      	adds	r0, #1
 80032c6:	d14a      	bne.n	800335e <_printf_i+0x1f6>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032cc:	b004      	add	sp, #16
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f043 0320 	orr.w	r3, r3, #32
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	4833      	ldr	r0, [pc, #204]	; (80033a8 <_printf_i+0x240>)
 80032dc:	2778      	movs	r7, #120	; 0x78
 80032de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	6829      	ldr	r1, [r5, #0]
 80032e6:	061f      	lsls	r7, r3, #24
 80032e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80032ec:	d402      	bmi.n	80032f4 <_printf_i+0x18c>
 80032ee:	065f      	lsls	r7, r3, #25
 80032f0:	bf48      	it	mi
 80032f2:	b2b6      	uxthmi	r6, r6
 80032f4:	07df      	lsls	r7, r3, #31
 80032f6:	bf48      	it	mi
 80032f8:	f043 0320 	orrmi.w	r3, r3, #32
 80032fc:	6029      	str	r1, [r5, #0]
 80032fe:	bf48      	it	mi
 8003300:	6023      	strmi	r3, [r4, #0]
 8003302:	b91e      	cbnz	r6, 800330c <_printf_i+0x1a4>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	f023 0320 	bic.w	r3, r3, #32
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	2310      	movs	r3, #16
 800330e:	e7a7      	b.n	8003260 <_printf_i+0xf8>
 8003310:	4824      	ldr	r0, [pc, #144]	; (80033a4 <_printf_i+0x23c>)
 8003312:	e7e4      	b.n	80032de <_printf_i+0x176>
 8003314:	4615      	mov	r5, r2
 8003316:	e7bd      	b.n	8003294 <_printf_i+0x12c>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	6826      	ldr	r6, [r4, #0]
 800331c:	6961      	ldr	r1, [r4, #20]
 800331e:	1d18      	adds	r0, r3, #4
 8003320:	6028      	str	r0, [r5, #0]
 8003322:	0635      	lsls	r5, r6, #24
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	d501      	bpl.n	800332c <_printf_i+0x1c4>
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	e002      	b.n	8003332 <_printf_i+0x1ca>
 800332c:	0670      	lsls	r0, r6, #25
 800332e:	d5fb      	bpl.n	8003328 <_printf_i+0x1c0>
 8003330:	8019      	strh	r1, [r3, #0]
 8003332:	2300      	movs	r3, #0
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	4615      	mov	r5, r2
 8003338:	e7bc      	b.n	80032b4 <_printf_i+0x14c>
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	602a      	str	r2, [r5, #0]
 8003340:	681d      	ldr	r5, [r3, #0]
 8003342:	6862      	ldr	r2, [r4, #4]
 8003344:	2100      	movs	r1, #0
 8003346:	4628      	mov	r0, r5
 8003348:	f7fc ff42 	bl	80001d0 <memchr>
 800334c:	b108      	cbz	r0, 8003352 <_printf_i+0x1ea>
 800334e:	1b40      	subs	r0, r0, r5
 8003350:	6060      	str	r0, [r4, #4]
 8003352:	6863      	ldr	r3, [r4, #4]
 8003354:	6123      	str	r3, [r4, #16]
 8003356:	2300      	movs	r3, #0
 8003358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335c:	e7aa      	b.n	80032b4 <_printf_i+0x14c>
 800335e:	6923      	ldr	r3, [r4, #16]
 8003360:	462a      	mov	r2, r5
 8003362:	4649      	mov	r1, r9
 8003364:	4640      	mov	r0, r8
 8003366:	47d0      	blx	sl
 8003368:	3001      	adds	r0, #1
 800336a:	d0ad      	beq.n	80032c8 <_printf_i+0x160>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	079b      	lsls	r3, r3, #30
 8003370:	d413      	bmi.n	800339a <_printf_i+0x232>
 8003372:	68e0      	ldr	r0, [r4, #12]
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	4298      	cmp	r0, r3
 8003378:	bfb8      	it	lt
 800337a:	4618      	movlt	r0, r3
 800337c:	e7a6      	b.n	80032cc <_printf_i+0x164>
 800337e:	2301      	movs	r3, #1
 8003380:	4632      	mov	r2, r6
 8003382:	4649      	mov	r1, r9
 8003384:	4640      	mov	r0, r8
 8003386:	47d0      	blx	sl
 8003388:	3001      	adds	r0, #1
 800338a:	d09d      	beq.n	80032c8 <_printf_i+0x160>
 800338c:	3501      	adds	r5, #1
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	9903      	ldr	r1, [sp, #12]
 8003392:	1a5b      	subs	r3, r3, r1
 8003394:	42ab      	cmp	r3, r5
 8003396:	dcf2      	bgt.n	800337e <_printf_i+0x216>
 8003398:	e7eb      	b.n	8003372 <_printf_i+0x20a>
 800339a:	2500      	movs	r5, #0
 800339c:	f104 0619 	add.w	r6, r4, #25
 80033a0:	e7f5      	b.n	800338e <_printf_i+0x226>
 80033a2:	bf00      	nop
 80033a4:	0800394d 	.word	0x0800394d
 80033a8:	0800395e 	.word	0x0800395e

080033ac <__sflush_r>:
 80033ac:	898a      	ldrh	r2, [r1, #12]
 80033ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b2:	4605      	mov	r5, r0
 80033b4:	0710      	lsls	r0, r2, #28
 80033b6:	460c      	mov	r4, r1
 80033b8:	d458      	bmi.n	800346c <__sflush_r+0xc0>
 80033ba:	684b      	ldr	r3, [r1, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	dc05      	bgt.n	80033cc <__sflush_r+0x20>
 80033c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	dc02      	bgt.n	80033cc <__sflush_r+0x20>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ce:	2e00      	cmp	r6, #0
 80033d0:	d0f9      	beq.n	80033c6 <__sflush_r+0x1a>
 80033d2:	2300      	movs	r3, #0
 80033d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033d8:	682f      	ldr	r7, [r5, #0]
 80033da:	6a21      	ldr	r1, [r4, #32]
 80033dc:	602b      	str	r3, [r5, #0]
 80033de:	d032      	beq.n	8003446 <__sflush_r+0x9a>
 80033e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	075a      	lsls	r2, r3, #29
 80033e6:	d505      	bpl.n	80033f4 <__sflush_r+0x48>
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	1ac0      	subs	r0, r0, r3
 80033ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ee:	b10b      	cbz	r3, 80033f4 <__sflush_r+0x48>
 80033f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033f2:	1ac0      	subs	r0, r0, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	4602      	mov	r2, r0
 80033f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033fa:	6a21      	ldr	r1, [r4, #32]
 80033fc:	4628      	mov	r0, r5
 80033fe:	47b0      	blx	r6
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	d106      	bne.n	8003414 <__sflush_r+0x68>
 8003406:	6829      	ldr	r1, [r5, #0]
 8003408:	291d      	cmp	r1, #29
 800340a:	d82b      	bhi.n	8003464 <__sflush_r+0xb8>
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <__sflush_r+0x108>)
 800340e:	410a      	asrs	r2, r1
 8003410:	07d6      	lsls	r6, r2, #31
 8003412:	d427      	bmi.n	8003464 <__sflush_r+0xb8>
 8003414:	2200      	movs	r2, #0
 8003416:	6062      	str	r2, [r4, #4]
 8003418:	04d9      	lsls	r1, r3, #19
 800341a:	6922      	ldr	r2, [r4, #16]
 800341c:	6022      	str	r2, [r4, #0]
 800341e:	d504      	bpl.n	800342a <__sflush_r+0x7e>
 8003420:	1c42      	adds	r2, r0, #1
 8003422:	d101      	bne.n	8003428 <__sflush_r+0x7c>
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	b903      	cbnz	r3, 800342a <__sflush_r+0x7e>
 8003428:	6560      	str	r0, [r4, #84]	; 0x54
 800342a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800342c:	602f      	str	r7, [r5, #0]
 800342e:	2900      	cmp	r1, #0
 8003430:	d0c9      	beq.n	80033c6 <__sflush_r+0x1a>
 8003432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003436:	4299      	cmp	r1, r3
 8003438:	d002      	beq.n	8003440 <__sflush_r+0x94>
 800343a:	4628      	mov	r0, r5
 800343c:	f7ff fbea 	bl	8002c14 <_free_r>
 8003440:	2000      	movs	r0, #0
 8003442:	6360      	str	r0, [r4, #52]	; 0x34
 8003444:	e7c0      	b.n	80033c8 <__sflush_r+0x1c>
 8003446:	2301      	movs	r3, #1
 8003448:	4628      	mov	r0, r5
 800344a:	47b0      	blx	r6
 800344c:	1c41      	adds	r1, r0, #1
 800344e:	d1c8      	bne.n	80033e2 <__sflush_r+0x36>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0c5      	beq.n	80033e2 <__sflush_r+0x36>
 8003456:	2b1d      	cmp	r3, #29
 8003458:	d001      	beq.n	800345e <__sflush_r+0xb2>
 800345a:	2b16      	cmp	r3, #22
 800345c:	d101      	bne.n	8003462 <__sflush_r+0xb6>
 800345e:	602f      	str	r7, [r5, #0]
 8003460:	e7b1      	b.n	80033c6 <__sflush_r+0x1a>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003468:	81a3      	strh	r3, [r4, #12]
 800346a:	e7ad      	b.n	80033c8 <__sflush_r+0x1c>
 800346c:	690f      	ldr	r7, [r1, #16]
 800346e:	2f00      	cmp	r7, #0
 8003470:	d0a9      	beq.n	80033c6 <__sflush_r+0x1a>
 8003472:	0793      	lsls	r3, r2, #30
 8003474:	680e      	ldr	r6, [r1, #0]
 8003476:	bf08      	it	eq
 8003478:	694b      	ldreq	r3, [r1, #20]
 800347a:	600f      	str	r7, [r1, #0]
 800347c:	bf18      	it	ne
 800347e:	2300      	movne	r3, #0
 8003480:	eba6 0807 	sub.w	r8, r6, r7
 8003484:	608b      	str	r3, [r1, #8]
 8003486:	f1b8 0f00 	cmp.w	r8, #0
 800348a:	dd9c      	ble.n	80033c6 <__sflush_r+0x1a>
 800348c:	6a21      	ldr	r1, [r4, #32]
 800348e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003490:	4643      	mov	r3, r8
 8003492:	463a      	mov	r2, r7
 8003494:	4628      	mov	r0, r5
 8003496:	47b0      	blx	r6
 8003498:	2800      	cmp	r0, #0
 800349a:	dc06      	bgt.n	80034aa <__sflush_r+0xfe>
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a2:	81a3      	strh	r3, [r4, #12]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a8:	e78e      	b.n	80033c8 <__sflush_r+0x1c>
 80034aa:	4407      	add	r7, r0
 80034ac:	eba8 0800 	sub.w	r8, r8, r0
 80034b0:	e7e9      	b.n	8003486 <__sflush_r+0xda>
 80034b2:	bf00      	nop
 80034b4:	dfbffffe 	.word	0xdfbffffe

080034b8 <_fflush_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	4605      	mov	r5, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	b913      	cbnz	r3, 80034c8 <_fflush_r+0x10>
 80034c2:	2500      	movs	r5, #0
 80034c4:	4628      	mov	r0, r5
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	b118      	cbz	r0, 80034d2 <_fflush_r+0x1a>
 80034ca:	6a03      	ldr	r3, [r0, #32]
 80034cc:	b90b      	cbnz	r3, 80034d2 <_fflush_r+0x1a>
 80034ce:	f7ff fa93 	bl	80029f8 <__sinit>
 80034d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f3      	beq.n	80034c2 <_fflush_r+0xa>
 80034da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034dc:	07d0      	lsls	r0, r2, #31
 80034de:	d404      	bmi.n	80034ea <_fflush_r+0x32>
 80034e0:	0599      	lsls	r1, r3, #22
 80034e2:	d402      	bmi.n	80034ea <_fflush_r+0x32>
 80034e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e6:	f7ff fb93 	bl	8002c10 <__retarget_lock_acquire_recursive>
 80034ea:	4628      	mov	r0, r5
 80034ec:	4621      	mov	r1, r4
 80034ee:	f7ff ff5d 	bl	80033ac <__sflush_r>
 80034f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034f4:	07da      	lsls	r2, r3, #31
 80034f6:	4605      	mov	r5, r0
 80034f8:	d4e4      	bmi.n	80034c4 <_fflush_r+0xc>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	059b      	lsls	r3, r3, #22
 80034fe:	d4e1      	bmi.n	80034c4 <_fflush_r+0xc>
 8003500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003502:	f7ff fb86 	bl	8002c12 <__retarget_lock_release_recursive>
 8003506:	e7dd      	b.n	80034c4 <_fflush_r+0xc>

08003508 <_putc_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460d      	mov	r5, r1
 800350c:	4614      	mov	r4, r2
 800350e:	4606      	mov	r6, r0
 8003510:	b118      	cbz	r0, 800351a <_putc_r+0x12>
 8003512:	6a03      	ldr	r3, [r0, #32]
 8003514:	b90b      	cbnz	r3, 800351a <_putc_r+0x12>
 8003516:	f7ff fa6f 	bl	80029f8 <__sinit>
 800351a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351c:	07d8      	lsls	r0, r3, #31
 800351e:	d405      	bmi.n	800352c <_putc_r+0x24>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	0599      	lsls	r1, r3, #22
 8003524:	d402      	bmi.n	800352c <_putc_r+0x24>
 8003526:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003528:	f7ff fb72 	bl	8002c10 <__retarget_lock_acquire_recursive>
 800352c:	68a3      	ldr	r3, [r4, #8]
 800352e:	3b01      	subs	r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	60a3      	str	r3, [r4, #8]
 8003534:	da05      	bge.n	8003542 <_putc_r+0x3a>
 8003536:	69a2      	ldr	r2, [r4, #24]
 8003538:	4293      	cmp	r3, r2
 800353a:	db12      	blt.n	8003562 <_putc_r+0x5a>
 800353c:	b2eb      	uxtb	r3, r5
 800353e:	2b0a      	cmp	r3, #10
 8003540:	d00f      	beq.n	8003562 <_putc_r+0x5a>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	701d      	strb	r5, [r3, #0]
 800354a:	b2ed      	uxtb	r5, r5
 800354c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800354e:	07da      	lsls	r2, r3, #31
 8003550:	d405      	bmi.n	800355e <_putc_r+0x56>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	059b      	lsls	r3, r3, #22
 8003556:	d402      	bmi.n	800355e <_putc_r+0x56>
 8003558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355a:	f7ff fb5a 	bl	8002c12 <__retarget_lock_release_recursive>
 800355e:	4628      	mov	r0, r5
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	4629      	mov	r1, r5
 8003564:	4622      	mov	r2, r4
 8003566:	4630      	mov	r0, r6
 8003568:	f000 f802 	bl	8003570 <__swbuf_r>
 800356c:	4605      	mov	r5, r0
 800356e:	e7ed      	b.n	800354c <_putc_r+0x44>

08003570 <__swbuf_r>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	460e      	mov	r6, r1
 8003574:	4614      	mov	r4, r2
 8003576:	4605      	mov	r5, r0
 8003578:	b118      	cbz	r0, 8003582 <__swbuf_r+0x12>
 800357a:	6a03      	ldr	r3, [r0, #32]
 800357c:	b90b      	cbnz	r3, 8003582 <__swbuf_r+0x12>
 800357e:	f7ff fa3b 	bl	80029f8 <__sinit>
 8003582:	69a3      	ldr	r3, [r4, #24]
 8003584:	60a3      	str	r3, [r4, #8]
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	071a      	lsls	r2, r3, #28
 800358a:	d525      	bpl.n	80035d8 <__swbuf_r+0x68>
 800358c:	6923      	ldr	r3, [r4, #16]
 800358e:	b31b      	cbz	r3, 80035d8 <__swbuf_r+0x68>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	6922      	ldr	r2, [r4, #16]
 8003594:	1a98      	subs	r0, r3, r2
 8003596:	6963      	ldr	r3, [r4, #20]
 8003598:	b2f6      	uxtb	r6, r6
 800359a:	4283      	cmp	r3, r0
 800359c:	4637      	mov	r7, r6
 800359e:	dc04      	bgt.n	80035aa <__swbuf_r+0x3a>
 80035a0:	4621      	mov	r1, r4
 80035a2:	4628      	mov	r0, r5
 80035a4:	f7ff ff88 	bl	80034b8 <_fflush_r>
 80035a8:	b9e0      	cbnz	r0, 80035e4 <__swbuf_r+0x74>
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60a3      	str	r3, [r4, #8]
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	6022      	str	r2, [r4, #0]
 80035b6:	701e      	strb	r6, [r3, #0]
 80035b8:	6962      	ldr	r2, [r4, #20]
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	429a      	cmp	r2, r3
 80035be:	d004      	beq.n	80035ca <__swbuf_r+0x5a>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	07db      	lsls	r3, r3, #31
 80035c4:	d506      	bpl.n	80035d4 <__swbuf_r+0x64>
 80035c6:	2e0a      	cmp	r6, #10
 80035c8:	d104      	bne.n	80035d4 <__swbuf_r+0x64>
 80035ca:	4621      	mov	r1, r4
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7ff ff73 	bl	80034b8 <_fflush_r>
 80035d2:	b938      	cbnz	r0, 80035e4 <__swbuf_r+0x74>
 80035d4:	4638      	mov	r0, r7
 80035d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d8:	4621      	mov	r1, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f806 	bl	80035ec <__swsetup_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d0d5      	beq.n	8003590 <__swbuf_r+0x20>
 80035e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80035e8:	e7f4      	b.n	80035d4 <__swbuf_r+0x64>
	...

080035ec <__swsetup_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <__swsetup_r+0xac>)
 80035f0:	4605      	mov	r5, r0
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	460c      	mov	r4, r1
 80035f6:	b118      	cbz	r0, 8003600 <__swsetup_r+0x14>
 80035f8:	6a03      	ldr	r3, [r0, #32]
 80035fa:	b90b      	cbnz	r3, 8003600 <__swsetup_r+0x14>
 80035fc:	f7ff f9fc 	bl	80029f8 <__sinit>
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003606:	0718      	lsls	r0, r3, #28
 8003608:	d422      	bmi.n	8003650 <__swsetup_r+0x64>
 800360a:	06d9      	lsls	r1, r3, #27
 800360c:	d407      	bmi.n	800361e <__swsetup_r+0x32>
 800360e:	2309      	movs	r3, #9
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800361c:	e034      	b.n	8003688 <__swsetup_r+0x9c>
 800361e:	0758      	lsls	r0, r3, #29
 8003620:	d512      	bpl.n	8003648 <__swsetup_r+0x5c>
 8003622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003624:	b141      	cbz	r1, 8003638 <__swsetup_r+0x4c>
 8003626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800362a:	4299      	cmp	r1, r3
 800362c:	d002      	beq.n	8003634 <__swsetup_r+0x48>
 800362e:	4628      	mov	r0, r5
 8003630:	f7ff faf0 	bl	8002c14 <_free_r>
 8003634:	2300      	movs	r3, #0
 8003636:	6363      	str	r3, [r4, #52]	; 0x34
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	2300      	movs	r3, #0
 8003642:	6063      	str	r3, [r4, #4]
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	6023      	str	r3, [r4, #0]
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	81a3      	strh	r3, [r4, #12]
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	b94b      	cbnz	r3, 8003668 <__swsetup_r+0x7c>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800365a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365e:	d003      	beq.n	8003668 <__swsetup_r+0x7c>
 8003660:	4621      	mov	r1, r4
 8003662:	4628      	mov	r0, r5
 8003664:	f000 f850 	bl	8003708 <__smakebuf_r>
 8003668:	89a0      	ldrh	r0, [r4, #12]
 800366a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800366e:	f010 0301 	ands.w	r3, r0, #1
 8003672:	d00a      	beq.n	800368a <__swsetup_r+0x9e>
 8003674:	2300      	movs	r3, #0
 8003676:	60a3      	str	r3, [r4, #8]
 8003678:	6963      	ldr	r3, [r4, #20]
 800367a:	425b      	negs	r3, r3
 800367c:	61a3      	str	r3, [r4, #24]
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	b943      	cbnz	r3, 8003694 <__swsetup_r+0xa8>
 8003682:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003686:	d1c4      	bne.n	8003612 <__swsetup_r+0x26>
 8003688:	bd38      	pop	{r3, r4, r5, pc}
 800368a:	0781      	lsls	r1, r0, #30
 800368c:	bf58      	it	pl
 800368e:	6963      	ldrpl	r3, [r4, #20]
 8003690:	60a3      	str	r3, [r4, #8]
 8003692:	e7f4      	b.n	800367e <__swsetup_r+0x92>
 8003694:	2000      	movs	r0, #0
 8003696:	e7f7      	b.n	8003688 <__swsetup_r+0x9c>
 8003698:	20000064 	.word	0x20000064

0800369c <_sbrk_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4d06      	ldr	r5, [pc, #24]	; (80036b8 <_sbrk_r+0x1c>)
 80036a0:	2300      	movs	r3, #0
 80036a2:	4604      	mov	r4, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	f7fd fb12 	bl	8000cd0 <_sbrk>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d102      	bne.n	80036b6 <_sbrk_r+0x1a>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	b103      	cbz	r3, 80036b6 <_sbrk_r+0x1a>
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	20000270 	.word	0x20000270

080036bc <__swhatbuf_r>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	460c      	mov	r4, r1
 80036c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c4:	2900      	cmp	r1, #0
 80036c6:	b096      	sub	sp, #88	; 0x58
 80036c8:	4615      	mov	r5, r2
 80036ca:	461e      	mov	r6, r3
 80036cc:	da0d      	bge.n	80036ea <__swhatbuf_r+0x2e>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	bf0c      	ite	eq
 80036da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036de:	2340      	movne	r3, #64	; 0x40
 80036e0:	2000      	movs	r0, #0
 80036e2:	6031      	str	r1, [r6, #0]
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	b016      	add	sp, #88	; 0x58
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	466a      	mov	r2, sp
 80036ec:	f000 f848 	bl	8003780 <_fstat_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	dbec      	blt.n	80036ce <__swhatbuf_r+0x12>
 80036f4:	9901      	ldr	r1, [sp, #4]
 80036f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036fe:	4259      	negs	r1, r3
 8003700:	4159      	adcs	r1, r3
 8003702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003706:	e7eb      	b.n	80036e0 <__swhatbuf_r+0x24>

08003708 <__smakebuf_r>:
 8003708:	898b      	ldrh	r3, [r1, #12]
 800370a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800370c:	079d      	lsls	r5, r3, #30
 800370e:	4606      	mov	r6, r0
 8003710:	460c      	mov	r4, r1
 8003712:	d507      	bpl.n	8003724 <__smakebuf_r+0x1c>
 8003714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	2301      	movs	r3, #1
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	b002      	add	sp, #8
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	ab01      	add	r3, sp, #4
 8003726:	466a      	mov	r2, sp
 8003728:	f7ff ffc8 	bl	80036bc <__swhatbuf_r>
 800372c:	9900      	ldr	r1, [sp, #0]
 800372e:	4605      	mov	r5, r0
 8003730:	4630      	mov	r0, r6
 8003732:	f7ff fadb 	bl	8002cec <_malloc_r>
 8003736:	b948      	cbnz	r0, 800374c <__smakebuf_r+0x44>
 8003738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800373c:	059a      	lsls	r2, r3, #22
 800373e:	d4ef      	bmi.n	8003720 <__smakebuf_r+0x18>
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	e7e3      	b.n	8003714 <__smakebuf_r+0xc>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	6020      	str	r0, [r4, #0]
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	6163      	str	r3, [r4, #20]
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b15b      	cbz	r3, 8003778 <__smakebuf_r+0x70>
 8003760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003764:	4630      	mov	r0, r6
 8003766:	f000 f81d 	bl	80037a4 <_isatty_r>
 800376a:	b128      	cbz	r0, 8003778 <__smakebuf_r+0x70>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	431d      	orrs	r5, r3
 800377c:	81a5      	strh	r5, [r4, #12]
 800377e:	e7cf      	b.n	8003720 <__smakebuf_r+0x18>

08003780 <_fstat_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_fstat_r+0x20>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	f7fd fa96 	bl	8000cbe <_fstat>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d102      	bne.n	800379c <_fstat_r+0x1c>
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	b103      	cbz	r3, 800379c <_fstat_r+0x1c>
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	bd38      	pop	{r3, r4, r5, pc}
 800379e:	bf00      	nop
 80037a0:	20000270 	.word	0x20000270

080037a4 <_isatty_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d06      	ldr	r5, [pc, #24]	; (80037c0 <_isatty_r+0x1c>)
 80037a8:	2300      	movs	r3, #0
 80037aa:	4604      	mov	r4, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	f7fd fa8a 	bl	8000cc8 <_isatty>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_isatty_r+0x1a>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_isatty_r+0x1a>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	20000270 	.word	0x20000270

080037c4 <_init>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr

080037d0 <_fini>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr
