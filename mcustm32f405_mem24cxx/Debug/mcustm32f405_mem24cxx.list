
mcustm32f405_mem24cxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac4  08003ac4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003acc  08003acc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eef0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dee  00000000  00000000  0002efcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00006ef8  00000000  00000000  00030db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009d0  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000803  00000000  00000000  00038688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fced  00000000  00000000  00038e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011d7e  00000000  00000000  00058b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bbea8  00000000  00000000  0006a8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000231c  00000000  00000000  001267a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00128abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038e0 	.word	0x080038e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080038e0 	.word	0x080038e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000570:	2400      	movs	r4, #0
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]
 8000578:	9408      	str	r4, [sp, #32]
 800057a:	9409      	str	r4, [sp, #36]	; 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	9401      	str	r4, [sp, #4]
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_GPIO_Init+0xa0>)
 8000580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000582:	f042 0204 	orr.w	r2, r2, #4
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	f002 0204 	and.w	r2, r2, #4
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	9402      	str	r4, [sp, #8]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005a2:	9202      	str	r2, [sp, #8]
 80005a4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0201 	orr.w	r2, r2, #1
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0201 	and.w	r2, r2, #1
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | EEPROM_WP_Pin, GPIO_PIN_SET);
 80005ce:	4d10      	ldr	r5, [pc, #64]	; (8000610 <MX_GPIO_Init+0xa4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 fe6c 	bl	80012b4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e2:	2311      	movs	r3, #17
 80005e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	a905      	add	r1, sp, #20
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 fd6b 	bl	80010c8 <HAL_GPIO_Init>

    /*Configure GPIO pin : EEPROM_WP_Pin */
    GPIO_InitStruct.Pin = EEPROM_WP_Pin;
 80005f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(EEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8000600:	a905      	add	r1, sp, #20
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fd60 	bl	80010c8 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000608:	b00b      	add	sp, #44	; 0x2c
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020800 	.word	0x40020800

08000614 <_write>:
    if (fd == 1 || fd == 2) {
 8000614:	3801      	subs	r0, #1
 8000616:	2801      	cmp	r0, #1
 8000618:	d80a      	bhi.n	8000630 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800061a:	b510      	push	{r4, lr}
 800061c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	b292      	uxth	r2, r2
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <_write+0x28>)
 8000626:	f002 f8a0 	bl	800276a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800062a:	b920      	cbnz	r0, 8000636 <_write+0x22>
            return len;
 800062c:	4620      	mov	r0, r4
}
 800062e:	bd10      	pop	{r4, pc}
    return -1;
 8000630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000634:	4770      	bx	lr
            return -1;
 8000636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063a:	e7f8      	b.n	800062e <_write+0x1a>
 800063c:	200000e0 	.word	0x200000e0

08000640 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x2>

08000644 <MX_I2C1_Init>:
static void MX_I2C1_Init(void) {
 8000644:	b508      	push	{r3, lr}
    hi2c1.Instance = I2C1;
 8000646:	480a      	ldr	r0, [pc, #40]	; (8000670 <MX_I2C1_Init+0x2c>)
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x30>)
 800064a:	6003      	str	r3, [r0, #0]
    hi2c1.Init.ClockSpeed = 400000;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x34>)
 800064e:	6043      	str	r3, [r0, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	2300      	movs	r3, #0
 8000652:	6083      	str	r3, [r0, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000654:	60c3      	str	r3, [r0, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	6102      	str	r2, [r0, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	6143      	str	r3, [r0, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800065e:	6183      	str	r3, [r0, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	61c3      	str	r3, [r0, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	6203      	str	r3, [r0, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000664:	f001 f882 	bl	800176c <HAL_I2C_Init>
 8000668:	b900      	cbnz	r0, 800066c <MX_I2C1_Init+0x28>
}
 800066a:	bd08      	pop	{r3, pc}
        Error_Handler();
 800066c:	f7ff ffe8 	bl	8000640 <Error_Handler>
 8000670:	2000008c 	.word	0x2000008c
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 800067c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <MX_USART1_UART_Init+0x2c>)
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_USART1_UART_Init+0x30>)
 8000682:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000684:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000688:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	2300      	movs	r3, #0
 800068c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800068e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000690:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000692:	220c      	movs	r2, #12
 8000694:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800069a:	f002 f837 	bl	800270c <HAL_UART_Init>
 800069e:	b900      	cbnz	r0, 80006a2 <MX_USART1_UART_Init+0x26>
}
 80006a0:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006a2:	f7ff ffcd 	bl	8000640 <Error_Handler>
 80006a6:	bf00      	nop
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	40011000 	.word	0x40011000

080006b0 <MX_CRC_Init>:
static void MX_CRC_Init(void) {
 80006b0:	b508      	push	{r3, lr}
    hcrc.Instance = CRC;
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CRC_Init+0x14>)
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MX_CRC_Init+0x18>)
 80006b6:	6003      	str	r3, [r0, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80006b8:	f000 fcb4 	bl	8001024 <HAL_CRC_Init>
 80006bc:	b900      	cbnz	r0, 80006c0 <MX_CRC_Init+0x10>
}
 80006be:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006c0:	f7ff ffbe 	bl	8000640 <Error_Handler>
 80006c4:	20000084 	.word	0x20000084
 80006c8:	40023000 	.word	0x40023000

080006cc <SystemClock_Config>:
void SystemClock_Config(void) {
 80006cc:	b500      	push	{lr}
 80006ce:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006d0:	2230      	movs	r2, #48	; 0x30
 80006d2:	2100      	movs	r1, #0
 80006d4:	a808      	add	r0, sp, #32
 80006d6:	f002 fab0 	bl	8002c3a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006da:	2300      	movs	r3, #0
 80006dc:	9303      	str	r3, [sp, #12]
 80006de:	9304      	str	r3, [sp, #16]
 80006e0:	9305      	str	r3, [sp, #20]
 80006e2:	9306      	str	r3, [sp, #24]
 80006e4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xa0>)
 80006ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80006ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80006f0:	6411      	str	r1, [r2, #64]	; 0x40
 80006f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <SystemClock_Config+0xa4>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000724:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000726:	2208      	movs	r2, #8
 8000728:	9210      	str	r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800072a:	22a8      	movs	r2, #168	; 0xa8
 800072c:	9211      	str	r2, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	a808      	add	r0, sp, #32
 8000736:	f001 fbe5 	bl	8001f04 <HAL_RCC_OscConfig>
 800073a:	b998      	cbnz	r0, 8000764 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800073c:	230f      	movs	r3, #15
 800073e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000754:	2105      	movs	r1, #5
 8000756:	a803      	add	r0, sp, #12
 8000758:	f001 fe38 	bl	80023cc <HAL_RCC_ClockConfig>
 800075c:	b920      	cbnz	r0, 8000768 <SystemClock_Config+0x9c>
}
 800075e:	b015      	add	sp, #84	; 0x54
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000764:	f7ff ff6c 	bl	8000640 <Error_Handler>
        Error_Handler();
 8000768:	f7ff ff6a 	bl	8000640 <Error_Handler>
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <main>:
int main(void) {
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	b0c0      	sub	sp, #256	; 0x100
    HAL_Init();
 8000778:	f000 fbb6 	bl	8000ee8 <HAL_Init>
    SystemClock_Config();
 800077c:	f7ff ffa6 	bl	80006cc <SystemClock_Config>
    MX_GPIO_Init();
 8000780:	f7ff fef4 	bl	800056c <MX_GPIO_Init>
    MX_I2C1_Init();
 8000784:	f7ff ff5e 	bl	8000644 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000788:	f7ff ff78 	bl	800067c <MX_USART1_UART_Init>
    MX_CRC_Init();
 800078c:	f7ff ff90 	bl	80006b0 <MX_CRC_Init>
    DBG("\n\n\n--------\nStarting");
 8000790:	48c4      	ldr	r0, [pc, #784]	; (8000aa4 <main+0x330>)
 8000792:	f002 f9f5 	bl	8002b80 <iprintf>
 8000796:	200a      	movs	r0, #10
 8000798:	f002 fa04 	bl	8002ba4 <putchar>
    HAL_Delay(10);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 fbcf 	bl	8000f40 <HAL_Delay>
    DBG("Scanning I2C bus:");
 80007a2:	48c1      	ldr	r0, [pc, #772]	; (8000aa8 <main+0x334>)
 80007a4:	f002 f9ec 	bl	8002b80 <iprintf>
 80007a8:	200a      	movs	r0, #10
 80007aa:	f002 f9fb 	bl	8002ba4 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80007ae:	2400      	movs	r4, #0
 80007b0:	e005      	b.n	80007be <main+0x4a>
            printf("-- ");
 80007b2:	48be      	ldr	r0, [pc, #760]	; (8000aac <main+0x338>)
 80007b4:	f002 f9e4 	bl	8002b80 <iprintf>
 80007b8:	e010      	b.n	80007dc <main+0x68>
    for (uint8_t i = 0; i < 128; i++) {
 80007ba:	3401      	adds	r4, #1
 80007bc:	b2e4      	uxtb	r4, r4
 80007be:	f014 0f80 	tst.w	r4, #128	; 0x80
 80007c2:	d115      	bne.n	80007f0 <main+0x7c>
        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2203      	movs	r2, #3
 80007c8:	0061      	lsls	r1, r4, #1
 80007ca:	48b9      	ldr	r0, [pc, #740]	; (8000ab0 <main+0x33c>)
 80007cc:	f001 fad0 	bl	8001d70 <HAL_I2C_IsDeviceReady>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d1ee      	bne.n	80007b2 <main+0x3e>
            printf("%2x ", i);
 80007d4:	4621      	mov	r1, r4
 80007d6:	48b7      	ldr	r0, [pc, #732]	; (8000ab4 <main+0x340>)
 80007d8:	f002 f9d2 	bl	8002b80 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0)
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d0ec      	beq.n	80007ba <main+0x46>
 80007e0:	1c63      	adds	r3, r4, #1
 80007e2:	f013 0f0f 	tst.w	r3, #15
 80007e6:	d1e8      	bne.n	80007ba <main+0x46>
            printf("\n");
 80007e8:	200a      	movs	r0, #10
 80007ea:	f002 f9db 	bl	8002ba4 <putchar>
 80007ee:	e7e4      	b.n	80007ba <main+0x46>
    printf("\n");
 80007f0:	200a      	movs	r0, #10
 80007f2:	f002 f9d7 	bl	8002ba4 <putchar>
    DBG("Initializing %s - %u kB EEPROM", M24CXX_TYPE, M24CXX_SIZE / 1024);
 80007f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fa:	49af      	ldr	r1, [pc, #700]	; (8000ab8 <main+0x344>)
 80007fc:	48af      	ldr	r0, [pc, #700]	; (8000abc <main+0x348>)
 80007fe:	f002 f9bf 	bl	8002b80 <iprintf>
 8000802:	200a      	movs	r0, #10
 8000804:	f002 f9ce 	bl	8002ba4 <putchar>
    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000808:	2250      	movs	r2, #80	; 0x50
 800080a:	49a9      	ldr	r1, [pc, #676]	; (8000ab0 <main+0x33c>)
 800080c:	48ac      	ldr	r0, [pc, #688]	; (8000ac0 <main+0x34c>)
 800080e:	f002 f83d 	bl	800288c <m24cxx_init>
 8000812:	b138      	cbz	r0, 8000824 <main+0xb0>
        DBG("M24CXX Failed to initialize");
 8000814:	48ab      	ldr	r0, [pc, #684]	; (8000ac4 <main+0x350>)
 8000816:	f002 f9b3 	bl	8002b80 <iprintf>
 800081a:	200a      	movs	r0, #10
 800081c:	f002 f9c2 	bl	8002ba4 <putchar>
        Error_Handler();
 8000820:	f7ff ff0e 	bl	8000640 <Error_Handler>
    DBG("Erasing all");
 8000824:	48a8      	ldr	r0, [pc, #672]	; (8000ac8 <main+0x354>)
 8000826:	f002 f9ab 	bl	8002b80 <iprintf>
 800082a:	200a      	movs	r0, #10
 800082c:	f002 f9ba 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 8000830:	f000 fb80 	bl	8000f34 <HAL_GetTick>
 8000834:	4604      	mov	r4, r0
    if (m24cxx_erase_all(&m24cxx) != M24CXX_Ok) {
 8000836:	48a2      	ldr	r0, [pc, #648]	; (8000ac0 <main+0x34c>)
 8000838:	f002 f8d6 	bl	80029e8 <m24cxx_erase_all>
 800083c:	b138      	cbz	r0, 800084e <main+0xda>
        DBG("Erase all failed");
 800083e:	48a3      	ldr	r0, [pc, #652]	; (8000acc <main+0x358>)
 8000840:	f002 f99e 	bl	8002b80 <iprintf>
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f9ad 	bl	8002ba4 <putchar>
        Error_Handler();
 800084a:	f7ff fef9 	bl	8000640 <Error_Handler>
    DBG("Erase all took - %lu s", (HAL_GetTick() - start_time) / 1000);
 800084e:	f000 fb71 	bl	8000f34 <HAL_GetTick>
 8000852:	1b00      	subs	r0, r0, r4
 8000854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000858:	fbb0 f1f1 	udiv	r1, r0, r1
 800085c:	489c      	ldr	r0, [pc, #624]	; (8000ad0 <main+0x35c>)
 800085e:	f002 f98f 	bl	8002b80 <iprintf>
 8000862:	200a      	movs	r0, #10
 8000864:	f002 f99e 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 8000868:	f000 fb64 	bl	8000f34 <HAL_GetTick>
 800086c:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 800086e:	2400      	movs	r4, #0
    uint32_t crc = 0;
 8000870:	4625      	mov	r5, r4
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000872:	e00e      	b.n	8000892 <main+0x11e>
            DBG("Read Error");
 8000874:	4897      	ldr	r0, [pc, #604]	; (8000ad4 <main+0x360>)
 8000876:	f002 f983 	bl	8002b80 <iprintf>
 800087a:	200a      	movs	r0, #10
 800087c:	f002 f992 	bl	8002ba4 <putchar>
            Error_Handler();
 8000880:	f7ff fede 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	4669      	mov	r1, sp
 8000888:	4893      	ldr	r0, [pc, #588]	; (8000ad8 <main+0x364>)
 800088a:	f000 fbf8 	bl	800107e <HAL_CRC_Calculate>
 800088e:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000890:	3401      	adds	r4, #1
 8000892:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000896:	d211      	bcs.n	80008bc <main+0x148>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089c:	466a      	mov	r2, sp
 800089e:	0221      	lsls	r1, r4, #8
 80008a0:	4887      	ldr	r0, [pc, #540]	; (8000ac0 <main+0x34c>)
 80008a2:	f002 f807 	bl	80028b4 <m24cxx_read>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d1e4      	bne.n	8000874 <main+0x100>
        if (i == 0)
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	d0ea      	beq.n	8000884 <main+0x110>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80008ae:	2240      	movs	r2, #64	; 0x40
 80008b0:	4669      	mov	r1, sp
 80008b2:	4889      	ldr	r0, [pc, #548]	; (8000ad8 <main+0x364>)
 80008b4:	f000 fbc5 	bl	8001042 <HAL_CRC_Accumulate>
 80008b8:	4605      	mov	r5, r0
 80008ba:	e7e9      	b.n	8000890 <main+0x11c>
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80008bc:	f000 fb3a 	bl	8000f34 <HAL_GetTick>
 80008c0:	1b80      	subs	r0, r0, r6
 80008c2:	462a      	mov	r2, r5
 80008c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c8:	fbb0 f1f1 	udiv	r1, r0, r1
 80008cc:	4883      	ldr	r0, [pc, #524]	; (8000adc <main+0x368>)
 80008ce:	f002 f957 	bl	8002b80 <iprintf>
 80008d2:	200a      	movs	r0, #10
 80008d4:	f002 f966 	bl	8002ba4 <putchar>
    memset(buf, 0x00, sizeof(buf));
 80008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008dc:	2100      	movs	r1, #0
 80008de:	4668      	mov	r0, sp
 80008e0:	f002 f9ab 	bl	8002c3a <memset>
    DBG("Writing all 0x00");
 80008e4:	487e      	ldr	r0, [pc, #504]	; (8000ae0 <main+0x36c>)
 80008e6:	f002 f94b 	bl	8002b80 <iprintf>
 80008ea:	200a      	movs	r0, #10
 80008ec:	f002 f95a 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 80008f0:	f000 fb20 	bl	8000f34 <HAL_GetTick>
 80008f4:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80008f6:	2400      	movs	r4, #0
 80008f8:	e00e      	b.n	8000918 <main+0x1a4>
            DBG("Write Error");
 80008fa:	487a      	ldr	r0, [pc, #488]	; (8000ae4 <main+0x370>)
 80008fc:	f002 f940 	bl	8002b80 <iprintf>
 8000900:	200a      	movs	r0, #10
 8000902:	f002 f94f 	bl	8002ba4 <putchar>
            Error_Handler();
 8000906:	f7ff fe9b 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	4669      	mov	r1, sp
 800090e:	4872      	ldr	r0, [pc, #456]	; (8000ad8 <main+0x364>)
 8000910:	f000 fbb5 	bl	800107e <HAL_CRC_Calculate>
 8000914:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000916:	3401      	adds	r4, #1
 8000918:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800091c:	d211      	bcs.n	8000942 <main+0x1ce>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800091e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000922:	466a      	mov	r2, sp
 8000924:	0221      	lsls	r1, r4, #8
 8000926:	4866      	ldr	r0, [pc, #408]	; (8000ac0 <main+0x34c>)
 8000928:	f002 f804 	bl	8002934 <m24cxx_write>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1e4      	bne.n	80008fa <main+0x186>
        if (i == 0)
 8000930:	2c00      	cmp	r4, #0
 8000932:	d0ea      	beq.n	800090a <main+0x196>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	4669      	mov	r1, sp
 8000938:	4867      	ldr	r0, [pc, #412]	; (8000ad8 <main+0x364>)
 800093a:	f000 fb82 	bl	8001042 <HAL_CRC_Accumulate>
 800093e:	4605      	mov	r5, r0
 8000940:	e7e9      	b.n	8000916 <main+0x1a2>
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000942:	f000 faf7 	bl	8000f34 <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	462a      	mov	r2, r5
 800094a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800094e:	fbb0 f1f1 	udiv	r1, r0, r1
 8000952:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <main+0x374>)
 8000954:	f002 f914 	bl	8002b80 <iprintf>
 8000958:	200a      	movs	r0, #10
 800095a:	f002 f923 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 800095e:	f000 fae9 	bl	8000f34 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000964:	2400      	movs	r4, #0
 8000966:	e00e      	b.n	8000986 <main+0x212>
            DBG("Read Error");
 8000968:	485a      	ldr	r0, [pc, #360]	; (8000ad4 <main+0x360>)
 800096a:	f002 f909 	bl	8002b80 <iprintf>
 800096e:	200a      	movs	r0, #10
 8000970:	f002 f918 	bl	8002ba4 <putchar>
            Error_Handler();
 8000974:	f7ff fe64 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	4669      	mov	r1, sp
 800097c:	4856      	ldr	r0, [pc, #344]	; (8000ad8 <main+0x364>)
 800097e:	f000 fb7e 	bl	800107e <HAL_CRC_Calculate>
 8000982:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000984:	3401      	adds	r4, #1
 8000986:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800098a:	d211      	bcs.n	80009b0 <main+0x23c>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	466a      	mov	r2, sp
 8000992:	0221      	lsls	r1, r4, #8
 8000994:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <main+0x34c>)
 8000996:	f001 ff8d 	bl	80028b4 <m24cxx_read>
 800099a:	2800      	cmp	r0, #0
 800099c:	d1e4      	bne.n	8000968 <main+0x1f4>
        if (i == 0)
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d0ea      	beq.n	8000978 <main+0x204>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	4669      	mov	r1, sp
 80009a6:	484c      	ldr	r0, [pc, #304]	; (8000ad8 <main+0x364>)
 80009a8:	f000 fb4b 	bl	8001042 <HAL_CRC_Accumulate>
 80009ac:	4605      	mov	r5, r0
 80009ae:	e7e9      	b.n	8000984 <main+0x210>
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 80009b0:	f000 fac0 	bl	8000f34 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	462a      	mov	r2, r5
 80009b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009bc:	fbb0 f1f1 	udiv	r1, r0, r1
 80009c0:	4846      	ldr	r0, [pc, #280]	; (8000adc <main+0x368>)
 80009c2:	f002 f8dd 	bl	8002b80 <iprintf>
 80009c6:	200a      	movs	r0, #10
 80009c8:	f002 f8ec 	bl	8002ba4 <putchar>
    memset(buf, 0x55, sizeof(buf));
 80009cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d0:	2155      	movs	r1, #85	; 0x55
 80009d2:	4668      	mov	r0, sp
 80009d4:	f002 f931 	bl	8002c3a <memset>
    DBG("Writing all 0x55");
 80009d8:	4844      	ldr	r0, [pc, #272]	; (8000aec <main+0x378>)
 80009da:	f002 f8d1 	bl	8002b80 <iprintf>
 80009de:	200a      	movs	r0, #10
 80009e0:	f002 f8e0 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 80009e4:	f000 faa6 	bl	8000f34 <HAL_GetTick>
 80009e8:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 80009ea:	2400      	movs	r4, #0
 80009ec:	e00e      	b.n	8000a0c <main+0x298>
            DBG("Write Error");
 80009ee:	483d      	ldr	r0, [pc, #244]	; (8000ae4 <main+0x370>)
 80009f0:	f002 f8c6 	bl	8002b80 <iprintf>
 80009f4:	200a      	movs	r0, #10
 80009f6:	f002 f8d5 	bl	8002ba4 <putchar>
            Error_Handler();
 80009fa:	f7ff fe21 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	4669      	mov	r1, sp
 8000a02:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <main+0x364>)
 8000a04:	f000 fb3b 	bl	800107e <HAL_CRC_Calculate>
 8000a08:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a0a:	3401      	adds	r4, #1
 8000a0c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000a10:	d211      	bcs.n	8000a36 <main+0x2c2>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	466a      	mov	r2, sp
 8000a18:	0221      	lsls	r1, r4, #8
 8000a1a:	4829      	ldr	r0, [pc, #164]	; (8000ac0 <main+0x34c>)
 8000a1c:	f001 ff8a 	bl	8002934 <m24cxx_write>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1e4      	bne.n	80009ee <main+0x27a>
        if (i == 0)
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d0ea      	beq.n	80009fe <main+0x28a>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	4669      	mov	r1, sp
 8000a2c:	482a      	ldr	r0, [pc, #168]	; (8000ad8 <main+0x364>)
 8000a2e:	f000 fb08 	bl	8001042 <HAL_CRC_Accumulate>
 8000a32:	4605      	mov	r5, r0
 8000a34:	e7e9      	b.n	8000a0a <main+0x296>
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000a36:	f000 fa7d 	bl	8000f34 <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	462a      	mov	r2, r5
 8000a3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a42:	fbb0 f1f1 	udiv	r1, r0, r1
 8000a46:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <main+0x374>)
 8000a48:	f002 f89a 	bl	8002b80 <iprintf>
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 f8a9 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 8000a52:	f000 fa6f 	bl	8000f34 <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a58:	2400      	movs	r4, #0
 8000a5a:	e00e      	b.n	8000a7a <main+0x306>
            DBG("Read Error");
 8000a5c:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <main+0x360>)
 8000a5e:	f002 f88f 	bl	8002b80 <iprintf>
 8000a62:	200a      	movs	r0, #10
 8000a64:	f002 f89e 	bl	8002ba4 <putchar>
            Error_Handler();
 8000a68:	f7ff fdea 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a6c:	2240      	movs	r2, #64	; 0x40
 8000a6e:	4669      	mov	r1, sp
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <main+0x364>)
 8000a72:	f000 fb04 	bl	800107e <HAL_CRC_Calculate>
 8000a76:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000a78:	3401      	adds	r4, #1
 8000a7a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000a7e:	d237      	bcs.n	8000af0 <main+0x37c>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	466a      	mov	r2, sp
 8000a86:	0221      	lsls	r1, r4, #8
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <main+0x34c>)
 8000a8a:	f001 ff13 	bl	80028b4 <m24cxx_read>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d1e4      	bne.n	8000a5c <main+0x2e8>
        if (i == 0)
 8000a92:	2c00      	cmp	r4, #0
 8000a94:	d0ea      	beq.n	8000a6c <main+0x2f8>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	4669      	mov	r1, sp
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <main+0x364>)
 8000a9c:	f000 fad1 	bl	8001042 <HAL_CRC_Accumulate>
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	e7e9      	b.n	8000a78 <main+0x304>
 8000aa4:	080038f8 	.word	0x080038f8
 8000aa8:	08003910 	.word	0x08003910
 8000aac:	0800392c 	.word	0x0800392c
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	08003924 	.word	0x08003924
 8000ab8:	08003930 	.word	0x08003930
 8000abc:	0800393c 	.word	0x0800393c
 8000ac0:	20000124 	.word	0x20000124
 8000ac4:	0800395c 	.word	0x0800395c
 8000ac8:	08003978 	.word	0x08003978
 8000acc:	08003984 	.word	0x08003984
 8000ad0:	08003998 	.word	0x08003998
 8000ad4:	080039b0 	.word	0x080039b0
 8000ad8:	20000084 	.word	0x20000084
 8000adc:	080039bc 	.word	0x080039bc
 8000ae0:	080039e4 	.word	0x080039e4
 8000ae4:	080039f8 	.word	0x080039f8
 8000ae8:	08003a04 	.word	0x08003a04
 8000aec:	08003a2c 	.word	0x08003a2c
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000af0:	f000 fa20 	bl	8000f34 <HAL_GetTick>
 8000af4:	1b80      	subs	r0, r0, r6
 8000af6:	462a      	mov	r2, r5
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8000b00:	484a      	ldr	r0, [pc, #296]	; (8000c2c <main+0x4b8>)
 8000b02:	f002 f83d 	bl	8002b80 <iprintf>
 8000b06:	200a      	movs	r0, #10
 8000b08:	f002 f84c 	bl	8002ba4 <putchar>
    memset(buf, 0xaa, sizeof(buf));
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	21aa      	movs	r1, #170	; 0xaa
 8000b12:	4668      	mov	r0, sp
 8000b14:	f002 f891 	bl	8002c3a <memset>
    DBG("Writing all 0xaa");
 8000b18:	4845      	ldr	r0, [pc, #276]	; (8000c30 <main+0x4bc>)
 8000b1a:	f002 f831 	bl	8002b80 <iprintf>
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f002 f840 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 8000b24:	f000 fa06 	bl	8000f34 <HAL_GetTick>
 8000b28:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	e00e      	b.n	8000b4c <main+0x3d8>
            DBG("Write Error");
 8000b2e:	4841      	ldr	r0, [pc, #260]	; (8000c34 <main+0x4c0>)
 8000b30:	f002 f826 	bl	8002b80 <iprintf>
 8000b34:	200a      	movs	r0, #10
 8000b36:	f002 f835 	bl	8002ba4 <putchar>
            Error_Handler();
 8000b3a:	f7ff fd81 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000b3e:	2240      	movs	r2, #64	; 0x40
 8000b40:	4669      	mov	r1, sp
 8000b42:	483d      	ldr	r0, [pc, #244]	; (8000c38 <main+0x4c4>)
 8000b44:	f000 fa9b 	bl	800107e <HAL_CRC_Calculate>
 8000b48:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000b4a:	3401      	adds	r4, #1
 8000b4c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000b50:	d211      	bcs.n	8000b76 <main+0x402>
        if (m24cxx_write(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	466a      	mov	r2, sp
 8000b58:	0221      	lsls	r1, r4, #8
 8000b5a:	4838      	ldr	r0, [pc, #224]	; (8000c3c <main+0x4c8>)
 8000b5c:	f001 feea 	bl	8002934 <m24cxx_write>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d1e4      	bne.n	8000b2e <main+0x3ba>
        if (i == 0)
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d0ea      	beq.n	8000b3e <main+0x3ca>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	4669      	mov	r1, sp
 8000b6c:	4832      	ldr	r0, [pc, #200]	; (8000c38 <main+0x4c4>)
 8000b6e:	f000 fa68 	bl	8001042 <HAL_CRC_Accumulate>
 8000b72:	4605      	mov	r5, r0
 8000b74:	e7e9      	b.n	8000b4a <main+0x3d6>
    DBG("Write all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000b76:	f000 f9dd 	bl	8000f34 <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b82:	fbb0 f1f1 	udiv	r1, r0, r1
 8000b86:	482e      	ldr	r0, [pc, #184]	; (8000c40 <main+0x4cc>)
 8000b88:	f001 fffa 	bl	8002b80 <iprintf>
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f002 f809 	bl	8002ba4 <putchar>
    start_time = HAL_GetTick();
 8000b92:	f000 f9cf 	bl	8000f34 <HAL_GetTick>
 8000b96:	4606      	mov	r6, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000b98:	2400      	movs	r4, #0
 8000b9a:	e00e      	b.n	8000bba <main+0x446>
            DBG("Read Error");
 8000b9c:	4829      	ldr	r0, [pc, #164]	; (8000c44 <main+0x4d0>)
 8000b9e:	f001 ffef 	bl	8002b80 <iprintf>
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f001 fffe 	bl	8002ba4 <putchar>
            Error_Handler();
 8000ba8:	f7ff fd4a 	bl	8000640 <Error_Handler>
            crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000bac:	2240      	movs	r2, #64	; 0x40
 8000bae:	4669      	mov	r1, sp
 8000bb0:	4821      	ldr	r0, [pc, #132]	; (8000c38 <main+0x4c4>)
 8000bb2:	f000 fa64 	bl	800107e <HAL_CRC_Calculate>
 8000bb6:	4605      	mov	r5, r0
    for (int i = 0; i < M24CXX_SIZE / sizeof(buf); ++i) {
 8000bb8:	3401      	adds	r4, #1
 8000bba:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000bbe:	d211      	bcs.n	8000be4 <main+0x470>
        if (m24cxx_read(&m24cxx, i * sizeof(buf), (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	466a      	mov	r2, sp
 8000bc6:	0221      	lsls	r1, r4, #8
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <main+0x4c8>)
 8000bca:	f001 fe73 	bl	80028b4 <m24cxx_read>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d1e4      	bne.n	8000b9c <main+0x428>
        if (i == 0)
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d0ea      	beq.n	8000bac <main+0x438>
            crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*) &buf, sizeof(buf) / 4);
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	4669      	mov	r1, sp
 8000bda:	4817      	ldr	r0, [pc, #92]	; (8000c38 <main+0x4c4>)
 8000bdc:	f000 fa31 	bl	8001042 <HAL_CRC_Accumulate>
 8000be0:	4605      	mov	r5, r0
 8000be2:	e7e9      	b.n	8000bb8 <main+0x444>
    DBG("Read all took - %lu s - CRC = 0x%08lx", (HAL_GetTick() - start_time) / 1000, crc);
 8000be4:	f000 f9a6 	bl	8000f34 <HAL_GetTick>
 8000be8:	1b80      	subs	r0, r0, r6
 8000bea:	462a      	mov	r2, r5
 8000bec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf0:	fbb0 f1f1 	udiv	r1, r0, r1
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <main+0x4b8>)
 8000bf6:	f001 ffc3 	bl	8002b80 <iprintf>
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f001 ffd2 	bl	8002ba4 <putchar>
    DBG("Done Testing - entering main loop");
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <main+0x4d4>)
 8000c02:	f001 ffbd 	bl	8002b80 <iprintf>
 8000c06:	200a      	movs	r0, #10
 8000c08:	f001 ffcc 	bl	8002ba4 <putchar>
    uint32_t now = 0, last_blink = 0;
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	4625      	mov	r5, r4
        now = HAL_GetTick();
 8000c10:	f000 f990 	bl	8000f34 <HAL_GetTick>
 8000c14:	4604      	mov	r4, r0
        if (now - last_blink >= 500) {
 8000c16:	1b43      	subs	r3, r0, r5
 8000c18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c1c:	d3f8      	bcc.n	8000c10 <main+0x49c>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	480a      	ldr	r0, [pc, #40]	; (8000c4c <main+0x4d8>)
 8000c24:	f000 fb4c 	bl	80012c0 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000c28:	e7f1      	b.n	8000c0e <main+0x49a>
 8000c2a:	bf00      	nop
 8000c2c:	080039bc 	.word	0x080039bc
 8000c30:	08003a40 	.word	0x08003a40
 8000c34:	080039f8 	.word	0x080039f8
 8000c38:	20000084 	.word	0x20000084
 8000c3c:	20000124 	.word	0x20000124
 8000c40:	08003a04 	.word	0x08003a04
 8000c44:	080039b0 	.word	0x080039b0
 8000c48:	08003a54 	.word	0x08003a54
 8000c4c:	40020800 	.word	0x40020800

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2100      	movs	r1, #0
 8000c54:	9100      	str	r1, [sp, #0]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_MspInit+0x34>)
 8000c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	9101      	str	r1, [sp, #4]
 8000c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	b002      	add	sp, #8
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000c88:	6802      	ldr	r2, [r0, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_CRC_MspInit+0x28>)
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d000      	beq.n	8000c92 <HAL_CRC_MspInit+0xa>
 8000c90:	4770      	bx	lr
{
 8000c92:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_CRC_MspInit+0x2c>)
 8000c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cac:	b002      	add	sp, #8
 8000cae:	4770      	bx	lr
 8000cb0:	40023000 	.word	0x40023000
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	9304      	str	r3, [sp, #16]
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	9306      	str	r3, [sp, #24]
 8000cc6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000cc8:	6802      	ldr	r2, [r0, #0]
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_I2C_MspInit+0x64>)
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd0:	b009      	add	sp, #36	; 0x24
 8000cd2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2500      	movs	r5, #0
 8000cd6:	9501      	str	r5, [sp, #4]
 8000cd8:	4c11      	ldr	r4, [pc, #68]	; (8000d20 <HAL_I2C_MspInit+0x68>)
 8000cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6323      	str	r3, [r4, #48]	; 0x30
 8000ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	a903      	add	r1, sp, #12
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_I2C_MspInit+0x6c>)
 8000d00:	f000 f9e2 	bl	80010c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d04:	9502      	str	r5, [sp, #8]
 8000d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6423      	str	r3, [r4, #64]	; 0x40
 8000d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	9b02      	ldr	r3, [sp, #8]
}
 8000d18:	e7da      	b.n	8000cd0 <HAL_I2C_MspInit+0x18>
 8000d1a:	bf00      	nop
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9303      	str	r3, [sp, #12]
 8000d30:	9304      	str	r3, [sp, #16]
 8000d32:	9305      	str	r3, [sp, #20]
 8000d34:	9306      	str	r3, [sp, #24]
 8000d36:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d3e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d002      	beq.n	8000d4c <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d46:	b009      	add	sp, #36	; 0x24
 8000d48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	9101      	str	r1, [sp, #4]
 8000d50:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d56:	f042 0210 	orr.w	r2, r2, #16
 8000d5a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d5e:	f002 0210 	and.w	r2, r2, #16
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	9102      	str	r1, [sp, #8]
 8000d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	a903      	add	r1, sp, #12
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <HAL_UART_MspInit+0x70>)
 8000d90:	f000 f99a 	bl	80010c8 <HAL_GPIO_Init>
}
 8000d94:	e7d7      	b.n	8000d46 <HAL_UART_MspInit+0x1e>
 8000d96:	bf00      	nop
 8000d98:	40020000 	.word	0x40020000

08000d9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler>

08000d9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler>

08000da0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler>

08000da2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler>

08000da4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler>

08000da6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8b5 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bd08      	pop	{r3, pc}

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	460c      	mov	r4, r1
 8000db8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2500      	movs	r5, #0
 8000dbc:	e006      	b.n	8000dcc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000dca:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	42b5      	cmp	r5, r6
 8000dce:	dbf6      	blt.n	8000dbe <_read+0xa>
  }

  return len;
}
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}

08000dd4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000de0:	2000      	movs	r0, #0
 8000de2:	4770      	bx	lr

08000de4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000de4:	2001      	movs	r0, #1
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	4770      	bx	lr

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <_sbrk+0x38>)
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <_sbrk+0x40>)
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	b140      	cbz	r0, 8000e0c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <_sbrk+0x40>)
 8000dfc:	6800      	ldr	r0, [r0, #0]
 8000dfe:	4403      	add	r3, r0
 8000e00:	1a52      	subs	r2, r2, r1
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d806      	bhi.n	8000e14 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <_sbrk+0x40>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e0a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <_sbrk+0x40>)
 8000e0e:	4c08      	ldr	r4, [pc, #32]	; (8000e30 <_sbrk+0x44>)
 8000e10:	6004      	str	r4, [r0, #0]
 8000e12:	e7f2      	b.n	8000dfa <_sbrk+0xe>
    errno = ENOMEM;
 8000e14:	f001 ff60 	bl	8002cd8 <__errno>
 8000e18:	230c      	movs	r3, #12
 8000e1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e20:	e7f3      	b.n	8000e0a <_sbrk+0x1e>
 8000e22:	bf00      	nop
 8000e24:	20020000 	.word	0x20020000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	2000012c 	.word	0x2000012c
 8000e30:	20000280 	.word	0x20000280

08000e34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <SystemInit+0x10>)
 8000e36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffdf 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f001 ff35 	bl	8002ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc7b 	bl	8000774 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e8c:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 8000e90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e94:	20000280 	.word	0x20000280

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_InitTick+0x40>)
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_InitTick+0x44>)
 8000eae:	6810      	ldr	r0, [r2, #0]
 8000eb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eb4:	f000 f8a2 	bl	8000ffc <HAL_SYSTICK_Config>
 8000eb8:	b968      	cbnz	r0, 8000ed6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	2c0f      	cmp	r4, #15
 8000ebc:	d901      	bls.n	8000ec2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e00a      	b.n	8000ed8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eca:	f000 f85f 	bl	8000f8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_InitTick+0x48>)
 8000ed0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
}
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	bf00      	nop
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_Init>:
{
 8000ee8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x30>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f82f 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff ffc6 	bl	8000e9c <HAL_InitTick>
  HAL_MspInit();
 8000f10:	f7ff fe9e 	bl	8000c50 <HAL_MspInit>
}
 8000f14:	2000      	movs	r0, #0
 8000f16:	bd08      	pop	{r3, pc}
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x10>)
 8000f1e:	6811      	ldr	r1, [r2, #0]
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_IncTick+0x14>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	440b      	add	r3, r1
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000130 	.word	0x20000130
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f34:	4b01      	ldr	r3, [pc, #4]	; (8000f3c <HAL_GetTick+0x8>)
 8000f36:	6818      	ldr	r0, [r3, #0]
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000130 	.word	0x20000130

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff fff6 	bl	8000f34 <HAL_GetTick>
 8000f48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000f4e:	d002      	beq.n	8000f56 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_Delay+0x24>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	f7ff ffed 	bl	8000f34 <HAL_GetTick>
 8000f5a:	1b40      	subs	r0, r0, r5
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	d3fa      	bcc.n	8000f56 <HAL_Delay+0x16>
  {
  }
}
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 8000f62:	bf00      	nop
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f6a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f70:	041b      	lsls	r3, r3, #16
 8000f72:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	0200      	lsls	r0, r0, #8
 8000f76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f84:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_NVIC_SetPriority+0x68>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f96:	f1c3 0c07 	rsb	ip, r3, #7
 8000f9a:	f1bc 0f04 	cmp.w	ip, #4
 8000f9e:	bf28      	it	cs
 8000fa0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa4:	f103 0e04 	add.w	lr, r3, #4
 8000fa8:	f1be 0f06 	cmp.w	lr, #6
 8000fac:	d918      	bls.n	8000fe0 <HAL_NVIC_SetPriority+0x54>
 8000fae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000fb4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000fb8:	ea21 010c 	bic.w	r1, r1, ip
 8000fbc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbe:	fa0e fe03 	lsl.w	lr, lr, r3
 8000fc2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	db0b      	blt.n	8000fe4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000fd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fd8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fdc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e7e5      	b.n	8000fb0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	f000 000f 	and.w	r0, r0, #15
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_NVIC_SetPriority+0x6c>)
 8000fee:	541a      	strb	r2, [r3, r0]
 8000ff0:	e7f4      	b.n	8000fdc <HAL_NVIC_SetPriority+0x50>
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	e000ed14 	.word	0xe000ed14

08000ffc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001002:	d20b      	bcs.n	800101c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001004:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001008:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <HAL_SYSTICK_Config+0x24>)
 800100c:	21f0      	movs	r1, #240	; 0xf0
 800100e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001012:	2000      	movs	r0, #0
 8001014:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	2207      	movs	r2, #7
 8001018:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800101c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001024:	b158      	cbz	r0, 800103e <HAL_CRC_Init+0x1a>
{
 8001026:	b510      	push	{r4, lr}
 8001028:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800102a:	7943      	ldrb	r3, [r0, #5]
 800102c:	b11b      	cbz	r3, 8001036 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800102e:	2301      	movs	r3, #1
 8001030:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001032:	2000      	movs	r0, #0
}
 8001034:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001036:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001038:	f7ff fe26 	bl	8000c88 <HAL_CRC_MspInit>
 800103c:	e7f7      	b.n	800102e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	4770      	bx	lr

08001042 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001042:	4684      	mov	ip, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001044:	2302      	movs	r3, #2
 8001046:	7143      	strb	r3, [r0, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001048:	2300      	movs	r3, #0
 800104a:	4293      	cmp	r3, r2
 800104c:	d211      	bcs.n	8001072 <HAL_CRC_Accumulate+0x30>
{
 800104e:	b410      	push	{r4}
  {
    hcrc->Instance->DR = pBuffer[index];
 8001050:	f8dc 0000 	ldr.w	r0, [ip]
 8001054:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001058:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 800105a:	3301      	adds	r3, #1
 800105c:	4293      	cmp	r3, r2
 800105e:	d3f7      	bcc.n	8001050 <HAL_CRC_Accumulate+0xe>
  }
  temp = hcrc->Instance->DR;
 8001060:	f8dc 3000 	ldr.w	r3, [ip]
 8001064:	6818      	ldr	r0, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001066:	2301      	movs	r3, #1
 8001068:	f88c 3005 	strb.w	r3, [ip, #5]

  /* Return the CRC computed value */
  return temp;
}
 800106c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001070:	4770      	bx	lr
  temp = hcrc->Instance->DR;
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8001076:	2301      	movs	r3, #1
 8001078:	f88c 3005 	strb.w	r3, [ip, #5]
}
 800107c:	4770      	bx	lr

0800107e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800107e:	4684      	mov	ip, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001080:	2302      	movs	r3, #2
 8001082:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001084:	6800      	ldr	r0, [r0, #0]
 8001086:	6883      	ldr	r3, [r0, #8]
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6083      	str	r3, [r0, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800108e:	2300      	movs	r3, #0
 8001090:	4293      	cmp	r3, r2
 8001092:	d211      	bcs.n	80010b8 <HAL_CRC_Calculate+0x3a>
{
 8001094:	b410      	push	{r4}
  {
    hcrc->Instance->DR = pBuffer[index];
 8001096:	f8dc 0000 	ldr.w	r0, [ip]
 800109a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800109e:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 80010a0:	3301      	adds	r3, #1
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d3f7      	bcc.n	8001096 <HAL_CRC_Calculate+0x18>
  }
  temp = hcrc->Instance->DR;
 80010a6:	f8dc 3000 	ldr.w	r3, [ip]
 80010aa:	6818      	ldr	r0, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f88c 3005 	strb.w	r3, [ip, #5]

  /* Return the CRC computed value */
  return temp;
}
 80010b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010b6:	4770      	bx	lr
  temp = hcrc->Instance->DR;
 80010b8:	f8dc 3000 	ldr.w	r3, [ip]
 80010bc:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80010be:	2301      	movs	r3, #1
 80010c0:	f88c 3005 	strb.w	r3, [ip, #5]
}
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	f200 80e9 	bhi.w	80012a2 <HAL_GPIO_Init+0x1da>
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	e065      	b.n	80011a2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010dc:	2403      	movs	r4, #3
 80010de:	fa04 f40e 	lsl.w	r4, r4, lr
 80010e2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	68cc      	ldr	r4, [r1, #12]
 80010e8:	fa04 f40e 	lsl.w	r4, r4, lr
 80010ec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80010ee:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	684a      	ldr	r2, [r1, #4]
 80010f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001100:	6042      	str	r2, [r0, #4]
 8001102:	e05c      	b.n	80011be <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	08dc      	lsrs	r4, r3, #3
 8001106:	3408      	adds	r4, #8
 8001108:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110c:	f003 0507 	and.w	r5, r3, #7
 8001110:	00ad      	lsls	r5, r5, #2
 8001112:	f04f 0e0f 	mov.w	lr, #15
 8001116:	fa0e fe05 	lsl.w	lr, lr, r5
 800111a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111e:	690a      	ldr	r2, [r1, #16]
 8001120:	40aa      	lsls	r2, r5
 8001122:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800112a:	e05c      	b.n	80011e6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112c:	2207      	movs	r2, #7
 800112e:	e000      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 8001130:	2200      	movs	r2, #0
 8001132:	fa02 f20e 	lsl.w	r2, r2, lr
 8001136:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	3402      	adds	r4, #2
 800113a:	4d5a      	ldr	r5, [pc, #360]	; (80012a4 <HAL_GPIO_Init+0x1dc>)
 800113c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001140:	4a59      	ldr	r2, [pc, #356]	; (80012a8 <HAL_GPIO_Init+0x1e0>)
 8001142:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001144:	ea6f 020c 	mvn.w	r2, ip
 8001148:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114c:	684e      	ldr	r6, [r1, #4]
 800114e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001152:	d001      	beq.n	8001158 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001154:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001158:	4c53      	ldr	r4, [pc, #332]	; (80012a8 <HAL_GPIO_Init+0x1e0>)
 800115a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800115c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800115e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001162:	684e      	ldr	r6, [r1, #4]
 8001164:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001168:	d001      	beq.n	800116e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800116a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800116e:	4c4e      	ldr	r4, [pc, #312]	; (80012a8 <HAL_GPIO_Init+0x1e0>)
 8001170:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001172:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001174:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001178:	684e      	ldr	r6, [r1, #4]
 800117a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800117e:	d001      	beq.n	8001184 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001180:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001184:	4c48      	ldr	r4, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x1e0>)
 8001186:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800118a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118c:	684d      	ldr	r5, [r1, #4]
 800118e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001192:	d001      	beq.n	8001198 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001194:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001198:	4c43      	ldr	r4, [pc, #268]	; (80012a8 <HAL_GPIO_Init+0x1e0>)
 800119a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119c:	3301      	adds	r3, #1
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	d87d      	bhi.n	800129e <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80011a2:	2201      	movs	r2, #1
 80011a4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	680c      	ldr	r4, [r1, #0]
 80011a8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80011ac:	ea32 0404 	bics.w	r4, r2, r4
 80011b0:	d1f4      	bne.n	800119c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	684c      	ldr	r4, [r1, #4]
 80011b4:	f004 0403 	and.w	r4, r4, #3
 80011b8:	3c01      	subs	r4, #1
 80011ba:	2c01      	cmp	r4, #1
 80011bc:	d98b      	bls.n	80010d6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011be:	684a      	ldr	r2, [r1, #4]
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	2a03      	cmp	r2, #3
 80011c6:	d009      	beq.n	80011dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80011c8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	005d      	lsls	r5, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	40aa      	lsls	r2, r5
 80011d0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	688a      	ldr	r2, [r1, #8]
 80011d6:	40aa      	lsls	r2, r5
 80011d8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80011da:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	684a      	ldr	r2, [r1, #4]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	2a02      	cmp	r2, #2
 80011e4:	d08e      	beq.n	8001104 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80011e6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f20e 	lsl.w	r2, r2, lr
 80011f2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	fa02 f20e 	lsl.w	r2, r2, lr
 8001200:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001202:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001204:	684a      	ldr	r2, [r1, #4]
 8001206:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800120a:	d0c7      	beq.n	800119c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	2200      	movs	r2, #0
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_GPIO_Init+0x1e4>)
 8001212:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001214:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001218:	6454      	str	r4, [r2, #68]	; 0x44
 800121a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800121c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001224:	089c      	lsrs	r4, r3, #2
 8001226:	1ca5      	adds	r5, r4, #2
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_GPIO_Init+0x1dc>)
 800122a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122e:	f003 0e03 	and.w	lr, r3, #3
 8001232:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f20e 	lsl.w	r2, r2, lr
 800123c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_GPIO_Init+0x1e8>)
 8001242:	4290      	cmp	r0, r2
 8001244:	f43f af74 	beq.w	8001130 <HAL_GPIO_Init+0x68>
 8001248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124c:	4290      	cmp	r0, r2
 800124e:	d01a      	beq.n	8001286 <HAL_GPIO_Init+0x1be>
 8001250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001254:	4290      	cmp	r0, r2
 8001256:	d018      	beq.n	800128a <HAL_GPIO_Init+0x1c2>
 8001258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800125c:	4290      	cmp	r0, r2
 800125e:	d016      	beq.n	800128e <HAL_GPIO_Init+0x1c6>
 8001260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001264:	4290      	cmp	r0, r2
 8001266:	d014      	beq.n	8001292 <HAL_GPIO_Init+0x1ca>
 8001268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800126c:	4290      	cmp	r0, r2
 800126e:	d012      	beq.n	8001296 <HAL_GPIO_Init+0x1ce>
 8001270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001274:	4290      	cmp	r0, r2
 8001276:	d010      	beq.n	800129a <HAL_GPIO_Init+0x1d2>
 8001278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800127c:	4290      	cmp	r0, r2
 800127e:	f43f af55 	beq.w	800112c <HAL_GPIO_Init+0x64>
 8001282:	2208      	movs	r2, #8
 8001284:	e755      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 8001286:	2201      	movs	r2, #1
 8001288:	e753      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 800128a:	2202      	movs	r2, #2
 800128c:	e751      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 800128e:	2203      	movs	r2, #3
 8001290:	e74f      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 8001292:	2204      	movs	r2, #4
 8001294:	e74d      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 8001296:	2205      	movs	r2, #5
 8001298:	e74b      	b.n	8001132 <HAL_GPIO_Init+0x6a>
 800129a:	2206      	movs	r2, #6
 800129c:	e749      	b.n	8001132 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800129e:	b002      	add	sp, #8
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
 80012a2:	4770      	bx	lr
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40013c00 	.word	0x40013c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	b10a      	cbz	r2, 80012ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	6181      	str	r1, [r0, #24]
 80012b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	0409      	lsls	r1, r1, #16
 80012bc:	6181      	str	r1, [r0, #24]
  }
}
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c2:	ea01 0203 	and.w	r2, r1, r3
 80012c6:	ea21 0103 	bic.w	r1, r1, r3
 80012ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80012ce:	6181      	str	r1, [r0, #24]
}
 80012d0:	4770      	bx	lr

080012d2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012da:	d101      	bne.n	80012e0 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012e4:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80012ea:	2220      	movs	r2, #32
 80012ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80012f6:	f042 0204 	orr.w	r2, r2, #4
 80012fa:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80012fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	4770      	bx	lr

08001304 <I2C_WaitOnFlagUntilTimeout>:
{
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	4607      	mov	r7, r0
 800130a:	460d      	mov	r5, r1
 800130c:	4690      	mov	r8, r2
 800130e:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001310:	e024      	b.n	800135c <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001312:	f7ff fe0f 	bl	8000f34 <HAL_GetTick>
 8001316:	9b06      	ldr	r3, [sp, #24]
 8001318:	1ac0      	subs	r0, r0, r3
 800131a:	42b0      	cmp	r0, r6
 800131c:	d800      	bhi.n	8001320 <I2C_WaitOnFlagUntilTimeout+0x1c>
 800131e:	b9ee      	cbnz	r6, 800135c <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001324:	2220      	movs	r2, #32
 8001326:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800132a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800132e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001330:	f042 0220 	orr.w	r2, r2, #32
 8001334:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001336:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	e01e      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	699c      	ldr	r4, [r3, #24]
 8001342:	ea25 0c04 	bic.w	ip, r5, r4
 8001346:	fa1f fc8c 	uxth.w	ip, ip
 800134a:	fabc fc8c 	clz	ip, ip
 800134e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001352:	45e0      	cmp	r8, ip
 8001354:	d111      	bne.n	800137a <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001356:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800135a:	d1da      	bne.n	8001312 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001360:	2b01      	cmp	r3, #1
 8001362:	d1ec      	bne.n	800133e <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	ea25 0c03 	bic.w	ip, r5, r3
 800136c:	fa1f fc8c 	uxth.w	ip, ip
 8001370:	fabc fc8c 	clz	ip, ip
 8001374:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001378:	e7eb      	b.n	8001352 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
}
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001380 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001384:	4605      	mov	r5, r0
 8001386:	460e      	mov	r6, r1
 8001388:	4617      	mov	r7, r2
 800138a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800138c:	e03d      	b.n	800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001394:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800139c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013a2:	2220      	movs	r2, #32
 80013a4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013a8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ac:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013ae:	f042 0204 	orr.w	r2, r2, #4
 80013b2:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013b4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
 80013ba:	e034      	b.n	8001426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013bc:	f7ff fdba 	bl	8000f34 <HAL_GetTick>
 80013c0:	eba0 0008 	sub.w	r0, r0, r8
 80013c4:	42b8      	cmp	r0, r7
 80013c6:	d800      	bhi.n	80013ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80013c8:	b9ff      	cbnz	r7, 800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013ce:	2220      	movs	r2, #32
 80013d0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013d8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80013e0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e01e      	b.n	8001426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	699c      	ldr	r4, [r3, #24]
 80013ec:	ea26 0404 	bic.w	r4, r6, r4
 80013f0:	b2a4      	uxth	r4, r4
 80013f2:	3c00      	subs	r4, #0
 80013f4:	bf18      	it	ne
 80013f6:	2401      	movne	r4, #1
 80013f8:	b1a4      	cbz	r4, 8001424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001402:	d1c4      	bne.n	800138e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001404:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8001408:	d1d8      	bne.n	80013bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800140a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800140e:	2b01      	cmp	r3, #1
 8001410:	d1ea      	bne.n	80013e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	695c      	ldr	r4, [r3, #20]
 8001416:	ea26 0404 	bic.w	r4, r6, r4
 800141a:	b2a4      	uxth	r4, r4
 800141c:	3c00      	subs	r4, #0
 800141e:	bf18      	it	ne
 8001420:	2401      	movne	r4, #1
 8001422:	e7e9      	b.n	80013f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001424:	2000      	movs	r0, #0
}
 8001426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800142a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800142a:	b570      	push	{r4, r5, r6, lr}
 800142c:	4604      	mov	r4, r0
 800142e:	460d      	mov	r5, r1
 8001430:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f013 0f80 	tst.w	r3, #128	; 0x80
 800143a:	d11c      	bne.n	8001476 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ff48 	bl	80012d2 <I2C_IsAcknowledgeFailed>
 8001442:	b9d0      	cbnz	r0, 800147a <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001444:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001448:	d0f3      	beq.n	8001432 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144a:	f7ff fd73 	bl	8000f34 <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	42a8      	cmp	r0, r5
 8001452:	d801      	bhi.n	8001458 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001454:	2d00      	cmp	r5, #0
 8001456:	d1ec      	bne.n	8001432 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800145c:	2220      	movs	r2, #32
 800145e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001462:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001466:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001468:	f042 0220 	orr.w	r2, r2, #32
 800146c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800146e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	e000      	b.n	8001478 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
}
 8001478:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e7fc      	b.n	8001478 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08001480 <I2C_RequestMemoryWrite>:
{
 8001480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001484:	b085      	sub	sp, #20
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
 800148a:	4691      	mov	r9, r2
 800148c:	461f      	mov	r7, r3
 800148e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8001492:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800149c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800149e:	9600      	str	r6, [sp, #0]
 80014a0:	4643      	mov	r3, r8
 80014a2:	2200      	movs	r2, #0
 80014a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014a8:	f7ff ff2c 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 80014ac:	b960      	cbnz	r0, 80014c8 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80014b4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b6:	4633      	mov	r3, r6
 80014b8:	4642      	mov	r2, r8
 80014ba:	4926      	ldr	r1, [pc, #152]	; (8001554 <I2C_RequestMemoryWrite+0xd4>)
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ff5f 	bl	8001380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c2:	b168      	cbz	r0, 80014e0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	e008      	b.n	80014da <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014d0:	d002      	beq.n	80014d8 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
}
 80014da:	b005      	add	sp, #20
 80014dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e0:	2300      	movs	r3, #0
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	9203      	str	r2, [sp, #12]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	9303      	str	r3, [sp, #12]
 80014ee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f0:	4632      	mov	r2, r6
 80014f2:	4641      	mov	r1, r8
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ff98 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 80014fa:	b930      	cbnz	r0, 800150a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014fc:	2f01      	cmp	r7, #1
 80014fe:	d10f      	bne.n	8001520 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	fa5f f689 	uxtb.w	r6, r9
 8001506:	611e      	str	r6, [r3, #16]
 8001508:	e7e7      	b.n	80014da <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800150a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150c:	2b04      	cmp	r3, #4
 800150e:	d001      	beq.n	8001514 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	e7e2      	b.n	80014da <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e7f7      	b.n	8001510 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001526:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001528:	4632      	mov	r2, r6
 800152a:	4641      	mov	r1, r8
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff7c 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 8001532:	b920      	cbnz	r0, 800153e <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	fa5f f689 	uxtb.w	r6, r9
 800153a:	611e      	str	r6, [r3, #16]
 800153c:	e7cd      	b.n	80014da <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800153e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001540:	2b04      	cmp	r3, #4
 8001542:	d001      	beq.n	8001548 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001544:	2001      	movs	r0, #1
 8001546:	e7c8      	b.n	80014da <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e7f7      	b.n	8001544 <I2C_RequestMemoryWrite+0xc4>
 8001554:	00010002 	.word	0x00010002

08001558 <I2C_RequestMemoryRead>:
{
 8001558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4616      	mov	r6, r2
 8001564:	4699      	mov	r9, r3
 8001566:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001568:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001574:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800157e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001580:	f8cd 8000 	str.w	r8, [sp]
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800158c:	f7ff feba 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001590:	b970      	cbnz	r0, 80015b0 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001592:	fa5f fa85 	uxtb.w	sl, r5
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800159c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800159e:	4643      	mov	r3, r8
 80015a0:	463a      	mov	r2, r7
 80015a2:	4941      	ldr	r1, [pc, #260]	; (80016a8 <I2C_RequestMemoryRead+0x150>)
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff feeb 	bl	8001380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015aa:	b168      	cbz	r0, 80015c8 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
 80015ae:	e008      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015b8:	d002      	beq.n	80015c0 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015be:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80015c0:	2003      	movs	r0, #3
}
 80015c2:	b004      	add	sp, #16
 80015c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c8:	2300      	movs	r3, #0
 80015ca:	9303      	str	r3, [sp, #12]
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	9203      	str	r2, [sp, #12]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	9303      	str	r3, [sp, #12]
 80015d6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d8:	4642      	mov	r2, r8
 80015da:	4639      	mov	r1, r7
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ff24 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 80015e2:	b980      	cbnz	r0, 8001606 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015e4:	f1b9 0f01 	cmp.w	r9, #1
 80015e8:	d118      	bne.n	800161c <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	b2f6      	uxtb	r6, r6
 80015ee:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f0:	4642      	mov	r2, r8
 80015f2:	4639      	mov	r1, r7
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff18 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 80015fa:	b368      	cbz	r0, 8001658 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d024      	beq.n	800164c <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	e7dd      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001608:	2b04      	cmp	r3, #4
 800160a:	d001      	beq.n	8001610 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 800160c:	2001      	movs	r0, #1
 800160e:	e7d8      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e7f7      	b.n	800160c <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	0a32      	lsrs	r2, r6, #8
 8001620:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001622:	4642      	mov	r2, r8
 8001624:	4639      	mov	r1, r7
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff feff 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 800162c:	b918      	cbnz	r0, 8001636 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	b2f6      	uxtb	r6, r6
 8001632:	611e      	str	r6, [r3, #16]
 8001634:	e7dc      	b.n	80015f0 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001638:	2b04      	cmp	r3, #4
 800163a:	d001      	beq.n	8001640 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 800163c:	2001      	movs	r0, #1
 800163e:	e7c0      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e7f7      	b.n	800163c <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e7d4      	b.n	8001602 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001658:	6822      	ldr	r2, [r4, #0]
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001662:	f8cd 8000 	str.w	r8, [sp]
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe48 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001674:	b968      	cbnz	r0, 8001692 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	f04a 0301 	orr.w	r3, sl, #1
 800167c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800167e:	4643      	mov	r3, r8
 8001680:	463a      	mov	r2, r7
 8001682:	4909      	ldr	r1, [pc, #36]	; (80016a8 <I2C_RequestMemoryRead+0x150>)
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fe7b 	bl	8001380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800168a:	2800      	cmp	r0, #0
 800168c:	d099      	beq.n	80015c2 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	e797      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f413 7f80 	tst.w	r3, #256	; 0x100
 800169a:	d002      	beq.n	80016a2 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
 80016a4:	e78d      	b.n	80015c2 <I2C_RequestMemoryRead+0x6a>
 80016a6:	bf00      	nop
 80016a8:	00010002 	.word	0x00010002

080016ac <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f013 0f04 	tst.w	r3, #4
 80016bc:	d11c      	bne.n	80016f8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fe07 	bl	80012d2 <I2C_IsAcknowledgeFailed>
 80016c4:	b9d0      	cbnz	r0, 80016fc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80016c6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80016ca:	d0f3      	beq.n	80016b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016cc:	f7ff fc32 	bl	8000f34 <HAL_GetTick>
 80016d0:	1b80      	subs	r0, r0, r6
 80016d2:	42a8      	cmp	r0, r5
 80016d4:	d801      	bhi.n	80016da <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80016d6:	2d00      	cmp	r5, #0
 80016d8:	d1ec      	bne.n	80016b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016de:	2220      	movs	r2, #32
 80016e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016ea:	f042 0220 	orr.w	r2, r2, #32
 80016ee:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80016f4:	2001      	movs	r0, #1
 80016f6:	e000      	b.n	80016fa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80016f8:	2000      	movs	r0, #0
}
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	e7fc      	b.n	80016fa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001700 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	4605      	mov	r5, r0
 8001704:	460c      	mov	r4, r1
 8001706:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	6959      	ldr	r1, [r3, #20]
 800170c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001710:	d129      	bne.n	8001766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001712:	6959      	ldr	r1, [r3, #20]
 8001714:	f011 0f10 	tst.w	r1, #16
 8001718:	d115      	bne.n	8001746 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171a:	f7ff fc0b 	bl	8000f34 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	42a0      	cmp	r0, r4
 8001722:	d801      	bhi.n	8001728 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001724:	2c00      	cmp	r4, #0
 8001726:	d1ef      	bne.n	8001708 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800172c:	2220      	movs	r2, #32
 800172e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001732:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001736:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800173e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
}
 8001744:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001746:	f06f 0210 	mvn.w	r2, #16
 800174a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800174c:	2300      	movs	r3, #0
 800174e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001750:	2220      	movs	r2, #32
 8001752:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001756:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800175a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800175c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800175e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001762:	2001      	movs	r0, #1
 8001764:	e7ee      	b.n	8001744 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001766:	2000      	movs	r0, #0
 8001768:	e7ec      	b.n	8001744 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800176c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800176c:	2800      	cmp	r0, #0
 800176e:	f000 80cc 	beq.w	800190a <HAL_I2C_Init+0x19e>
{
 8001772:	b570      	push	{r4, r5, r6, lr}
 8001774:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001776:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800177e:	2324      	movs	r3, #36	; 0x24
 8001780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001784:	6822      	ldr	r2, [r4, #0]
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001796:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017a0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a2:	f000 fec9 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <HAL_I2C_Init+0x1a8>)
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d864      	bhi.n	8001878 <HAL_I2C_Init+0x10c>
 80017ae:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_I2C_Init+0x1ac>)
 80017b0:	4298      	cmp	r0, r3
 80017b2:	bf8c      	ite	hi
 80017b4:	2300      	movhi	r3, #0
 80017b6:	2301      	movls	r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 80a8 	bne.w	800190e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80017be:	4957      	ldr	r1, [pc, #348]	; (800191c <HAL_I2C_Init+0x1b0>)
 80017c0:	fba1 3100 	umull	r3, r1, r1, r0
 80017c4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017c6:	6825      	ldr	r5, [r4, #0]
 80017c8:	686a      	ldr	r2, [r5, #4]
 80017ca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80017ce:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80017d2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	6a0a      	ldr	r2, [r1, #32]
 80017d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80017dc:	6866      	ldr	r6, [r4, #4]
 80017de:	4d4d      	ldr	r5, [pc, #308]	; (8001914 <HAL_I2C_Init+0x1a8>)
 80017e0:	42ae      	cmp	r6, r5
 80017e2:	d84f      	bhi.n	8001884 <HAL_I2C_Init+0x118>
 80017e4:	3301      	adds	r3, #1
 80017e6:	4313      	orrs	r3, r2
 80017e8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	69ca      	ldr	r2, [r1, #28]
 80017ee:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	6865      	ldr	r5, [r4, #4]
 80017f8:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_I2C_Init+0x1a8>)
 80017fa:	429d      	cmp	r5, r3
 80017fc:	d84c      	bhi.n	8001898 <HAL_I2C_Init+0x12c>
 80017fe:	1e43      	subs	r3, r0, #1
 8001800:	006d      	lsls	r5, r5, #1
 8001802:	fbb3 f3f5 	udiv	r3, r3, r5
 8001806:	3301      	adds	r3, #1
 8001808:	f640 70fc 	movw	r0, #4092	; 0xffc
 800180c:	4203      	tst	r3, r0
 800180e:	d078      	beq.n	8001902 <HAL_I2C_Init+0x196>
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	431a      	orrs	r2, r3
 8001816:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001818:	6821      	ldr	r1, [r4, #0]
 800181a:	680b      	ldr	r3, [r1, #0]
 800181c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001820:	69e2      	ldr	r2, [r4, #28]
 8001822:	6a20      	ldr	r0, [r4, #32]
 8001824:	4302      	orrs	r2, r0
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800182a:	6821      	ldr	r1, [r4, #0]
 800182c:	688b      	ldr	r3, [r1, #8]
 800182e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001836:	6922      	ldr	r2, [r4, #16]
 8001838:	68e0      	ldr	r0, [r4, #12]
 800183a:	4302      	orrs	r2, r0
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001840:	6821      	ldr	r1, [r4, #0]
 8001842:	68cb      	ldr	r3, [r1, #12]
 8001844:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001848:	6962      	ldr	r2, [r4, #20]
 800184a:	69a0      	ldr	r0, [r4, #24]
 800184c:	4302      	orrs	r2, r0
 800184e:	4313      	orrs	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	6813      	ldr	r3, [r2, #0]
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185c:	2000      	movs	r0, #0
 800185e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001860:	2320      	movs	r3, #32
 8001862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001866:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800186e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001872:	f7ff fa21 	bl	8000cb8 <HAL_I2C_MspInit>
 8001876:	e782      	b.n	800177e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_I2C_Init+0x1b4>)
 800187a:	4298      	cmp	r0, r3
 800187c:	bf8c      	ite	hi
 800187e:	2300      	movhi	r3, #0
 8001880:	2301      	movls	r3, #1
 8001882:	e799      	b.n	80017b8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001884:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001888:	fb05 f303 	mul.w	r3, r5, r3
 800188c:	4d25      	ldr	r5, [pc, #148]	; (8001924 <HAL_I2C_Init+0x1b8>)
 800188e:	fba5 5303 	umull	r5, r3, r5, r3
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	3301      	adds	r3, #1
 8001896:	e7a6      	b.n	80017e6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001898:	68a6      	ldr	r6, [r4, #8]
 800189a:	b9be      	cbnz	r6, 80018cc <HAL_I2C_Init+0x160>
 800189c:	1e43      	subs	r3, r0, #1
 800189e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80018a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80018a6:	3301      	adds	r3, #1
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	bb43      	cbnz	r3, 8001906 <HAL_I2C_Init+0x19a>
 80018b4:	b9c6      	cbnz	r6, 80018e8 <HAL_I2C_Init+0x17c>
 80018b6:	1e43      	subs	r3, r0, #1
 80018b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018bc:	fbb3 f3f5 	udiv	r3, r3, r5
 80018c0:	3301      	adds	r3, #1
 80018c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	e7a3      	b.n	8001814 <HAL_I2C_Init+0xa8>
 80018cc:	1e43      	subs	r3, r0, #1
 80018ce:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80018d2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80018d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80018da:	3301      	adds	r3, #1
 80018dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	e7e4      	b.n	80018b2 <HAL_I2C_Init+0x146>
 80018e8:	1e43      	subs	r3, r0, #1
 80018ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80018ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80018f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80018f6:	3301      	adds	r3, #1
 80018f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001900:	e788      	b.n	8001814 <HAL_I2C_Init+0xa8>
 8001902:	2304      	movs	r3, #4
 8001904:	e786      	b.n	8001814 <HAL_I2C_Init+0xa8>
 8001906:	2301      	movs	r3, #1
 8001908:	e784      	b.n	8001814 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
}
 800190c:	4770      	bx	lr
    return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
 8001910:	e7ac      	b.n	800186c <HAL_I2C_Init+0x100>
 8001912:	bf00      	nop
 8001914:	000186a0 	.word	0x000186a0
 8001918:	001e847f 	.word	0x001e847f
 800191c:	431bde83 	.word	0x431bde83
 8001920:	003d08ff 	.word	0x003d08ff
 8001924:	10624dd3 	.word	0x10624dd3

08001928 <HAL_I2C_Mem_Write>:
{
 8001928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800192c:	b083      	sub	sp, #12
 800192e:	4604      	mov	r4, r0
 8001930:	460f      	mov	r7, r1
 8001932:	4690      	mov	r8, r2
 8001934:	4699      	mov	r9, r3
 8001936:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff fafc 	bl	8000f34 <HAL_GetTick>
 800193c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800193e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001942:	b2c0      	uxtb	r0, r0
 8001944:	2820      	cmp	r0, #32
 8001946:	d003      	beq.n	8001950 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001948:	2002      	movs	r0, #2
}
 800194a:	b003      	add	sp, #12
 800194c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001950:	9500      	str	r5, [sp, #0]
 8001952:	2319      	movs	r3, #25
 8001954:	2201      	movs	r2, #1
 8001956:	494b      	ldr	r1, [pc, #300]	; (8001a84 <HAL_I2C_Mem_Write+0x15c>)
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fcd3 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 800195e:	2800      	cmp	r0, #0
 8001960:	f040 8089 	bne.w	8001a76 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001964:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001968:	2b01      	cmp	r3, #1
 800196a:	f000 8086 	beq.w	8001a7a <HAL_I2C_Mem_Write+0x152>
 800196e:	2301      	movs	r3, #1
 8001970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f012 0f01 	tst.w	r2, #1
 800197c:	d103      	bne.n	8001986 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001990:	2321      	movs	r3, #33	; 0x21
 8001992:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001996:	2340      	movs	r3, #64	; 0x40
 8001998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80019a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019a2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80019a8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ac:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_I2C_Mem_Write+0x160>)
 80019b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b2:	9501      	str	r5, [sp, #4]
 80019b4:	9600      	str	r6, [sp, #0]
 80019b6:	464b      	mov	r3, r9
 80019b8:	4642      	mov	r2, r8
 80019ba:	4639      	mov	r1, r7
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff fd5f 	bl	8001480 <I2C_RequestMemoryWrite>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d15b      	bne.n	8001a7e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80019c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d035      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019cc:	462a      	mov	r2, r5
 80019ce:	4631      	mov	r1, r6
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff fd2a 	bl	800142a <I2C_WaitOnTXEFlagUntilTimeout>
 80019d6:	bb20      	cbnz	r0, 8001a22 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80019e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019e2:	1c53      	adds	r3, r2, #1
 80019e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019e6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80019e8:	3901      	subs	r1, #1
 80019ea:	b289      	uxth	r1, r1
 80019ec:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	6958      	ldr	r0, [r3, #20]
 80019fc:	f010 0f04 	tst.w	r0, #4
 8001a00:	d0e1      	beq.n	80019c6 <HAL_I2C_Mem_Write+0x9e>
 8001a02:	2900      	cmp	r1, #0
 8001a04:	d0df      	beq.n	80019c6 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a06:	7852      	ldrb	r2, [r2, #1]
 8001a08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001a10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a20:	e7d1      	b.n	80019c6 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e78e      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e7f7      	b.n	8001a28 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	462a      	mov	r2, r5
 8001a3a:	4631      	mov	r1, r6
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fe35 	bl	80016ac <I2C_WaitOnBTFFlagUntilTimeout>
 8001a42:	b150      	cbz	r0, 8001a5a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e77d      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e7f7      	b.n	8001a4a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	2320      	movs	r3, #32
 8001a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a74:	e769      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001a76:	2002      	movs	r0, #2
 8001a78:	e767      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	e765      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e763      	b.n	800194a <HAL_I2C_Mem_Write+0x22>
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000

08001a8c <HAL_I2C_Mem_Read>:
{
 8001a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	b087      	sub	sp, #28
 8001a92:	4604      	mov	r4, r0
 8001a94:	460f      	mov	r7, r1
 8001a96:	4690      	mov	r8, r2
 8001a98:	4699      	mov	r9, r3
 8001a9a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fa4a 	bl	8000f34 <HAL_GetTick>
 8001aa0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001aa6:	b2c0      	uxtb	r0, r0
 8001aa8:	2820      	cmp	r0, #32
 8001aaa:	d004      	beq.n	8001ab6 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001aac:	2702      	movs	r7, #2
}
 8001aae:	4638      	mov	r0, r7
 8001ab0:	b007      	add	sp, #28
 8001ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab6:	9500      	str	r5, [sp, #0]
 8001ab8:	2319      	movs	r3, #25
 8001aba:	2201      	movs	r2, #1
 8001abc:	4988      	ldr	r1, [pc, #544]	; (8001ce0 <HAL_I2C_Mem_Read+0x254>)
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff fc20 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	f040 8143 	bne.w	8001d50 <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 8001aca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f000 8140 	beq.w	8001d54 <HAL_I2C_Mem_Read+0x2c8>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f012 0f01 	tst.w	r2, #1
 8001ae2:	d103      	bne.n	8001aec <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001af4:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001af6:	2322      	movs	r3, #34	; 0x22
 8001af8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b08:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b0a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001b0e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b12:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b14:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_I2C_Mem_Read+0x258>)
 8001b16:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b18:	9501      	str	r5, [sp, #4]
 8001b1a:	9600      	str	r6, [sp, #0]
 8001b1c:	464b      	mov	r3, r9
 8001b1e:	4642      	mov	r2, r8
 8001b20:	4639      	mov	r1, r7
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fd18 	bl	8001558 <I2C_RequestMemoryRead>
 8001b28:	4607      	mov	r7, r0
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f040 8114 	bne.w	8001d58 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 8001b30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b32:	b95b      	cbnz	r3, 8001b4c <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	9202      	str	r2, [sp, #8]
 8001b40:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e075      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00a      	beq.n	8001b66 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d01a      	beq.n	8001b8a <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b54:	2300      	movs	r3, #0
 8001b56:	9305      	str	r3, [sp, #20]
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	9205      	str	r2, [sp, #20]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	9305      	str	r3, [sp, #20]
 8001b62:	9b05      	ldr	r3, [sp, #20]
 8001b64:	e068      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b70:	2300      	movs	r3, #0
 8001b72:	9303      	str	r3, [sp, #12]
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	9203      	str	r2, [sp, #12]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	9203      	str	r2, [sp, #12]
 8001b7e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e056      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9304      	str	r3, [sp, #16]
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	9204      	str	r2, [sp, #16]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	9304      	str	r3, [sp, #16]
 8001bac:	9b04      	ldr	r3, [sp, #16]
 8001bae:	e043      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	462a      	mov	r2, r5
 8001bb2:	4631      	mov	r1, r6
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff fda3 	bl	8001700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	f040 80ce 	bne.w	8001d5c <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bca:	3301      	adds	r3, #1
 8001bcc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001bce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001bde:	e02b      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be0:	9500      	str	r5, [sp, #0]
 8001be2:	4633      	mov	r3, r6
 8001be4:	2200      	movs	r2, #0
 8001be6:	4940      	ldr	r1, [pc, #256]	; (8001ce8 <HAL_I2C_Mem_Read+0x25c>)
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff fb8b 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	f040 80b6 	bne.w	8001d60 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	6822      	ldr	r2, [r4, #0]
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c04:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c08:	1c53      	adds	r3, r2, #1
 8001c0a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d07f      	beq.n	8001d3e <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d854      	bhi.n	8001cec <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d0b4      	beq.n	8001bb0 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d0ca      	beq.n	8001be0 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	9500      	str	r5, [sp, #0]
 8001c4c:	4633      	mov	r3, r6
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <HAL_I2C_Mem_Read+0x25c>)
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff fb56 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	f040 8083 	bne.w	8001d64 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c72:	3301      	adds	r3, #1
 8001c74:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c86:	9500      	str	r5, [sp, #0]
 8001c88:	4633      	mov	r3, r6
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <HAL_I2C_Mem_Read+0x25c>)
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff fb38 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d167      	bne.n	8001d68 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	6822      	ldr	r2, [r4, #0]
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ca8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001caa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cac:	1c53      	adds	r3, r2, #1
 8001cae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001cb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001cb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ccc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001cd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001cdc:	e7ac      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
 8001cde:	bf00      	nop
 8001ce0:	00100002 	.word	0x00100002
 8001ce4:	ffff0000 	.word	0xffff0000
 8001ce8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cec:	462a      	mov	r2, r5
 8001cee:	4631      	mov	r1, r6
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fd05 	bl	8001700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d138      	bne.n	8001d6c <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d04:	1c53      	adds	r3, r2, #1
 8001d06:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001d08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	6959      	ldr	r1, [r3, #20]
 8001d1c:	f011 0f04 	tst.w	r1, #4
 8001d20:	d08a      	beq.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001d3c:	e77c      	b.n	8001c38 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001d4e:	e6ae      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8001d50:	2702      	movs	r7, #2
 8001d52:	e6ac      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001d54:	2702      	movs	r7, #2
 8001d56:	e6aa      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8001d58:	2701      	movs	r7, #1
 8001d5a:	e6a8      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001d5c:	2701      	movs	r7, #1
 8001d5e:	e6a6      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001d60:	2701      	movs	r7, #1
 8001d62:	e6a4      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001d64:	2701      	movs	r7, #1
 8001d66:	e6a2      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001d68:	2701      	movs	r7, #1
 8001d6a:	e6a0      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8001d6c:	2701      	movs	r7, #1
 8001d6e:	e69e      	b.n	8001aae <HAL_I2C_Mem_Read+0x22>

08001d70 <HAL_I2C_IsDeviceReady>:
{
 8001d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d74:	b085      	sub	sp, #20
 8001d76:	4604      	mov	r4, r0
 8001d78:	4688      	mov	r8, r1
 8001d7a:	4691      	mov	r9, r2
 8001d7c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001d7e:	f7ff f8d9 	bl	8000f34 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d003      	beq.n	8001d94 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001d8c:	2002      	movs	r0, #2
}
 8001d8e:	b005      	add	sp, #20
 8001d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d94:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d96:	9000      	str	r0, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4957      	ldr	r1, [pc, #348]	; (8001efc <HAL_I2C_IsDeviceReady+0x18c>)
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fab0 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	f040 80a0 	bne.w	8001eea <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8001daa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f000 809d 	beq.w	8001eee <HAL_I2C_IsDeviceReady+0x17e>
 8001db4:	2301      	movs	r3, #1
 8001db6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f012 0f01 	tst.w	r2, #1
 8001dc2:	d103      	bne.n	8001dcc <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dd4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd6:	2324      	movs	r3, #36	; 0x24
 8001dd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ddc:	2700      	movs	r7, #0
 8001dde:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_I2C_IsDeviceReady+0x190>)
 8001de2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001de4:	e040      	b.n	8001e68 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001dee:	d002      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001df6:	2003      	movs	r0, #3
 8001df8:	e7c9      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dfa:	23a0      	movs	r3, #160	; 0xa0
 8001dfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	6953      	ldr	r3, [r2, #20]
 8001e04:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e08:	6952      	ldr	r2, [r2, #20]
 8001e0a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e0e:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8001e12:	fa5f fc8c 	uxtb.w	ip, ip
 8001e16:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8001e1a:	d009      	beq.n	8001e30 <HAL_I2C_IsDeviceReady+0xc0>
 8001e1c:	b943      	cbnz	r3, 8001e30 <HAL_I2C_IsDeviceReady+0xc0>
 8001e1e:	b93a      	cbnz	r2, 8001e30 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e20:	f7ff f888 	bl	8000f34 <HAL_GetTick>
 8001e24:	1b80      	subs	r0, r0, r6
 8001e26:	42a8      	cmp	r0, r5
 8001e28:	d8e7      	bhi.n	8001dfa <HAL_I2C_IsDeviceReady+0x8a>
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	d1e8      	bne.n	8001e00 <HAL_I2C_IsDeviceReady+0x90>
 8001e2e:	e7e4      	b.n	8001dfa <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	2320      	movs	r3, #32
 8001e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	f012 0f02 	tst.w	r2, #2
 8001e3e:	d131      	bne.n	8001ea4 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e4e:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e50:	9600      	str	r6, [sp, #0]
 8001e52:	2319      	movs	r3, #25
 8001e54:	2201      	movs	r2, #1
 8001e56:	4929      	ldr	r1, [pc, #164]	; (8001efc <HAL_I2C_IsDeviceReady+0x18c>)
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff fa53 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d149      	bne.n	8001ef6 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8001e62:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001e64:	454f      	cmp	r7, r9
 8001e66:	d238      	bcs.n	8001eda <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6813      	ldr	r3, [r2, #0]
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	9600      	str	r6, [sp, #0]
 8001e74:	462b      	mov	r3, r5
 8001e76:	2200      	movs	r2, #0
 8001e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fa41 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d1af      	bne.n	8001de6 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8001e8c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f851 	bl	8000f34 <HAL_GetTick>
 8001e92:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	6953      	ldr	r3, [r2, #20]
 8001e98:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e9c:	6952      	ldr	r2, [r2, #20]
 8001e9e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ea2:	e7b4      	b.n	8001e0e <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eac:	2300      	movs	r3, #0
 8001eae:	9303      	str	r3, [sp, #12]
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	9203      	str	r2, [sp, #12]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	9303      	str	r3, [sp, #12]
 8001eba:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebc:	9600      	str	r6, [sp, #0]
 8001ebe:	2319      	movs	r3, #25
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_I2C_IsDeviceReady+0x18c>)
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff fa1d 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	b990      	cbnz	r0, 8001ef2 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8001ed8:	e759      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	2320      	movs	r3, #32
 8001edc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e751      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8001eea:	2002      	movs	r0, #2
 8001eec:	e74f      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8001eee:	2002      	movs	r0, #2
 8001ef0:	e74d      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e74b      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e749      	b.n	8001d8e <HAL_I2C_IsDeviceReady+0x1e>
 8001efa:	bf00      	nop
 8001efc:	00100002 	.word	0x00100002
 8001f00:	ffff0000 	.word	0xffff0000

08001f04 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	2800      	cmp	r0, #0
 8001f06:	f000 81e0 	beq.w	80022ca <HAL_RCC_OscConfig+0x3c6>
{
 8001f0a:	b570      	push	{r4, r5, r6, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	f013 0f01 	tst.w	r3, #1
 8001f16:	d03b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f18:	4b9f      	ldr	r3, [pc, #636]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d02c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f24:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d021      	beq.n	8001f74 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f30:	6863      	ldr	r3, [r4, #4]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d04f      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d052      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe0>
 8001f3e:	4b96      	ldr	r3, [pc, #600]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	6863      	ldr	r3, [r4, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d050      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffed 	bl	8000f34 <HAL_GetTick>
 8001f5a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5c:	4b8e      	ldr	r3, [pc, #568]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f64:	d114      	bne.n	8001f90 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f66:	f7fe ffe5 	bl	8000f34 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2864      	cmp	r0, #100	; 0x64
 8001f6e:	d9f5      	bls.n	8001f5c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e1b1      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f7c:	d0d8      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	4b86      	ldr	r3, [pc, #536]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f86:	d003      	beq.n	8001f90 <HAL_RCC_OscConfig+0x8c>
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 819f 	beq.w	80022ce <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	f013 0f02 	tst.w	r3, #2
 8001f96:	d054      	beq.n	8002042 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f98:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f013 0f0c 	tst.w	r3, #12
 8001fa0:	d03e      	beq.n	8002020 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d033      	beq.n	8002016 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fae:	68e3      	ldr	r3, [r4, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d068      	beq.n	8002086 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b79      	ldr	r3, [pc, #484]	; (800219c <HAL_RCC_OscConfig+0x298>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe ffbb 	bl	8000f34 <HAL_GetTick>
 8001fbe:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	4b75      	ldr	r3, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f013 0f02 	tst.w	r3, #2
 8001fc8:	d154      	bne.n	8002074 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7fe ffb3 	bl	8000f34 <HAL_GetTick>
 8001fce:	1b40      	subs	r0, r0, r5
 8001fd0:	2802      	cmp	r0, #2
 8001fd2:	d9f5      	bls.n	8001fc0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	e17f      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	4a6f      	ldr	r2, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e7b5      	b.n	8001f50 <HAL_RCC_OscConfig+0x4c>
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e7ab      	b.n	8001f50 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff9c 	bl	8000f34 <HAL_GetTick>
 8001ffc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002006:	d0c3      	beq.n	8001f90 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe ff94 	bl	8000f34 <HAL_GetTick>
 800200c:	1b40      	subs	r0, r0, r5
 800200e:	2864      	cmp	r0, #100	; 0x64
 8002010:	d9f5      	bls.n	8001ffe <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	e160      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b60      	ldr	r3, [pc, #384]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800201e:	d1c6      	bne.n	8001fae <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002020:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f013 0f02 	tst.w	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_OscConfig+0x12e>
 800202a:	68e3      	ldr	r3, [r4, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8150 	bne.w	80022d2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4a59      	ldr	r2, [pc, #356]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800203a:	6921      	ldr	r1, [r4, #16]
 800203c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002040:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	f013 0f08 	tst.w	r3, #8
 8002048:	d042      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204a:	6963      	ldr	r3, [r4, #20]
 800204c:	b36b      	cbz	r3, 80020aa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x298>)
 8002050:	2201      	movs	r2, #1
 8002052:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe ff6d 	bl	8000f34 <HAL_GetTick>
 800205a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205c:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f013 0f02 	tst.w	r3, #2
 8002064:	d134      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002066:	f7fe ff65 	bl	8000f34 <HAL_GetTick>
 800206a:	1b40      	subs	r0, r0, r5
 800206c:	2802      	cmp	r0, #2
 800206e:	d9f5      	bls.n	800205c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002070:	2003      	movs	r0, #3
 8002072:	e131      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800207c:	6921      	ldr	r1, [r4, #16]
 800207e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e7dd      	b.n	8002042 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b45      	ldr	r3, [pc, #276]	; (800219c <HAL_RCC_OscConfig+0x298>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800208c:	f7fe ff52 	bl	8000f34 <HAL_GetTick>
 8002090:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f013 0f02 	tst.w	r3, #2
 800209a:	d0d2      	beq.n	8002042 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe ff4a 	bl	8000f34 <HAL_GetTick>
 80020a0:	1b40      	subs	r0, r0, r5
 80020a2:	2802      	cmp	r0, #2
 80020a4:	d9f5      	bls.n	8002092 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80020a6:	2003      	movs	r0, #3
 80020a8:	e116      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b3c      	ldr	r3, [pc, #240]	; (800219c <HAL_RCC_OscConfig+0x298>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff3f 	bl	8000f34 <HAL_GetTick>
 80020b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020bc:	f013 0f02 	tst.w	r3, #2
 80020c0:	d006      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe ff37 	bl	8000f34 <HAL_GetTick>
 80020c6:	1b40      	subs	r0, r0, r5
 80020c8:	2802      	cmp	r0, #2
 80020ca:	d9f5      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80020cc:	2003      	movs	r0, #3
 80020ce:	e103      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	f013 0f04 	tst.w	r3, #4
 80020d6:	d077      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020e0:	d133      	bne.n	800214a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020fa:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x29c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002104:	d023      	beq.n	800214e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	68a3      	ldr	r3, [r4, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d034      	beq.n	8002176 <HAL_RCC_OscConfig+0x272>
 800210c:	2b05      	cmp	r3, #5
 800210e:	d038      	beq.n	8002182 <HAL_RCC_OscConfig+0x27e>
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	671a      	str	r2, [r3, #112]	; 0x70
 800211a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002122:	68a3      	ldr	r3, [r4, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d03d      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe ff04 	bl	8000f34 <HAL_GetTick>
 800212c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f013 0f02 	tst.w	r3, #2
 8002136:	d146      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe fefc 	bl	8000f34 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002142:	4298      	cmp	r0, r3
 8002144:	d9f3      	bls.n	800212e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002146:	2003      	movs	r0, #3
 8002148:	e0c6      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2500      	movs	r5, #0
 800214c:	e7d6      	b.n	80020fc <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x29c>)
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002158:	f7fe feec 	bl	8000f34 <HAL_GetTick>
 800215c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x29c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002166:	d1ce      	bne.n	8002106 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe fee4 	bl	8000f34 <HAL_GetTick>
 800216c:	1b80      	subs	r0, r0, r6
 800216e:	2802      	cmp	r0, #2
 8002170:	d9f5      	bls.n	800215e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002172:	2003      	movs	r0, #3
 8002174:	e0b0      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002178:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e7cf      	b.n	8002122 <HAL_RCC_OscConfig+0x21e>
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_OscConfig+0x294>)
 8002184:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002186:	f042 0204 	orr.w	r2, r2, #4
 800218a:	671a      	str	r2, [r3, #112]	; 0x70
 800218c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	671a      	str	r2, [r3, #112]	; 0x70
 8002194:	e7c5      	b.n	8002122 <HAL_RCC_OscConfig+0x21e>
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	42470000 	.word	0x42470000
 80021a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7fe fec6 	bl	8000f34 <HAL_GetTick>
 80021a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	f013 0f02 	tst.w	r3, #2
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe febe 	bl	8000f34 <HAL_GetTick>
 80021b8:	1b80      	subs	r0, r0, r6
 80021ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80021be:	4298      	cmp	r0, r3
 80021c0:	d9f3      	bls.n	80021aa <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80021c2:	2003      	movs	r0, #3
 80021c4:	e088      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c6:	b9ed      	cbnz	r5, 8002204 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c8:	69a3      	ldr	r3, [r4, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8083 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	f002 020c 	and.w	r2, r2, #12
 80021d8:	2a08      	cmp	r2, #8
 80021da:	d051      	beq.n	8002280 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d017      	beq.n	8002210 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <HAL_RCC_OscConfig+0x3f4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fea5 	bl	8000f34 <HAL_GetTick>
 80021ea:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021f4:	d042      	beq.n	800227c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fe9d 	bl	8000f34 <HAL_GetTick>
 80021fa:	1b00      	subs	r0, r0, r4
 80021fc:	2802      	cmp	r0, #2
 80021fe:	d9f5      	bls.n	80021ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002200:	2003      	movs	r0, #3
 8002202:	e069      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 8002206:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	e7db      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x3f4>)
 8002212:	2200      	movs	r2, #0
 8002214:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002216:	f7fe fe8d 	bl	8000f34 <HAL_GetTick>
 800221a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002224:	d006      	beq.n	8002234 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fe85 	bl	8000f34 <HAL_GetTick>
 800222a:	1b40      	subs	r0, r0, r5
 800222c:	2802      	cmp	r0, #2
 800222e:	d9f5      	bls.n	800221c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002230:	2003      	movs	r0, #3
 8002232:	e051      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002234:	69e3      	ldr	r3, [r4, #28]
 8002236:	6a22      	ldr	r2, [r4, #32]
 8002238:	4313      	orrs	r3, r2
 800223a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800223c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002240:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002242:	0852      	lsrs	r2, r2, #1
 8002244:	3a01      	subs	r2, #1
 8002246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800224a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800224c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 8002252:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x3f4>)
 8002256:	2201      	movs	r2, #1
 8002258:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800225a:	f7fe fe6b 	bl	8000f34 <HAL_GetTick>
 800225e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fe63 	bl	8000f34 <HAL_GetTick>
 800226e:	1b00      	subs	r0, r0, r4
 8002270:	2802      	cmp	r0, #2
 8002272:	d9f5      	bls.n	8002260 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002274:	2003      	movs	r0, #3
 8002276:	e02f      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002278:	2000      	movs	r0, #0
 800227a:	e02d      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 800227c:	2000      	movs	r0, #0
 800227e:	e02b      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	2b01      	cmp	r3, #1
 8002282:	d02b      	beq.n	80022dc <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x3f0>)
 8002286:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800228c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	4291      	cmp	r1, r2
 8002290:	d126      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	428a      	cmp	r2, r1
 800229a:	d123      	bne.n	80022e4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80022a2:	401a      	ands	r2, r3
 80022a4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80022a8:	d11e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022aa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80022ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022b0:	0852      	lsrs	r2, r2, #1
 80022b2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80022be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80022c4:	d114      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80022c6:	2000      	movs	r0, #0
 80022c8:	e006      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
}
 80022cc:	4770      	bx	lr
        return HAL_ERROR;
 80022ce:	2001      	movs	r0, #1
 80022d0:	e002      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80022d6:	2000      	movs	r0, #0
}
 80022d8:	b002      	add	sp, #8
 80022da:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
 80022de:	e7fb      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
 80022e2:	e7f9      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 80022e4:	2001      	movs	r0, #1
 80022e6:	e7f7      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 80022e8:	2001      	movs	r0, #1
 80022ea:	e7f5      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 80022ec:	2001      	movs	r0, #1
 80022ee:	e7f3      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 80022f0:	2001      	movs	r0, #1
 80022f2:	e7f1      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d4>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	42470000 	.word	0x42470000

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d001      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800230a:	482f      	ldr	r0, [pc, #188]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800230c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800231c:	d02c      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002320:	6858      	ldr	r0, [r3, #4]
 8002322:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002326:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800232a:	ebbc 0c00 	subs.w	ip, ip, r0
 800232e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002332:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002336:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800233a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800233e:	ebb1 010c 	subs.w	r1, r1, ip
 8002342:	eb63 030e 	sbc.w	r3, r3, lr
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234c:	00c9      	lsls	r1, r1, #3
 800234e:	eb11 0c00 	adds.w	ip, r1, r0
 8002352:	f143 0300 	adc.w	r3, r3, #0
 8002356:	0299      	lsls	r1, r3, #10
 8002358:	2300      	movs	r3, #0
 800235a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800235e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002362:	f7fd ff85 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800236e:	3301      	adds	r3, #1
 8002370:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002372:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002376:	e7c9      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800237a:	6858      	ldr	r0, [r3, #4]
 800237c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002380:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002384:	ebbc 0c00 	subs.w	ip, ip, r0
 8002388:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800238c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002390:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002394:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002398:	ebb1 010c 	subs.w	r1, r1, ip
 800239c:	eb63 030e 	sbc.w	r3, r3, lr
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	00c9      	lsls	r1, r1, #3
 80023a8:	eb11 0c00 	adds.w	ip, r1, r0
 80023ac:	f143 0300 	adc.w	r3, r3, #0
 80023b0:	0299      	lsls	r1, r3, #10
 80023b2:	2300      	movs	r3, #0
 80023b4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80023b8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80023bc:	f7fd ff58 	bl	8000270 <__aeabi_uldivmod>
 80023c0:	e7d1      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x6a>
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	00f42400 	.word	0x00f42400

080023cc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80023cc:	2800      	cmp	r0, #0
 80023ce:	f000 809b 	beq.w	8002508 <HAL_RCC_ClockConfig+0x13c>
{
 80023d2:	b570      	push	{r4, r5, r6, lr}
 80023d4:	460d      	mov	r5, r1
 80023d6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_ClockConfig+0x14c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	428b      	cmp	r3, r1
 80023e2:	d208      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e4:	b2cb      	uxtb	r3, r1
 80023e6:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_RCC_ClockConfig+0x14c>)
 80023e8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	428b      	cmp	r3, r1
 80023f2:	f040 808b 	bne.w	800250c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	f013 0f02 	tst.w	r3, #2
 80023fc:	d017      	beq.n	800242e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	f013 0f04 	tst.w	r3, #4
 8002402:	d004      	beq.n	800240e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4a45      	ldr	r2, [pc, #276]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002406:	6893      	ldr	r3, [r2, #8]
 8002408:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	f013 0f08 	tst.w	r3, #8
 8002414:	d004      	beq.n	8002420 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002416:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002418:	6893      	ldr	r3, [r2, #8]
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4a3e      	ldr	r2, [pc, #248]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002422:	6893      	ldr	r3, [r2, #8]
 8002424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002428:	68a1      	ldr	r1, [r4, #8]
 800242a:	430b      	orrs	r3, r1
 800242c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f013 0f01 	tst.w	r3, #1
 8002434:	d032      	beq.n	800249c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	6863      	ldr	r3, [r4, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d021      	beq.n	8002480 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243c:	1e9a      	subs	r2, r3, #2
 800243e:	2a01      	cmp	r2, #1
 8002440:	d925      	bls.n	800248e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f012 0f02 	tst.w	r2, #2
 800244a:	d061      	beq.n	8002510 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244c:	4933      	ldr	r1, [pc, #204]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 800244e:	688a      	ldr	r2, [r1, #8]
 8002450:	f022 0203 	bic.w	r2, r2, #3
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002458:	f7fe fd6c 	bl	8000f34 <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	6862      	ldr	r2, [r4, #4]
 8002468:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800246c:	d016      	beq.n	800249c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe fd61 	bl	8000f34 <HAL_GetTick>
 8002472:	1b80      	subs	r0, r0, r6
 8002474:	f241 3388 	movw	r3, #5000	; 0x1388
 8002478:	4298      	cmp	r0, r3
 800247a:	d9f0      	bls.n	800245e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800247c:	2003      	movs	r0, #3
 800247e:	e042      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002488:	d1e0      	bne.n	800244c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
 800248c:	e03b      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002496:	d1d9      	bne.n	800244c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
 800249a:	e034      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_ClockConfig+0x14c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	42ab      	cmp	r3, r5
 80024a6:	d907      	bls.n	80024b8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a8:	b2ea      	uxtb	r2, r5
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x14c>)
 80024ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	42ab      	cmp	r3, r5
 80024b6:	d12d      	bne.n	8002514 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f013 0f04 	tst.w	r3, #4
 80024be:	d006      	beq.n	80024ce <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 80024c2:	6893      	ldr	r3, [r2, #8]
 80024c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024c8:	68e1      	ldr	r1, [r4, #12]
 80024ca:	430b      	orrs	r3, r1
 80024cc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	f013 0f08 	tst.w	r3, #8
 80024d4:	d007      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 80024d8:	6893      	ldr	r3, [r2, #8]
 80024da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024de:	6921      	ldr	r1, [r4, #16]
 80024e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024e4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f7ff ff09 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_ClockConfig+0x150>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x154>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	40d8      	lsrs	r0, r3
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x158>)
 80024fa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x15c>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f7fe fccc 	bl	8000e9c <HAL_InitTick>
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002508:	2001      	movs	r0, #1
}
 800250a:	4770      	bx	lr
      return HAL_ERROR;
 800250c:	2001      	movs	r0, #1
 800250e:	e7fa      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
 8002512:	e7f8      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
 8002516:	e7f6      	b.n	8002506 <HAL_RCC_ClockConfig+0x13a>
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08003a78 	.word	0x08003a78
 8002524:	20000000 	.word	0x20000000
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800252c:	4b01      	ldr	r3, [pc, #4]	; (8002534 <HAL_RCC_GetHCLKFreq+0x8>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800253a:	f7ff fff7 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002546:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
}
 800254a:	40d8      	lsrs	r0, r3
 800254c:	bd08      	pop	{r3, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	08003a88 	.word	0x08003a88

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800255a:	f7ff ffe7 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
}
 800256a:	40d8      	lsrs	r0, r3
 800256c:	bd08      	pop	{r3, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	08003a88 	.word	0x08003a88

08002578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002578:	b510      	push	{r4, lr}
 800257a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257c:	6802      	ldr	r2, [r0, #0]
 800257e:	6913      	ldr	r3, [r2, #16]
 8002580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002584:	68c1      	ldr	r1, [r0, #12]
 8002586:	430b      	orrs	r3, r1
 8002588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800258a:	6883      	ldr	r3, [r0, #8]
 800258c:	6902      	ldr	r2, [r0, #16]
 800258e:	431a      	orrs	r2, r3
 8002590:	6943      	ldr	r3, [r0, #20]
 8002592:	431a      	orrs	r2, r3
 8002594:	69c3      	ldr	r3, [r0, #28]
 8002596:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002598:	6801      	ldr	r1, [r0, #0]
 800259a:	68cb      	ldr	r3, [r1, #12]
 800259c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025a0:	f023 030c 	bic.w	r3, r3, #12
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a8:	6802      	ldr	r2, [r0, #0]
 80025aa:	6953      	ldr	r3, [r2, #20]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b0:	6981      	ldr	r1, [r0, #24]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b6:	6803      	ldr	r3, [r0, #0]
 80025b8:	4a31      	ldr	r2, [pc, #196]	; (8002680 <UART_SetConfig+0x108>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d006      	beq.n	80025cc <UART_SetConfig+0x54>
 80025be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d002      	beq.n	80025cc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025c6:	f7ff ffb7 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 80025ca:	e001      	b.n	80025d0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025cc:	f7ff ffc4 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d0:	69e3      	ldr	r3, [r4, #28]
 80025d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d6:	d029      	beq.n	800262c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d8:	2100      	movs	r1, #0
 80025da:	1803      	adds	r3, r0, r0
 80025dc:	4149      	adcs	r1, r1
 80025de:	181b      	adds	r3, r3, r0
 80025e0:	f141 0100 	adc.w	r1, r1, #0
 80025e4:	00c9      	lsls	r1, r1, #3
 80025e6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1818      	adds	r0, r3, r0
 80025ee:	6863      	ldr	r3, [r4, #4]
 80025f0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80025f4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80025f8:	f141 0100 	adc.w	r1, r1, #0
 80025fc:	f7fd fe38 	bl	8000270 <__aeabi_uldivmod>
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <UART_SetConfig+0x10c>)
 8002602:	fba2 3100 	umull	r3, r1, r2, r0
 8002606:	0949      	lsrs	r1, r1, #5
 8002608:	2364      	movs	r3, #100	; 0x64
 800260a:	fb03 0311 	mls	r3, r3, r1, r0
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	3332      	adds	r3, #50	; 0x32
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800261c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	6821      	ldr	r1, [r4, #0]
 8002626:	4413      	add	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }
}
 800262a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800262c:	2300      	movs	r3, #0
 800262e:	1802      	adds	r2, r0, r0
 8002630:	eb43 0103 	adc.w	r1, r3, r3
 8002634:	1812      	adds	r2, r2, r0
 8002636:	f141 0100 	adc.w	r1, r1, #0
 800263a:	00c9      	lsls	r1, r1, #3
 800263c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002640:	00d2      	lsls	r2, r2, #3
 8002642:	1810      	adds	r0, r2, r0
 8002644:	f141 0100 	adc.w	r1, r1, #0
 8002648:	6862      	ldr	r2, [r4, #4]
 800264a:	1892      	adds	r2, r2, r2
 800264c:	415b      	adcs	r3, r3
 800264e:	f7fd fe0f 	bl	8000270 <__aeabi_uldivmod>
 8002652:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <UART_SetConfig+0x10c>)
 8002654:	fba2 3100 	umull	r3, r1, r2, r0
 8002658:	0949      	lsrs	r1, r1, #5
 800265a:	2364      	movs	r3, #100	; 0x64
 800265c:	fb03 0311 	mls	r3, r3, r1, r0
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	005a      	lsls	r2, r3, #1
 800266c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002670:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	6821      	ldr	r1, [r4, #0]
 800267a:	4413      	add	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
 800267e:	e7d4      	b.n	800262a <UART_SetConfig+0xb2>
 8002680:	40011000 	.word	0x40011000
 8002684:	51eb851f 	.word	0x51eb851f

08002688 <UART_WaitOnFlagUntilTimeout>:
{
 8002688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800268c:	4605      	mov	r5, r0
 800268e:	460f      	mov	r7, r1
 8002690:	4616      	mov	r6, r2
 8002692:	4699      	mov	r9, r3
 8002694:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	ea37 0404 	bics.w	r4, r7, r4
 80026a0:	bf0c      	ite	eq
 80026a2:	2401      	moveq	r4, #1
 80026a4:	2400      	movne	r4, #0
 80026a6:	42b4      	cmp	r4, r6
 80026a8:	d12d      	bne.n	8002706 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80026ae:	d0f3      	beq.n	8002698 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026b0:	f1b8 0f00 	cmp.w	r8, #0
 80026b4:	d005      	beq.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x3a>
 80026b6:	f7fe fc3d 	bl	8000f34 <HAL_GetTick>
 80026ba:	eba0 0009 	sub.w	r0, r0, r9
 80026be:	4540      	cmp	r0, r8
 80026c0:	d9ea      	bls.n	8002698 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026c2:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c4:	f102 030c 	add.w	r3, r2, #12
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	320c      	adds	r2, #12
 80026d2:	e842 3100 	strex	r1, r3, [r2]
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d1f3      	bne.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026dc:	f102 0314 	add.w	r3, r2, #20
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	3214      	adds	r2, #20
 80026ea:	e842 3100 	strex	r1, r3, [r2]
 80026ee:	2900      	cmp	r1, #0
 80026f0:	d1f3      	bne.n	80026da <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80026f2:	2320      	movs	r3, #32
 80026f4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026f8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80026fc:	2300      	movs	r3, #0
 80026fe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
 8002704:	e000      	b.n	8002708 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800270c <HAL_UART_Init>:
  if (huart == NULL)
 800270c:	b358      	cbz	r0, 8002766 <HAL_UART_Init+0x5a>
{
 800270e:	b510      	push	{r4, lr}
 8002710:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002712:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002716:	b30b      	cbz	r3, 800275c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	2324      	movs	r3, #36	; 0x24
 800271a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	68d3      	ldr	r3, [r2, #12]
 8002722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002726:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ff25 	bl	8002578 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	6913      	ldr	r3, [r2, #16]
 8002732:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002736:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	6953      	ldr	r3, [r2, #20]
 800273c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002740:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	68d3      	ldr	r3, [r2, #12]
 8002746:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800274a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274c:	2000      	movs	r0, #0
 800274e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002750:	2320      	movs	r3, #32
 8002752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002756:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800275a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800275c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002760:	f7fe fae2 	bl	8000d28 <HAL_UART_MspInit>
 8002764:	e7d8      	b.n	8002718 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
}
 8002768:	4770      	bx	lr

0800276a <HAL_UART_Transmit>:
{
 800276a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002772:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d154      	bne.n	8002826 <HAL_UART_Transmit+0xbc>
 800277c:	4604      	mov	r4, r0
 800277e:	460d      	mov	r5, r1
 8002780:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002782:	2900      	cmp	r1, #0
 8002784:	d053      	beq.n	800282e <HAL_UART_Transmit+0xc4>
 8002786:	2a00      	cmp	r2, #0
 8002788:	d053      	beq.n	8002832 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800278a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d051      	beq.n	8002836 <HAL_UART_Transmit+0xcc>
 8002792:	2301      	movs	r3, #1
 8002794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	2300      	movs	r3, #0
 800279a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279c:	2321      	movs	r3, #33	; 0x21
 800279e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80027a2:	f7fe fbc7 	bl	8000f34 <HAL_GetTick>
 80027a6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80027a8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ac:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	d005      	beq.n	80027c4 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80027b8:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80027bc:	2300      	movs	r3, #0
 80027be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80027c2:	e012      	b.n	80027ea <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	6923      	ldr	r3, [r4, #16]
 80027c6:	b113      	cbz	r3, 80027ce <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80027c8:	f04f 0800 	mov.w	r8, #0
 80027cc:	e7f6      	b.n	80027bc <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 80027ce:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80027d0:	2500      	movs	r5, #0
 80027d2:	e7f3      	b.n	80027bc <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80027e0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80027e2:	b292      	uxth	r2, r2
 80027e4:	3a01      	subs	r2, #1
 80027e6:	b292      	uxth	r2, r2
 80027e8:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b173      	cbz	r3, 800280e <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f0:	9600      	str	r6, [sp, #0]
 80027f2:	463b      	mov	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff45 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 80027fe:	b9e0      	cbnz	r0, 800283a <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8002800:	2d00      	cmp	r5, #0
 8002802:	d0e7      	beq.n	80027d4 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002804:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800280c:	e7e8      	b.n	80027e0 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	9600      	str	r6, [sp, #0]
 8002810:	463b      	mov	r3, r7
 8002812:	2200      	movs	r2, #0
 8002814:	2140      	movs	r1, #64	; 0x40
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff ff36 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 800281c:	b978      	cbnz	r0, 800283e <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800281e:	2320      	movs	r3, #32
 8002820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002824:	e000      	b.n	8002828 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8002826:	2002      	movs	r0, #2
}
 8002828:	b002      	add	sp, #8
 800282a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7fa      	b.n	8002828 <HAL_UART_Transmit+0xbe>
 8002832:	2001      	movs	r0, #1
 8002834:	e7f8      	b.n	8002828 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8002836:	2002      	movs	r0, #2
 8002838:	e7f6      	b.n	8002828 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
 800283c:	e7f4      	b.n	8002828 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800283e:	2003      	movs	r0, #3
 8002840:	e7f2      	b.n	8002828 <HAL_UART_Transmit+0xbe>

08002842 <i2c_wait>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @param  i2c_address Target device address
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef i2c_wait(I2C_HandleTypeDef *i2c, uint16_t i2c_address) {
 8002842:	b570      	push	{r4, r5, r6, lr}
 8002844:	4605      	mov	r5, r0
 8002846:	460c      	mov	r4, r1

    uint32_t start_time = HAL_GetTick();
 8002848:	f7fe fb74 	bl	8000f34 <HAL_GetTick>
 800284c:	4606      	mov	r6, r0
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 800284e:	0061      	lsls	r1, r4, #1
 8002850:	b289      	uxth	r1, r1
 8002852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002856:	2201      	movs	r2, #1
 8002858:	4628      	mov	r0, r5
 800285a:	f7ff fa89 	bl	8001d70 <HAL_I2C_IsDeviceReady>
 800285e:	4603      	mov	r3, r0
 8002860:	b128      	cbz	r0, 800286e <i2c_wait+0x2c>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 8002862:	f7fe fb67 	bl	8000f34 <HAL_GetTick>
 8002866:	1b83      	subs	r3, r0, r6
 8002868:	2b63      	cmp	r3, #99	; 0x63
 800286a:	d9f0      	bls.n	800284e <i2c_wait+0xc>
            return M24CXX_Err;
 800286c:	2301      	movs	r3, #1
    }

    return M24CXX_Ok;
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd70      	pop	{r4, r5, r6, pc}

08002872 <m24cxx_isconnected>:
 * @brief  Check if m24cxx is connected
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 8002872:	b508      	push	{r3, lr}

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002874:	7901      	ldrb	r1, [r0, #4]
 8002876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287a:	2202      	movs	r2, #2
 800287c:	0049      	lsls	r1, r1, #1
 800287e:	6800      	ldr	r0, [r0, #0]
 8002880:	f7ff fa76 	bl	8001d70 <HAL_I2C_IsDeviceReady>
 8002884:	b900      	cbnz	r0, 8002888 <m24cxx_isconnected+0x16>
        return M24CXX_Err;
    }

    return M24CXX_Ok;
}
 8002886:	bd08      	pop	{r3, pc}
        return M24CXX_Err;
 8002888:	2001      	movs	r0, #1
 800288a:	e7fc      	b.n	8002886 <m24cxx_isconnected+0x14>

0800288c <m24cxx_init>:
M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 800288c:	b510      	push	{r4, lr}
 800288e:	4604      	mov	r4, r0
    m24cxx->i2c = i2c;
 8002890:	6001      	str	r1, [r0, #0]
    m24cxx->i2c_address = i2c_address;
 8002892:	7102      	strb	r2, [r0, #4]
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <m24cxx_init+0x24>)
 800289c:	f7fe fd0a 	bl	80012b4 <HAL_GPIO_WritePin>
    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff ffe6 	bl	8002872 <m24cxx_isconnected>
 80028a6:	b900      	cbnz	r0, 80028aa <m24cxx_init+0x1e>
}
 80028a8:	bd10      	pop	{r4, pc}
        return M24CXX_Err;
 80028aa:	2001      	movs	r0, #1
 80028ac:	e7fc      	b.n	80028a8 <m24cxx_init+0x1c>
 80028ae:	bf00      	nop
 80028b0:	40020800 	.word	0x40020800

080028b4 <m24cxx_read>:
 * @param  address from which to read data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	4680      	mov	r8, r0
 80028bc:	9105      	str	r1, [sp, #20]
 80028be:	4692      	mov	sl, r2
 80028c0:	469b      	mov	fp, r3

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 80028c2:	ea4f 2911 	mov.w	r9, r1, lsr #8
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 80028c6:	18cf      	adds	r7, r1, r3
 80028c8:	3f01      	subs	r7, #1
 80028ca:	0a3f      	lsrs	r7, r7, #8
    uint32_t data_offset = 0;

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 80028cc:	464c      	mov	r4, r9
    uint32_t data_offset = 0;
 80028ce:	2600      	movs	r6, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 80028d0:	e01a      	b.n	8002908 <m24cxx_read+0x54>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 80028d2:	9a05      	ldr	r2, [sp, #20]
 80028d4:	e01d      	b.n	8002912 <m24cxx_read+0x5e>
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 80028d6:	ebab 0506 	sub.w	r5, fp, r6
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 80028da:	f898 1004 	ldrb.w	r1, [r8, #4]
 80028de:	eb01 4112 	add.w	r1, r1, r2, lsr #16

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len,
 80028e2:	0049      	lsls	r1, r1, #1
 80028e4:	b289      	uxth	r1, r1
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	b2ab      	uxth	r3, r5
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	eb0a 0306 	add.w	r3, sl, r6
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2310      	movs	r3, #16
 80028f8:	b292      	uxth	r2, r2
 80028fa:	f8d8 0000 	ldr.w	r0, [r8]
 80028fe:	f7ff f8c5 	bl	8001a8c <HAL_I2C_Mem_Read>
        HAL_MAX_DELAY);

        if (result != HAL_OK) {
 8002902:	b9a8      	cbnz	r0, 8002930 <m24cxx_read+0x7c>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
        }

        data_offset += read_len;
 8002904:	442e      	add	r6, r5
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8002906:	3401      	adds	r4, #1
 8002908:	42bc      	cmp	r4, r7
 800290a:	d80d      	bhi.n	8002928 <m24cxx_read+0x74>
        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800290c:	454c      	cmp	r4, r9
 800290e:	d0e0      	beq.n	80028d2 <m24cxx_read+0x1e>
 8002910:	0222      	lsls	r2, r4, #8
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 8002912:	42bc      	cmp	r4, r7
 8002914:	d0df      	beq.n	80028d6 <m24cxx_read+0x22>
 8002916:	454c      	cmp	r4, r9
 8002918:	d002      	beq.n	8002920 <m24cxx_read+0x6c>
 800291a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800291e:	e7dc      	b.n	80028da <m24cxx_read+0x26>
 8002920:	1c65      	adds	r5, r4, #1
 8002922:	ebc2 2505 	rsb	r5, r2, r5, lsl #8
 8002926:	e7d8      	b.n	80028da <m24cxx_read+0x26>

    }

    return M24CXX_Ok;
 8002928:	2000      	movs	r0, #0
}
 800292a:	b007      	add	sp, #28
 800292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 8002930:	2001      	movs	r0, #1
 8002932:	e7fa      	b.n	800292a <m24cxx_read+0x76>

08002934 <m24cxx_write>:
 * @param  address to which to write data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002938:	b087      	sub	sp, #28
 800293a:	4607      	mov	r7, r0
 800293c:	9104      	str	r1, [sp, #16]
 800293e:	4693      	mov	fp, r2
 8002940:	9305      	str	r3, [sp, #20]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 8002942:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 8002946:	eb01 0903 	add.w	r9, r1, r3
 800294a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800294e:	ea4f 2919 	mov.w	r9, r9, lsr #8
    uint32_t data_offset = 0;

    M24CXXDBG("Writing %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002958:	4822      	ldr	r0, [pc, #136]	; (80029e4 <m24cxx_write+0xb0>)
 800295a:	f7fe fcab 	bl	80012b4 <HAL_GPIO_WritePin>
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800295e:	4655      	mov	r5, sl
    uint32_t data_offset = 0;
 8002960:	f04f 0800 	mov.w	r8, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8002964:	e01f      	b.n	80029a6 <m24cxx_write+0x72>

        uint32_t i2c_address, start_address, start_address_masked, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 8002966:	9a04      	ldr	r2, [sp, #16]
 8002968:	e022      	b.n	80029b0 <m24cxx_write+0x7c>
        start_address_masked = start_address & M24CXX_ADDRESS_MASK;
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800296a:	9b05      	ldr	r3, [sp, #20]
 800296c:	eba3 0608 	sub.w	r6, r3, r8
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8002970:	793c      	ldrb	r4, [r7, #4]
 8002972:	eb04 4412 	add.w	r4, r4, r2, lsr #16

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%06lx masked = 0x%06lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address_masked, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address_masked, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 8002976:	b2a4      	uxth	r4, r4
 8002978:	0061      	lsls	r1, r4, #1
 800297a:	b289      	uxth	r1, r1
 800297c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	b2b3      	uxth	r3, r6
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	eb0b 0308 	add.w	r3, fp, r8
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2310      	movs	r3, #16
 800298e:	b292      	uxth	r2, r2
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	f7fe ffc9 	bl	8001928 <HAL_I2C_Mem_Write>

        if (result != HAL_OK) {
 8002996:	bb00      	cbnz	r0, 80029da <m24cxx_write+0xa6>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
        }

        data_offset += write_len;
 8002998:	44b0      	add	r8, r6

        if (i2c_wait(m24cxx->i2c, i2c_address) != M24CXX_Ok) {
 800299a:	4621      	mov	r1, r4
 800299c:	6838      	ldr	r0, [r7, #0]
 800299e:	f7ff ff50 	bl	8002842 <i2c_wait>
 80029a2:	b9e0      	cbnz	r0, 80029de <m24cxx_write+0xaa>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 80029a4:	3501      	adds	r5, #1
 80029a6:	454d      	cmp	r5, r9
 80029a8:	d80d      	bhi.n	80029c6 <m24cxx_write+0x92>
        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 80029aa:	4555      	cmp	r5, sl
 80029ac:	d0db      	beq.n	8002966 <m24cxx_write+0x32>
 80029ae:	022a      	lsls	r2, r5, #8
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 80029b0:	454d      	cmp	r5, r9
 80029b2:	d0da      	beq.n	800296a <m24cxx_write+0x36>
 80029b4:	4555      	cmp	r5, sl
 80029b6:	d002      	beq.n	80029be <m24cxx_write+0x8a>
 80029b8:	f44f 7680 	mov.w	r6, #256	; 0x100
 80029bc:	e7d8      	b.n	8002970 <m24cxx_write+0x3c>
 80029be:	1c6e      	adds	r6, r5, #1
 80029c0:	ebc2 2606 	rsb	r6, r2, r6, lsl #8
 80029c4:	e7d4      	b.n	8002970 <m24cxx_write+0x3c>
        }

    }

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
 80029c6:	2201      	movs	r2, #1
 80029c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <m24cxx_write+0xb0>)
 80029ce:	f7fe fc71 	bl	80012b4 <HAL_GPIO_WritePin>
#endif

    return M24CXX_Ok;
 80029d2:	2000      	movs	r0, #0
}
 80029d4:	b007      	add	sp, #28
 80029d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 80029da:	2001      	movs	r0, #1
 80029dc:	e7fa      	b.n	80029d4 <m24cxx_write+0xa0>
            return M24CXX_Err;
 80029de:	2001      	movs	r0, #1
 80029e0:	e7f8      	b.n	80029d4 <m24cxx_write+0xa0>
 80029e2:	bf00      	nop
 80029e4:	40020800 	.word	0x40020800

080029e8 <m24cxx_erase_all>:
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */

M24CXX_StatusTypeDef m24cxx_erase_all(M24CXX_HandleTypeDef *m24cxx) {
 80029e8:	b530      	push	{r4, r5, lr}
 80029ea:	b0c1      	sub	sp, #260	; 0x104
 80029ec:	4605      	mov	r5, r0

    M24CXXDBG("M24CXX erase all");

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];

    memset(buf, 0xff, sizeof(buf));
 80029ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f2:	21ff      	movs	r1, #255	; 0xff
 80029f4:	4668      	mov	r0, sp
 80029f6:	f000 f920 	bl	8002c3a <memset>

    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 80029fa:	2400      	movs	r4, #0
 80029fc:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8002a00:	d20a      	bcs.n	8002a18 <m24cxx_erase_all+0x30>
        M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, i * M24CXX_WRITE_PAGE_SIZE, (uint8_t*) &buf, sizeof(buf));
 8002a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a06:	466a      	mov	r2, sp
 8002a08:	0221      	lsls	r1, r4, #8
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f7ff ff92 	bl	8002934 <m24cxx_write>
        if (result != M24CXX_Ok)
 8002a10:	4603      	mov	r3, r0
 8002a12:	b910      	cbnz	r0, 8002a1a <m24cxx_erase_all+0x32>
    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 8002a14:	3401      	adds	r4, #1
 8002a16:	e7f1      	b.n	80029fc <m24cxx_erase_all+0x14>
            return result;
    }

    return M24CXX_Ok;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	b041      	add	sp, #260	; 0x104
 8002a1e:	bd30      	pop	{r4, r5, pc}

08002a20 <std>:
 8002a20:	2300      	movs	r3, #0
 8002a22:	b510      	push	{r4, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	e9c0 3300 	strd	r3, r3, [r0]
 8002a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a2e:	6083      	str	r3, [r0, #8]
 8002a30:	8181      	strh	r1, [r0, #12]
 8002a32:	6643      	str	r3, [r0, #100]	; 0x64
 8002a34:	81c2      	strh	r2, [r0, #14]
 8002a36:	6183      	str	r3, [r0, #24]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	305c      	adds	r0, #92	; 0x5c
 8002a3e:	f000 f8fc 	bl	8002c3a <memset>
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <std+0x38>)
 8002a44:	6263      	str	r3, [r4, #36]	; 0x24
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <std+0x3c>)
 8002a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <std+0x40>)
 8002a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <std+0x44>)
 8002a50:	6224      	str	r4, [r4, #32]
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	bf00      	nop
 8002a58:	08002bb5 	.word	0x08002bb5
 8002a5c:	08002bd7 	.word	0x08002bd7
 8002a60:	08002c0f 	.word	0x08002c0f
 8002a64:	08002c33 	.word	0x08002c33

08002a68 <stdio_exit_handler>:
 8002a68:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <stdio_exit_handler+0xc>)
 8002a6a:	4903      	ldr	r1, [pc, #12]	; (8002a78 <stdio_exit_handler+0x10>)
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <stdio_exit_handler+0x14>)
 8002a6e:	f000 b869 	b.w	8002b44 <_fwalk_sglue>
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	080035d5 	.word	0x080035d5
 8002a7c:	20000018 	.word	0x20000018

08002a80 <cleanup_stdio>:
 8002a80:	6841      	ldr	r1, [r0, #4]
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <cleanup_stdio+0x34>)
 8002a84:	4299      	cmp	r1, r3
 8002a86:	b510      	push	{r4, lr}
 8002a88:	4604      	mov	r4, r0
 8002a8a:	d001      	beq.n	8002a90 <cleanup_stdio+0x10>
 8002a8c:	f000 fda2 	bl	80035d4 <_fflush_r>
 8002a90:	68a1      	ldr	r1, [r4, #8]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <cleanup_stdio+0x38>)
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d002      	beq.n	8002a9e <cleanup_stdio+0x1e>
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 fd9b 	bl	80035d4 <_fflush_r>
 8002a9e:	68e1      	ldr	r1, [r4, #12]
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <cleanup_stdio+0x3c>)
 8002aa2:	4299      	cmp	r1, r3
 8002aa4:	d004      	beq.n	8002ab0 <cleanup_stdio+0x30>
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aac:	f000 bd92 	b.w	80035d4 <_fflush_r>
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000134 	.word	0x20000134
 8002ab8:	2000019c 	.word	0x2000019c
 8002abc:	20000204 	.word	0x20000204

08002ac0 <global_stdio_init.part.0>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <global_stdio_init.part.0+0x30>)
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <global_stdio_init.part.0+0x34>)
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <global_stdio_init.part.0+0x38>)
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4620      	mov	r0, r4
 8002acc:	2200      	movs	r2, #0
 8002ace:	2104      	movs	r1, #4
 8002ad0:	f7ff ffa6 	bl	8002a20 <std>
 8002ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2109      	movs	r1, #9
 8002adc:	f7ff ffa0 	bl	8002a20 <std>
 8002ae0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aea:	2112      	movs	r1, #18
 8002aec:	f7ff bf98 	b.w	8002a20 <std>
 8002af0:	2000026c 	.word	0x2000026c
 8002af4:	20000134 	.word	0x20000134
 8002af8:	08002a69 	.word	0x08002a69

08002afc <__sfp_lock_acquire>:
 8002afc:	4801      	ldr	r0, [pc, #4]	; (8002b04 <__sfp_lock_acquire+0x8>)
 8002afe:	f000 b915 	b.w	8002d2c <__retarget_lock_acquire_recursive>
 8002b02:	bf00      	nop
 8002b04:	20000275 	.word	0x20000275

08002b08 <__sfp_lock_release>:
 8002b08:	4801      	ldr	r0, [pc, #4]	; (8002b10 <__sfp_lock_release+0x8>)
 8002b0a:	f000 b910 	b.w	8002d2e <__retarget_lock_release_recursive>
 8002b0e:	bf00      	nop
 8002b10:	20000275 	.word	0x20000275

08002b14 <__sinit>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
 8002b18:	f7ff fff0 	bl	8002afc <__sfp_lock_acquire>
 8002b1c:	6a23      	ldr	r3, [r4, #32]
 8002b1e:	b11b      	cbz	r3, 8002b28 <__sinit+0x14>
 8002b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b24:	f7ff bff0 	b.w	8002b08 <__sfp_lock_release>
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__sinit+0x28>)
 8002b2a:	6223      	str	r3, [r4, #32]
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__sinit+0x2c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f5      	bne.n	8002b20 <__sinit+0xc>
 8002b34:	f7ff ffc4 	bl	8002ac0 <global_stdio_init.part.0>
 8002b38:	e7f2      	b.n	8002b20 <__sinit+0xc>
 8002b3a:	bf00      	nop
 8002b3c:	08002a81 	.word	0x08002a81
 8002b40:	2000026c 	.word	0x2000026c

08002b44 <_fwalk_sglue>:
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b48:	4607      	mov	r7, r0
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	2600      	movs	r6, #0
 8002b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b54:	f1b9 0901 	subs.w	r9, r9, #1
 8002b58:	d505      	bpl.n	8002b66 <_fwalk_sglue+0x22>
 8002b5a:	6824      	ldr	r4, [r4, #0]
 8002b5c:	2c00      	cmp	r4, #0
 8002b5e:	d1f7      	bne.n	8002b50 <_fwalk_sglue+0xc>
 8002b60:	4630      	mov	r0, r6
 8002b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b66:	89ab      	ldrh	r3, [r5, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d907      	bls.n	8002b7c <_fwalk_sglue+0x38>
 8002b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b70:	3301      	adds	r3, #1
 8002b72:	d003      	beq.n	8002b7c <_fwalk_sglue+0x38>
 8002b74:	4629      	mov	r1, r5
 8002b76:	4638      	mov	r0, r7
 8002b78:	47c0      	blx	r8
 8002b7a:	4306      	orrs	r6, r0
 8002b7c:	3568      	adds	r5, #104	; 0x68
 8002b7e:	e7e9      	b.n	8002b54 <_fwalk_sglue+0x10>

08002b80 <iprintf>:
 8002b80:	b40f      	push	{r0, r1, r2, r3}
 8002b82:	b507      	push	{r0, r1, r2, lr}
 8002b84:	4906      	ldr	r1, [pc, #24]	; (8002ba0 <iprintf+0x20>)
 8002b86:	ab04      	add	r3, sp, #16
 8002b88:	6808      	ldr	r0, [r1, #0]
 8002b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8e:	6881      	ldr	r1, [r0, #8]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	f000 f9ef 	bl	8002f74 <_vfiprintf_r>
 8002b96:	b003      	add	sp, #12
 8002b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b9c:	b004      	add	sp, #16
 8002b9e:	4770      	bx	lr
 8002ba0:	20000064 	.word	0x20000064

08002ba4 <putchar>:
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <putchar+0xc>)
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	6882      	ldr	r2, [r0, #8]
 8002bac:	f000 bd3a 	b.w	8003624 <_putc_r>
 8002bb0:	20000064 	.word	0x20000064

08002bb4 <__sread>:
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bbc:	f000 f868 	bl	8002c90 <_read_r>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	bfab      	itete	ge
 8002bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bc8:	181b      	addge	r3, r3, r0
 8002bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bce:	bfac      	ite	ge
 8002bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bd2:	81a3      	strhlt	r3, [r4, #12]
 8002bd4:	bd10      	pop	{r4, pc}

08002bd6 <__swrite>:
 8002bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bda:	461f      	mov	r7, r3
 8002bdc:	898b      	ldrh	r3, [r1, #12]
 8002bde:	05db      	lsls	r3, r3, #23
 8002be0:	4605      	mov	r5, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	4616      	mov	r6, r2
 8002be6:	d505      	bpl.n	8002bf4 <__swrite+0x1e>
 8002be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bec:	2302      	movs	r3, #2
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f000 f83c 	bl	8002c6c <_lseek_r>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bfe:	81a3      	strh	r3, [r4, #12]
 8002c00:	4632      	mov	r2, r6
 8002c02:	463b      	mov	r3, r7
 8002c04:	4628      	mov	r0, r5
 8002c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c0a:	f000 b853 	b.w	8002cb4 <_write_r>

08002c0e <__sseek>:
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	460c      	mov	r4, r1
 8002c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c16:	f000 f829 	bl	8002c6c <_lseek_r>
 8002c1a:	1c43      	adds	r3, r0, #1
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	bf15      	itete	ne
 8002c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c2a:	81a3      	strheq	r3, [r4, #12]
 8002c2c:	bf18      	it	ne
 8002c2e:	81a3      	strhne	r3, [r4, #12]
 8002c30:	bd10      	pop	{r4, pc}

08002c32 <__sclose>:
 8002c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c36:	f000 b809 	b.w	8002c4c <_close_r>

08002c3a <memset>:
 8002c3a:	4402      	add	r2, r0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d100      	bne.n	8002c44 <memset+0xa>
 8002c42:	4770      	bx	lr
 8002c44:	f803 1b01 	strb.w	r1, [r3], #1
 8002c48:	e7f9      	b.n	8002c3e <memset+0x4>
	...

08002c4c <_close_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d06      	ldr	r5, [pc, #24]	; (8002c68 <_close_r+0x1c>)
 8002c50:	2300      	movs	r3, #0
 8002c52:	4604      	mov	r4, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	602b      	str	r3, [r5, #0]
 8002c58:	f7fe f8bc 	bl	8000dd4 <_close>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d102      	bne.n	8002c66 <_close_r+0x1a>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	b103      	cbz	r3, 8002c66 <_close_r+0x1a>
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	20000270 	.word	0x20000270

08002c6c <_lseek_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4d07      	ldr	r5, [pc, #28]	; (8002c8c <_lseek_r+0x20>)
 8002c70:	4604      	mov	r4, r0
 8002c72:	4608      	mov	r0, r1
 8002c74:	4611      	mov	r1, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	602a      	str	r2, [r5, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7fe f8b4 	bl	8000de8 <_lseek>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_lseek_r+0x1e>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_lseek_r+0x1e>
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	20000270 	.word	0x20000270

08002c90 <_read_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d07      	ldr	r5, [pc, #28]	; (8002cb0 <_read_r+0x20>)
 8002c94:	4604      	mov	r4, r0
 8002c96:	4608      	mov	r0, r1
 8002c98:	4611      	mov	r1, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fe f888 	bl	8000db4 <_read>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_read_r+0x1e>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_read_r+0x1e>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000270 	.word	0x20000270

08002cb4 <_write_r>:
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4d07      	ldr	r5, [pc, #28]	; (8002cd4 <_write_r+0x20>)
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4608      	mov	r0, r1
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	602a      	str	r2, [r5, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f7fd fca6 	bl	8000614 <_write>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_write_r+0x1e>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_write_r+0x1e>
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	20000270 	.word	0x20000270

08002cd8 <__errno>:
 8002cd8:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <__errno+0x8>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000064 	.word	0x20000064

08002ce4 <__libc_init_array>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	4d0d      	ldr	r5, [pc, #52]	; (8002d1c <__libc_init_array+0x38>)
 8002ce8:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <__libc_init_array+0x3c>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	2600      	movs	r6, #0
 8002cf0:	42a6      	cmp	r6, r4
 8002cf2:	d109      	bne.n	8002d08 <__libc_init_array+0x24>
 8002cf4:	4d0b      	ldr	r5, [pc, #44]	; (8002d24 <__libc_init_array+0x40>)
 8002cf6:	4c0c      	ldr	r4, [pc, #48]	; (8002d28 <__libc_init_array+0x44>)
 8002cf8:	f000 fdf2 	bl	80038e0 <_init>
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	2600      	movs	r6, #0
 8002d02:	42a6      	cmp	r6, r4
 8002d04:	d105      	bne.n	8002d12 <__libc_init_array+0x2e>
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0c:	4798      	blx	r3
 8002d0e:	3601      	adds	r6, #1
 8002d10:	e7ee      	b.n	8002cf0 <__libc_init_array+0xc>
 8002d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d16:	4798      	blx	r3
 8002d18:	3601      	adds	r6, #1
 8002d1a:	e7f2      	b.n	8002d02 <__libc_init_array+0x1e>
 8002d1c:	08003acc 	.word	0x08003acc
 8002d20:	08003acc 	.word	0x08003acc
 8002d24:	08003acc 	.word	0x08003acc
 8002d28:	08003ad0 	.word	0x08003ad0

08002d2c <__retarget_lock_acquire_recursive>:
 8002d2c:	4770      	bx	lr

08002d2e <__retarget_lock_release_recursive>:
 8002d2e:	4770      	bx	lr

08002d30 <_free_r>:
 8002d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d044      	beq.n	8002dc0 <_free_r+0x90>
 8002d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d3a:	9001      	str	r0, [sp, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d42:	bfb8      	it	lt
 8002d44:	18e4      	addlt	r4, r4, r3
 8002d46:	f000 f8df 	bl	8002f08 <__malloc_lock>
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <_free_r+0x94>)
 8002d4c:	9801      	ldr	r0, [sp, #4]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	b933      	cbnz	r3, 8002d60 <_free_r+0x30>
 8002d52:	6063      	str	r3, [r4, #4]
 8002d54:	6014      	str	r4, [r2, #0]
 8002d56:	b003      	add	sp, #12
 8002d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d5c:	f000 b8da 	b.w	8002f14 <__malloc_unlock>
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	d908      	bls.n	8002d76 <_free_r+0x46>
 8002d64:	6825      	ldr	r5, [r4, #0]
 8002d66:	1961      	adds	r1, r4, r5
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	bf01      	itttt	eq
 8002d6c:	6819      	ldreq	r1, [r3, #0]
 8002d6e:	685b      	ldreq	r3, [r3, #4]
 8002d70:	1949      	addeq	r1, r1, r5
 8002d72:	6021      	streq	r1, [r4, #0]
 8002d74:	e7ed      	b.n	8002d52 <_free_r+0x22>
 8002d76:	461a      	mov	r2, r3
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b10b      	cbz	r3, 8002d80 <_free_r+0x50>
 8002d7c:	42a3      	cmp	r3, r4
 8002d7e:	d9fa      	bls.n	8002d76 <_free_r+0x46>
 8002d80:	6811      	ldr	r1, [r2, #0]
 8002d82:	1855      	adds	r5, r2, r1
 8002d84:	42a5      	cmp	r5, r4
 8002d86:	d10b      	bne.n	8002da0 <_free_r+0x70>
 8002d88:	6824      	ldr	r4, [r4, #0]
 8002d8a:	4421      	add	r1, r4
 8002d8c:	1854      	adds	r4, r2, r1
 8002d8e:	42a3      	cmp	r3, r4
 8002d90:	6011      	str	r1, [r2, #0]
 8002d92:	d1e0      	bne.n	8002d56 <_free_r+0x26>
 8002d94:	681c      	ldr	r4, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	6053      	str	r3, [r2, #4]
 8002d9a:	440c      	add	r4, r1
 8002d9c:	6014      	str	r4, [r2, #0]
 8002d9e:	e7da      	b.n	8002d56 <_free_r+0x26>
 8002da0:	d902      	bls.n	8002da8 <_free_r+0x78>
 8002da2:	230c      	movs	r3, #12
 8002da4:	6003      	str	r3, [r0, #0]
 8002da6:	e7d6      	b.n	8002d56 <_free_r+0x26>
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	1961      	adds	r1, r4, r5
 8002dac:	428b      	cmp	r3, r1
 8002dae:	bf04      	itt	eq
 8002db0:	6819      	ldreq	r1, [r3, #0]
 8002db2:	685b      	ldreq	r3, [r3, #4]
 8002db4:	6063      	str	r3, [r4, #4]
 8002db6:	bf04      	itt	eq
 8002db8:	1949      	addeq	r1, r1, r5
 8002dba:	6021      	streq	r1, [r4, #0]
 8002dbc:	6054      	str	r4, [r2, #4]
 8002dbe:	e7ca      	b.n	8002d56 <_free_r+0x26>
 8002dc0:	b003      	add	sp, #12
 8002dc2:	bd30      	pop	{r4, r5, pc}
 8002dc4:	20000278 	.word	0x20000278

08002dc8 <sbrk_aligned>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4e0e      	ldr	r6, [pc, #56]	; (8002e04 <sbrk_aligned+0x3c>)
 8002dcc:	460c      	mov	r4, r1
 8002dce:	6831      	ldr	r1, [r6, #0]
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	b911      	cbnz	r1, 8002dda <sbrk_aligned+0x12>
 8002dd4:	f000 fcf0 	bl	80037b8 <_sbrk_r>
 8002dd8:	6030      	str	r0, [r6, #0]
 8002dda:	4621      	mov	r1, r4
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 fceb 	bl	80037b8 <_sbrk_r>
 8002de2:	1c43      	adds	r3, r0, #1
 8002de4:	d00a      	beq.n	8002dfc <sbrk_aligned+0x34>
 8002de6:	1cc4      	adds	r4, r0, #3
 8002de8:	f024 0403 	bic.w	r4, r4, #3
 8002dec:	42a0      	cmp	r0, r4
 8002dee:	d007      	beq.n	8002e00 <sbrk_aligned+0x38>
 8002df0:	1a21      	subs	r1, r4, r0
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fce0 	bl	80037b8 <_sbrk_r>
 8002df8:	3001      	adds	r0, #1
 8002dfa:	d101      	bne.n	8002e00 <sbrk_aligned+0x38>
 8002dfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e00:	4620      	mov	r0, r4
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	2000027c 	.word	0x2000027c

08002e08 <_malloc_r>:
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0c:	1ccd      	adds	r5, r1, #3
 8002e0e:	f025 0503 	bic.w	r5, r5, #3
 8002e12:	3508      	adds	r5, #8
 8002e14:	2d0c      	cmp	r5, #12
 8002e16:	bf38      	it	cc
 8002e18:	250c      	movcc	r5, #12
 8002e1a:	2d00      	cmp	r5, #0
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	db01      	blt.n	8002e24 <_malloc_r+0x1c>
 8002e20:	42a9      	cmp	r1, r5
 8002e22:	d905      	bls.n	8002e30 <_malloc_r+0x28>
 8002e24:	230c      	movs	r3, #12
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f04 <_malloc_r+0xfc>
 8002e34:	f000 f868 	bl	8002f08 <__malloc_lock>
 8002e38:	f8d8 3000 	ldr.w	r3, [r8]
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	bb5c      	cbnz	r4, 8002e98 <_malloc_r+0x90>
 8002e40:	4629      	mov	r1, r5
 8002e42:	4638      	mov	r0, r7
 8002e44:	f7ff ffc0 	bl	8002dc8 <sbrk_aligned>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	d155      	bne.n	8002efa <_malloc_r+0xf2>
 8002e4e:	f8d8 4000 	ldr.w	r4, [r8]
 8002e52:	4626      	mov	r6, r4
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	d145      	bne.n	8002ee4 <_malloc_r+0xdc>
 8002e58:	2c00      	cmp	r4, #0
 8002e5a:	d048      	beq.n	8002eee <_malloc_r+0xe6>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4638      	mov	r0, r7
 8002e62:	eb04 0903 	add.w	r9, r4, r3
 8002e66:	f000 fca7 	bl	80037b8 <_sbrk_r>
 8002e6a:	4581      	cmp	r9, r0
 8002e6c:	d13f      	bne.n	8002eee <_malloc_r+0xe6>
 8002e6e:	6821      	ldr	r1, [r4, #0]
 8002e70:	1a6d      	subs	r5, r5, r1
 8002e72:	4629      	mov	r1, r5
 8002e74:	4638      	mov	r0, r7
 8002e76:	f7ff ffa7 	bl	8002dc8 <sbrk_aligned>
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d037      	beq.n	8002eee <_malloc_r+0xe6>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	442b      	add	r3, r5
 8002e82:	6023      	str	r3, [r4, #0]
 8002e84:	f8d8 3000 	ldr.w	r3, [r8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d038      	beq.n	8002efe <_malloc_r+0xf6>
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	42a2      	cmp	r2, r4
 8002e90:	d12b      	bne.n	8002eea <_malloc_r+0xe2>
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e00f      	b.n	8002eb8 <_malloc_r+0xb0>
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	1b52      	subs	r2, r2, r5
 8002e9c:	d41f      	bmi.n	8002ede <_malloc_r+0xd6>
 8002e9e:	2a0b      	cmp	r2, #11
 8002ea0:	d917      	bls.n	8002ed2 <_malloc_r+0xca>
 8002ea2:	1961      	adds	r1, r4, r5
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	6025      	str	r5, [r4, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	6059      	strne	r1, [r3, #4]
 8002eac:	6863      	ldr	r3, [r4, #4]
 8002eae:	bf08      	it	eq
 8002eb0:	f8c8 1000 	streq.w	r1, [r8]
 8002eb4:	5162      	str	r2, [r4, r5]
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f104 060b 	add.w	r6, r4, #11
 8002ebe:	f000 f829 	bl	8002f14 <__malloc_unlock>
 8002ec2:	f026 0607 	bic.w	r6, r6, #7
 8002ec6:	1d23      	adds	r3, r4, #4
 8002ec8:	1af2      	subs	r2, r6, r3
 8002eca:	d0ae      	beq.n	8002e2a <_malloc_r+0x22>
 8002ecc:	1b9b      	subs	r3, r3, r6
 8002ece:	50a3      	str	r3, [r4, r2]
 8002ed0:	e7ab      	b.n	8002e2a <_malloc_r+0x22>
 8002ed2:	42a3      	cmp	r3, r4
 8002ed4:	6862      	ldr	r2, [r4, #4]
 8002ed6:	d1dd      	bne.n	8002e94 <_malloc_r+0x8c>
 8002ed8:	f8c8 2000 	str.w	r2, [r8]
 8002edc:	e7ec      	b.n	8002eb8 <_malloc_r+0xb0>
 8002ede:	4623      	mov	r3, r4
 8002ee0:	6864      	ldr	r4, [r4, #4]
 8002ee2:	e7ac      	b.n	8002e3e <_malloc_r+0x36>
 8002ee4:	4634      	mov	r4, r6
 8002ee6:	6876      	ldr	r6, [r6, #4]
 8002ee8:	e7b4      	b.n	8002e54 <_malloc_r+0x4c>
 8002eea:	4613      	mov	r3, r2
 8002eec:	e7cc      	b.n	8002e88 <_malloc_r+0x80>
 8002eee:	230c      	movs	r3, #12
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f000 f80e 	bl	8002f14 <__malloc_unlock>
 8002ef8:	e797      	b.n	8002e2a <_malloc_r+0x22>
 8002efa:	6025      	str	r5, [r4, #0]
 8002efc:	e7dc      	b.n	8002eb8 <_malloc_r+0xb0>
 8002efe:	605b      	str	r3, [r3, #4]
 8002f00:	deff      	udf	#255	; 0xff
 8002f02:	bf00      	nop
 8002f04:	20000278 	.word	0x20000278

08002f08 <__malloc_lock>:
 8002f08:	4801      	ldr	r0, [pc, #4]	; (8002f10 <__malloc_lock+0x8>)
 8002f0a:	f7ff bf0f 	b.w	8002d2c <__retarget_lock_acquire_recursive>
 8002f0e:	bf00      	nop
 8002f10:	20000274 	.word	0x20000274

08002f14 <__malloc_unlock>:
 8002f14:	4801      	ldr	r0, [pc, #4]	; (8002f1c <__malloc_unlock+0x8>)
 8002f16:	f7ff bf0a 	b.w	8002d2e <__retarget_lock_release_recursive>
 8002f1a:	bf00      	nop
 8002f1c:	20000274 	.word	0x20000274

08002f20 <__sfputc_r>:
 8002f20:	6893      	ldr	r3, [r2, #8]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	b410      	push	{r4}
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	da08      	bge.n	8002f3e <__sfputc_r+0x1e>
 8002f2c:	6994      	ldr	r4, [r2, #24]
 8002f2e:	42a3      	cmp	r3, r4
 8002f30:	db01      	blt.n	8002f36 <__sfputc_r+0x16>
 8002f32:	290a      	cmp	r1, #10
 8002f34:	d103      	bne.n	8002f3e <__sfputc_r+0x1e>
 8002f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f3a:	f000 bba7 	b.w	800368c <__swbuf_r>
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	1c58      	adds	r0, r3, #1
 8002f42:	6010      	str	r0, [r2, #0]
 8002f44:	7019      	strb	r1, [r3, #0]
 8002f46:	4608      	mov	r0, r1
 8002f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <__sfputs_r>:
 8002f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f50:	4606      	mov	r6, r0
 8002f52:	460f      	mov	r7, r1
 8002f54:	4614      	mov	r4, r2
 8002f56:	18d5      	adds	r5, r2, r3
 8002f58:	42ac      	cmp	r4, r5
 8002f5a:	d101      	bne.n	8002f60 <__sfputs_r+0x12>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e007      	b.n	8002f70 <__sfputs_r+0x22>
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	463a      	mov	r2, r7
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7ff ffda 	bl	8002f20 <__sfputc_r>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d1f3      	bne.n	8002f58 <__sfputs_r+0xa>
 8002f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f74 <_vfiprintf_r>:
 8002f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f78:	460d      	mov	r5, r1
 8002f7a:	b09d      	sub	sp, #116	; 0x74
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4606      	mov	r6, r0
 8002f82:	b118      	cbz	r0, 8002f8c <_vfiprintf_r+0x18>
 8002f84:	6a03      	ldr	r3, [r0, #32]
 8002f86:	b90b      	cbnz	r3, 8002f8c <_vfiprintf_r+0x18>
 8002f88:	f7ff fdc4 	bl	8002b14 <__sinit>
 8002f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f8e:	07d9      	lsls	r1, r3, #31
 8002f90:	d405      	bmi.n	8002f9e <_vfiprintf_r+0x2a>
 8002f92:	89ab      	ldrh	r3, [r5, #12]
 8002f94:	059a      	lsls	r2, r3, #22
 8002f96:	d402      	bmi.n	8002f9e <_vfiprintf_r+0x2a>
 8002f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f9a:	f7ff fec7 	bl	8002d2c <__retarget_lock_acquire_recursive>
 8002f9e:	89ab      	ldrh	r3, [r5, #12]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	d501      	bpl.n	8002fa8 <_vfiprintf_r+0x34>
 8002fa4:	692b      	ldr	r3, [r5, #16]
 8002fa6:	b99b      	cbnz	r3, 8002fd0 <_vfiprintf_r+0x5c>
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4630      	mov	r0, r6
 8002fac:	f000 fbac 	bl	8003708 <__swsetup_r>
 8002fb0:	b170      	cbz	r0, 8002fd0 <_vfiprintf_r+0x5c>
 8002fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb4:	07dc      	lsls	r4, r3, #31
 8002fb6:	d504      	bpl.n	8002fc2 <_vfiprintf_r+0x4e>
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fbc:	b01d      	add	sp, #116	; 0x74
 8002fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc2:	89ab      	ldrh	r3, [r5, #12]
 8002fc4:	0598      	lsls	r0, r3, #22
 8002fc6:	d4f7      	bmi.n	8002fb8 <_vfiprintf_r+0x44>
 8002fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fca:	f7ff feb0 	bl	8002d2e <__retarget_lock_release_recursive>
 8002fce:	e7f3      	b.n	8002fb8 <_vfiprintf_r+0x44>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fde:	2330      	movs	r3, #48	; 0x30
 8002fe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003194 <_vfiprintf_r+0x220>
 8002fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fe8:	f04f 0901 	mov.w	r9, #1
 8002fec:	4623      	mov	r3, r4
 8002fee:	469a      	mov	sl, r3
 8002ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ff4:	b10a      	cbz	r2, 8002ffa <_vfiprintf_r+0x86>
 8002ff6:	2a25      	cmp	r2, #37	; 0x25
 8002ff8:	d1f9      	bne.n	8002fee <_vfiprintf_r+0x7a>
 8002ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8002ffe:	d00b      	beq.n	8003018 <_vfiprintf_r+0xa4>
 8003000:	465b      	mov	r3, fp
 8003002:	4622      	mov	r2, r4
 8003004:	4629      	mov	r1, r5
 8003006:	4630      	mov	r0, r6
 8003008:	f7ff ffa1 	bl	8002f4e <__sfputs_r>
 800300c:	3001      	adds	r0, #1
 800300e:	f000 80a9 	beq.w	8003164 <_vfiprintf_r+0x1f0>
 8003012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003014:	445a      	add	r2, fp
 8003016:	9209      	str	r2, [sp, #36]	; 0x24
 8003018:	f89a 3000 	ldrb.w	r3, [sl]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a1 	beq.w	8003164 <_vfiprintf_r+0x1f0>
 8003022:	2300      	movs	r3, #0
 8003024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800302c:	f10a 0a01 	add.w	sl, sl, #1
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	9307      	str	r3, [sp, #28]
 8003034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003038:	931a      	str	r3, [sp, #104]	; 0x68
 800303a:	4654      	mov	r4, sl
 800303c:	2205      	movs	r2, #5
 800303e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003042:	4854      	ldr	r0, [pc, #336]	; (8003194 <_vfiprintf_r+0x220>)
 8003044:	f7fd f8c4 	bl	80001d0 <memchr>
 8003048:	9a04      	ldr	r2, [sp, #16]
 800304a:	b9d8      	cbnz	r0, 8003084 <_vfiprintf_r+0x110>
 800304c:	06d1      	lsls	r1, r2, #27
 800304e:	bf44      	itt	mi
 8003050:	2320      	movmi	r3, #32
 8003052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003056:	0713      	lsls	r3, r2, #28
 8003058:	bf44      	itt	mi
 800305a:	232b      	movmi	r3, #43	; 0x2b
 800305c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003060:	f89a 3000 	ldrb.w	r3, [sl]
 8003064:	2b2a      	cmp	r3, #42	; 0x2a
 8003066:	d015      	beq.n	8003094 <_vfiprintf_r+0x120>
 8003068:	9a07      	ldr	r2, [sp, #28]
 800306a:	4654      	mov	r4, sl
 800306c:	2000      	movs	r0, #0
 800306e:	f04f 0c0a 	mov.w	ip, #10
 8003072:	4621      	mov	r1, r4
 8003074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003078:	3b30      	subs	r3, #48	; 0x30
 800307a:	2b09      	cmp	r3, #9
 800307c:	d94d      	bls.n	800311a <_vfiprintf_r+0x1a6>
 800307e:	b1b0      	cbz	r0, 80030ae <_vfiprintf_r+0x13a>
 8003080:	9207      	str	r2, [sp, #28]
 8003082:	e014      	b.n	80030ae <_vfiprintf_r+0x13a>
 8003084:	eba0 0308 	sub.w	r3, r0, r8
 8003088:	fa09 f303 	lsl.w	r3, r9, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	9304      	str	r3, [sp, #16]
 8003090:	46a2      	mov	sl, r4
 8003092:	e7d2      	b.n	800303a <_vfiprintf_r+0xc6>
 8003094:	9b03      	ldr	r3, [sp, #12]
 8003096:	1d19      	adds	r1, r3, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	9103      	str	r1, [sp, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	bfbb      	ittet	lt
 80030a0:	425b      	neglt	r3, r3
 80030a2:	f042 0202 	orrlt.w	r2, r2, #2
 80030a6:	9307      	strge	r3, [sp, #28]
 80030a8:	9307      	strlt	r3, [sp, #28]
 80030aa:	bfb8      	it	lt
 80030ac:	9204      	strlt	r2, [sp, #16]
 80030ae:	7823      	ldrb	r3, [r4, #0]
 80030b0:	2b2e      	cmp	r3, #46	; 0x2e
 80030b2:	d10c      	bne.n	80030ce <_vfiprintf_r+0x15a>
 80030b4:	7863      	ldrb	r3, [r4, #1]
 80030b6:	2b2a      	cmp	r3, #42	; 0x2a
 80030b8:	d134      	bne.n	8003124 <_vfiprintf_r+0x1b0>
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	1d1a      	adds	r2, r3, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	9203      	str	r2, [sp, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80030ca:	3402      	adds	r4, #2
 80030cc:	9305      	str	r3, [sp, #20]
 80030ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031a4 <_vfiprintf_r+0x230>
 80030d2:	7821      	ldrb	r1, [r4, #0]
 80030d4:	2203      	movs	r2, #3
 80030d6:	4650      	mov	r0, sl
 80030d8:	f7fd f87a 	bl	80001d0 <memchr>
 80030dc:	b138      	cbz	r0, 80030ee <_vfiprintf_r+0x17a>
 80030de:	9b04      	ldr	r3, [sp, #16]
 80030e0:	eba0 000a 	sub.w	r0, r0, sl
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	4082      	lsls	r2, r0
 80030e8:	4313      	orrs	r3, r2
 80030ea:	3401      	adds	r4, #1
 80030ec:	9304      	str	r3, [sp, #16]
 80030ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f2:	4829      	ldr	r0, [pc, #164]	; (8003198 <_vfiprintf_r+0x224>)
 80030f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030f8:	2206      	movs	r2, #6
 80030fa:	f7fd f869 	bl	80001d0 <memchr>
 80030fe:	2800      	cmp	r0, #0
 8003100:	d03f      	beq.n	8003182 <_vfiprintf_r+0x20e>
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <_vfiprintf_r+0x228>)
 8003104:	bb1b      	cbnz	r3, 800314e <_vfiprintf_r+0x1da>
 8003106:	9b03      	ldr	r3, [sp, #12]
 8003108:	3307      	adds	r3, #7
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	3308      	adds	r3, #8
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003114:	443b      	add	r3, r7
 8003116:	9309      	str	r3, [sp, #36]	; 0x24
 8003118:	e768      	b.n	8002fec <_vfiprintf_r+0x78>
 800311a:	fb0c 3202 	mla	r2, ip, r2, r3
 800311e:	460c      	mov	r4, r1
 8003120:	2001      	movs	r0, #1
 8003122:	e7a6      	b.n	8003072 <_vfiprintf_r+0xfe>
 8003124:	2300      	movs	r3, #0
 8003126:	3401      	adds	r4, #1
 8003128:	9305      	str	r3, [sp, #20]
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 0c0a 	mov.w	ip, #10
 8003130:	4620      	mov	r0, r4
 8003132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003136:	3a30      	subs	r2, #48	; 0x30
 8003138:	2a09      	cmp	r2, #9
 800313a:	d903      	bls.n	8003144 <_vfiprintf_r+0x1d0>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0c6      	beq.n	80030ce <_vfiprintf_r+0x15a>
 8003140:	9105      	str	r1, [sp, #20]
 8003142:	e7c4      	b.n	80030ce <_vfiprintf_r+0x15a>
 8003144:	fb0c 2101 	mla	r1, ip, r1, r2
 8003148:	4604      	mov	r4, r0
 800314a:	2301      	movs	r3, #1
 800314c:	e7f0      	b.n	8003130 <_vfiprintf_r+0x1bc>
 800314e:	ab03      	add	r3, sp, #12
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	462a      	mov	r2, r5
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <_vfiprintf_r+0x22c>)
 8003156:	a904      	add	r1, sp, #16
 8003158:	4630      	mov	r0, r6
 800315a:	f3af 8000 	nop.w
 800315e:	4607      	mov	r7, r0
 8003160:	1c78      	adds	r0, r7, #1
 8003162:	d1d6      	bne.n	8003112 <_vfiprintf_r+0x19e>
 8003164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003166:	07d9      	lsls	r1, r3, #31
 8003168:	d405      	bmi.n	8003176 <_vfiprintf_r+0x202>
 800316a:	89ab      	ldrh	r3, [r5, #12]
 800316c:	059a      	lsls	r2, r3, #22
 800316e:	d402      	bmi.n	8003176 <_vfiprintf_r+0x202>
 8003170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003172:	f7ff fddc 	bl	8002d2e <__retarget_lock_release_recursive>
 8003176:	89ab      	ldrh	r3, [r5, #12]
 8003178:	065b      	lsls	r3, r3, #25
 800317a:	f53f af1d 	bmi.w	8002fb8 <_vfiprintf_r+0x44>
 800317e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003180:	e71c      	b.n	8002fbc <_vfiprintf_r+0x48>
 8003182:	ab03      	add	r3, sp, #12
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	462a      	mov	r2, r5
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <_vfiprintf_r+0x22c>)
 800318a:	a904      	add	r1, sp, #16
 800318c:	4630      	mov	r0, r6
 800318e:	f000 f879 	bl	8003284 <_printf_i>
 8003192:	e7e4      	b.n	800315e <_vfiprintf_r+0x1ea>
 8003194:	08003a90 	.word	0x08003a90
 8003198:	08003a9a 	.word	0x08003a9a
 800319c:	00000000 	.word	0x00000000
 80031a0:	08002f4f 	.word	0x08002f4f
 80031a4:	08003a96 	.word	0x08003a96

080031a8 <_printf_common>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	4616      	mov	r6, r2
 80031ae:	4699      	mov	r9, r3
 80031b0:	688a      	ldr	r2, [r1, #8]
 80031b2:	690b      	ldr	r3, [r1, #16]
 80031b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bfb8      	it	lt
 80031bc:	4613      	movlt	r3, r2
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031c4:	4607      	mov	r7, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	b10a      	cbz	r2, 80031ce <_printf_common+0x26>
 80031ca:	3301      	adds	r3, #1
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	0699      	lsls	r1, r3, #26
 80031d2:	bf42      	ittt	mi
 80031d4:	6833      	ldrmi	r3, [r6, #0]
 80031d6:	3302      	addmi	r3, #2
 80031d8:	6033      	strmi	r3, [r6, #0]
 80031da:	6825      	ldr	r5, [r4, #0]
 80031dc:	f015 0506 	ands.w	r5, r5, #6
 80031e0:	d106      	bne.n	80031f0 <_printf_common+0x48>
 80031e2:	f104 0a19 	add.w	sl, r4, #25
 80031e6:	68e3      	ldr	r3, [r4, #12]
 80031e8:	6832      	ldr	r2, [r6, #0]
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	42ab      	cmp	r3, r5
 80031ee:	dc26      	bgt.n	800323e <_printf_common+0x96>
 80031f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031f4:	1e13      	subs	r3, r2, #0
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	bf18      	it	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	0692      	lsls	r2, r2, #26
 80031fe:	d42b      	bmi.n	8003258 <_printf_common+0xb0>
 8003200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003204:	4649      	mov	r1, r9
 8003206:	4638      	mov	r0, r7
 8003208:	47c0      	blx	r8
 800320a:	3001      	adds	r0, #1
 800320c:	d01e      	beq.n	800324c <_printf_common+0xa4>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	6922      	ldr	r2, [r4, #16]
 8003212:	f003 0306 	and.w	r3, r3, #6
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf02      	ittt	eq
 800321a:	68e5      	ldreq	r5, [r4, #12]
 800321c:	6833      	ldreq	r3, [r6, #0]
 800321e:	1aed      	subeq	r5, r5, r3
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	bf0c      	ite	eq
 8003224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003228:	2500      	movne	r5, #0
 800322a:	4293      	cmp	r3, r2
 800322c:	bfc4      	itt	gt
 800322e:	1a9b      	subgt	r3, r3, r2
 8003230:	18ed      	addgt	r5, r5, r3
 8003232:	2600      	movs	r6, #0
 8003234:	341a      	adds	r4, #26
 8003236:	42b5      	cmp	r5, r6
 8003238:	d11a      	bne.n	8003270 <_printf_common+0xc8>
 800323a:	2000      	movs	r0, #0
 800323c:	e008      	b.n	8003250 <_printf_common+0xa8>
 800323e:	2301      	movs	r3, #1
 8003240:	4652      	mov	r2, sl
 8003242:	4649      	mov	r1, r9
 8003244:	4638      	mov	r0, r7
 8003246:	47c0      	blx	r8
 8003248:	3001      	adds	r0, #1
 800324a:	d103      	bne.n	8003254 <_printf_common+0xac>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003254:	3501      	adds	r5, #1
 8003256:	e7c6      	b.n	80031e6 <_printf_common+0x3e>
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	2030      	movs	r0, #48	; 0x30
 800325e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003262:	4422      	add	r2, r4
 8003264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800326c:	3302      	adds	r3, #2
 800326e:	e7c7      	b.n	8003200 <_printf_common+0x58>
 8003270:	2301      	movs	r3, #1
 8003272:	4622      	mov	r2, r4
 8003274:	4649      	mov	r1, r9
 8003276:	4638      	mov	r0, r7
 8003278:	47c0      	blx	r8
 800327a:	3001      	adds	r0, #1
 800327c:	d0e6      	beq.n	800324c <_printf_common+0xa4>
 800327e:	3601      	adds	r6, #1
 8003280:	e7d9      	b.n	8003236 <_printf_common+0x8e>
	...

08003284 <_printf_i>:
 8003284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	7e0f      	ldrb	r7, [r1, #24]
 800328a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800328c:	2f78      	cmp	r7, #120	; 0x78
 800328e:	4691      	mov	r9, r2
 8003290:	4680      	mov	r8, r0
 8003292:	460c      	mov	r4, r1
 8003294:	469a      	mov	sl, r3
 8003296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800329a:	d807      	bhi.n	80032ac <_printf_i+0x28>
 800329c:	2f62      	cmp	r7, #98	; 0x62
 800329e:	d80a      	bhi.n	80032b6 <_printf_i+0x32>
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f000 80d4 	beq.w	800344e <_printf_i+0x1ca>
 80032a6:	2f58      	cmp	r7, #88	; 0x58
 80032a8:	f000 80c0 	beq.w	800342c <_printf_i+0x1a8>
 80032ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032b4:	e03a      	b.n	800332c <_printf_i+0xa8>
 80032b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ba:	2b15      	cmp	r3, #21
 80032bc:	d8f6      	bhi.n	80032ac <_printf_i+0x28>
 80032be:	a101      	add	r1, pc, #4	; (adr r1, 80032c4 <_printf_i+0x40>)
 80032c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	08003331 	.word	0x08003331
 80032cc:	080032ad 	.word	0x080032ad
 80032d0:	080032ad 	.word	0x080032ad
 80032d4:	080032ad 	.word	0x080032ad
 80032d8:	080032ad 	.word	0x080032ad
 80032dc:	08003331 	.word	0x08003331
 80032e0:	080032ad 	.word	0x080032ad
 80032e4:	080032ad 	.word	0x080032ad
 80032e8:	080032ad 	.word	0x080032ad
 80032ec:	080032ad 	.word	0x080032ad
 80032f0:	08003435 	.word	0x08003435
 80032f4:	0800335d 	.word	0x0800335d
 80032f8:	080033ef 	.word	0x080033ef
 80032fc:	080032ad 	.word	0x080032ad
 8003300:	080032ad 	.word	0x080032ad
 8003304:	08003457 	.word	0x08003457
 8003308:	080032ad 	.word	0x080032ad
 800330c:	0800335d 	.word	0x0800335d
 8003310:	080032ad 	.word	0x080032ad
 8003314:	080032ad 	.word	0x080032ad
 8003318:	080033f7 	.word	0x080033f7
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	1d1a      	adds	r2, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	602a      	str	r2, [r5, #0]
 8003324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800332c:	2301      	movs	r3, #1
 800332e:	e09f      	b.n	8003470 <_printf_i+0x1ec>
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	0607      	lsls	r7, r0, #24
 8003336:	f103 0104 	add.w	r1, r3, #4
 800333a:	6029      	str	r1, [r5, #0]
 800333c:	d501      	bpl.n	8003342 <_printf_i+0xbe>
 800333e:	681e      	ldr	r6, [r3, #0]
 8003340:	e003      	b.n	800334a <_printf_i+0xc6>
 8003342:	0646      	lsls	r6, r0, #25
 8003344:	d5fb      	bpl.n	800333e <_printf_i+0xba>
 8003346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800334a:	2e00      	cmp	r6, #0
 800334c:	da03      	bge.n	8003356 <_printf_i+0xd2>
 800334e:	232d      	movs	r3, #45	; 0x2d
 8003350:	4276      	negs	r6, r6
 8003352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003356:	485a      	ldr	r0, [pc, #360]	; (80034c0 <_printf_i+0x23c>)
 8003358:	230a      	movs	r3, #10
 800335a:	e012      	b.n	8003382 <_printf_i+0xfe>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	1d19      	adds	r1, r3, #4
 8003362:	6029      	str	r1, [r5, #0]
 8003364:	0605      	lsls	r5, r0, #24
 8003366:	d501      	bpl.n	800336c <_printf_i+0xe8>
 8003368:	681e      	ldr	r6, [r3, #0]
 800336a:	e002      	b.n	8003372 <_printf_i+0xee>
 800336c:	0641      	lsls	r1, r0, #25
 800336e:	d5fb      	bpl.n	8003368 <_printf_i+0xe4>
 8003370:	881e      	ldrh	r6, [r3, #0]
 8003372:	4853      	ldr	r0, [pc, #332]	; (80034c0 <_printf_i+0x23c>)
 8003374:	2f6f      	cmp	r7, #111	; 0x6f
 8003376:	bf0c      	ite	eq
 8003378:	2308      	moveq	r3, #8
 800337a:	230a      	movne	r3, #10
 800337c:	2100      	movs	r1, #0
 800337e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003382:	6865      	ldr	r5, [r4, #4]
 8003384:	60a5      	str	r5, [r4, #8]
 8003386:	2d00      	cmp	r5, #0
 8003388:	bfa2      	ittt	ge
 800338a:	6821      	ldrge	r1, [r4, #0]
 800338c:	f021 0104 	bicge.w	r1, r1, #4
 8003390:	6021      	strge	r1, [r4, #0]
 8003392:	b90e      	cbnz	r6, 8003398 <_printf_i+0x114>
 8003394:	2d00      	cmp	r5, #0
 8003396:	d04b      	beq.n	8003430 <_printf_i+0x1ac>
 8003398:	4615      	mov	r5, r2
 800339a:	fbb6 f1f3 	udiv	r1, r6, r3
 800339e:	fb03 6711 	mls	r7, r3, r1, r6
 80033a2:	5dc7      	ldrb	r7, [r0, r7]
 80033a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033a8:	4637      	mov	r7, r6
 80033aa:	42bb      	cmp	r3, r7
 80033ac:	460e      	mov	r6, r1
 80033ae:	d9f4      	bls.n	800339a <_printf_i+0x116>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d10b      	bne.n	80033cc <_printf_i+0x148>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	07de      	lsls	r6, r3, #31
 80033b8:	d508      	bpl.n	80033cc <_printf_i+0x148>
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	6861      	ldr	r1, [r4, #4]
 80033be:	4299      	cmp	r1, r3
 80033c0:	bfde      	ittt	le
 80033c2:	2330      	movle	r3, #48	; 0x30
 80033c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80033cc:	1b52      	subs	r2, r2, r5
 80033ce:	6122      	str	r2, [r4, #16]
 80033d0:	f8cd a000 	str.w	sl, [sp]
 80033d4:	464b      	mov	r3, r9
 80033d6:	aa03      	add	r2, sp, #12
 80033d8:	4621      	mov	r1, r4
 80033da:	4640      	mov	r0, r8
 80033dc:	f7ff fee4 	bl	80031a8 <_printf_common>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d14a      	bne.n	800347a <_printf_i+0x1f6>
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e8:	b004      	add	sp, #16
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	f043 0320 	orr.w	r3, r3, #32
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	4833      	ldr	r0, [pc, #204]	; (80034c4 <_printf_i+0x240>)
 80033f8:	2778      	movs	r7, #120	; 0x78
 80033fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	6829      	ldr	r1, [r5, #0]
 8003402:	061f      	lsls	r7, r3, #24
 8003404:	f851 6b04 	ldr.w	r6, [r1], #4
 8003408:	d402      	bmi.n	8003410 <_printf_i+0x18c>
 800340a:	065f      	lsls	r7, r3, #25
 800340c:	bf48      	it	mi
 800340e:	b2b6      	uxthmi	r6, r6
 8003410:	07df      	lsls	r7, r3, #31
 8003412:	bf48      	it	mi
 8003414:	f043 0320 	orrmi.w	r3, r3, #32
 8003418:	6029      	str	r1, [r5, #0]
 800341a:	bf48      	it	mi
 800341c:	6023      	strmi	r3, [r4, #0]
 800341e:	b91e      	cbnz	r6, 8003428 <_printf_i+0x1a4>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f023 0320 	bic.w	r3, r3, #32
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	2310      	movs	r3, #16
 800342a:	e7a7      	b.n	800337c <_printf_i+0xf8>
 800342c:	4824      	ldr	r0, [pc, #144]	; (80034c0 <_printf_i+0x23c>)
 800342e:	e7e4      	b.n	80033fa <_printf_i+0x176>
 8003430:	4615      	mov	r5, r2
 8003432:	e7bd      	b.n	80033b0 <_printf_i+0x12c>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	6826      	ldr	r6, [r4, #0]
 8003438:	6961      	ldr	r1, [r4, #20]
 800343a:	1d18      	adds	r0, r3, #4
 800343c:	6028      	str	r0, [r5, #0]
 800343e:	0635      	lsls	r5, r6, #24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	d501      	bpl.n	8003448 <_printf_i+0x1c4>
 8003444:	6019      	str	r1, [r3, #0]
 8003446:	e002      	b.n	800344e <_printf_i+0x1ca>
 8003448:	0670      	lsls	r0, r6, #25
 800344a:	d5fb      	bpl.n	8003444 <_printf_i+0x1c0>
 800344c:	8019      	strh	r1, [r3, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	4615      	mov	r5, r2
 8003454:	e7bc      	b.n	80033d0 <_printf_i+0x14c>
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	602a      	str	r2, [r5, #0]
 800345c:	681d      	ldr	r5, [r3, #0]
 800345e:	6862      	ldr	r2, [r4, #4]
 8003460:	2100      	movs	r1, #0
 8003462:	4628      	mov	r0, r5
 8003464:	f7fc feb4 	bl	80001d0 <memchr>
 8003468:	b108      	cbz	r0, 800346e <_printf_i+0x1ea>
 800346a:	1b40      	subs	r0, r0, r5
 800346c:	6060      	str	r0, [r4, #4]
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	2300      	movs	r3, #0
 8003474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003478:	e7aa      	b.n	80033d0 <_printf_i+0x14c>
 800347a:	6923      	ldr	r3, [r4, #16]
 800347c:	462a      	mov	r2, r5
 800347e:	4649      	mov	r1, r9
 8003480:	4640      	mov	r0, r8
 8003482:	47d0      	blx	sl
 8003484:	3001      	adds	r0, #1
 8003486:	d0ad      	beq.n	80033e4 <_printf_i+0x160>
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	079b      	lsls	r3, r3, #30
 800348c:	d413      	bmi.n	80034b6 <_printf_i+0x232>
 800348e:	68e0      	ldr	r0, [r4, #12]
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	4298      	cmp	r0, r3
 8003494:	bfb8      	it	lt
 8003496:	4618      	movlt	r0, r3
 8003498:	e7a6      	b.n	80033e8 <_printf_i+0x164>
 800349a:	2301      	movs	r3, #1
 800349c:	4632      	mov	r2, r6
 800349e:	4649      	mov	r1, r9
 80034a0:	4640      	mov	r0, r8
 80034a2:	47d0      	blx	sl
 80034a4:	3001      	adds	r0, #1
 80034a6:	d09d      	beq.n	80033e4 <_printf_i+0x160>
 80034a8:	3501      	adds	r5, #1
 80034aa:	68e3      	ldr	r3, [r4, #12]
 80034ac:	9903      	ldr	r1, [sp, #12]
 80034ae:	1a5b      	subs	r3, r3, r1
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	dcf2      	bgt.n	800349a <_printf_i+0x216>
 80034b4:	e7eb      	b.n	800348e <_printf_i+0x20a>
 80034b6:	2500      	movs	r5, #0
 80034b8:	f104 0619 	add.w	r6, r4, #25
 80034bc:	e7f5      	b.n	80034aa <_printf_i+0x226>
 80034be:	bf00      	nop
 80034c0:	08003aa1 	.word	0x08003aa1
 80034c4:	08003ab2 	.word	0x08003ab2

080034c8 <__sflush_r>:
 80034c8:	898a      	ldrh	r2, [r1, #12]
 80034ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ce:	4605      	mov	r5, r0
 80034d0:	0710      	lsls	r0, r2, #28
 80034d2:	460c      	mov	r4, r1
 80034d4:	d458      	bmi.n	8003588 <__sflush_r+0xc0>
 80034d6:	684b      	ldr	r3, [r1, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dc05      	bgt.n	80034e8 <__sflush_r+0x20>
 80034dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	dc02      	bgt.n	80034e8 <__sflush_r+0x20>
 80034e2:	2000      	movs	r0, #0
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	d0f9      	beq.n	80034e2 <__sflush_r+0x1a>
 80034ee:	2300      	movs	r3, #0
 80034f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034f4:	682f      	ldr	r7, [r5, #0]
 80034f6:	6a21      	ldr	r1, [r4, #32]
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	d032      	beq.n	8003562 <__sflush_r+0x9a>
 80034fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	075a      	lsls	r2, r3, #29
 8003502:	d505      	bpl.n	8003510 <__sflush_r+0x48>
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	1ac0      	subs	r0, r0, r3
 8003508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800350a:	b10b      	cbz	r3, 8003510 <__sflush_r+0x48>
 800350c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800350e:	1ac0      	subs	r0, r0, r3
 8003510:	2300      	movs	r3, #0
 8003512:	4602      	mov	r2, r0
 8003514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003516:	6a21      	ldr	r1, [r4, #32]
 8003518:	4628      	mov	r0, r5
 800351a:	47b0      	blx	r6
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	d106      	bne.n	8003530 <__sflush_r+0x68>
 8003522:	6829      	ldr	r1, [r5, #0]
 8003524:	291d      	cmp	r1, #29
 8003526:	d82b      	bhi.n	8003580 <__sflush_r+0xb8>
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <__sflush_r+0x108>)
 800352a:	410a      	asrs	r2, r1
 800352c:	07d6      	lsls	r6, r2, #31
 800352e:	d427      	bmi.n	8003580 <__sflush_r+0xb8>
 8003530:	2200      	movs	r2, #0
 8003532:	6062      	str	r2, [r4, #4]
 8003534:	04d9      	lsls	r1, r3, #19
 8003536:	6922      	ldr	r2, [r4, #16]
 8003538:	6022      	str	r2, [r4, #0]
 800353a:	d504      	bpl.n	8003546 <__sflush_r+0x7e>
 800353c:	1c42      	adds	r2, r0, #1
 800353e:	d101      	bne.n	8003544 <__sflush_r+0x7c>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b903      	cbnz	r3, 8003546 <__sflush_r+0x7e>
 8003544:	6560      	str	r0, [r4, #84]	; 0x54
 8003546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003548:	602f      	str	r7, [r5, #0]
 800354a:	2900      	cmp	r1, #0
 800354c:	d0c9      	beq.n	80034e2 <__sflush_r+0x1a>
 800354e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003552:	4299      	cmp	r1, r3
 8003554:	d002      	beq.n	800355c <__sflush_r+0x94>
 8003556:	4628      	mov	r0, r5
 8003558:	f7ff fbea 	bl	8002d30 <_free_r>
 800355c:	2000      	movs	r0, #0
 800355e:	6360      	str	r0, [r4, #52]	; 0x34
 8003560:	e7c0      	b.n	80034e4 <__sflush_r+0x1c>
 8003562:	2301      	movs	r3, #1
 8003564:	4628      	mov	r0, r5
 8003566:	47b0      	blx	r6
 8003568:	1c41      	adds	r1, r0, #1
 800356a:	d1c8      	bne.n	80034fe <__sflush_r+0x36>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0c5      	beq.n	80034fe <__sflush_r+0x36>
 8003572:	2b1d      	cmp	r3, #29
 8003574:	d001      	beq.n	800357a <__sflush_r+0xb2>
 8003576:	2b16      	cmp	r3, #22
 8003578:	d101      	bne.n	800357e <__sflush_r+0xb6>
 800357a:	602f      	str	r7, [r5, #0]
 800357c:	e7b1      	b.n	80034e2 <__sflush_r+0x1a>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	e7ad      	b.n	80034e4 <__sflush_r+0x1c>
 8003588:	690f      	ldr	r7, [r1, #16]
 800358a:	2f00      	cmp	r7, #0
 800358c:	d0a9      	beq.n	80034e2 <__sflush_r+0x1a>
 800358e:	0793      	lsls	r3, r2, #30
 8003590:	680e      	ldr	r6, [r1, #0]
 8003592:	bf08      	it	eq
 8003594:	694b      	ldreq	r3, [r1, #20]
 8003596:	600f      	str	r7, [r1, #0]
 8003598:	bf18      	it	ne
 800359a:	2300      	movne	r3, #0
 800359c:	eba6 0807 	sub.w	r8, r6, r7
 80035a0:	608b      	str	r3, [r1, #8]
 80035a2:	f1b8 0f00 	cmp.w	r8, #0
 80035a6:	dd9c      	ble.n	80034e2 <__sflush_r+0x1a>
 80035a8:	6a21      	ldr	r1, [r4, #32]
 80035aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035ac:	4643      	mov	r3, r8
 80035ae:	463a      	mov	r2, r7
 80035b0:	4628      	mov	r0, r5
 80035b2:	47b0      	blx	r6
 80035b4:	2800      	cmp	r0, #0
 80035b6:	dc06      	bgt.n	80035c6 <__sflush_r+0xfe>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c4:	e78e      	b.n	80034e4 <__sflush_r+0x1c>
 80035c6:	4407      	add	r7, r0
 80035c8:	eba8 0800 	sub.w	r8, r8, r0
 80035cc:	e7e9      	b.n	80035a2 <__sflush_r+0xda>
 80035ce:	bf00      	nop
 80035d0:	dfbffffe 	.word	0xdfbffffe

080035d4 <_fflush_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	690b      	ldr	r3, [r1, #16]
 80035d8:	4605      	mov	r5, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	b913      	cbnz	r3, 80035e4 <_fflush_r+0x10>
 80035de:	2500      	movs	r5, #0
 80035e0:	4628      	mov	r0, r5
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	b118      	cbz	r0, 80035ee <_fflush_r+0x1a>
 80035e6:	6a03      	ldr	r3, [r0, #32]
 80035e8:	b90b      	cbnz	r3, 80035ee <_fflush_r+0x1a>
 80035ea:	f7ff fa93 	bl	8002b14 <__sinit>
 80035ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f3      	beq.n	80035de <_fflush_r+0xa>
 80035f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035f8:	07d0      	lsls	r0, r2, #31
 80035fa:	d404      	bmi.n	8003606 <_fflush_r+0x32>
 80035fc:	0599      	lsls	r1, r3, #22
 80035fe:	d402      	bmi.n	8003606 <_fflush_r+0x32>
 8003600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003602:	f7ff fb93 	bl	8002d2c <__retarget_lock_acquire_recursive>
 8003606:	4628      	mov	r0, r5
 8003608:	4621      	mov	r1, r4
 800360a:	f7ff ff5d 	bl	80034c8 <__sflush_r>
 800360e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003610:	07da      	lsls	r2, r3, #31
 8003612:	4605      	mov	r5, r0
 8003614:	d4e4      	bmi.n	80035e0 <_fflush_r+0xc>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	059b      	lsls	r3, r3, #22
 800361a:	d4e1      	bmi.n	80035e0 <_fflush_r+0xc>
 800361c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361e:	f7ff fb86 	bl	8002d2e <__retarget_lock_release_recursive>
 8003622:	e7dd      	b.n	80035e0 <_fflush_r+0xc>

08003624 <_putc_r>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	460d      	mov	r5, r1
 8003628:	4614      	mov	r4, r2
 800362a:	4606      	mov	r6, r0
 800362c:	b118      	cbz	r0, 8003636 <_putc_r+0x12>
 800362e:	6a03      	ldr	r3, [r0, #32]
 8003630:	b90b      	cbnz	r3, 8003636 <_putc_r+0x12>
 8003632:	f7ff fa6f 	bl	8002b14 <__sinit>
 8003636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003638:	07d8      	lsls	r0, r3, #31
 800363a:	d405      	bmi.n	8003648 <_putc_r+0x24>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	0599      	lsls	r1, r3, #22
 8003640:	d402      	bmi.n	8003648 <_putc_r+0x24>
 8003642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003644:	f7ff fb72 	bl	8002d2c <__retarget_lock_acquire_recursive>
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	da05      	bge.n	800365e <_putc_r+0x3a>
 8003652:	69a2      	ldr	r2, [r4, #24]
 8003654:	4293      	cmp	r3, r2
 8003656:	db12      	blt.n	800367e <_putc_r+0x5a>
 8003658:	b2eb      	uxtb	r3, r5
 800365a:	2b0a      	cmp	r3, #10
 800365c:	d00f      	beq.n	800367e <_putc_r+0x5a>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	701d      	strb	r5, [r3, #0]
 8003666:	b2ed      	uxtb	r5, r5
 8003668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800366a:	07da      	lsls	r2, r3, #31
 800366c:	d405      	bmi.n	800367a <_putc_r+0x56>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	059b      	lsls	r3, r3, #22
 8003672:	d402      	bmi.n	800367a <_putc_r+0x56>
 8003674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003676:	f7ff fb5a 	bl	8002d2e <__retarget_lock_release_recursive>
 800367a:	4628      	mov	r0, r5
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	4629      	mov	r1, r5
 8003680:	4622      	mov	r2, r4
 8003682:	4630      	mov	r0, r6
 8003684:	f000 f802 	bl	800368c <__swbuf_r>
 8003688:	4605      	mov	r5, r0
 800368a:	e7ed      	b.n	8003668 <_putc_r+0x44>

0800368c <__swbuf_r>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	460e      	mov	r6, r1
 8003690:	4614      	mov	r4, r2
 8003692:	4605      	mov	r5, r0
 8003694:	b118      	cbz	r0, 800369e <__swbuf_r+0x12>
 8003696:	6a03      	ldr	r3, [r0, #32]
 8003698:	b90b      	cbnz	r3, 800369e <__swbuf_r+0x12>
 800369a:	f7ff fa3b 	bl	8002b14 <__sinit>
 800369e:	69a3      	ldr	r3, [r4, #24]
 80036a0:	60a3      	str	r3, [r4, #8]
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	071a      	lsls	r2, r3, #28
 80036a6:	d525      	bpl.n	80036f4 <__swbuf_r+0x68>
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	b31b      	cbz	r3, 80036f4 <__swbuf_r+0x68>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	6922      	ldr	r2, [r4, #16]
 80036b0:	1a98      	subs	r0, r3, r2
 80036b2:	6963      	ldr	r3, [r4, #20]
 80036b4:	b2f6      	uxtb	r6, r6
 80036b6:	4283      	cmp	r3, r0
 80036b8:	4637      	mov	r7, r6
 80036ba:	dc04      	bgt.n	80036c6 <__swbuf_r+0x3a>
 80036bc:	4621      	mov	r1, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	f7ff ff88 	bl	80035d4 <_fflush_r>
 80036c4:	b9e0      	cbnz	r0, 8003700 <__swbuf_r+0x74>
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60a3      	str	r3, [r4, #8]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	6022      	str	r2, [r4, #0]
 80036d2:	701e      	strb	r6, [r3, #0]
 80036d4:	6962      	ldr	r2, [r4, #20]
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	429a      	cmp	r2, r3
 80036da:	d004      	beq.n	80036e6 <__swbuf_r+0x5a>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	07db      	lsls	r3, r3, #31
 80036e0:	d506      	bpl.n	80036f0 <__swbuf_r+0x64>
 80036e2:	2e0a      	cmp	r6, #10
 80036e4:	d104      	bne.n	80036f0 <__swbuf_r+0x64>
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff ff73 	bl	80035d4 <_fflush_r>
 80036ee:	b938      	cbnz	r0, 8003700 <__swbuf_r+0x74>
 80036f0:	4638      	mov	r0, r7
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	4621      	mov	r1, r4
 80036f6:	4628      	mov	r0, r5
 80036f8:	f000 f806 	bl	8003708 <__swsetup_r>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d0d5      	beq.n	80036ac <__swbuf_r+0x20>
 8003700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003704:	e7f4      	b.n	80036f0 <__swbuf_r+0x64>
	...

08003708 <__swsetup_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <__swsetup_r+0xac>)
 800370c:	4605      	mov	r5, r0
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	460c      	mov	r4, r1
 8003712:	b118      	cbz	r0, 800371c <__swsetup_r+0x14>
 8003714:	6a03      	ldr	r3, [r0, #32]
 8003716:	b90b      	cbnz	r3, 800371c <__swsetup_r+0x14>
 8003718:	f7ff f9fc 	bl	8002b14 <__sinit>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003722:	0718      	lsls	r0, r3, #28
 8003724:	d422      	bmi.n	800376c <__swsetup_r+0x64>
 8003726:	06d9      	lsls	r1, r3, #27
 8003728:	d407      	bmi.n	800373a <__swsetup_r+0x32>
 800372a:	2309      	movs	r3, #9
 800372c:	602b      	str	r3, [r5, #0]
 800372e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003738:	e034      	b.n	80037a4 <__swsetup_r+0x9c>
 800373a:	0758      	lsls	r0, r3, #29
 800373c:	d512      	bpl.n	8003764 <__swsetup_r+0x5c>
 800373e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003740:	b141      	cbz	r1, 8003754 <__swsetup_r+0x4c>
 8003742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003746:	4299      	cmp	r1, r3
 8003748:	d002      	beq.n	8003750 <__swsetup_r+0x48>
 800374a:	4628      	mov	r0, r5
 800374c:	f7ff faf0 	bl	8002d30 <_free_r>
 8003750:	2300      	movs	r3, #0
 8003752:	6363      	str	r3, [r4, #52]	; 0x34
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	2300      	movs	r3, #0
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	6923      	ldr	r3, [r4, #16]
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f043 0308 	orr.w	r3, r3, #8
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	6923      	ldr	r3, [r4, #16]
 800376e:	b94b      	cbnz	r3, 8003784 <__swsetup_r+0x7c>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377a:	d003      	beq.n	8003784 <__swsetup_r+0x7c>
 800377c:	4621      	mov	r1, r4
 800377e:	4628      	mov	r0, r5
 8003780:	f000 f850 	bl	8003824 <__smakebuf_r>
 8003784:	89a0      	ldrh	r0, [r4, #12]
 8003786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800378a:	f010 0301 	ands.w	r3, r0, #1
 800378e:	d00a      	beq.n	80037a6 <__swsetup_r+0x9e>
 8003790:	2300      	movs	r3, #0
 8003792:	60a3      	str	r3, [r4, #8]
 8003794:	6963      	ldr	r3, [r4, #20]
 8003796:	425b      	negs	r3, r3
 8003798:	61a3      	str	r3, [r4, #24]
 800379a:	6923      	ldr	r3, [r4, #16]
 800379c:	b943      	cbnz	r3, 80037b0 <__swsetup_r+0xa8>
 800379e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037a2:	d1c4      	bne.n	800372e <__swsetup_r+0x26>
 80037a4:	bd38      	pop	{r3, r4, r5, pc}
 80037a6:	0781      	lsls	r1, r0, #30
 80037a8:	bf58      	it	pl
 80037aa:	6963      	ldrpl	r3, [r4, #20]
 80037ac:	60a3      	str	r3, [r4, #8]
 80037ae:	e7f4      	b.n	800379a <__swsetup_r+0x92>
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7f7      	b.n	80037a4 <__swsetup_r+0x9c>
 80037b4:	20000064 	.word	0x20000064

080037b8 <_sbrk_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d06      	ldr	r5, [pc, #24]	; (80037d4 <_sbrk_r+0x1c>)
 80037bc:	2300      	movs	r3, #0
 80037be:	4604      	mov	r4, r0
 80037c0:	4608      	mov	r0, r1
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	f7fd fb12 	bl	8000dec <_sbrk>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_sbrk_r+0x1a>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_sbrk_r+0x1a>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	20000270 	.word	0x20000270

080037d8 <__swhatbuf_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	460c      	mov	r4, r1
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	2900      	cmp	r1, #0
 80037e2:	b096      	sub	sp, #88	; 0x58
 80037e4:	4615      	mov	r5, r2
 80037e6:	461e      	mov	r6, r3
 80037e8:	da0d      	bge.n	8003806 <__swhatbuf_r+0x2e>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037fa:	2340      	movne	r3, #64	; 0x40
 80037fc:	2000      	movs	r0, #0
 80037fe:	6031      	str	r1, [r6, #0]
 8003800:	602b      	str	r3, [r5, #0]
 8003802:	b016      	add	sp, #88	; 0x58
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	466a      	mov	r2, sp
 8003808:	f000 f848 	bl	800389c <_fstat_r>
 800380c:	2800      	cmp	r0, #0
 800380e:	dbec      	blt.n	80037ea <__swhatbuf_r+0x12>
 8003810:	9901      	ldr	r1, [sp, #4]
 8003812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003816:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800381a:	4259      	negs	r1, r3
 800381c:	4159      	adcs	r1, r3
 800381e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003822:	e7eb      	b.n	80037fc <__swhatbuf_r+0x24>

08003824 <__smakebuf_r>:
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003828:	079d      	lsls	r5, r3, #30
 800382a:	4606      	mov	r6, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d507      	bpl.n	8003840 <__smakebuf_r+0x1c>
 8003830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2301      	movs	r3, #1
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	b002      	add	sp, #8
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	ab01      	add	r3, sp, #4
 8003842:	466a      	mov	r2, sp
 8003844:	f7ff ffc8 	bl	80037d8 <__swhatbuf_r>
 8003848:	9900      	ldr	r1, [sp, #0]
 800384a:	4605      	mov	r5, r0
 800384c:	4630      	mov	r0, r6
 800384e:	f7ff fadb 	bl	8002e08 <_malloc_r>
 8003852:	b948      	cbnz	r0, 8003868 <__smakebuf_r+0x44>
 8003854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d4ef      	bmi.n	800383c <__smakebuf_r+0x18>
 800385c:	f023 0303 	bic.w	r3, r3, #3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	e7e3      	b.n	8003830 <__smakebuf_r+0xc>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	6020      	str	r0, [r4, #0]
 800386c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003870:	81a3      	strh	r3, [r4, #12]
 8003872:	9b00      	ldr	r3, [sp, #0]
 8003874:	6163      	str	r3, [r4, #20]
 8003876:	9b01      	ldr	r3, [sp, #4]
 8003878:	6120      	str	r0, [r4, #16]
 800387a:	b15b      	cbz	r3, 8003894 <__smakebuf_r+0x70>
 800387c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f81d 	bl	80038c0 <_isatty_r>
 8003886:	b128      	cbz	r0, 8003894 <__smakebuf_r+0x70>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	431d      	orrs	r5, r3
 8003898:	81a5      	strh	r5, [r4, #12]
 800389a:	e7cf      	b.n	800383c <__smakebuf_r+0x18>

0800389c <_fstat_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	; (80038bc <_fstat_r+0x20>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	f7fd fa96 	bl	8000dda <_fstat>
 80038ae:	1c43      	adds	r3, r0, #1
 80038b0:	d102      	bne.n	80038b8 <_fstat_r+0x1c>
 80038b2:	682b      	ldr	r3, [r5, #0]
 80038b4:	b103      	cbz	r3, 80038b8 <_fstat_r+0x1c>
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	bd38      	pop	{r3, r4, r5, pc}
 80038ba:	bf00      	nop
 80038bc:	20000270 	.word	0x20000270

080038c0 <_isatty_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_isatty_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd fa8a 	bl	8000de4 <_isatty>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_isatty_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_isatty_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20000270 	.word	0x20000270

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
