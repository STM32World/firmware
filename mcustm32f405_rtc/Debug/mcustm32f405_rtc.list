
mcustm32f405_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d50  08002d50  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d58  08002d58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001fc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b4a0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001af6  00000000  00000000  0002b57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000488e  00000000  00000000  0002d071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000007b0  00000000  00000000  00031900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005f2  00000000  00000000  000320b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fddf  00000000  00000000  000326a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000ce21  00000000  00000000  00052481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bf304  00000000  00000000  0005f2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001b04  00000000  00000000  0011e5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c90 	.word	0x08002c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002c90 	.word	0x08002c90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	2400      	movs	r4, #0
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]
 8000578:	9408      	str	r4, [sp, #32]
 800057a:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	9401      	str	r4, [sp, #4]
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0x8c>)
 8000580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000582:	f042 0204 	orr.w	r2, r2, #4
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	f002 0204 	and.w	r2, r2, #4
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	9402      	str	r4, [sp, #8]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005a2:	9202      	str	r2, [sp, #8]
 80005a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0201 	orr.w	r2, r2, #1
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0201 	and.w	r2, r2, #1
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005ce:	4d0b      	ldr	r5, [pc, #44]	; (80005fc <MX_GPIO_Init+0x90>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 fc32 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e2:	2311      	movs	r3, #17
 80005e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	a905      	add	r1, sp, #20
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 fb31 	bl	8000c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f2:	b00b      	add	sp, #44	; 0x2c
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020800 	.word	0x40020800

08000600 <_write>:
    if (fd == 1 || fd == 2) {
 8000600:	3801      	subs	r0, #1
 8000602:	2801      	cmp	r0, #1
 8000604:	d80a      	bhi.n	800061c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000606:	b510      	push	{r4, lr}
 8000608:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060e:	b292      	uxth	r2, r2
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <_write+0x28>)
 8000612:	f001 fb5c 	bl	8001cce <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000616:	b920      	cbnz	r0, 8000622 <_write+0x22>
            return len;
 8000618:	4620      	mov	r0, r4
}
 800061a:	bd10      	pop	{r4, pc}
    return -1;
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000620:	4770      	bx	lr
            return -1;
 8000622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000626:	e7f8      	b.n	800061a <_write+0x1a>
 8000628:	200000a8 	.word	0x200000a8

0800062c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800062e:	e7fe      	b.n	800062e <Error_Handler+0x2>

08000630 <MX_RTC_Init>:
{
 8000630:	b510      	push	{r4, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
  RTC_TimeTypeDef sTime = {0};
 8000634:	2400      	movs	r4, #0
 8000636:	940b      	str	r4, [sp, #44]	; 0x2c
 8000638:	940c      	str	r4, [sp, #48]	; 0x30
 800063a:	940d      	str	r4, [sp, #52]	; 0x34
 800063c:	940e      	str	r4, [sp, #56]	; 0x38
 800063e:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8000640:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000642:	2228      	movs	r2, #40	; 0x28
 8000644:	4621      	mov	r1, r4
 8000646:	4668      	mov	r0, sp
 8000648:	f001 fccd 	bl	8001fe6 <memset>
  hrtc.Instance = RTC;
 800064c:	482d      	ldr	r0, [pc, #180]	; (8000704 <MX_RTC_Init+0xd4>)
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <MX_RTC_Init+0xd8>)
 8000650:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000652:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000654:	237f      	movs	r3, #127	; 0x7f
 8000656:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000658:	23ff      	movs	r3, #255	; 0xff
 800065a:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800065c:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800065e:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000660:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000662:	f001 f832 	bl	80016ca <HAL_RTC_Init>
 8000666:	2800      	cmp	r0, #0
 8000668:	d141      	bne.n	80006ee <MX_RTC_Init+0xbe>
  sTime.Hours = 0x0;
 800066a:	2300      	movs	r3, #0
 800066c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000670:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000674:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000678:	930e      	str	r3, [sp, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800067a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800067c:	2201      	movs	r2, #1
 800067e:	a90b      	add	r1, sp, #44	; 0x2c
 8000680:	4820      	ldr	r0, [pc, #128]	; (8000704 <MX_RTC_Init+0xd4>)
 8000682:	f001 f874 	bl	800176e <HAL_RTC_SetTime>
 8000686:	2800      	cmp	r0, #0
 8000688:	d133      	bne.n	80006f2 <MX_RTC_Init+0xc2>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800068a:	2201      	movs	r2, #1
 800068c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000690:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  sDate.Date = 0x1;
 8000694:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  sDate.Year = 0x0;
 8000698:	2300      	movs	r3, #0
 800069a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800069e:	a90a      	add	r1, sp, #40	; 0x28
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <MX_RTC_Init+0xd4>)
 80006a2:	f001 f8c3 	bl	800182c <HAL_RTC_SetDate>
 80006a6:	bb30      	cbnz	r0, 80006f6 <MX_RTC_Init+0xc6>
  sAlarm.AlarmTime.Hours = 0x0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006ae:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006b2:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006b6:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006b8:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ba:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006bc:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006be:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006c0:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006c2:	2201      	movs	r2, #1
 80006c4:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80006c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006cc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006ce:	4669      	mov	r1, sp
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_RTC_Init+0xd4>)
 80006d2:	f001 f8f9 	bl	80018c8 <HAL_RTC_SetAlarm>
 80006d6:	b980      	cbnz	r0, 80006fa <MX_RTC_Init+0xca>
  sAlarm.Alarm = RTC_ALARM_B;
 80006d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006dc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006de:	2201      	movs	r2, #1
 80006e0:	4669      	mov	r1, sp
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <MX_RTC_Init+0xd4>)
 80006e4:	f001 f8f0 	bl	80018c8 <HAL_RTC_SetAlarm>
 80006e8:	b948      	cbnz	r0, 80006fe <MX_RTC_Init+0xce>
}
 80006ea:	b010      	add	sp, #64	; 0x40
 80006ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006ee:	f7ff ff9d 	bl	800062c <Error_Handler>
    Error_Handler();
 80006f2:	f7ff ff9b 	bl	800062c <Error_Handler>
    Error_Handler();
 80006f6:	f7ff ff99 	bl	800062c <Error_Handler>
    Error_Handler();
 80006fa:	f7ff ff97 	bl	800062c <Error_Handler>
    Error_Handler();
 80006fe:	f7ff ff95 	bl	800062c <Error_Handler>
 8000702:	bf00      	nop
 8000704:	20000088 	.word	0x20000088
 8000708:	40002800 	.word	0x40002800

0800070c <MX_USART1_UART_Init>:
{
 800070c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <MX_USART1_UART_Init+0x2c>)
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_USART1_UART_Init+0x30>)
 8000712:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000714:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000718:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	2300      	movs	r3, #0
 800071c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	220c      	movs	r2, #12
 8000724:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	f001 faa1 	bl	8001c70 <HAL_UART_Init>
 800072e:	b900      	cbnz	r0, 8000732 <MX_USART1_UART_Init+0x26>
}
 8000730:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000732:	f7ff ff7b 	bl	800062c <Error_Handler>
 8000736:	bf00      	nop
 8000738:	200000a8 	.word	0x200000a8
 800073c:	40011000 	.word	0x40011000

08000740 <SystemClock_Config>:
{
 8000740:	b500      	push	{lr}
 8000742:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	2230      	movs	r2, #48	; 0x30
 8000746:	2100      	movs	r1, #0
 8000748:	a808      	add	r0, sp, #32
 800074a:	f001 fc4c 	bl	8001fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2300      	movs	r3, #0
 8000750:	9303      	str	r3, [sp, #12]
 8000752:	9304      	str	r3, [sp, #16]
 8000754:	9305      	str	r3, [sp, #20]
 8000756:	9306      	str	r3, [sp, #24]
 8000758:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <SystemClock_Config+0xa0>)
 800075e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000760:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000764:	6411      	str	r1, [r2, #64]	; 0x40
 8000766:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000768:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <SystemClock_Config+0xa4>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000786:	2301      	movs	r3, #1
 8000788:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000798:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079a:	2208      	movs	r2, #8
 800079c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800079e:	22a8      	movs	r2, #168	; 0xa8
 80007a0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	a808      	add	r0, sp, #32
 80007aa:	f000 fb59 	bl	8000e60 <HAL_RCC_OscConfig>
 80007ae:	b998      	cbnz	r0, 80007d8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c8:	2105      	movs	r1, #5
 80007ca:	a803      	add	r0, sp, #12
 80007cc:	f000 fdac 	bl	8001328 <HAL_RCC_ClockConfig>
 80007d0:	b920      	cbnz	r0, 80007dc <SystemClock_Config+0x9c>
}
 80007d2:	b015      	add	sp, #84	; 0x54
 80007d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007d8:	f7ff ff28 	bl	800062c <Error_Handler>
    Error_Handler();
 80007dc:	f7ff ff26 	bl	800062c <Error_Handler>
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <main>:
{
 80007e8:	b510      	push	{r4, lr}
 80007ea:	b082      	sub	sp, #8
  HAL_Init();
 80007ec:	f000 f9a8 	bl	8000b40 <HAL_Init>
  SystemClock_Config();
 80007f0:	f7ff ffa6 	bl	8000740 <SystemClock_Config>
  MX_GPIO_Init();
 80007f4:	f7ff feba 	bl	800056c <MX_GPIO_Init>
  MX_RTC_Init();
 80007f8:	f7ff ff1a 	bl	8000630 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80007fc:	f7ff ff86 	bl	800070c <MX_USART1_UART_Init>
    DBG("\n\n\n--------\nStarting");
 8000800:	4832      	ldr	r0, [pc, #200]	; (80008cc <main+0xe4>)
 8000802:	f001 fb93 	bl	8001f2c <iprintf>
 8000806:	200a      	movs	r0, #10
 8000808:	f001 fba2 	bl	8001f50 <putchar>
    uint32_t now = 0;
 800080c:	e047      	b.n	800089e <main+0xb6>
            ret = HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800080e:	2200      	movs	r2, #0
 8000810:	492f      	ldr	r1, [pc, #188]	; (80008d0 <main+0xe8>)
 8000812:	4830      	ldr	r0, [pc, #192]	; (80008d4 <main+0xec>)
 8000814:	f001 f91d 	bl	8001a52 <HAL_RTC_GetTime>
            if (ret != HAL_OK) {
 8000818:	b9c0      	cbnz	r0, 800084c <main+0x64>
            ret = HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	492e      	ldr	r1, [pc, #184]	; (80008d8 <main+0xf0>)
 800081e:	482d      	ldr	r0, [pc, #180]	; (80008d4 <main+0xec>)
 8000820:	f001 f93d 	bl	8001a9e <HAL_RTC_GetDate>
            if (ret != HAL_OK) {
 8000824:	b9c8      	cbnz	r0, 800085a <main+0x72>
            DBG("Run time: %d days %02d:%02d:%02d.%02lu", date.Date - 1, time.Hours, time.Minutes, time.Seconds, time.SubSeconds);
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <main+0xf0>)
 8000828:	7899      	ldrb	r1, [r3, #2]
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <main+0xe8>)
 800082c:	7893      	ldrb	r3, [r2, #2]
 800082e:	6850      	ldr	r0, [r2, #4]
 8000830:	9001      	str	r0, [sp, #4]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	7853      	ldrb	r3, [r2, #1]
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	3901      	subs	r1, #1
 800083a:	4828      	ldr	r0, [pc, #160]	; (80008dc <main+0xf4>)
 800083c:	f001 fb76 	bl	8001f2c <iprintf>
 8000840:	200a      	movs	r0, #10
 8000842:	f001 fb85 	bl	8001f50 <putchar>
            last_check = now;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <main+0xf8>)
 8000848:	601c      	str	r4, [r3, #0]
 800084a:	e032      	b.n	80008b2 <main+0xca>
                DBG("Error from RTC");
 800084c:	4825      	ldr	r0, [pc, #148]	; (80008e4 <main+0xfc>)
 800084e:	f001 fb6d 	bl	8001f2c <iprintf>
 8000852:	200a      	movs	r0, #10
 8000854:	f001 fb7c 	bl	8001f50 <putchar>
 8000858:	e7df      	b.n	800081a <main+0x32>
                DBG("Error from RTC");
 800085a:	4822      	ldr	r0, [pc, #136]	; (80008e4 <main+0xfc>)
 800085c:	f001 fb66 	bl	8001f2c <iprintf>
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fb75 	bl	8001f50 <putchar>
 8000866:	e7de      	b.n	8000826 <main+0x3e>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086c:	481e      	ldr	r0, [pc, #120]	; (80008e8 <main+0x100>)
 800086e:	f000 faed 	bl	8000e4c <HAL_GPIO_TogglePin>
            last_blink = now;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <main+0x104>)
 8000874:	601c      	str	r4, [r3, #0]
 8000876:	e022      	b.n	80008be <main+0xd6>
            DBG("Tick %lu", now / 1000);
 8000878:	491d      	ldr	r1, [pc, #116]	; (80008f0 <main+0x108>)
 800087a:	fba1 3104 	umull	r3, r1, r1, r4
 800087e:	0989      	lsrs	r1, r1, #6
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <main+0x10c>)
 8000882:	f001 fb53 	bl	8001f2c <iprintf>
 8000886:	200a      	movs	r0, #10
 8000888:	f001 fb62 	bl	8001f50 <putchar>
            last_tick = now;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <main+0x110>)
 800088e:	601c      	str	r4, [r3, #0]
            loop_count = 0;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <main+0x114>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
        ++loop_count;
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <main+0x114>)
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	6013      	str	r3, [r2, #0]
        now = HAL_GetTick();
 800089e:	f000 f975 	bl	8000b8c <HAL_GetTick>
 80008a2:	4604      	mov	r4, r0
        if (now - last_check >= 60000) {
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <main+0xf8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1ac3      	subs	r3, r0, r3
 80008aa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d8ad      	bhi.n	800080e <main+0x26>
        if (now - last_blink >= 500) {
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <main+0x104>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1ae3      	subs	r3, r4, r3
 80008b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008bc:	d2d4      	bcs.n	8000868 <main+0x80>
        if (now - last_tick >= 1000) {
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <main+0x110>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	1ae3      	subs	r3, r4, r3
 80008c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c8:	d3e5      	bcc.n	8000896 <main+0xae>
 80008ca:	e7d5      	b.n	8000878 <main+0x90>
 80008cc:	08002ca8 	.word	0x08002ca8
 80008d0:	200000fc 	.word	0x200000fc
 80008d4:	20000088 	.word	0x20000088
 80008d8:	20000084 	.word	0x20000084
 80008dc:	08002cd0 	.word	0x08002cd0
 80008e0:	200000f0 	.word	0x200000f0
 80008e4:	08002cc0 	.word	0x08002cc0
 80008e8:	40020800 	.word	0x40020800
 80008ec:	200000ec 	.word	0x200000ec
 80008f0:	10624dd3 	.word	0x10624dd3
 80008f4:	08002cf8 	.word	0x08002cf8
 80008f8:	200000f4 	.word	0x200000f4
 80008fc:	200000f8 	.word	0x200000f8

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2100      	movs	r1, #0
 8000904:	9100      	str	r1, [sp, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x34>)
 8000908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800090a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800090e:	645a      	str	r2, [r3, #68]	; 0x44
 8000910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000912:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	9101      	str	r1, [sp, #4]
 800091c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	b002      	add	sp, #8
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000938:	b500      	push	{lr}
 800093a:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093c:	2300      	movs	r3, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	9303      	str	r3, [sp, #12]
  if(hrtc->Instance==RTC)
 8000946:	6802      	ldr	r2, [r0, #0]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_RTC_MspInit+0x3c>)
 800094a:	429a      	cmp	r2, r3
 800094c:	d002      	beq.n	8000954 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800094e:	b005      	add	sp, #20
 8000950:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000954:	2302      	movs	r3, #2
 8000956:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_RTC_MspInit+0x40>)
 800095a:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	4668      	mov	r0, sp
 800095e:	f000 fdb9 	bl	80014d4 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	b920      	cbnz	r0, 800096e <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_RTC_MspInit+0x44>)
 8000966:	2201      	movs	r2, #1
 8000968:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 800096c:	e7ef      	b.n	800094e <HAL_RTC_MspInit+0x16>
      Error_Handler();
 800096e:	f7ff fe5d 	bl	800062c <Error_Handler>
 8000972:	e7f7      	b.n	8000964 <HAL_RTC_MspInit+0x2c>
 8000974:	40002800 	.word	0x40002800
 8000978:	00100300 	.word	0x00100300
 800097c:	42470000 	.word	0x42470000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b500      	push	{lr}
 8000982:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	2300      	movs	r3, #0
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	9304      	str	r3, [sp, #16]
 800098a:	9305      	str	r3, [sp, #20]
 800098c:	9306      	str	r3, [sp, #24]
 800098e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000990:	6802      	ldr	r2, [r0, #0]
 8000992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000996:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800099a:	429a      	cmp	r2, r3
 800099c:	d002      	beq.n	80009a4 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	2100      	movs	r1, #0
 80009a6:	9101      	str	r1, [sp, #4]
 80009a8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80009ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009ae:	f042 0210 	orr.w	r2, r2, #16
 80009b2:	645a      	str	r2, [r3, #68]	; 0x44
 80009b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b6:	f002 0210 	and.w	r2, r2, #16
 80009ba:	9201      	str	r2, [sp, #4]
 80009bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	9102      	str	r1, [sp, #8]
 80009c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e0:	2307      	movs	r3, #7
 80009e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	a903      	add	r1, sp, #12
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <HAL_UART_MspInit+0x70>)
 80009e8:	f000 f934 	bl	8000c54 <HAL_GPIO_Init>
}
 80009ec:	e7d7      	b.n	800099e <HAL_UART_MspInit+0x1e>
 80009ee:	bf00      	nop
 80009f0:	40020000 	.word	0x40020000

080009f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler>

080009f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler>

080009f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler>

080009fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler>

080009fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler>

080009fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 f8b5 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bd08      	pop	{r3, pc}

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	460c      	mov	r4, r1
 8000a10:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2500      	movs	r5, #0
 8000a14:	e006      	b.n	8000a24 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a22:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	42b5      	cmp	r5, r6
 8000a26:	dbf6      	blt.n	8000a16 <_read+0xa>
  }

  return len;
}
 8000a28:	4630      	mov	r0, r6
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}

08000a2c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <_sbrk+0x38>)
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <_sbrk+0x40>)
 8000a4e:	6800      	ldr	r0, [r0, #0]
 8000a50:	b140      	cbz	r0, 8000a64 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <_sbrk+0x40>)
 8000a54:	6800      	ldr	r0, [r0, #0]
 8000a56:	4403      	add	r3, r0
 8000a58:	1a52      	subs	r2, r2, r1
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d806      	bhi.n	8000a6c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <_sbrk+0x40>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a62:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <_sbrk+0x40>)
 8000a66:	4c08      	ldr	r4, [pc, #32]	; (8000a88 <_sbrk+0x44>)
 8000a68:	6004      	str	r4, [r0, #0]
 8000a6a:	e7f2      	b.n	8000a52 <_sbrk+0xe>
    errno = ENOMEM;
 8000a6c:	f001 fb0a 	bl	8002084 <__errno>
 8000a70:	230c      	movs	r3, #12
 8000a72:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	e7f3      	b.n	8000a62 <_sbrk+0x1e>
 8000a7a:	bf00      	nop
 8000a7c:	20020000 	.word	0x20020000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000110 	.word	0x20000110
 8000a88:	20000268 	.word	0x20000268

08000a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <SystemInit+0x10>)
 8000a8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000abc:	4c0b      	ldr	r4, [pc, #44]	; (8000aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffdf 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f001 fadf 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fe89 	bl	80007e8 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ae4:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 8000ae8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000aec:	20000264 	.word	0x20000264

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_InitTick+0x40>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_InitTick+0x44>)
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0c:	f000 f88e 	bl	8000c2c <HAL_SYSTICK_Config>
 8000b10:	b968      	cbnz	r0, 8000b2e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	2c0f      	cmp	r4, #15
 8000b14:	d901      	bls.n	8000b1a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
 8000b18:	e00a      	b.n	8000b30 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b22:	f000 f84b 	bl	8000bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_InitTick+0x48>)
 8000b28:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b2e:	2001      	movs	r0, #1
}
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	bf00      	nop
 8000b34:	20000004 	.word	0x20000004
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_Init>:
{
 8000b40:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x30>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b5a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f81b 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff ffc6 	bl	8000af4 <HAL_InitTick>
  HAL_MspInit();
 8000b68:	f7ff feca 	bl	8000900 <HAL_MspInit>
}
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b74:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_IncTick+0x10>)
 8000b76:	6811      	ldr	r1, [r2, #0]
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_IncTick+0x14>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000114 	.word	0x20000114
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <HAL_GetTick+0x8>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000114 	.word	0x20000114

08000b98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ba0:	041b      	lsls	r3, r3, #16
 8000ba2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	0200      	lsls	r0, r0, #8
 8000ba6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000baa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bb4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_NVIC_SetPriority+0x68>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc6:	f1c3 0c07 	rsb	ip, r3, #7
 8000bca:	f1bc 0f04 	cmp.w	ip, #4
 8000bce:	bf28      	it	cs
 8000bd0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	f103 0e04 	add.w	lr, r3, #4
 8000bd8:	f1be 0f06 	cmp.w	lr, #6
 8000bdc:	d918      	bls.n	8000c10 <HAL_NVIC_SetPriority+0x54>
 8000bde:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000be4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000be8:	ea21 010c 	bic.w	r1, r1, ip
 8000bec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bee:	fa0e fe03 	lsl.w	lr, lr, r3
 8000bf2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	db0b      	blt.n	8000c14 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c04:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c08:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c0c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c10:	2300      	movs	r3, #0
 8000c12:	e7e5      	b.n	8000be0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	f000 000f 	and.w	r0, r0, #15
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_NVIC_SetPriority+0x6c>)
 8000c1e:	541a      	strb	r2, [r3, r0]
 8000c20:	e7f4      	b.n	8000c0c <HAL_NVIC_SetPriority+0x50>
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	e000ed14 	.word	0xe000ed14

08000c2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	3801      	subs	r0, #1
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c32:	d20b      	bcs.n	8000c4c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c38:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <HAL_SYSTICK_Config+0x24>)
 8000c3c:	21f0      	movs	r1, #240	; 0xf0
 8000c3e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c42:	2000      	movs	r0, #0
 8000c44:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	2207      	movs	r2, #7
 8000c48:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c4c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	f200 80e9 	bhi.w	8000e2e <HAL_GPIO_Init+0x1da>
{
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	e065      	b.n	8000d2e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c62:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c68:	2403      	movs	r4, #3
 8000c6a:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c6e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c72:	68cc      	ldr	r4, [r1, #12]
 8000c74:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c78:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000c7a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c82:	684a      	ldr	r2, [r1, #4]
 8000c84:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000c8c:	6042      	str	r2, [r0, #4]
 8000c8e:	e05c      	b.n	8000d4a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c90:	08dc      	lsrs	r4, r3, #3
 8000c92:	3408      	adds	r4, #8
 8000c94:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c98:	f003 0507 	and.w	r5, r3, #7
 8000c9c:	00ad      	lsls	r5, r5, #2
 8000c9e:	f04f 0e0f 	mov.w	lr, #15
 8000ca2:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ca6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000caa:	690a      	ldr	r2, [r1, #16]
 8000cac:	40aa      	lsls	r2, r5
 8000cae:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000cb2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000cb6:	e05c      	b.n	8000d72 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb8:	2207      	movs	r2, #7
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cc2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc4:	3402      	adds	r4, #2
 8000cc6:	4d5a      	ldr	r5, [pc, #360]	; (8000e30 <HAL_GPIO_Init+0x1dc>)
 8000cc8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ccc:	4a59      	ldr	r2, [pc, #356]	; (8000e34 <HAL_GPIO_Init+0x1e0>)
 8000cce:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cd0:	ea6f 020c 	mvn.w	r2, ip
 8000cd4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cd8:	684e      	ldr	r6, [r1, #4]
 8000cda:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000cde:	d001      	beq.n	8000ce4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000ce0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000ce4:	4c53      	ldr	r4, [pc, #332]	; (8000e34 <HAL_GPIO_Init+0x1e0>)
 8000ce6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000ce8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cee:	684e      	ldr	r6, [r1, #4]
 8000cf0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000cf4:	d001      	beq.n	8000cfa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000cf6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000cfa:	4c4e      	ldr	r4, [pc, #312]	; (8000e34 <HAL_GPIO_Init+0x1e0>)
 8000cfc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000cfe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d04:	684e      	ldr	r6, [r1, #4]
 8000d06:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000d0a:	d001      	beq.n	8000d10 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d0c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d10:	4c48      	ldr	r4, [pc, #288]	; (8000e34 <HAL_GPIO_Init+0x1e0>)
 8000d12:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d14:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d18:	684d      	ldr	r5, [r1, #4]
 8000d1a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000d1e:	d001      	beq.n	8000d24 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d20:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d24:	4c43      	ldr	r4, [pc, #268]	; (8000e34 <HAL_GPIO_Init+0x1e0>)
 8000d26:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d87d      	bhi.n	8000e2a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	680c      	ldr	r4, [r1, #0]
 8000d34:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d38:	ea32 0404 	bics.w	r4, r2, r4
 8000d3c:	d1f4      	bne.n	8000d28 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	684c      	ldr	r4, [r1, #4]
 8000d40:	f004 0403 	and.w	r4, r4, #3
 8000d44:	3c01      	subs	r4, #1
 8000d46:	2c01      	cmp	r4, #1
 8000d48:	d98b      	bls.n	8000c62 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	684a      	ldr	r2, [r1, #4]
 8000d4c:	f002 0203 	and.w	r2, r2, #3
 8000d50:	2a03      	cmp	r2, #3
 8000d52:	d009      	beq.n	8000d68 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000d54:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d56:	005d      	lsls	r5, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	40aa      	lsls	r2, r5
 8000d5c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d60:	688a      	ldr	r2, [r1, #8]
 8000d62:	40aa      	lsls	r2, r5
 8000d64:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d66:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	684a      	ldr	r2, [r1, #4]
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	2a02      	cmp	r2, #2
 8000d70:	d08e      	beq.n	8000c90 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d72:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d74:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d7e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	684a      	ldr	r2, [r1, #4]
 8000d84:	f002 0203 	and.w	r2, r2, #3
 8000d88:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d8c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	684a      	ldr	r2, [r1, #4]
 8000d92:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000d96:	d0c7      	beq.n	8000d28 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	2200      	movs	r2, #0
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_GPIO_Init+0x1e4>)
 8000d9e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000da0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000da4:	6454      	str	r4, [r2, #68]	; 0x44
 8000da6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000da8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dac:	9201      	str	r2, [sp, #4]
 8000dae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000db0:	089c      	lsrs	r4, r3, #2
 8000db2:	1ca5      	adds	r5, r4, #2
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_GPIO_Init+0x1dc>)
 8000db6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dba:	f003 0e03 	and.w	lr, r3, #3
 8000dbe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dc8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_GPIO_Init+0x1e8>)
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f43f af74 	beq.w	8000cbc <HAL_GPIO_Init+0x68>
 8000dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d01a      	beq.n	8000e12 <HAL_GPIO_Init+0x1be>
 8000ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d018      	beq.n	8000e16 <HAL_GPIO_Init+0x1c2>
 8000de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de8:	4290      	cmp	r0, r2
 8000dea:	d016      	beq.n	8000e1a <HAL_GPIO_Init+0x1c6>
 8000dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d014      	beq.n	8000e1e <HAL_GPIO_Init+0x1ca>
 8000df4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	d012      	beq.n	8000e22 <HAL_GPIO_Init+0x1ce>
 8000dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e00:	4290      	cmp	r0, r2
 8000e02:	d010      	beq.n	8000e26 <HAL_GPIO_Init+0x1d2>
 8000e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e08:	4290      	cmp	r0, r2
 8000e0a:	f43f af55 	beq.w	8000cb8 <HAL_GPIO_Init+0x64>
 8000e0e:	2208      	movs	r2, #8
 8000e10:	e755      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e12:	2201      	movs	r2, #1
 8000e14:	e753      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e16:	2202      	movs	r2, #2
 8000e18:	e751      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	e74f      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e1e:	2204      	movs	r2, #4
 8000e20:	e74d      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e22:	2205      	movs	r2, #5
 8000e24:	e74b      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
 8000e26:	2206      	movs	r2, #6
 8000e28:	e749      	b.n	8000cbe <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
 8000e2e:	4770      	bx	lr
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40013c00 	.word	0x40013c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e40:	b10a      	cbz	r2, 8000e46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	6181      	str	r1, [r0, #24]
 8000e44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	6181      	str	r1, [r0, #24]
  }
}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e4c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e4e:	ea01 0203 	and.w	r2, r1, r3
 8000e52:	ea21 0103 	bic.w	r1, r1, r3
 8000e56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e5a:	6181      	str	r1, [r0, #24]
}
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	2800      	cmp	r0, #0
 8000e62:	f000 81e0 	beq.w	8001226 <HAL_RCC_OscConfig+0x3c6>
{
 8000e66:	b570      	push	{r4, r5, r6, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6c:	6803      	ldr	r3, [r0, #0]
 8000e6e:	f013 0f01 	tst.w	r3, #1
 8000e72:	d03b      	beq.n	8000eec <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e74:	4b9f      	ldr	r3, [pc, #636]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d02c      	beq.n	8000eda <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e80:	4b9c      	ldr	r3, [pc, #624]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d021      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e92:	d04f      	beq.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e98:	d052      	beq.n	8000f40 <HAL_RCC_OscConfig+0xe0>
 8000e9a:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d050      	beq.n	8000f54 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fe6b 	bl	8000b8c <HAL_GetTick>
 8000eb6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb8:	4b8e      	ldr	r3, [pc, #568]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ec0:	d114      	bne.n	8000eec <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fe63 	bl	8000b8c <HAL_GetTick>
 8000ec6:	1b40      	subs	r0, r0, r5
 8000ec8:	2864      	cmp	r0, #100	; 0x64
 8000eca:	d9f5      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000ecc:	2003      	movs	r0, #3
 8000ece:	e1b1      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed0:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ed8:	d0d8      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eda:	4b86      	ldr	r3, [pc, #536]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ee2:	d003      	beq.n	8000eec <HAL_RCC_OscConfig+0x8c>
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 819f 	beq.w	800122a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	f013 0f02 	tst.w	r3, #2
 8000ef2:	d054      	beq.n	8000f9e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ef4:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f013 0f0c 	tst.w	r3, #12
 8000efc:	d03e      	beq.n	8000f7c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000efe:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d033      	beq.n	8000f72 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f0a:	68e3      	ldr	r3, [r4, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d068      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f10:	4b79      	ldr	r3, [pc, #484]	; (80010f8 <HAL_RCC_OscConfig+0x298>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f16:	f7ff fe39 	bl	8000b8c <HAL_GetTick>
 8000f1a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f013 0f02 	tst.w	r3, #2
 8000f24:	d154      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fe31 	bl	8000b8c <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f5      	bls.n	8000f1c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e17f      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	4a6f      	ldr	r2, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f36:	6813      	ldr	r3, [r2, #0]
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e7b5      	b.n	8000eac <HAL_RCC_OscConfig+0x4c>
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e7ab      	b.n	8000eac <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000f54:	f7ff fe1a 	bl	8000b8c <HAL_GetTick>
 8000f58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f62:	d0c3      	beq.n	8000eec <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fe12 	bl	8000b8c <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2864      	cmp	r0, #100	; 0x64
 8000f6c:	d9f5      	bls.n	8000f5a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000f6e:	2003      	movs	r0, #3
 8000f70:	e160      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f72:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f7a:	d1c6      	bne.n	8000f0a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7c:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	d003      	beq.n	8000f8e <HAL_RCC_OscConfig+0x12e>
 8000f86:	68e3      	ldr	r3, [r4, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 8150 	bne.w	800122e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4a59      	ldr	r2, [pc, #356]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000f90:	6813      	ldr	r3, [r2, #0]
 8000f92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f96:	6921      	ldr	r1, [r4, #16]
 8000f98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f9c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	f013 0f08 	tst.w	r3, #8
 8000fa4:	d042      	beq.n	800102c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fa6:	6963      	ldr	r3, [r4, #20]
 8000fa8:	b36b      	cbz	r3, 8001006 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x298>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fdeb 	bl	8000b8c <HAL_GetTick>
 8000fb6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fbc:	f013 0f02 	tst.w	r3, #2
 8000fc0:	d134      	bne.n	800102c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fde3 	bl	8000b8c <HAL_GetTick>
 8000fc6:	1b40      	subs	r0, r0, r5
 8000fc8:	2802      	cmp	r0, #2
 8000fca:	d9f5      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000fcc:	2003      	movs	r0, #3
 8000fce:	e131      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fd8:	6921      	ldr	r1, [r4, #16]
 8000fda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e7dd      	b.n	8000f9e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <HAL_RCC_OscConfig+0x298>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fdd0 	bl	8000b8c <HAL_GetTick>
 8000fec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f013 0f02 	tst.w	r3, #2
 8000ff6:	d0d2      	beq.n	8000f9e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fdc8 	bl	8000b8c <HAL_GetTick>
 8000ffc:	1b40      	subs	r0, r0, r5
 8000ffe:	2802      	cmp	r0, #2
 8001000:	d9f5      	bls.n	8000fee <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001002:	2003      	movs	r0, #3
 8001004:	e116      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <HAL_RCC_OscConfig+0x298>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fdbd 	bl	8000b8c <HAL_GetTick>
 8001012:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8001016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001018:	f013 0f02 	tst.w	r3, #2
 800101c:	d006      	beq.n	800102c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101e:	f7ff fdb5 	bl	8000b8c <HAL_GetTick>
 8001022:	1b40      	subs	r0, r0, r5
 8001024:	2802      	cmp	r0, #2
 8001026:	d9f5      	bls.n	8001014 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001028:	2003      	movs	r0, #3
 800102a:	e103      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	f013 0f04 	tst.w	r3, #4
 8001032:	d077      	beq.n	8001124 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800103c:	d133      	bne.n	80010a6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 8001044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001046:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001056:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_RCC_OscConfig+0x29c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001060:	d023      	beq.n	80010aa <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001062:	68a3      	ldr	r3, [r4, #8]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d034      	beq.n	80010d2 <HAL_RCC_OscConfig+0x272>
 8001068:	2b05      	cmp	r3, #5
 800106a:	d038      	beq.n	80010de <HAL_RCC_OscConfig+0x27e>
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 800106e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	671a      	str	r2, [r3, #112]	; 0x70
 8001076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001078:	f022 0204 	bic.w	r2, r2, #4
 800107c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03d      	beq.n	8001100 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001084:	f7ff fd82 	bl	8000b8c <HAL_GetTick>
 8001088:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108e:	f013 0f02 	tst.w	r3, #2
 8001092:	d146      	bne.n	8001122 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fd7a 	bl	8000b8c <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	f241 3388 	movw	r3, #5000	; 0x1388
 800109e:	4298      	cmp	r0, r3
 80010a0:	d9f3      	bls.n	800108a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80010a2:	2003      	movs	r0, #3
 80010a4:	e0c6      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80010a6:	2500      	movs	r5, #0
 80010a8:	e7d6      	b.n	8001058 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_RCC_OscConfig+0x29c>)
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010b4:	f7ff fd6a 	bl	8000b8c <HAL_GetTick>
 80010b8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_OscConfig+0x29c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010c2:	d1ce      	bne.n	8001062 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c4:	f7ff fd62 	bl	8000b8c <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	2802      	cmp	r0, #2
 80010cc:	d9f5      	bls.n	80010ba <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80010ce:	2003      	movs	r0, #3
 80010d0:	e0b0      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 80010d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6713      	str	r3, [r2, #112]	; 0x70
 80010dc:	e7cf      	b.n	800107e <HAL_RCC_OscConfig+0x21e>
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_RCC_OscConfig+0x294>)
 80010e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010e2:	f042 0204 	orr.w	r2, r2, #4
 80010e6:	671a      	str	r2, [r3, #112]	; 0x70
 80010e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	671a      	str	r2, [r3, #112]	; 0x70
 80010f0:	e7c5      	b.n	800107e <HAL_RCC_OscConfig+0x21e>
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	42470000 	.word	0x42470000
 80010fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fd44 	bl	8000b8c <HAL_GetTick>
 8001104:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001106:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 8001108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800110a:	f013 0f02 	tst.w	r3, #2
 800110e:	d008      	beq.n	8001122 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fd3c 	bl	8000b8c <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	f241 3388 	movw	r3, #5000	; 0x1388
 800111a:	4298      	cmp	r0, r3
 800111c:	d9f3      	bls.n	8001106 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e088      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001122:	b9ed      	cbnz	r5, 8001160 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001124:	69a3      	ldr	r3, [r4, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8083 	beq.w	8001232 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 800112e:	6892      	ldr	r2, [r2, #8]
 8001130:	f002 020c 	and.w	r2, r2, #12
 8001134:	2a08      	cmp	r2, #8
 8001136:	d051      	beq.n	80011dc <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001138:	2b02      	cmp	r3, #2
 800113a:	d017      	beq.n	800116c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113c:	4b45      	ldr	r3, [pc, #276]	; (8001254 <HAL_RCC_OscConfig+0x3f4>)
 800113e:	2200      	movs	r2, #0
 8001140:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fd23 	bl	8000b8c <HAL_GetTick>
 8001146:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001150:	d042      	beq.n	80011d8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fd1b 	bl	8000b8c <HAL_GetTick>
 8001156:	1b00      	subs	r0, r0, r4
 8001158:	2802      	cmp	r0, #2
 800115a:	d9f5      	bls.n	8001148 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e069      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 8001162:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	e7db      	b.n	8001124 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x3f4>)
 800116e:	2200      	movs	r2, #0
 8001170:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001172:	f7ff fd0b 	bl	8000b8c <HAL_GetTick>
 8001176:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001180:	d006      	beq.n	8001190 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff fd03 	bl	8000b8c <HAL_GetTick>
 8001186:	1b40      	subs	r0, r0, r5
 8001188:	2802      	cmp	r0, #2
 800118a:	d9f5      	bls.n	8001178 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e051      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001190:	69e3      	ldr	r3, [r4, #28]
 8001192:	6a22      	ldr	r2, [r4, #32]
 8001194:	4313      	orrs	r3, r2
 8001196:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001198:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800119c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800119e:	0852      	lsrs	r2, r2, #1
 80011a0:	3a01      	subs	r2, #1
 80011a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 80011ae:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_RCC_OscConfig+0x3f4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011b6:	f7ff fce9 	bl	8000b8c <HAL_GetTick>
 80011ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fce1 	bl	8000b8c <HAL_GetTick>
 80011ca:	1b00      	subs	r0, r0, r4
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9f5      	bls.n	80011bc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80011d0:	2003      	movs	r0, #3
 80011d2:	e02f      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
 80011d6:	e02d      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 80011d8:	2000      	movs	r0, #0
 80011da:	e02b      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d02b      	beq.n	8001238 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_RCC_OscConfig+0x3f0>)
 80011e2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80011e8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ea:	4291      	cmp	r1, r2
 80011ec:	d126      	bne.n	800123c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011f2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f4:	428a      	cmp	r2, r1
 80011f6:	d123      	bne.n	8001240 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011fa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80011fe:	401a      	ands	r2, r3
 8001200:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001204:	d11e      	bne.n	8001244 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001206:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800120a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800120c:	0852      	lsrs	r2, r2, #1
 800120e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001210:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001216:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800121a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800121c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001220:	d114      	bne.n	800124c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001222:	2000      	movs	r0, #0
 8001224:	e006      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
}
 8001228:	4770      	bx	lr
        return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
 800122c:	e002      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
 8001230:	e000      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001232:	2000      	movs	r0, #0
}
 8001234:	b002      	add	sp, #8
 8001236:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	e7fb      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800123c:	2001      	movs	r0, #1
 800123e:	e7f9      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 8001240:	2001      	movs	r0, #1
 8001242:	e7f7      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 8001244:	2001      	movs	r0, #1
 8001246:	e7f5      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 8001248:	2001      	movs	r0, #1
 800124a:	e7f3      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 800124c:	2001      	movs	r0, #1
 800124e:	e7f1      	b.n	8001234 <HAL_RCC_OscConfig+0x3d4>
 8001250:	40023800 	.word	0x40023800
 8001254:	42470000 	.word	0x42470000

08001258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc8>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d001      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001266:	482f      	ldr	r0, [pc, #188]	; (8001324 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001268:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc8>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001278:	d02c      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc8>)
 800127c:	6858      	ldr	r0, [r3, #4]
 800127e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001282:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001286:	ebbc 0c00 	subs.w	ip, ip, r0
 800128a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800128e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001292:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001296:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800129a:	ebb1 010c 	subs.w	r1, r1, ip
 800129e:	eb63 030e 	sbc.w	r3, r3, lr
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012a8:	00c9      	lsls	r1, r1, #3
 80012aa:	eb11 0c00 	adds.w	ip, r1, r0
 80012ae:	f143 0300 	adc.w	r3, r3, #0
 80012b2:	0299      	lsls	r1, r3, #10
 80012b4:	2300      	movs	r3, #0
 80012b6:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80012ba:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80012be:	f7fe ffd7 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012ca:	3301      	adds	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80012ce:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80012d2:	e7c9      	b.n	8001268 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012d6:	6858      	ldr	r0, [r3, #4]
 80012d8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80012dc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80012e0:	ebbc 0c00 	subs.w	ip, ip, r0
 80012e4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80012e8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80012ec:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80012f0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80012f4:	ebb1 010c 	subs.w	r1, r1, ip
 80012f8:	eb63 030e 	sbc.w	r3, r3, lr
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001302:	00c9      	lsls	r1, r1, #3
 8001304:	eb11 0c00 	adds.w	ip, r1, r0
 8001308:	f143 0300 	adc.w	r3, r3, #0
 800130c:	0299      	lsls	r1, r3, #10
 800130e:	2300      	movs	r3, #0
 8001310:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001314:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001318:	f7fe ffaa 	bl	8000270 <__aeabi_uldivmod>
 800131c:	e7d1      	b.n	80012c2 <HAL_RCC_GetSysClockFreq+0x6a>
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	00f42400 	.word	0x00f42400

08001328 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001328:	2800      	cmp	r0, #0
 800132a:	f000 809b 	beq.w	8001464 <HAL_RCC_ClockConfig+0x13c>
{
 800132e:	b570      	push	{r4, r5, r6, lr}
 8001330:	460d      	mov	r5, r1
 8001332:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_RCC_ClockConfig+0x14c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	428b      	cmp	r3, r1
 800133e:	d208      	bcs.n	8001352 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001340:	b2cb      	uxtb	r3, r1
 8001342:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <HAL_RCC_ClockConfig+0x14c>)
 8001344:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	428b      	cmp	r3, r1
 800134e:	f040 808b 	bne.w	8001468 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	f013 0f02 	tst.w	r3, #2
 8001358:	d017      	beq.n	800138a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	f013 0f04 	tst.w	r3, #4
 800135e:	d004      	beq.n	800136a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 8001362:	6893      	ldr	r3, [r2, #8]
 8001364:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001368:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	f013 0f08 	tst.w	r3, #8
 8001370:	d004      	beq.n	800137c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800137a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 800137e:	6893      	ldr	r3, [r2, #8]
 8001380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001384:	68a1      	ldr	r1, [r4, #8]
 8001386:	430b      	orrs	r3, r1
 8001388:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f013 0f01 	tst.w	r3, #1
 8001390:	d032      	beq.n	80013f8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001392:	6863      	ldr	r3, [r4, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d021      	beq.n	80013dc <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001398:	1e9a      	subs	r2, r3, #2
 800139a:	2a01      	cmp	r2, #1
 800139c:	d925      	bls.n	80013ea <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	f012 0f02 	tst.w	r2, #2
 80013a6:	d061      	beq.n	800146c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a8:	4933      	ldr	r1, [pc, #204]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 80013aa:	688a      	ldr	r2, [r1, #8]
 80013ac:	f022 0203 	bic.w	r2, r2, #3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013b4:	f7ff fbea 	bl	8000b8c <HAL_GetTick>
 80013b8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	6862      	ldr	r2, [r4, #4]
 80013c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ca:	f7ff fbdf 	bl	8000b8c <HAL_GetTick>
 80013ce:	1b80      	subs	r0, r0, r6
 80013d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d4:	4298      	cmp	r0, r3
 80013d6:	d9f0      	bls.n	80013ba <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80013d8:	2003      	movs	r0, #3
 80013da:	e042      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80013e4:	d1e0      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
 80013e8:	e03b      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013f2:	d1d9      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
 80013f6:	e034      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_RCC_ClockConfig+0x14c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	42ab      	cmp	r3, r5
 8001402:	d907      	bls.n	8001414 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001404:	b2ea      	uxtb	r2, r5
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_ClockConfig+0x14c>)
 8001408:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	42ab      	cmp	r3, r5
 8001412:	d12d      	bne.n	8001470 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	f013 0f04 	tst.w	r3, #4
 800141a:	d006      	beq.n	800142a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 800141e:	6893      	ldr	r3, [r2, #8]
 8001420:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001424:	68e1      	ldr	r1, [r4, #12]
 8001426:	430b      	orrs	r3, r1
 8001428:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	f013 0f08 	tst.w	r3, #8
 8001430:	d007      	beq.n	8001442 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 8001434:	6893      	ldr	r3, [r2, #8]
 8001436:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800143a:	6921      	ldr	r1, [r4, #16]
 800143c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001440:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001442:	f7ff ff09 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_ClockConfig+0x150>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_RCC_ClockConfig+0x154>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	40d8      	lsrs	r0, r3
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_RCC_ClockConfig+0x158>)
 8001456:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_ClockConfig+0x15c>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	f7ff fb4a 	bl	8000af4 <HAL_InitTick>
  return HAL_OK;
 8001460:	2000      	movs	r0, #0
}
 8001462:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
}
 8001466:	4770      	bx	lr
      return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	e7fa      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
 800146e:	e7f8      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
 8001472:	e7f6      	b.n	8001462 <HAL_RCC_ClockConfig+0x13a>
 8001474:	40023c00 	.word	0x40023c00
 8001478:	40023800 	.word	0x40023800
 800147c:	08002d04 	.word	0x08002d04
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001488:	4b01      	ldr	r3, [pc, #4]	; (8001490 <HAL_RCC_GetHCLKFreq+0x8>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001496:	f7ff fff7 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80014a6:	40d8      	lsrs	r0, r3
 80014a8:	bd08      	pop	{r3, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	08002d14 	.word	0x08002d14

080014b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014b6:	f7ff ffe7 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80014c6:	40d8      	lsrs	r0, r3
 80014c8:	bd08      	pop	{r3, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	08002d14 	.word	0x08002d14

080014d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	f013 0f05 	tst.w	r3, #5
 80014e0:	d106      	bne.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	f013 0f02 	tst.w	r3, #2
 80014e8:	d12e      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	b003      	add	sp, #12
 80014ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80014f0:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80014f6:	f7ff fb49 	bl	8000b8c <HAL_GetTick>
 80014fa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001504:	d006      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001506:	f7ff fb41 	bl	8000b8c <HAL_GetTick>
 800150a:	1b43      	subs	r3, r0, r5
 800150c:	2b02      	cmp	r3, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e7eb      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001514:	6862      	ldr	r2, [r4, #4]
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	071b      	lsls	r3, r3, #28
 800151a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800151e:	4a40      	ldr	r2, [pc, #256]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001526:	2201      	movs	r2, #1
 8001528:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800152a:	f7ff fb2f 	bl	8000b8c <HAL_GetTick>
 800152e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001530:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001538:	d1d3      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800153a:	f7ff fb27 	bl	8000b8c <HAL_GetTick>
 800153e:	1b43      	subs	r3, r0, r5
 8001540:	2b02      	cmp	r3, #2
 8001542:	d9f5      	bls.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e7d1      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800154e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001550:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001560:	4a30      	ldr	r2, [pc, #192]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001562:	6813      	ldr	r3, [r2, #0]
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800156a:	f7ff fb0f 	bl	8000b8c <HAL_GetTick>
 800156e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001578:	d106      	bne.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fb07 	bl	8000b8c <HAL_GetTick>
 800157e:	1b43      	subs	r3, r0, r5
 8001580:	2b02      	cmp	r3, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e7b1      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800158c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001590:	d014      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001592:	68e2      	ldr	r2, [r4, #12]
 8001594:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001598:	429a      	cmp	r2, r3
 800159a:	d00f      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800159e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80015a4:	491d      	ldr	r1, [pc, #116]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80015a6:	2001      	movs	r0, #1
 80015a8:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015ac:	2000      	movs	r0, #0
 80015ae:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80015b2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f013 0f01 	tst.w	r3, #1
 80015ba:	d113      	bne.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015bc:	68e3      	ldr	r3, [r4, #12]
 80015be:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80015c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80015c6:	d01e      	beq.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80015ca:	6893      	ldr	r3, [r2, #8]
 80015cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80015d0:	6093      	str	r3, [r2, #8]
 80015d2:	4913      	ldr	r1, [pc, #76]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80015d4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80015d6:	68e2      	ldr	r2, [r4, #12]
 80015d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015dc:	4313      	orrs	r3, r2
 80015de:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80015e0:	2000      	movs	r0, #0
 80015e2:	e783      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80015e4:	f7ff fad2 	bl	8000b8c <HAL_GetTick>
 80015e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f013 0f02 	tst.w	r3, #2
 80015f2:	d1e3      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff faca 	bl	8000b8c <HAL_GetTick>
 80015f8:	1b40      	subs	r0, r0, r5
 80015fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80015fe:	4298      	cmp	r0, r3
 8001600:	d9f3      	bls.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
 8001604:	e772      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001606:	4906      	ldr	r1, [pc, #24]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001608:	688a      	ldr	r2, [r1, #8]
 800160a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800160e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
 800161a:	e7da      	b.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800161c:	42470000 	.word	0x42470000
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001628:	b538      	push	{r3, r4, r5, lr}
 800162a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800162c:	6802      	ldr	r2, [r0, #0]
 800162e:	68d3      	ldr	r3, [r2, #12]
 8001630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001634:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001636:	f7ff faa9 	bl	8000b8c <HAL_GetTick>
 800163a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f013 0f20 	tst.w	r3, #32
 8001644:	d107      	bne.n	8001656 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001646:	f7ff faa1 	bl	8000b8c <HAL_GetTick>
 800164a:	1b40      	subs	r0, r0, r5
 800164c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001650:	d9f4      	bls.n	800163c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
 8001654:	e000      	b.n	8001658 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8001656:	2000      	movs	r0, #0
}
 8001658:	bd38      	pop	{r3, r4, r5, pc}

0800165a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800165a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001664:	d002      	beq.n	800166c <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8001668:	4628      	mov	r0, r5
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001674:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001676:	f7ff fa89 	bl	8000b8c <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001686:	d1ef      	bne.n	8001668 <RTC_EnterInitMode+0xe>
 8001688:	2d00      	cmp	r5, #0
 800168a:	d1ed      	bne.n	8001668 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800168c:	f7ff fa7e 	bl	8000b8c <HAL_GetTick>
 8001690:	1b83      	subs	r3, r0, r6
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d9f2      	bls.n	800167e <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001698:	2304      	movs	r3, #4
 800169a:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 800169c:	2501      	movs	r5, #1
 800169e:	e7ee      	b.n	800167e <RTC_EnterInitMode+0x24>

080016a0 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80016a0:	6802      	ldr	r2, [r0, #0]
 80016a2:	68d3      	ldr	r3, [r2, #12]
 80016a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a8:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80016aa:	6803      	ldr	r3, [r0, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f013 0f20 	tst.w	r3, #32
 80016b2:	d001      	beq.n	80016b8 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80016b6:	4770      	bx	lr
{
 80016b8:	b510      	push	{r4, lr}
 80016ba:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016bc:	f7ff ffb4 	bl	8001628 <HAL_RTC_WaitForSynchro>
 80016c0:	b110      	cbz	r0, 80016c8 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80016c2:	2304      	movs	r3, #4
 80016c4:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
}
 80016c8:	bd10      	pop	{r4, pc}

080016ca <HAL_RTC_Init>:
  if (hrtc == NULL)
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d041      	beq.n	8001752 <HAL_RTC_Init+0x88>
{
 80016ce:	b510      	push	{r4, lr}
 80016d0:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80016d2:	7f43      	ldrb	r3, [r0, #29]
 80016d4:	b1e3      	cbz	r3, 8001710 <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	22ca      	movs	r2, #202	; 0xca
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	2253      	movs	r2, #83	; 0x53
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ffb7 	bl	800165a <RTC_EnterInitMode>
  if (status == HAL_OK)
 80016ec:	b1a0      	cbz	r0, 8001718 <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 80016ee:	b958      	cbnz	r0, 8001708 <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80016f0:	6822      	ldr	r2, [r4, #0]
 80016f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016fe:	69a1      	ldr	r1, [r4, #24]
 8001700:	430b      	orrs	r3, r1
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8001704:	2301      	movs	r3, #1
 8001706:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800170e:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001710:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001712:	f7ff f911 	bl	8000938 <HAL_RTC_MspInit>
 8001716:	e7de      	b.n	80016d6 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001718:	6822      	ldr	r2, [r4, #0]
 800171a:	6893      	ldr	r3, [r2, #8]
 800171c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001724:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001726:	6821      	ldr	r1, [r4, #0]
 8001728:	688a      	ldr	r2, [r1, #8]
 800172a:	6863      	ldr	r3, [r4, #4]
 800172c:	6920      	ldr	r0, [r4, #16]
 800172e:	4303      	orrs	r3, r0
 8001730:	6960      	ldr	r0, [r4, #20]
 8001732:	4303      	orrs	r3, r0
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	68e2      	ldr	r2, [r4, #12]
 800173c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6913      	ldr	r3, [r2, #16]
 8001742:	68a1      	ldr	r1, [r4, #8]
 8001744:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001748:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff ffa8 	bl	80016a0 <RTC_ExitInitMode>
 8001750:	e7cd      	b.n	80016ee <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
}
 8001754:	4770      	bx	lr

08001756 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 8001756:	2300      	movs	r3, #0

  while (number >= 10U)
 8001758:	e003      	b.n	8001762 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
    number -= 10U;
 800175e:	380a      	subs	r0, #10
 8001760:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8001762:	2809      	cmp	r0, #9
 8001764:	d8f9      	bhi.n	800175a <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4318      	orrs	r0, r3
 800176c:	4770      	bx	lr

0800176e <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800176e:	7f03      	ldrb	r3, [r0, #28]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d059      	beq.n	8001828 <HAL_RTC_SetTime+0xba>
{
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	4604      	mov	r4, r0
 8001778:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800177a:	2301      	movs	r3, #1
 800177c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800177e:	2302      	movs	r3, #2
 8001780:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8001782:	bb4a      	cbnz	r2, 80017d8 <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001784:	6803      	ldr	r3, [r0, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f013 0f40 	tst.w	r3, #64	; 0x40
 800178c:	d101      	bne.n	8001792 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001792:	7830      	ldrb	r0, [r6, #0]
 8001794:	f7ff ffdf 	bl	8001756 <RTC_ByteToBcd2>
 8001798:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800179a:	7870      	ldrb	r0, [r6, #1]
 800179c:	f7ff ffdb 	bl	8001756 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80017a0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80017a4:	78b0      	ldrb	r0, [r6, #2]
 80017a6:	f7ff ffd6 	bl	8001756 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80017aa:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80017ac:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80017ae:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	22ca      	movs	r2, #202	; 0xca
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	2253      	movs	r2, #83	; 0x53
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff ff4b 	bl	800165a <RTC_EnterInitMode>
  if (status == HAL_OK)
 80017c4:	b1d0      	cbz	r0, 80017fc <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 80017c6:	b908      	cbnz	r0, 80017cc <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 80017c8:	2301      	movs	r3, #1
 80017ca:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80017d2:	2300      	movs	r3, #0
 80017d4:	7723      	strb	r3, [r4, #28]
}
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80017d8:	6803      	ldr	r3, [r0, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017e0:	d101      	bne.n	80017e6 <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80017e6:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80017e8:	7875      	ldrb	r5, [r6, #1]
 80017ea:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80017ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 80017f0:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80017f2:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80017f4:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80017f6:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 80017fa:	e7da      	b.n	80017b2 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8001802:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8001806:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	6893      	ldr	r3, [r2, #8]
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001812:	6821      	ldr	r1, [r4, #0]
 8001814:	688b      	ldr	r3, [r1, #8]
 8001816:	68f2      	ldr	r2, [r6, #12]
 8001818:	6930      	ldr	r0, [r6, #16]
 800181a:	4302      	orrs	r2, r0
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff ff3d 	bl	80016a0 <RTC_ExitInitMode>
 8001826:	e7ce      	b.n	80017c6 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8001828:	2002      	movs	r0, #2
}
 800182a:	4770      	bx	lr

0800182c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800182c:	7f03      	ldrb	r3, [r0, #28]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d048      	beq.n	80018c4 <HAL_RTC_SetDate+0x98>
{
 8001832:	b570      	push	{r4, r5, r6, lr}
 8001834:	4604      	mov	r4, r0
 8001836:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8001838:	2301      	movs	r3, #1
 800183a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800183c:	2302      	movs	r3, #2
 800183e:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001840:	b93a      	cbnz	r2, 8001852 <HAL_RTC_SetDate+0x26>
 8001842:	784b      	ldrb	r3, [r1, #1]
 8001844:	f013 0f10 	tst.w	r3, #16
 8001848:	d003      	beq.n	8001852 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800184a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800184e:	330a      	adds	r3, #10
 8001850:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 8001852:	bb12      	cbnz	r2, 800189a <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001854:	78f0      	ldrb	r0, [r6, #3]
 8001856:	f7ff ff7e 	bl	8001756 <RTC_ByteToBcd2>
 800185a:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800185c:	7870      	ldrb	r0, [r6, #1]
 800185e:	f7ff ff7a 	bl	8001756 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001862:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001866:	78b0      	ldrb	r0, [r6, #2]
 8001868:	f7ff ff75 	bl	8001756 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800186c:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800186e:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001870:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	22ca      	movs	r2, #202	; 0xca
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	2253      	movs	r2, #83	; 0x53
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff feea 	bl	800165a <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001886:	b198      	cbz	r0, 80018b0 <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 8001888:	b908      	cbnz	r0, 800188e <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 800188a:	2301      	movs	r3, #1
 800188c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	22ff      	movs	r2, #255	; 0xff
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8001894:	2300      	movs	r3, #0
 8001896:	7723      	strb	r3, [r4, #28]
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800189a:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800189c:	7875      	ldrb	r5, [r6, #1]
 800189e:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 80018a4:	78b3      	ldrb	r3, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80018a6:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80018a8:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018aa:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 80018ae:	e7e1      	b.n	8001874 <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80018b6:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80018ba:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff feef 	bl	80016a0 <RTC_ExitInitMode>
 80018c2:	e7e1      	b.n	8001888 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	4770      	bx	lr

080018c8 <HAL_RTC_SetAlarm>:
{
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80018ca:	7f03      	ldrb	r3, [r0, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f000 80b5 	beq.w	8001a3c <HAL_RTC_SetAlarm+0x174>
 80018d2:	4604      	mov	r4, r0
 80018d4:	460d      	mov	r5, r1
 80018d6:	2301      	movs	r3, #1
 80018d8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80018da:	2302      	movs	r3, #2
 80018dc:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d153      	bne.n	800198a <HAL_RTC_SetAlarm+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018ea:	d101      	bne.n	80018f0 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	70cb      	strb	r3, [r1, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80018f0:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80018f2:	7828      	ldrb	r0, [r5, #0]
 80018f4:	f7ff ff2f 	bl	8001756 <RTC_ByteToBcd2>
 80018f8:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80018fa:	7868      	ldrb	r0, [r5, #1]
 80018fc:	f7ff ff2b 	bl	8001756 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001900:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001904:	78a8      	ldrb	r0, [r5, #2]
 8001906:	f7ff ff26 	bl	8001756 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800190a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800190c:	78eb      	ldrb	r3, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800190e:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001912:	f895 0020 	ldrb.w	r0, [r5, #32]
 8001916:	f7ff ff1e 	bl	8001756 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800191a:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800191e:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8001920:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001922:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001924:	686f      	ldr	r7, [r5, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001926:	69ab      	ldr	r3, [r5, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001928:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	22ca      	movs	r2, #202	; 0xca
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	2253      	movs	r2, #83	; 0x53
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193c:	d03f      	beq.n	80019be <HAL_RTC_SetAlarm+0xf6>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	6893      	ldr	r3, [r2, #8]
 8001942:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001946:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	6893      	ldr	r3, [r2, #8]
 800194c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001950:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	68d3      	ldr	r3, [r2, #12]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f463 7320 	orn	r3, r3, #640	; 0x280
 800195c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800195e:	f7ff f915 	bl	8000b8c <HAL_GetTick>
 8001962:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	f012 0f02 	tst.w	r2, #2
 800196c:	d156      	bne.n	8001a1c <HAL_RTC_SetAlarm+0x154>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800196e:	f7ff f90d 	bl	8000b8c <HAL_GetTick>
 8001972:	1b40      	subs	r0, r0, r5
 8001974:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001978:	d9f4      	bls.n	8001964 <HAL_RTC_SetAlarm+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	22ff      	movs	r2, #255	; 0xff
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001980:	2003      	movs	r0, #3
 8001982:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001984:	2300      	movs	r3, #0
 8001986:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8001988:	e057      	b.n	8001a3a <HAL_RTC_SetAlarm+0x172>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001992:	d101      	bne.n	8001998 <HAL_RTC_SetAlarm+0xd0>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001994:	2300      	movs	r3, #0
 8001996:	70cb      	strb	r3, [r1, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001998:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800199a:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800199c:	786b      	ldrb	r3, [r5, #1]
 800199e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80019a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80019a4:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80019a6:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80019a8:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80019aa:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80019ae:	f895 2020 	ldrb.w	r2, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80019b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80019b6:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmMask));
 80019b8:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80019ba:	431e      	orrs	r6, r3
 80019bc:	e7b2      	b.n	8001924 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	6893      	ldr	r3, [r2, #8]
 80019c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6893      	ldr	r3, [r2, #8]
 80019cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	68d3      	ldr	r3, [r2, #12]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80019dc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80019de:	f7ff f8d5 	bl	8000b8c <HAL_GetTick>
 80019e2:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	f012 0f01 	tst.w	r2, #1
 80019ec:	d10d      	bne.n	8001a0a <HAL_RTC_SetAlarm+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80019ee:	f7ff f8cd 	bl	8000b8c <HAL_GetTick>
 80019f2:	1b40      	subs	r0, r0, r5
 80019f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019f8:	d9f4      	bls.n	80019e4 <HAL_RTC_SetAlarm+0x11c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	22ff      	movs	r2, #255	; 0xff
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001a00:	2003      	movs	r0, #3
 8001a02:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001a04:	2300      	movs	r3, #0
 8001a06:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8001a08:	e017      	b.n	8001a3a <HAL_RTC_SetAlarm+0x172>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001a0a:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	6893      	ldr	r3, [r2, #8]
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6093      	str	r3, [r2, #8]
 8001a1a:	e007      	b.n	8001a2c <HAL_RTC_SetAlarm+0x164>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001a1c:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6893      	ldr	r3, [r2, #8]
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	22ff      	movs	r2, #255	; 0xff
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001a32:	2301      	movs	r3, #1
 8001a34:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8001a36:	2000      	movs	r0, #0
 8001a38:	7720      	strb	r0, [r4, #28]
}
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	e7fc      	b.n	8001a3a <HAL_RTC_SetAlarm+0x172>

08001a40 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001a40:	0903      	lsrs	r3, r0, #4
 8001a42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8001a46:	f000 000f 	and.w	r0, r0, #15
 8001a4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001a4e:	b2c0      	uxtb	r0, r0
 8001a50:	4770      	bx	lr

08001a52 <HAL_RTC_GetTime>:
{
 8001a52:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001a54:	6803      	ldr	r3, [r0, #0]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a5a:	6803      	ldr	r3, [r0, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a62:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001a68:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8001a6c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001a6e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8001a72:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001a74:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8001a78:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001a7a:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8001a7e:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8001a80:	b95a      	cbnz	r2, 8001a9a <HAL_RTC_GetTime+0x48>
 8001a82:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001a84:	f7ff ffdc 	bl	8001a40 <RTC_Bcd2ToByte>
 8001a88:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f7ff ffd8 	bl	8001a40 <RTC_Bcd2ToByte>
 8001a90:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001a92:	4628      	mov	r0, r5
 8001a94:	f7ff ffd4 	bl	8001a40 <RTC_Bcd2ToByte>
 8001a98:	70a0      	strb	r0, [r4, #2]
}
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}

08001a9e <HAL_RTC_GetDate>:
{
 8001a9e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001aa4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8001aa8:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001aaa:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8001aae:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001ab0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8001ab4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001ab6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001aba:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8001abc:	b95a      	cbnz	r2, 8001ad6 <HAL_RTC_GetDate+0x38>
 8001abe:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001ac0:	f7ff ffbe 	bl	8001a40 <RTC_Bcd2ToByte>
 8001ac4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff ffba 	bl	8001a40 <RTC_Bcd2ToByte>
 8001acc:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f7ff ffb6 	bl	8001a40 <RTC_Bcd2ToByte>
 8001ad4:	70a0      	strb	r0, [r4, #2]
}
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001adc:	b510      	push	{r4, lr}
 8001ade:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ae0:	6802      	ldr	r2, [r0, #0]
 8001ae2:	6913      	ldr	r3, [r2, #16]
 8001ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae8:	68c1      	ldr	r1, [r0, #12]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aee:	6883      	ldr	r3, [r0, #8]
 8001af0:	6902      	ldr	r2, [r0, #16]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	6943      	ldr	r3, [r0, #20]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	69c3      	ldr	r3, [r0, #28]
 8001afa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001afc:	6801      	ldr	r1, [r0, #0]
 8001afe:	68cb      	ldr	r3, [r1, #12]
 8001b00:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001b04:	f023 030c 	bic.w	r3, r3, #12
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b0c:	6802      	ldr	r2, [r0, #0]
 8001b0e:	6953      	ldr	r3, [r2, #20]
 8001b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b14:	6981      	ldr	r1, [r0, #24]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <UART_SetConfig+0x108>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d006      	beq.n	8001b30 <UART_SetConfig+0x54>
 8001b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d002      	beq.n	8001b30 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b2a:	f7ff fcb3 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8001b2e:	e001      	b.n	8001b34 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b30:	f7ff fcc0 	bl	80014b4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b34:	69e3      	ldr	r3, [r4, #28]
 8001b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b3a:	d029      	beq.n	8001b90 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	1803      	adds	r3, r0, r0
 8001b40:	4149      	adcs	r1, r1
 8001b42:	181b      	adds	r3, r3, r0
 8001b44:	f141 0100 	adc.w	r1, r1, #0
 8001b48:	00c9      	lsls	r1, r1, #3
 8001b4a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1818      	adds	r0, r3, r0
 8001b52:	6863      	ldr	r3, [r4, #4]
 8001b54:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001b58:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001b5c:	f141 0100 	adc.w	r1, r1, #0
 8001b60:	f7fe fb86 	bl	8000270 <__aeabi_uldivmod>
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <UART_SetConfig+0x10c>)
 8001b66:	fba2 3100 	umull	r3, r1, r2, r0
 8001b6a:	0949      	lsrs	r1, r1, #5
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	fb03 0311 	mls	r3, r3, r1, r0
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	3332      	adds	r3, #50	; 0x32
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	6821      	ldr	r1, [r4, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }
}
 8001b8e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b90:	2300      	movs	r3, #0
 8001b92:	1802      	adds	r2, r0, r0
 8001b94:	eb43 0103 	adc.w	r1, r3, r3
 8001b98:	1812      	adds	r2, r2, r0
 8001b9a:	f141 0100 	adc.w	r1, r1, #0
 8001b9e:	00c9      	lsls	r1, r1, #3
 8001ba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ba4:	00d2      	lsls	r2, r2, #3
 8001ba6:	1810      	adds	r0, r2, r0
 8001ba8:	f141 0100 	adc.w	r1, r1, #0
 8001bac:	6862      	ldr	r2, [r4, #4]
 8001bae:	1892      	adds	r2, r2, r2
 8001bb0:	415b      	adcs	r3, r3
 8001bb2:	f7fe fb5d 	bl	8000270 <__aeabi_uldivmod>
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <UART_SetConfig+0x10c>)
 8001bb8:	fba2 3100 	umull	r3, r1, r2, r0
 8001bbc:	0949      	lsrs	r1, r1, #5
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	fb03 0311 	mls	r3, r3, r1, r0
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	3332      	adds	r3, #50	; 0x32
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	005a      	lsls	r2, r3, #1
 8001bd0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001bd4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	6821      	ldr	r1, [r4, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
 8001be2:	e7d4      	b.n	8001b8e <UART_SetConfig+0xb2>
 8001be4:	40011000 	.word	0x40011000
 8001be8:	51eb851f 	.word	0x51eb851f

08001bec <UART_WaitOnFlagUntilTimeout>:
{
 8001bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bf0:	4605      	mov	r5, r0
 8001bf2:	460f      	mov	r7, r1
 8001bf4:	4616      	mov	r6, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	ea37 0404 	bics.w	r4, r7, r4
 8001c04:	bf0c      	ite	eq
 8001c06:	2401      	moveq	r4, #1
 8001c08:	2400      	movne	r4, #0
 8001c0a:	42b4      	cmp	r4, r6
 8001c0c:	d12d      	bne.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001c12:	d0f3      	beq.n	8001bfc <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c14:	f1b8 0f00 	cmp.w	r8, #0
 8001c18:	d005      	beq.n	8001c26 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001c1a:	f7fe ffb7 	bl	8000b8c <HAL_GetTick>
 8001c1e:	eba0 0009 	sub.w	r0, r0, r9
 8001c22:	4540      	cmp	r0, r8
 8001c24:	d9ea      	bls.n	8001bfc <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c26:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c28:	f102 030c 	add.w	r3, r2, #12
 8001c2c:	e853 3f00 	ldrex	r3, [r3]
 8001c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c34:	320c      	adds	r2, #12
 8001c36:	e842 3100 	strex	r1, r3, [r2]
 8001c3a:	2900      	cmp	r1, #0
 8001c3c:	d1f3      	bne.n	8001c26 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c40:	f102 0314 	add.w	r3, r2, #20
 8001c44:	e853 3f00 	ldrex	r3, [r3]
 8001c48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4c:	3214      	adds	r2, #20
 8001c4e:	e842 3100 	strex	r1, r3, [r2]
 8001c52:	2900      	cmp	r1, #0
 8001c54:	d1f3      	bne.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8001c56:	2320      	movs	r3, #32
 8001c58:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001c60:	2300      	movs	r3, #0
 8001c62:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c66:	2003      	movs	r0, #3
 8001c68:	e000      	b.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8001c6a:	2000      	movs	r0, #0
}
 8001c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c70 <HAL_UART_Init>:
  if (huart == NULL)
 8001c70:	b358      	cbz	r0, 8001cca <HAL_UART_Init+0x5a>
{
 8001c72:	b510      	push	{r4, lr}
 8001c74:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c7a:	b30b      	cbz	r3, 8001cc0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c7c:	2324      	movs	r3, #36	; 0x24
 8001c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	68d3      	ldr	r3, [r2, #12]
 8001c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c8a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff25 	bl	8001adc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	6913      	ldr	r3, [r2, #16]
 8001c96:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c9a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	6953      	ldr	r3, [r2, #20]
 8001ca0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001ca4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	68d3      	ldr	r3, [r2, #12]
 8001caa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cae:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001cbe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001cc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001cc4:	f7fe fe5c 	bl	8000980 <HAL_UART_MspInit>
 8001cc8:	e7d8      	b.n	8001c7c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
}
 8001ccc:	4770      	bx	lr

08001cce <HAL_UART_Transmit>:
{
 8001cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d154      	bne.n	8001d8a <HAL_UART_Transmit+0xbc>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	460d      	mov	r5, r1
 8001ce4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d053      	beq.n	8001d92 <HAL_UART_Transmit+0xc4>
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d053      	beq.n	8001d96 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001cee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d051      	beq.n	8001d9a <HAL_UART_Transmit+0xcc>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d00:	2321      	movs	r3, #33	; 0x21
 8001d02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001d06:	f7fe ff41 	bl	8000b8c <HAL_GetTick>
 8001d0a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001d0c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d10:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d14:	68a3      	ldr	r3, [r4, #8]
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d005      	beq.n	8001d28 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8001d1c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001d20:	2300      	movs	r3, #0
 8001d22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001d26:	e012      	b.n	8001d4e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	6923      	ldr	r3, [r4, #16]
 8001d2a:	b113      	cbz	r3, 8001d32 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001d2c:	f04f 0800 	mov.w	r8, #0
 8001d30:	e7f6      	b.n	8001d20 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8001d32:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001d34:	2500      	movs	r5, #0
 8001d36:	e7f3      	b.n	8001d20 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d38:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001d3c:	6822      	ldr	r2, [r4, #0]
 8001d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d42:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d44:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d46:	b292      	uxth	r2, r2
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d4e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b173      	cbz	r3, 8001d72 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d54:	9600      	str	r6, [sp, #0]
 8001d56:	463b      	mov	r3, r7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff45 	bl	8001bec <UART_WaitOnFlagUntilTimeout>
 8001d62:	b9e0      	cbnz	r0, 8001d9e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8001d64:	2d00      	cmp	r5, #0
 8001d66:	d0e7      	beq.n	8001d38 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d68:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d70:	e7e8      	b.n	8001d44 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d72:	9600      	str	r6, [sp, #0]
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff ff36 	bl	8001bec <UART_WaitOnFlagUntilTimeout>
 8001d80:	b978      	cbnz	r0, 8001da2 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8001d82:	2320      	movs	r3, #32
 8001d84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001d88:	e000      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001d8a:	2002      	movs	r0, #2
}
 8001d8c:	b002      	add	sp, #8
 8001d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	e7fa      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
 8001d96:	2001      	movs	r0, #1
 8001d98:	e7f8      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	e7f6      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e7f4      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
 8001da4:	e7f2      	b.n	8001d8c <HAL_UART_Transmit+0xbe>
	...

08001da8 <std>:
 8001da8:	2300      	movs	r3, #0
 8001daa:	b510      	push	{r4, lr}
 8001dac:	4604      	mov	r4, r0
 8001dae:	e9c0 3300 	strd	r3, r3, [r0]
 8001db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001db6:	6083      	str	r3, [r0, #8]
 8001db8:	8181      	strh	r1, [r0, #12]
 8001dba:	6643      	str	r3, [r0, #100]	; 0x64
 8001dbc:	81c2      	strh	r2, [r0, #14]
 8001dbe:	6183      	str	r3, [r0, #24]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	305c      	adds	r0, #92	; 0x5c
 8001dc6:	f000 f90e 	bl	8001fe6 <memset>
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <std+0x58>)
 8001dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <std+0x5c>)
 8001dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <std+0x60>)
 8001dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <std+0x64>)
 8001dd8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <std+0x68>)
 8001ddc:	6224      	str	r4, [r4, #32]
 8001dde:	429c      	cmp	r4, r3
 8001de0:	d006      	beq.n	8001df0 <std+0x48>
 8001de2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001de6:	4294      	cmp	r4, r2
 8001de8:	d002      	beq.n	8001df0 <std+0x48>
 8001dea:	33d0      	adds	r3, #208	; 0xd0
 8001dec:	429c      	cmp	r4, r3
 8001dee:	d105      	bne.n	8001dfc <std+0x54>
 8001df0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df8:	f000 b96e 	b.w	80020d8 <__retarget_lock_init_recursive>
 8001dfc:	bd10      	pop	{r4, pc}
 8001dfe:	bf00      	nop
 8001e00:	08001f61 	.word	0x08001f61
 8001e04:	08001f83 	.word	0x08001f83
 8001e08:	08001fbb 	.word	0x08001fbb
 8001e0c:	08001fdf 	.word	0x08001fdf
 8001e10:	20000118 	.word	0x20000118

08001e14 <stdio_exit_handler>:
 8001e14:	4a02      	ldr	r2, [pc, #8]	; (8001e20 <stdio_exit_handler+0xc>)
 8001e16:	4903      	ldr	r1, [pc, #12]	; (8001e24 <stdio_exit_handler+0x10>)
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <stdio_exit_handler+0x14>)
 8001e1a:	f000 b869 	b.w	8001ef0 <_fwalk_sglue>
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	08002985 	.word	0x08002985
 8001e28:	20000018 	.word	0x20000018

08001e2c <cleanup_stdio>:
 8001e2c:	6841      	ldr	r1, [r0, #4]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <cleanup_stdio+0x34>)
 8001e30:	4299      	cmp	r1, r3
 8001e32:	b510      	push	{r4, lr}
 8001e34:	4604      	mov	r4, r0
 8001e36:	d001      	beq.n	8001e3c <cleanup_stdio+0x10>
 8001e38:	f000 fda4 	bl	8002984 <_fflush_r>
 8001e3c:	68a1      	ldr	r1, [r4, #8]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <cleanup_stdio+0x38>)
 8001e40:	4299      	cmp	r1, r3
 8001e42:	d002      	beq.n	8001e4a <cleanup_stdio+0x1e>
 8001e44:	4620      	mov	r0, r4
 8001e46:	f000 fd9d 	bl	8002984 <_fflush_r>
 8001e4a:	68e1      	ldr	r1, [r4, #12]
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <cleanup_stdio+0x3c>)
 8001e4e:	4299      	cmp	r1, r3
 8001e50:	d004      	beq.n	8001e5c <cleanup_stdio+0x30>
 8001e52:	4620      	mov	r0, r4
 8001e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e58:	f000 bd94 	b.w	8002984 <_fflush_r>
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000118 	.word	0x20000118
 8001e64:	20000180 	.word	0x20000180
 8001e68:	200001e8 	.word	0x200001e8

08001e6c <global_stdio_init.part.0>:
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <global_stdio_init.part.0+0x30>)
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <global_stdio_init.part.0+0x34>)
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <global_stdio_init.part.0+0x38>)
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4620      	mov	r0, r4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	f7ff ff94 	bl	8001da8 <std>
 8001e80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001e84:	2201      	movs	r2, #1
 8001e86:	2109      	movs	r1, #9
 8001e88:	f7ff ff8e 	bl	8001da8 <std>
 8001e8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001e90:	2202      	movs	r2, #2
 8001e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e96:	2112      	movs	r1, #18
 8001e98:	f7ff bf86 	b.w	8001da8 <std>
 8001e9c:	20000250 	.word	0x20000250
 8001ea0:	20000118 	.word	0x20000118
 8001ea4:	08001e15 	.word	0x08001e15

08001ea8 <__sfp_lock_acquire>:
 8001ea8:	4801      	ldr	r0, [pc, #4]	; (8001eb0 <__sfp_lock_acquire+0x8>)
 8001eaa:	f000 b916 	b.w	80020da <__retarget_lock_acquire_recursive>
 8001eae:	bf00      	nop
 8001eb0:	20000259 	.word	0x20000259

08001eb4 <__sfp_lock_release>:
 8001eb4:	4801      	ldr	r0, [pc, #4]	; (8001ebc <__sfp_lock_release+0x8>)
 8001eb6:	f000 b911 	b.w	80020dc <__retarget_lock_release_recursive>
 8001eba:	bf00      	nop
 8001ebc:	20000259 	.word	0x20000259

08001ec0 <__sinit>:
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	f7ff fff0 	bl	8001ea8 <__sfp_lock_acquire>
 8001ec8:	6a23      	ldr	r3, [r4, #32]
 8001eca:	b11b      	cbz	r3, 8001ed4 <__sinit+0x14>
 8001ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ed0:	f7ff bff0 	b.w	8001eb4 <__sfp_lock_release>
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__sinit+0x28>)
 8001ed6:	6223      	str	r3, [r4, #32]
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__sinit+0x2c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f5      	bne.n	8001ecc <__sinit+0xc>
 8001ee0:	f7ff ffc4 	bl	8001e6c <global_stdio_init.part.0>
 8001ee4:	e7f2      	b.n	8001ecc <__sinit+0xc>
 8001ee6:	bf00      	nop
 8001ee8:	08001e2d 	.word	0x08001e2d
 8001eec:	20000250 	.word	0x20000250

08001ef0 <_fwalk_sglue>:
 8001ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ef4:	4607      	mov	r7, r0
 8001ef6:	4688      	mov	r8, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	2600      	movs	r6, #0
 8001efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f00:	f1b9 0901 	subs.w	r9, r9, #1
 8001f04:	d505      	bpl.n	8001f12 <_fwalk_sglue+0x22>
 8001f06:	6824      	ldr	r4, [r4, #0]
 8001f08:	2c00      	cmp	r4, #0
 8001f0a:	d1f7      	bne.n	8001efc <_fwalk_sglue+0xc>
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f12:	89ab      	ldrh	r3, [r5, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d907      	bls.n	8001f28 <_fwalk_sglue+0x38>
 8001f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	d003      	beq.n	8001f28 <_fwalk_sglue+0x38>
 8001f20:	4629      	mov	r1, r5
 8001f22:	4638      	mov	r0, r7
 8001f24:	47c0      	blx	r8
 8001f26:	4306      	orrs	r6, r0
 8001f28:	3568      	adds	r5, #104	; 0x68
 8001f2a:	e7e9      	b.n	8001f00 <_fwalk_sglue+0x10>

08001f2c <iprintf>:
 8001f2c:	b40f      	push	{r0, r1, r2, r3}
 8001f2e:	b507      	push	{r0, r1, r2, lr}
 8001f30:	4906      	ldr	r1, [pc, #24]	; (8001f4c <iprintf+0x20>)
 8001f32:	ab04      	add	r3, sp, #16
 8001f34:	6808      	ldr	r0, [r1, #0]
 8001f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f3a:	6881      	ldr	r1, [r0, #8]
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	f000 f9f1 	bl	8002324 <_vfiprintf_r>
 8001f42:	b003      	add	sp, #12
 8001f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f48:	b004      	add	sp, #16
 8001f4a:	4770      	bx	lr
 8001f4c:	20000064 	.word	0x20000064

08001f50 <putchar>:
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <putchar+0xc>)
 8001f52:	4601      	mov	r1, r0
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	6882      	ldr	r2, [r0, #8]
 8001f58:	f000 bd3c 	b.w	80029d4 <_putc_r>
 8001f5c:	20000064 	.word	0x20000064

08001f60 <__sread>:
 8001f60:	b510      	push	{r4, lr}
 8001f62:	460c      	mov	r4, r1
 8001f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f68:	f000 f868 	bl	800203c <_read_r>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	bfab      	itete	ge
 8001f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f72:	89a3      	ldrhlt	r3, [r4, #12]
 8001f74:	181b      	addge	r3, r3, r0
 8001f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f7a:	bfac      	ite	ge
 8001f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f7e:	81a3      	strhlt	r3, [r4, #12]
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <__swrite>:
 8001f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f86:	461f      	mov	r7, r3
 8001f88:	898b      	ldrh	r3, [r1, #12]
 8001f8a:	05db      	lsls	r3, r3, #23
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4616      	mov	r6, r2
 8001f92:	d505      	bpl.n	8001fa0 <__swrite+0x1e>
 8001f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f000 f83c 	bl	8002018 <_lseek_r>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	4632      	mov	r2, r6
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb6:	f000 b853 	b.w	8002060 <_write_r>

08001fba <__sseek>:
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc2:	f000 f829 	bl	8002018 <_lseek_r>
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	bf15      	itete	ne
 8001fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fd6:	81a3      	strheq	r3, [r4, #12]
 8001fd8:	bf18      	it	ne
 8001fda:	81a3      	strhne	r3, [r4, #12]
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <__sclose>:
 8001fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe2:	f000 b809 	b.w	8001ff8 <_close_r>

08001fe6 <memset>:
 8001fe6:	4402      	add	r2, r0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d100      	bne.n	8001ff0 <memset+0xa>
 8001fee:	4770      	bx	lr
 8001ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8001ff4:	e7f9      	b.n	8001fea <memset+0x4>
	...

08001ff8 <_close_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4d06      	ldr	r5, [pc, #24]	; (8002014 <_close_r+0x1c>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	f7fe fd12 	bl	8000a2c <_close>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_close_r+0x1a>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_close_r+0x1a>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	20000254 	.word	0x20000254

08002018 <_lseek_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <_lseek_r+0x20>)
 800201c:	4604      	mov	r4, r0
 800201e:	4608      	mov	r0, r1
 8002020:	4611      	mov	r1, r2
 8002022:	2200      	movs	r2, #0
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7fe fd0a 	bl	8000a40 <_lseek>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_lseek_r+0x1e>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_lseek_r+0x1e>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20000254 	.word	0x20000254

0800203c <_read_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4d07      	ldr	r5, [pc, #28]	; (800205c <_read_r+0x20>)
 8002040:	4604      	mov	r4, r0
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	2200      	movs	r2, #0
 8002048:	602a      	str	r2, [r5, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f7fe fcde 	bl	8000a0c <_read>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_read_r+0x1e>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_read_r+0x1e>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	20000254 	.word	0x20000254

08002060 <_write_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4d07      	ldr	r5, [pc, #28]	; (8002080 <_write_r+0x20>)
 8002064:	4604      	mov	r4, r0
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	2200      	movs	r2, #0
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f7fe fac6 	bl	8000600 <_write>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_write_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_write_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	20000254 	.word	0x20000254

08002084 <__errno>:
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <__errno+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000064 	.word	0x20000064

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4d0d      	ldr	r5, [pc, #52]	; (80020c8 <__libc_init_array+0x38>)
 8002094:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002096:	1b64      	subs	r4, r4, r5
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	2600      	movs	r6, #0
 800209c:	42a6      	cmp	r6, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	4d0b      	ldr	r5, [pc, #44]	; (80020d0 <__libc_init_array+0x40>)
 80020a2:	4c0c      	ldr	r4, [pc, #48]	; (80020d4 <__libc_init_array+0x44>)
 80020a4:	f000 fdf4 	bl	8002c90 <_init>
 80020a8:	1b64      	subs	r4, r4, r5
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	2600      	movs	r6, #0
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b8:	4798      	blx	r3
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c2:	4798      	blx	r3
 80020c4:	3601      	adds	r6, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08002d58 	.word	0x08002d58
 80020cc:	08002d58 	.word	0x08002d58
 80020d0:	08002d58 	.word	0x08002d58
 80020d4:	08002d5c 	.word	0x08002d5c

080020d8 <__retarget_lock_init_recursive>:
 80020d8:	4770      	bx	lr

080020da <__retarget_lock_acquire_recursive>:
 80020da:	4770      	bx	lr

080020dc <__retarget_lock_release_recursive>:
 80020dc:	4770      	bx	lr
	...

080020e0 <_free_r>:
 80020e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d044      	beq.n	8002170 <_free_r+0x90>
 80020e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ea:	9001      	str	r0, [sp, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f1a1 0404 	sub.w	r4, r1, #4
 80020f2:	bfb8      	it	lt
 80020f4:	18e4      	addlt	r4, r4, r3
 80020f6:	f000 f8df 	bl	80022b8 <__malloc_lock>
 80020fa:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <_free_r+0x94>)
 80020fc:	9801      	ldr	r0, [sp, #4]
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	b933      	cbnz	r3, 8002110 <_free_r+0x30>
 8002102:	6063      	str	r3, [r4, #4]
 8002104:	6014      	str	r4, [r2, #0]
 8002106:	b003      	add	sp, #12
 8002108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800210c:	f000 b8da 	b.w	80022c4 <__malloc_unlock>
 8002110:	42a3      	cmp	r3, r4
 8002112:	d908      	bls.n	8002126 <_free_r+0x46>
 8002114:	6825      	ldr	r5, [r4, #0]
 8002116:	1961      	adds	r1, r4, r5
 8002118:	428b      	cmp	r3, r1
 800211a:	bf01      	itttt	eq
 800211c:	6819      	ldreq	r1, [r3, #0]
 800211e:	685b      	ldreq	r3, [r3, #4]
 8002120:	1949      	addeq	r1, r1, r5
 8002122:	6021      	streq	r1, [r4, #0]
 8002124:	e7ed      	b.n	8002102 <_free_r+0x22>
 8002126:	461a      	mov	r2, r3
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b10b      	cbz	r3, 8002130 <_free_r+0x50>
 800212c:	42a3      	cmp	r3, r4
 800212e:	d9fa      	bls.n	8002126 <_free_r+0x46>
 8002130:	6811      	ldr	r1, [r2, #0]
 8002132:	1855      	adds	r5, r2, r1
 8002134:	42a5      	cmp	r5, r4
 8002136:	d10b      	bne.n	8002150 <_free_r+0x70>
 8002138:	6824      	ldr	r4, [r4, #0]
 800213a:	4421      	add	r1, r4
 800213c:	1854      	adds	r4, r2, r1
 800213e:	42a3      	cmp	r3, r4
 8002140:	6011      	str	r1, [r2, #0]
 8002142:	d1e0      	bne.n	8002106 <_free_r+0x26>
 8002144:	681c      	ldr	r4, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6053      	str	r3, [r2, #4]
 800214a:	440c      	add	r4, r1
 800214c:	6014      	str	r4, [r2, #0]
 800214e:	e7da      	b.n	8002106 <_free_r+0x26>
 8002150:	d902      	bls.n	8002158 <_free_r+0x78>
 8002152:	230c      	movs	r3, #12
 8002154:	6003      	str	r3, [r0, #0]
 8002156:	e7d6      	b.n	8002106 <_free_r+0x26>
 8002158:	6825      	ldr	r5, [r4, #0]
 800215a:	1961      	adds	r1, r4, r5
 800215c:	428b      	cmp	r3, r1
 800215e:	bf04      	itt	eq
 8002160:	6819      	ldreq	r1, [r3, #0]
 8002162:	685b      	ldreq	r3, [r3, #4]
 8002164:	6063      	str	r3, [r4, #4]
 8002166:	bf04      	itt	eq
 8002168:	1949      	addeq	r1, r1, r5
 800216a:	6021      	streq	r1, [r4, #0]
 800216c:	6054      	str	r4, [r2, #4]
 800216e:	e7ca      	b.n	8002106 <_free_r+0x26>
 8002170:	b003      	add	sp, #12
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	2000025c 	.word	0x2000025c

08002178 <sbrk_aligned>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	4e0e      	ldr	r6, [pc, #56]	; (80021b4 <sbrk_aligned+0x3c>)
 800217c:	460c      	mov	r4, r1
 800217e:	6831      	ldr	r1, [r6, #0]
 8002180:	4605      	mov	r5, r0
 8002182:	b911      	cbnz	r1, 800218a <sbrk_aligned+0x12>
 8002184:	f000 fcf0 	bl	8002b68 <_sbrk_r>
 8002188:	6030      	str	r0, [r6, #0]
 800218a:	4621      	mov	r1, r4
 800218c:	4628      	mov	r0, r5
 800218e:	f000 fceb 	bl	8002b68 <_sbrk_r>
 8002192:	1c43      	adds	r3, r0, #1
 8002194:	d00a      	beq.n	80021ac <sbrk_aligned+0x34>
 8002196:	1cc4      	adds	r4, r0, #3
 8002198:	f024 0403 	bic.w	r4, r4, #3
 800219c:	42a0      	cmp	r0, r4
 800219e:	d007      	beq.n	80021b0 <sbrk_aligned+0x38>
 80021a0:	1a21      	subs	r1, r4, r0
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 fce0 	bl	8002b68 <_sbrk_r>
 80021a8:	3001      	adds	r0, #1
 80021aa:	d101      	bne.n	80021b0 <sbrk_aligned+0x38>
 80021ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021b0:	4620      	mov	r0, r4
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	20000260 	.word	0x20000260

080021b8 <_malloc_r>:
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021bc:	1ccd      	adds	r5, r1, #3
 80021be:	f025 0503 	bic.w	r5, r5, #3
 80021c2:	3508      	adds	r5, #8
 80021c4:	2d0c      	cmp	r5, #12
 80021c6:	bf38      	it	cc
 80021c8:	250c      	movcc	r5, #12
 80021ca:	2d00      	cmp	r5, #0
 80021cc:	4607      	mov	r7, r0
 80021ce:	db01      	blt.n	80021d4 <_malloc_r+0x1c>
 80021d0:	42a9      	cmp	r1, r5
 80021d2:	d905      	bls.n	80021e0 <_malloc_r+0x28>
 80021d4:	230c      	movs	r3, #12
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	2600      	movs	r6, #0
 80021da:	4630      	mov	r0, r6
 80021dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022b4 <_malloc_r+0xfc>
 80021e4:	f000 f868 	bl	80022b8 <__malloc_lock>
 80021e8:	f8d8 3000 	ldr.w	r3, [r8]
 80021ec:	461c      	mov	r4, r3
 80021ee:	bb5c      	cbnz	r4, 8002248 <_malloc_r+0x90>
 80021f0:	4629      	mov	r1, r5
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7ff ffc0 	bl	8002178 <sbrk_aligned>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	4604      	mov	r4, r0
 80021fc:	d155      	bne.n	80022aa <_malloc_r+0xf2>
 80021fe:	f8d8 4000 	ldr.w	r4, [r8]
 8002202:	4626      	mov	r6, r4
 8002204:	2e00      	cmp	r6, #0
 8002206:	d145      	bne.n	8002294 <_malloc_r+0xdc>
 8002208:	2c00      	cmp	r4, #0
 800220a:	d048      	beq.n	800229e <_malloc_r+0xe6>
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	4631      	mov	r1, r6
 8002210:	4638      	mov	r0, r7
 8002212:	eb04 0903 	add.w	r9, r4, r3
 8002216:	f000 fca7 	bl	8002b68 <_sbrk_r>
 800221a:	4581      	cmp	r9, r0
 800221c:	d13f      	bne.n	800229e <_malloc_r+0xe6>
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	1a6d      	subs	r5, r5, r1
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ffa7 	bl	8002178 <sbrk_aligned>
 800222a:	3001      	adds	r0, #1
 800222c:	d037      	beq.n	800229e <_malloc_r+0xe6>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	442b      	add	r3, r5
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	f8d8 3000 	ldr.w	r3, [r8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d038      	beq.n	80022ae <_malloc_r+0xf6>
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	42a2      	cmp	r2, r4
 8002240:	d12b      	bne.n	800229a <_malloc_r+0xe2>
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	e00f      	b.n	8002268 <_malloc_r+0xb0>
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	1b52      	subs	r2, r2, r5
 800224c:	d41f      	bmi.n	800228e <_malloc_r+0xd6>
 800224e:	2a0b      	cmp	r2, #11
 8002250:	d917      	bls.n	8002282 <_malloc_r+0xca>
 8002252:	1961      	adds	r1, r4, r5
 8002254:	42a3      	cmp	r3, r4
 8002256:	6025      	str	r5, [r4, #0]
 8002258:	bf18      	it	ne
 800225a:	6059      	strne	r1, [r3, #4]
 800225c:	6863      	ldr	r3, [r4, #4]
 800225e:	bf08      	it	eq
 8002260:	f8c8 1000 	streq.w	r1, [r8]
 8002264:	5162      	str	r2, [r4, r5]
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	4638      	mov	r0, r7
 800226a:	f104 060b 	add.w	r6, r4, #11
 800226e:	f000 f829 	bl	80022c4 <__malloc_unlock>
 8002272:	f026 0607 	bic.w	r6, r6, #7
 8002276:	1d23      	adds	r3, r4, #4
 8002278:	1af2      	subs	r2, r6, r3
 800227a:	d0ae      	beq.n	80021da <_malloc_r+0x22>
 800227c:	1b9b      	subs	r3, r3, r6
 800227e:	50a3      	str	r3, [r4, r2]
 8002280:	e7ab      	b.n	80021da <_malloc_r+0x22>
 8002282:	42a3      	cmp	r3, r4
 8002284:	6862      	ldr	r2, [r4, #4]
 8002286:	d1dd      	bne.n	8002244 <_malloc_r+0x8c>
 8002288:	f8c8 2000 	str.w	r2, [r8]
 800228c:	e7ec      	b.n	8002268 <_malloc_r+0xb0>
 800228e:	4623      	mov	r3, r4
 8002290:	6864      	ldr	r4, [r4, #4]
 8002292:	e7ac      	b.n	80021ee <_malloc_r+0x36>
 8002294:	4634      	mov	r4, r6
 8002296:	6876      	ldr	r6, [r6, #4]
 8002298:	e7b4      	b.n	8002204 <_malloc_r+0x4c>
 800229a:	4613      	mov	r3, r2
 800229c:	e7cc      	b.n	8002238 <_malloc_r+0x80>
 800229e:	230c      	movs	r3, #12
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4638      	mov	r0, r7
 80022a4:	f000 f80e 	bl	80022c4 <__malloc_unlock>
 80022a8:	e797      	b.n	80021da <_malloc_r+0x22>
 80022aa:	6025      	str	r5, [r4, #0]
 80022ac:	e7dc      	b.n	8002268 <_malloc_r+0xb0>
 80022ae:	605b      	str	r3, [r3, #4]
 80022b0:	deff      	udf	#255	; 0xff
 80022b2:	bf00      	nop
 80022b4:	2000025c 	.word	0x2000025c

080022b8 <__malloc_lock>:
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <__malloc_lock+0x8>)
 80022ba:	f7ff bf0e 	b.w	80020da <__retarget_lock_acquire_recursive>
 80022be:	bf00      	nop
 80022c0:	20000258 	.word	0x20000258

080022c4 <__malloc_unlock>:
 80022c4:	4801      	ldr	r0, [pc, #4]	; (80022cc <__malloc_unlock+0x8>)
 80022c6:	f7ff bf09 	b.w	80020dc <__retarget_lock_release_recursive>
 80022ca:	bf00      	nop
 80022cc:	20000258 	.word	0x20000258

080022d0 <__sfputc_r>:
 80022d0:	6893      	ldr	r3, [r2, #8]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	b410      	push	{r4}
 80022d8:	6093      	str	r3, [r2, #8]
 80022da:	da08      	bge.n	80022ee <__sfputc_r+0x1e>
 80022dc:	6994      	ldr	r4, [r2, #24]
 80022de:	42a3      	cmp	r3, r4
 80022e0:	db01      	blt.n	80022e6 <__sfputc_r+0x16>
 80022e2:	290a      	cmp	r1, #10
 80022e4:	d103      	bne.n	80022ee <__sfputc_r+0x1e>
 80022e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ea:	f000 bba7 	b.w	8002a3c <__swbuf_r>
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	1c58      	adds	r0, r3, #1
 80022f2:	6010      	str	r0, [r2, #0]
 80022f4:	7019      	strb	r1, [r3, #0]
 80022f6:	4608      	mov	r0, r1
 80022f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <__sfputs_r>:
 80022fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002300:	4606      	mov	r6, r0
 8002302:	460f      	mov	r7, r1
 8002304:	4614      	mov	r4, r2
 8002306:	18d5      	adds	r5, r2, r3
 8002308:	42ac      	cmp	r4, r5
 800230a:	d101      	bne.n	8002310 <__sfputs_r+0x12>
 800230c:	2000      	movs	r0, #0
 800230e:	e007      	b.n	8002320 <__sfputs_r+0x22>
 8002310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002314:	463a      	mov	r2, r7
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff ffda 	bl	80022d0 <__sfputc_r>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d1f3      	bne.n	8002308 <__sfputs_r+0xa>
 8002320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002324 <_vfiprintf_r>:
 8002324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002328:	460d      	mov	r5, r1
 800232a:	b09d      	sub	sp, #116	; 0x74
 800232c:	4614      	mov	r4, r2
 800232e:	4698      	mov	r8, r3
 8002330:	4606      	mov	r6, r0
 8002332:	b118      	cbz	r0, 800233c <_vfiprintf_r+0x18>
 8002334:	6a03      	ldr	r3, [r0, #32]
 8002336:	b90b      	cbnz	r3, 800233c <_vfiprintf_r+0x18>
 8002338:	f7ff fdc2 	bl	8001ec0 <__sinit>
 800233c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800233e:	07d9      	lsls	r1, r3, #31
 8002340:	d405      	bmi.n	800234e <_vfiprintf_r+0x2a>
 8002342:	89ab      	ldrh	r3, [r5, #12]
 8002344:	059a      	lsls	r2, r3, #22
 8002346:	d402      	bmi.n	800234e <_vfiprintf_r+0x2a>
 8002348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800234a:	f7ff fec6 	bl	80020da <__retarget_lock_acquire_recursive>
 800234e:	89ab      	ldrh	r3, [r5, #12]
 8002350:	071b      	lsls	r3, r3, #28
 8002352:	d501      	bpl.n	8002358 <_vfiprintf_r+0x34>
 8002354:	692b      	ldr	r3, [r5, #16]
 8002356:	b99b      	cbnz	r3, 8002380 <_vfiprintf_r+0x5c>
 8002358:	4629      	mov	r1, r5
 800235a:	4630      	mov	r0, r6
 800235c:	f000 fbac 	bl	8002ab8 <__swsetup_r>
 8002360:	b170      	cbz	r0, 8002380 <_vfiprintf_r+0x5c>
 8002362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002364:	07dc      	lsls	r4, r3, #31
 8002366:	d504      	bpl.n	8002372 <_vfiprintf_r+0x4e>
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236c:	b01d      	add	sp, #116	; 0x74
 800236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002372:	89ab      	ldrh	r3, [r5, #12]
 8002374:	0598      	lsls	r0, r3, #22
 8002376:	d4f7      	bmi.n	8002368 <_vfiprintf_r+0x44>
 8002378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800237a:	f7ff feaf 	bl	80020dc <__retarget_lock_release_recursive>
 800237e:	e7f3      	b.n	8002368 <_vfiprintf_r+0x44>
 8002380:	2300      	movs	r3, #0
 8002382:	9309      	str	r3, [sp, #36]	; 0x24
 8002384:	2320      	movs	r3, #32
 8002386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800238a:	f8cd 800c 	str.w	r8, [sp, #12]
 800238e:	2330      	movs	r3, #48	; 0x30
 8002390:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002544 <_vfiprintf_r+0x220>
 8002394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002398:	f04f 0901 	mov.w	r9, #1
 800239c:	4623      	mov	r3, r4
 800239e:	469a      	mov	sl, r3
 80023a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023a4:	b10a      	cbz	r2, 80023aa <_vfiprintf_r+0x86>
 80023a6:	2a25      	cmp	r2, #37	; 0x25
 80023a8:	d1f9      	bne.n	800239e <_vfiprintf_r+0x7a>
 80023aa:	ebba 0b04 	subs.w	fp, sl, r4
 80023ae:	d00b      	beq.n	80023c8 <_vfiprintf_r+0xa4>
 80023b0:	465b      	mov	r3, fp
 80023b2:	4622      	mov	r2, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	4630      	mov	r0, r6
 80023b8:	f7ff ffa1 	bl	80022fe <__sfputs_r>
 80023bc:	3001      	adds	r0, #1
 80023be:	f000 80a9 	beq.w	8002514 <_vfiprintf_r+0x1f0>
 80023c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c4:	445a      	add	r2, fp
 80023c6:	9209      	str	r2, [sp, #36]	; 0x24
 80023c8:	f89a 3000 	ldrb.w	r3, [sl]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a1 	beq.w	8002514 <_vfiprintf_r+0x1f0>
 80023d2:	2300      	movs	r3, #0
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023dc:	f10a 0a01 	add.w	sl, sl, #1
 80023e0:	9304      	str	r3, [sp, #16]
 80023e2:	9307      	str	r3, [sp, #28]
 80023e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023e8:	931a      	str	r3, [sp, #104]	; 0x68
 80023ea:	4654      	mov	r4, sl
 80023ec:	2205      	movs	r2, #5
 80023ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f2:	4854      	ldr	r0, [pc, #336]	; (8002544 <_vfiprintf_r+0x220>)
 80023f4:	f7fd feec 	bl	80001d0 <memchr>
 80023f8:	9a04      	ldr	r2, [sp, #16]
 80023fa:	b9d8      	cbnz	r0, 8002434 <_vfiprintf_r+0x110>
 80023fc:	06d1      	lsls	r1, r2, #27
 80023fe:	bf44      	itt	mi
 8002400:	2320      	movmi	r3, #32
 8002402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002406:	0713      	lsls	r3, r2, #28
 8002408:	bf44      	itt	mi
 800240a:	232b      	movmi	r3, #43	; 0x2b
 800240c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002410:	f89a 3000 	ldrb.w	r3, [sl]
 8002414:	2b2a      	cmp	r3, #42	; 0x2a
 8002416:	d015      	beq.n	8002444 <_vfiprintf_r+0x120>
 8002418:	9a07      	ldr	r2, [sp, #28]
 800241a:	4654      	mov	r4, sl
 800241c:	2000      	movs	r0, #0
 800241e:	f04f 0c0a 	mov.w	ip, #10
 8002422:	4621      	mov	r1, r4
 8002424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002428:	3b30      	subs	r3, #48	; 0x30
 800242a:	2b09      	cmp	r3, #9
 800242c:	d94d      	bls.n	80024ca <_vfiprintf_r+0x1a6>
 800242e:	b1b0      	cbz	r0, 800245e <_vfiprintf_r+0x13a>
 8002430:	9207      	str	r2, [sp, #28]
 8002432:	e014      	b.n	800245e <_vfiprintf_r+0x13a>
 8002434:	eba0 0308 	sub.w	r3, r0, r8
 8002438:	fa09 f303 	lsl.w	r3, r9, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	9304      	str	r3, [sp, #16]
 8002440:	46a2      	mov	sl, r4
 8002442:	e7d2      	b.n	80023ea <_vfiprintf_r+0xc6>
 8002444:	9b03      	ldr	r3, [sp, #12]
 8002446:	1d19      	adds	r1, r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	9103      	str	r1, [sp, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	bfbb      	ittet	lt
 8002450:	425b      	neglt	r3, r3
 8002452:	f042 0202 	orrlt.w	r2, r2, #2
 8002456:	9307      	strge	r3, [sp, #28]
 8002458:	9307      	strlt	r3, [sp, #28]
 800245a:	bfb8      	it	lt
 800245c:	9204      	strlt	r2, [sp, #16]
 800245e:	7823      	ldrb	r3, [r4, #0]
 8002460:	2b2e      	cmp	r3, #46	; 0x2e
 8002462:	d10c      	bne.n	800247e <_vfiprintf_r+0x15a>
 8002464:	7863      	ldrb	r3, [r4, #1]
 8002466:	2b2a      	cmp	r3, #42	; 0x2a
 8002468:	d134      	bne.n	80024d4 <_vfiprintf_r+0x1b0>
 800246a:	9b03      	ldr	r3, [sp, #12]
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	9203      	str	r2, [sp, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	bfb8      	it	lt
 8002476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800247a:	3402      	adds	r4, #2
 800247c:	9305      	str	r3, [sp, #20]
 800247e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002554 <_vfiprintf_r+0x230>
 8002482:	7821      	ldrb	r1, [r4, #0]
 8002484:	2203      	movs	r2, #3
 8002486:	4650      	mov	r0, sl
 8002488:	f7fd fea2 	bl	80001d0 <memchr>
 800248c:	b138      	cbz	r0, 800249e <_vfiprintf_r+0x17a>
 800248e:	9b04      	ldr	r3, [sp, #16]
 8002490:	eba0 000a 	sub.w	r0, r0, sl
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	4082      	lsls	r2, r0
 8002498:	4313      	orrs	r3, r2
 800249a:	3401      	adds	r4, #1
 800249c:	9304      	str	r3, [sp, #16]
 800249e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024a2:	4829      	ldr	r0, [pc, #164]	; (8002548 <_vfiprintf_r+0x224>)
 80024a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024a8:	2206      	movs	r2, #6
 80024aa:	f7fd fe91 	bl	80001d0 <memchr>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d03f      	beq.n	8002532 <_vfiprintf_r+0x20e>
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <_vfiprintf_r+0x228>)
 80024b4:	bb1b      	cbnz	r3, 80024fe <_vfiprintf_r+0x1da>
 80024b6:	9b03      	ldr	r3, [sp, #12]
 80024b8:	3307      	adds	r3, #7
 80024ba:	f023 0307 	bic.w	r3, r3, #7
 80024be:	3308      	adds	r3, #8
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024c4:	443b      	add	r3, r7
 80024c6:	9309      	str	r3, [sp, #36]	; 0x24
 80024c8:	e768      	b.n	800239c <_vfiprintf_r+0x78>
 80024ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80024ce:	460c      	mov	r4, r1
 80024d0:	2001      	movs	r0, #1
 80024d2:	e7a6      	b.n	8002422 <_vfiprintf_r+0xfe>
 80024d4:	2300      	movs	r3, #0
 80024d6:	3401      	adds	r4, #1
 80024d8:	9305      	str	r3, [sp, #20]
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 0c0a 	mov.w	ip, #10
 80024e0:	4620      	mov	r0, r4
 80024e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024e6:	3a30      	subs	r2, #48	; 0x30
 80024e8:	2a09      	cmp	r2, #9
 80024ea:	d903      	bls.n	80024f4 <_vfiprintf_r+0x1d0>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0c6      	beq.n	800247e <_vfiprintf_r+0x15a>
 80024f0:	9105      	str	r1, [sp, #20]
 80024f2:	e7c4      	b.n	800247e <_vfiprintf_r+0x15a>
 80024f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80024f8:	4604      	mov	r4, r0
 80024fa:	2301      	movs	r3, #1
 80024fc:	e7f0      	b.n	80024e0 <_vfiprintf_r+0x1bc>
 80024fe:	ab03      	add	r3, sp, #12
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	462a      	mov	r2, r5
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <_vfiprintf_r+0x22c>)
 8002506:	a904      	add	r1, sp, #16
 8002508:	4630      	mov	r0, r6
 800250a:	f3af 8000 	nop.w
 800250e:	4607      	mov	r7, r0
 8002510:	1c78      	adds	r0, r7, #1
 8002512:	d1d6      	bne.n	80024c2 <_vfiprintf_r+0x19e>
 8002514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002516:	07d9      	lsls	r1, r3, #31
 8002518:	d405      	bmi.n	8002526 <_vfiprintf_r+0x202>
 800251a:	89ab      	ldrh	r3, [r5, #12]
 800251c:	059a      	lsls	r2, r3, #22
 800251e:	d402      	bmi.n	8002526 <_vfiprintf_r+0x202>
 8002520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002522:	f7ff fddb 	bl	80020dc <__retarget_lock_release_recursive>
 8002526:	89ab      	ldrh	r3, [r5, #12]
 8002528:	065b      	lsls	r3, r3, #25
 800252a:	f53f af1d 	bmi.w	8002368 <_vfiprintf_r+0x44>
 800252e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002530:	e71c      	b.n	800236c <_vfiprintf_r+0x48>
 8002532:	ab03      	add	r3, sp, #12
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	462a      	mov	r2, r5
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <_vfiprintf_r+0x22c>)
 800253a:	a904      	add	r1, sp, #16
 800253c:	4630      	mov	r0, r6
 800253e:	f000 f879 	bl	8002634 <_printf_i>
 8002542:	e7e4      	b.n	800250e <_vfiprintf_r+0x1ea>
 8002544:	08002d1c 	.word	0x08002d1c
 8002548:	08002d26 	.word	0x08002d26
 800254c:	00000000 	.word	0x00000000
 8002550:	080022ff 	.word	0x080022ff
 8002554:	08002d22 	.word	0x08002d22

08002558 <_printf_common>:
 8002558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	4616      	mov	r6, r2
 800255e:	4699      	mov	r9, r3
 8002560:	688a      	ldr	r2, [r1, #8]
 8002562:	690b      	ldr	r3, [r1, #16]
 8002564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002568:	4293      	cmp	r3, r2
 800256a:	bfb8      	it	lt
 800256c:	4613      	movlt	r3, r2
 800256e:	6033      	str	r3, [r6, #0]
 8002570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002574:	4607      	mov	r7, r0
 8002576:	460c      	mov	r4, r1
 8002578:	b10a      	cbz	r2, 800257e <_printf_common+0x26>
 800257a:	3301      	adds	r3, #1
 800257c:	6033      	str	r3, [r6, #0]
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	0699      	lsls	r1, r3, #26
 8002582:	bf42      	ittt	mi
 8002584:	6833      	ldrmi	r3, [r6, #0]
 8002586:	3302      	addmi	r3, #2
 8002588:	6033      	strmi	r3, [r6, #0]
 800258a:	6825      	ldr	r5, [r4, #0]
 800258c:	f015 0506 	ands.w	r5, r5, #6
 8002590:	d106      	bne.n	80025a0 <_printf_common+0x48>
 8002592:	f104 0a19 	add.w	sl, r4, #25
 8002596:	68e3      	ldr	r3, [r4, #12]
 8002598:	6832      	ldr	r2, [r6, #0]
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	42ab      	cmp	r3, r5
 800259e:	dc26      	bgt.n	80025ee <_printf_common+0x96>
 80025a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025a4:	1e13      	subs	r3, r2, #0
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	bf18      	it	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	0692      	lsls	r2, r2, #26
 80025ae:	d42b      	bmi.n	8002608 <_printf_common+0xb0>
 80025b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025b4:	4649      	mov	r1, r9
 80025b6:	4638      	mov	r0, r7
 80025b8:	47c0      	blx	r8
 80025ba:	3001      	adds	r0, #1
 80025bc:	d01e      	beq.n	80025fc <_printf_common+0xa4>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6922      	ldr	r2, [r4, #16]
 80025c2:	f003 0306 	and.w	r3, r3, #6
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf02      	ittt	eq
 80025ca:	68e5      	ldreq	r5, [r4, #12]
 80025cc:	6833      	ldreq	r3, [r6, #0]
 80025ce:	1aed      	subeq	r5, r5, r3
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	bf0c      	ite	eq
 80025d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025d8:	2500      	movne	r5, #0
 80025da:	4293      	cmp	r3, r2
 80025dc:	bfc4      	itt	gt
 80025de:	1a9b      	subgt	r3, r3, r2
 80025e0:	18ed      	addgt	r5, r5, r3
 80025e2:	2600      	movs	r6, #0
 80025e4:	341a      	adds	r4, #26
 80025e6:	42b5      	cmp	r5, r6
 80025e8:	d11a      	bne.n	8002620 <_printf_common+0xc8>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e008      	b.n	8002600 <_printf_common+0xa8>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4652      	mov	r2, sl
 80025f2:	4649      	mov	r1, r9
 80025f4:	4638      	mov	r0, r7
 80025f6:	47c0      	blx	r8
 80025f8:	3001      	adds	r0, #1
 80025fa:	d103      	bne.n	8002604 <_printf_common+0xac>
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002604:	3501      	adds	r5, #1
 8002606:	e7c6      	b.n	8002596 <_printf_common+0x3e>
 8002608:	18e1      	adds	r1, r4, r3
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	2030      	movs	r0, #48	; 0x30
 800260e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002612:	4422      	add	r2, r4
 8002614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800261c:	3302      	adds	r3, #2
 800261e:	e7c7      	b.n	80025b0 <_printf_common+0x58>
 8002620:	2301      	movs	r3, #1
 8002622:	4622      	mov	r2, r4
 8002624:	4649      	mov	r1, r9
 8002626:	4638      	mov	r0, r7
 8002628:	47c0      	blx	r8
 800262a:	3001      	adds	r0, #1
 800262c:	d0e6      	beq.n	80025fc <_printf_common+0xa4>
 800262e:	3601      	adds	r6, #1
 8002630:	e7d9      	b.n	80025e6 <_printf_common+0x8e>
	...

08002634 <_printf_i>:
 8002634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	7e0f      	ldrb	r7, [r1, #24]
 800263a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800263c:	2f78      	cmp	r7, #120	; 0x78
 800263e:	4691      	mov	r9, r2
 8002640:	4680      	mov	r8, r0
 8002642:	460c      	mov	r4, r1
 8002644:	469a      	mov	sl, r3
 8002646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800264a:	d807      	bhi.n	800265c <_printf_i+0x28>
 800264c:	2f62      	cmp	r7, #98	; 0x62
 800264e:	d80a      	bhi.n	8002666 <_printf_i+0x32>
 8002650:	2f00      	cmp	r7, #0
 8002652:	f000 80d4 	beq.w	80027fe <_printf_i+0x1ca>
 8002656:	2f58      	cmp	r7, #88	; 0x58
 8002658:	f000 80c0 	beq.w	80027dc <_printf_i+0x1a8>
 800265c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002664:	e03a      	b.n	80026dc <_printf_i+0xa8>
 8002666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800266a:	2b15      	cmp	r3, #21
 800266c:	d8f6      	bhi.n	800265c <_printf_i+0x28>
 800266e:	a101      	add	r1, pc, #4	; (adr r1, 8002674 <_printf_i+0x40>)
 8002670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002674:	080026cd 	.word	0x080026cd
 8002678:	080026e1 	.word	0x080026e1
 800267c:	0800265d 	.word	0x0800265d
 8002680:	0800265d 	.word	0x0800265d
 8002684:	0800265d 	.word	0x0800265d
 8002688:	0800265d 	.word	0x0800265d
 800268c:	080026e1 	.word	0x080026e1
 8002690:	0800265d 	.word	0x0800265d
 8002694:	0800265d 	.word	0x0800265d
 8002698:	0800265d 	.word	0x0800265d
 800269c:	0800265d 	.word	0x0800265d
 80026a0:	080027e5 	.word	0x080027e5
 80026a4:	0800270d 	.word	0x0800270d
 80026a8:	0800279f 	.word	0x0800279f
 80026ac:	0800265d 	.word	0x0800265d
 80026b0:	0800265d 	.word	0x0800265d
 80026b4:	08002807 	.word	0x08002807
 80026b8:	0800265d 	.word	0x0800265d
 80026bc:	0800270d 	.word	0x0800270d
 80026c0:	0800265d 	.word	0x0800265d
 80026c4:	0800265d 	.word	0x0800265d
 80026c8:	080027a7 	.word	0x080027a7
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	1d1a      	adds	r2, r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	602a      	str	r2, [r5, #0]
 80026d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026dc:	2301      	movs	r3, #1
 80026de:	e09f      	b.n	8002820 <_printf_i+0x1ec>
 80026e0:	6820      	ldr	r0, [r4, #0]
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	0607      	lsls	r7, r0, #24
 80026e6:	f103 0104 	add.w	r1, r3, #4
 80026ea:	6029      	str	r1, [r5, #0]
 80026ec:	d501      	bpl.n	80026f2 <_printf_i+0xbe>
 80026ee:	681e      	ldr	r6, [r3, #0]
 80026f0:	e003      	b.n	80026fa <_printf_i+0xc6>
 80026f2:	0646      	lsls	r6, r0, #25
 80026f4:	d5fb      	bpl.n	80026ee <_printf_i+0xba>
 80026f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80026fa:	2e00      	cmp	r6, #0
 80026fc:	da03      	bge.n	8002706 <_printf_i+0xd2>
 80026fe:	232d      	movs	r3, #45	; 0x2d
 8002700:	4276      	negs	r6, r6
 8002702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002706:	485a      	ldr	r0, [pc, #360]	; (8002870 <_printf_i+0x23c>)
 8002708:	230a      	movs	r3, #10
 800270a:	e012      	b.n	8002732 <_printf_i+0xfe>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	6820      	ldr	r0, [r4, #0]
 8002710:	1d19      	adds	r1, r3, #4
 8002712:	6029      	str	r1, [r5, #0]
 8002714:	0605      	lsls	r5, r0, #24
 8002716:	d501      	bpl.n	800271c <_printf_i+0xe8>
 8002718:	681e      	ldr	r6, [r3, #0]
 800271a:	e002      	b.n	8002722 <_printf_i+0xee>
 800271c:	0641      	lsls	r1, r0, #25
 800271e:	d5fb      	bpl.n	8002718 <_printf_i+0xe4>
 8002720:	881e      	ldrh	r6, [r3, #0]
 8002722:	4853      	ldr	r0, [pc, #332]	; (8002870 <_printf_i+0x23c>)
 8002724:	2f6f      	cmp	r7, #111	; 0x6f
 8002726:	bf0c      	ite	eq
 8002728:	2308      	moveq	r3, #8
 800272a:	230a      	movne	r3, #10
 800272c:	2100      	movs	r1, #0
 800272e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002732:	6865      	ldr	r5, [r4, #4]
 8002734:	60a5      	str	r5, [r4, #8]
 8002736:	2d00      	cmp	r5, #0
 8002738:	bfa2      	ittt	ge
 800273a:	6821      	ldrge	r1, [r4, #0]
 800273c:	f021 0104 	bicge.w	r1, r1, #4
 8002740:	6021      	strge	r1, [r4, #0]
 8002742:	b90e      	cbnz	r6, 8002748 <_printf_i+0x114>
 8002744:	2d00      	cmp	r5, #0
 8002746:	d04b      	beq.n	80027e0 <_printf_i+0x1ac>
 8002748:	4615      	mov	r5, r2
 800274a:	fbb6 f1f3 	udiv	r1, r6, r3
 800274e:	fb03 6711 	mls	r7, r3, r1, r6
 8002752:	5dc7      	ldrb	r7, [r0, r7]
 8002754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002758:	4637      	mov	r7, r6
 800275a:	42bb      	cmp	r3, r7
 800275c:	460e      	mov	r6, r1
 800275e:	d9f4      	bls.n	800274a <_printf_i+0x116>
 8002760:	2b08      	cmp	r3, #8
 8002762:	d10b      	bne.n	800277c <_printf_i+0x148>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	07de      	lsls	r6, r3, #31
 8002768:	d508      	bpl.n	800277c <_printf_i+0x148>
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	6861      	ldr	r1, [r4, #4]
 800276e:	4299      	cmp	r1, r3
 8002770:	bfde      	ittt	le
 8002772:	2330      	movle	r3, #48	; 0x30
 8002774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800277c:	1b52      	subs	r2, r2, r5
 800277e:	6122      	str	r2, [r4, #16]
 8002780:	f8cd a000 	str.w	sl, [sp]
 8002784:	464b      	mov	r3, r9
 8002786:	aa03      	add	r2, sp, #12
 8002788:	4621      	mov	r1, r4
 800278a:	4640      	mov	r0, r8
 800278c:	f7ff fee4 	bl	8002558 <_printf_common>
 8002790:	3001      	adds	r0, #1
 8002792:	d14a      	bne.n	800282a <_printf_i+0x1f6>
 8002794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002798:	b004      	add	sp, #16
 800279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	f043 0320 	orr.w	r3, r3, #32
 80027a4:	6023      	str	r3, [r4, #0]
 80027a6:	4833      	ldr	r0, [pc, #204]	; (8002874 <_printf_i+0x240>)
 80027a8:	2778      	movs	r7, #120	; 0x78
 80027aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	6829      	ldr	r1, [r5, #0]
 80027b2:	061f      	lsls	r7, r3, #24
 80027b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80027b8:	d402      	bmi.n	80027c0 <_printf_i+0x18c>
 80027ba:	065f      	lsls	r7, r3, #25
 80027bc:	bf48      	it	mi
 80027be:	b2b6      	uxthmi	r6, r6
 80027c0:	07df      	lsls	r7, r3, #31
 80027c2:	bf48      	it	mi
 80027c4:	f043 0320 	orrmi.w	r3, r3, #32
 80027c8:	6029      	str	r1, [r5, #0]
 80027ca:	bf48      	it	mi
 80027cc:	6023      	strmi	r3, [r4, #0]
 80027ce:	b91e      	cbnz	r6, 80027d8 <_printf_i+0x1a4>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f023 0320 	bic.w	r3, r3, #32
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	2310      	movs	r3, #16
 80027da:	e7a7      	b.n	800272c <_printf_i+0xf8>
 80027dc:	4824      	ldr	r0, [pc, #144]	; (8002870 <_printf_i+0x23c>)
 80027de:	e7e4      	b.n	80027aa <_printf_i+0x176>
 80027e0:	4615      	mov	r5, r2
 80027e2:	e7bd      	b.n	8002760 <_printf_i+0x12c>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	6826      	ldr	r6, [r4, #0]
 80027e8:	6961      	ldr	r1, [r4, #20]
 80027ea:	1d18      	adds	r0, r3, #4
 80027ec:	6028      	str	r0, [r5, #0]
 80027ee:	0635      	lsls	r5, r6, #24
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	d501      	bpl.n	80027f8 <_printf_i+0x1c4>
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	e002      	b.n	80027fe <_printf_i+0x1ca>
 80027f8:	0670      	lsls	r0, r6, #25
 80027fa:	d5fb      	bpl.n	80027f4 <_printf_i+0x1c0>
 80027fc:	8019      	strh	r1, [r3, #0]
 80027fe:	2300      	movs	r3, #0
 8002800:	6123      	str	r3, [r4, #16]
 8002802:	4615      	mov	r5, r2
 8002804:	e7bc      	b.n	8002780 <_printf_i+0x14c>
 8002806:	682b      	ldr	r3, [r5, #0]
 8002808:	1d1a      	adds	r2, r3, #4
 800280a:	602a      	str	r2, [r5, #0]
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	6862      	ldr	r2, [r4, #4]
 8002810:	2100      	movs	r1, #0
 8002812:	4628      	mov	r0, r5
 8002814:	f7fd fcdc 	bl	80001d0 <memchr>
 8002818:	b108      	cbz	r0, 800281e <_printf_i+0x1ea>
 800281a:	1b40      	subs	r0, r0, r5
 800281c:	6060      	str	r0, [r4, #4]
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	6123      	str	r3, [r4, #16]
 8002822:	2300      	movs	r3, #0
 8002824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002828:	e7aa      	b.n	8002780 <_printf_i+0x14c>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	462a      	mov	r2, r5
 800282e:	4649      	mov	r1, r9
 8002830:	4640      	mov	r0, r8
 8002832:	47d0      	blx	sl
 8002834:	3001      	adds	r0, #1
 8002836:	d0ad      	beq.n	8002794 <_printf_i+0x160>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	079b      	lsls	r3, r3, #30
 800283c:	d413      	bmi.n	8002866 <_printf_i+0x232>
 800283e:	68e0      	ldr	r0, [r4, #12]
 8002840:	9b03      	ldr	r3, [sp, #12]
 8002842:	4298      	cmp	r0, r3
 8002844:	bfb8      	it	lt
 8002846:	4618      	movlt	r0, r3
 8002848:	e7a6      	b.n	8002798 <_printf_i+0x164>
 800284a:	2301      	movs	r3, #1
 800284c:	4632      	mov	r2, r6
 800284e:	4649      	mov	r1, r9
 8002850:	4640      	mov	r0, r8
 8002852:	47d0      	blx	sl
 8002854:	3001      	adds	r0, #1
 8002856:	d09d      	beq.n	8002794 <_printf_i+0x160>
 8002858:	3501      	adds	r5, #1
 800285a:	68e3      	ldr	r3, [r4, #12]
 800285c:	9903      	ldr	r1, [sp, #12]
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	42ab      	cmp	r3, r5
 8002862:	dcf2      	bgt.n	800284a <_printf_i+0x216>
 8002864:	e7eb      	b.n	800283e <_printf_i+0x20a>
 8002866:	2500      	movs	r5, #0
 8002868:	f104 0619 	add.w	r6, r4, #25
 800286c:	e7f5      	b.n	800285a <_printf_i+0x226>
 800286e:	bf00      	nop
 8002870:	08002d2d 	.word	0x08002d2d
 8002874:	08002d3e 	.word	0x08002d3e

08002878 <__sflush_r>:
 8002878:	898a      	ldrh	r2, [r1, #12]
 800287a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287e:	4605      	mov	r5, r0
 8002880:	0710      	lsls	r0, r2, #28
 8002882:	460c      	mov	r4, r1
 8002884:	d458      	bmi.n	8002938 <__sflush_r+0xc0>
 8002886:	684b      	ldr	r3, [r1, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	dc05      	bgt.n	8002898 <__sflush_r+0x20>
 800288c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	dc02      	bgt.n	8002898 <__sflush_r+0x20>
 8002892:	2000      	movs	r0, #0
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289a:	2e00      	cmp	r6, #0
 800289c:	d0f9      	beq.n	8002892 <__sflush_r+0x1a>
 800289e:	2300      	movs	r3, #0
 80028a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028a4:	682f      	ldr	r7, [r5, #0]
 80028a6:	6a21      	ldr	r1, [r4, #32]
 80028a8:	602b      	str	r3, [r5, #0]
 80028aa:	d032      	beq.n	8002912 <__sflush_r+0x9a>
 80028ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	075a      	lsls	r2, r3, #29
 80028b2:	d505      	bpl.n	80028c0 <__sflush_r+0x48>
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	1ac0      	subs	r0, r0, r3
 80028b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ba:	b10b      	cbz	r3, 80028c0 <__sflush_r+0x48>
 80028bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028be:	1ac0      	subs	r0, r0, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	4602      	mov	r2, r0
 80028c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028c6:	6a21      	ldr	r1, [r4, #32]
 80028c8:	4628      	mov	r0, r5
 80028ca:	47b0      	blx	r6
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	d106      	bne.n	80028e0 <__sflush_r+0x68>
 80028d2:	6829      	ldr	r1, [r5, #0]
 80028d4:	291d      	cmp	r1, #29
 80028d6:	d82b      	bhi.n	8002930 <__sflush_r+0xb8>
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <__sflush_r+0x108>)
 80028da:	410a      	asrs	r2, r1
 80028dc:	07d6      	lsls	r6, r2, #31
 80028de:	d427      	bmi.n	8002930 <__sflush_r+0xb8>
 80028e0:	2200      	movs	r2, #0
 80028e2:	6062      	str	r2, [r4, #4]
 80028e4:	04d9      	lsls	r1, r3, #19
 80028e6:	6922      	ldr	r2, [r4, #16]
 80028e8:	6022      	str	r2, [r4, #0]
 80028ea:	d504      	bpl.n	80028f6 <__sflush_r+0x7e>
 80028ec:	1c42      	adds	r2, r0, #1
 80028ee:	d101      	bne.n	80028f4 <__sflush_r+0x7c>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b903      	cbnz	r3, 80028f6 <__sflush_r+0x7e>
 80028f4:	6560      	str	r0, [r4, #84]	; 0x54
 80028f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028f8:	602f      	str	r7, [r5, #0]
 80028fa:	2900      	cmp	r1, #0
 80028fc:	d0c9      	beq.n	8002892 <__sflush_r+0x1a>
 80028fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002902:	4299      	cmp	r1, r3
 8002904:	d002      	beq.n	800290c <__sflush_r+0x94>
 8002906:	4628      	mov	r0, r5
 8002908:	f7ff fbea 	bl	80020e0 <_free_r>
 800290c:	2000      	movs	r0, #0
 800290e:	6360      	str	r0, [r4, #52]	; 0x34
 8002910:	e7c0      	b.n	8002894 <__sflush_r+0x1c>
 8002912:	2301      	movs	r3, #1
 8002914:	4628      	mov	r0, r5
 8002916:	47b0      	blx	r6
 8002918:	1c41      	adds	r1, r0, #1
 800291a:	d1c8      	bne.n	80028ae <__sflush_r+0x36>
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0c5      	beq.n	80028ae <__sflush_r+0x36>
 8002922:	2b1d      	cmp	r3, #29
 8002924:	d001      	beq.n	800292a <__sflush_r+0xb2>
 8002926:	2b16      	cmp	r3, #22
 8002928:	d101      	bne.n	800292e <__sflush_r+0xb6>
 800292a:	602f      	str	r7, [r5, #0]
 800292c:	e7b1      	b.n	8002892 <__sflush_r+0x1a>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	e7ad      	b.n	8002894 <__sflush_r+0x1c>
 8002938:	690f      	ldr	r7, [r1, #16]
 800293a:	2f00      	cmp	r7, #0
 800293c:	d0a9      	beq.n	8002892 <__sflush_r+0x1a>
 800293e:	0793      	lsls	r3, r2, #30
 8002940:	680e      	ldr	r6, [r1, #0]
 8002942:	bf08      	it	eq
 8002944:	694b      	ldreq	r3, [r1, #20]
 8002946:	600f      	str	r7, [r1, #0]
 8002948:	bf18      	it	ne
 800294a:	2300      	movne	r3, #0
 800294c:	eba6 0807 	sub.w	r8, r6, r7
 8002950:	608b      	str	r3, [r1, #8]
 8002952:	f1b8 0f00 	cmp.w	r8, #0
 8002956:	dd9c      	ble.n	8002892 <__sflush_r+0x1a>
 8002958:	6a21      	ldr	r1, [r4, #32]
 800295a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800295c:	4643      	mov	r3, r8
 800295e:	463a      	mov	r2, r7
 8002960:	4628      	mov	r0, r5
 8002962:	47b0      	blx	r6
 8002964:	2800      	cmp	r0, #0
 8002966:	dc06      	bgt.n	8002976 <__sflush_r+0xfe>
 8002968:	89a3      	ldrh	r3, [r4, #12]
 800296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296e:	81a3      	strh	r3, [r4, #12]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002974:	e78e      	b.n	8002894 <__sflush_r+0x1c>
 8002976:	4407      	add	r7, r0
 8002978:	eba8 0800 	sub.w	r8, r8, r0
 800297c:	e7e9      	b.n	8002952 <__sflush_r+0xda>
 800297e:	bf00      	nop
 8002980:	dfbffffe 	.word	0xdfbffffe

08002984 <_fflush_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	690b      	ldr	r3, [r1, #16]
 8002988:	4605      	mov	r5, r0
 800298a:	460c      	mov	r4, r1
 800298c:	b913      	cbnz	r3, 8002994 <_fflush_r+0x10>
 800298e:	2500      	movs	r5, #0
 8002990:	4628      	mov	r0, r5
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	b118      	cbz	r0, 800299e <_fflush_r+0x1a>
 8002996:	6a03      	ldr	r3, [r0, #32]
 8002998:	b90b      	cbnz	r3, 800299e <_fflush_r+0x1a>
 800299a:	f7ff fa91 	bl	8001ec0 <__sinit>
 800299e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f3      	beq.n	800298e <_fflush_r+0xa>
 80029a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029a8:	07d0      	lsls	r0, r2, #31
 80029aa:	d404      	bmi.n	80029b6 <_fflush_r+0x32>
 80029ac:	0599      	lsls	r1, r3, #22
 80029ae:	d402      	bmi.n	80029b6 <_fflush_r+0x32>
 80029b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029b2:	f7ff fb92 	bl	80020da <__retarget_lock_acquire_recursive>
 80029b6:	4628      	mov	r0, r5
 80029b8:	4621      	mov	r1, r4
 80029ba:	f7ff ff5d 	bl	8002878 <__sflush_r>
 80029be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029c0:	07da      	lsls	r2, r3, #31
 80029c2:	4605      	mov	r5, r0
 80029c4:	d4e4      	bmi.n	8002990 <_fflush_r+0xc>
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	059b      	lsls	r3, r3, #22
 80029ca:	d4e1      	bmi.n	8002990 <_fflush_r+0xc>
 80029cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ce:	f7ff fb85 	bl	80020dc <__retarget_lock_release_recursive>
 80029d2:	e7dd      	b.n	8002990 <_fflush_r+0xc>

080029d4 <_putc_r>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	460d      	mov	r5, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	4606      	mov	r6, r0
 80029dc:	b118      	cbz	r0, 80029e6 <_putc_r+0x12>
 80029de:	6a03      	ldr	r3, [r0, #32]
 80029e0:	b90b      	cbnz	r3, 80029e6 <_putc_r+0x12>
 80029e2:	f7ff fa6d 	bl	8001ec0 <__sinit>
 80029e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029e8:	07d8      	lsls	r0, r3, #31
 80029ea:	d405      	bmi.n	80029f8 <_putc_r+0x24>
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	0599      	lsls	r1, r3, #22
 80029f0:	d402      	bmi.n	80029f8 <_putc_r+0x24>
 80029f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029f4:	f7ff fb71 	bl	80020da <__retarget_lock_acquire_recursive>
 80029f8:	68a3      	ldr	r3, [r4, #8]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	60a3      	str	r3, [r4, #8]
 8002a00:	da05      	bge.n	8002a0e <_putc_r+0x3a>
 8002a02:	69a2      	ldr	r2, [r4, #24]
 8002a04:	4293      	cmp	r3, r2
 8002a06:	db12      	blt.n	8002a2e <_putc_r+0x5a>
 8002a08:	b2eb      	uxtb	r3, r5
 8002a0a:	2b0a      	cmp	r3, #10
 8002a0c:	d00f      	beq.n	8002a2e <_putc_r+0x5a>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	6022      	str	r2, [r4, #0]
 8002a14:	701d      	strb	r5, [r3, #0]
 8002a16:	b2ed      	uxtb	r5, r5
 8002a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a1a:	07da      	lsls	r2, r3, #31
 8002a1c:	d405      	bmi.n	8002a2a <_putc_r+0x56>
 8002a1e:	89a3      	ldrh	r3, [r4, #12]
 8002a20:	059b      	lsls	r3, r3, #22
 8002a22:	d402      	bmi.n	8002a2a <_putc_r+0x56>
 8002a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a26:	f7ff fb59 	bl	80020dc <__retarget_lock_release_recursive>
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
 8002a2e:	4629      	mov	r1, r5
 8002a30:	4622      	mov	r2, r4
 8002a32:	4630      	mov	r0, r6
 8002a34:	f000 f802 	bl	8002a3c <__swbuf_r>
 8002a38:	4605      	mov	r5, r0
 8002a3a:	e7ed      	b.n	8002a18 <_putc_r+0x44>

08002a3c <__swbuf_r>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	460e      	mov	r6, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4605      	mov	r5, r0
 8002a44:	b118      	cbz	r0, 8002a4e <__swbuf_r+0x12>
 8002a46:	6a03      	ldr	r3, [r0, #32]
 8002a48:	b90b      	cbnz	r3, 8002a4e <__swbuf_r+0x12>
 8002a4a:	f7ff fa39 	bl	8001ec0 <__sinit>
 8002a4e:	69a3      	ldr	r3, [r4, #24]
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	071a      	lsls	r2, r3, #28
 8002a56:	d525      	bpl.n	8002aa4 <__swbuf_r+0x68>
 8002a58:	6923      	ldr	r3, [r4, #16]
 8002a5a:	b31b      	cbz	r3, 8002aa4 <__swbuf_r+0x68>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	6922      	ldr	r2, [r4, #16]
 8002a60:	1a98      	subs	r0, r3, r2
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	b2f6      	uxtb	r6, r6
 8002a66:	4283      	cmp	r3, r0
 8002a68:	4637      	mov	r7, r6
 8002a6a:	dc04      	bgt.n	8002a76 <__swbuf_r+0x3a>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f7ff ff88 	bl	8002984 <_fflush_r>
 8002a74:	b9e0      	cbnz	r0, 8002ab0 <__swbuf_r+0x74>
 8002a76:	68a3      	ldr	r3, [r4, #8]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	6022      	str	r2, [r4, #0]
 8002a82:	701e      	strb	r6, [r3, #0]
 8002a84:	6962      	ldr	r2, [r4, #20]
 8002a86:	1c43      	adds	r3, r0, #1
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d004      	beq.n	8002a96 <__swbuf_r+0x5a>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	07db      	lsls	r3, r3, #31
 8002a90:	d506      	bpl.n	8002aa0 <__swbuf_r+0x64>
 8002a92:	2e0a      	cmp	r6, #10
 8002a94:	d104      	bne.n	8002aa0 <__swbuf_r+0x64>
 8002a96:	4621      	mov	r1, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f7ff ff73 	bl	8002984 <_fflush_r>
 8002a9e:	b938      	cbnz	r0, 8002ab0 <__swbuf_r+0x74>
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 f806 	bl	8002ab8 <__swsetup_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d0d5      	beq.n	8002a5c <__swbuf_r+0x20>
 8002ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ab4:	e7f4      	b.n	8002aa0 <__swbuf_r+0x64>
	...

08002ab8 <__swsetup_r>:
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <__swsetup_r+0xac>)
 8002abc:	4605      	mov	r5, r0
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	b118      	cbz	r0, 8002acc <__swsetup_r+0x14>
 8002ac4:	6a03      	ldr	r3, [r0, #32]
 8002ac6:	b90b      	cbnz	r3, 8002acc <__swsetup_r+0x14>
 8002ac8:	f7ff f9fa 	bl	8001ec0 <__sinit>
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ad2:	0718      	lsls	r0, r3, #28
 8002ad4:	d422      	bmi.n	8002b1c <__swsetup_r+0x64>
 8002ad6:	06d9      	lsls	r1, r3, #27
 8002ad8:	d407      	bmi.n	8002aea <__swsetup_r+0x32>
 8002ada:	2309      	movs	r3, #9
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ae2:	81a3      	strh	r3, [r4, #12]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae8:	e034      	b.n	8002b54 <__swsetup_r+0x9c>
 8002aea:	0758      	lsls	r0, r3, #29
 8002aec:	d512      	bpl.n	8002b14 <__swsetup_r+0x5c>
 8002aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002af0:	b141      	cbz	r1, 8002b04 <__swsetup_r+0x4c>
 8002af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002af6:	4299      	cmp	r1, r3
 8002af8:	d002      	beq.n	8002b00 <__swsetup_r+0x48>
 8002afa:	4628      	mov	r0, r5
 8002afc:	f7ff faf0 	bl	80020e0 <_free_r>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6363      	str	r3, [r4, #52]	; 0x34
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6063      	str	r3, [r4, #4]
 8002b10:	6923      	ldr	r3, [r4, #16]
 8002b12:	6023      	str	r3, [r4, #0]
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	6923      	ldr	r3, [r4, #16]
 8002b1e:	b94b      	cbnz	r3, 8002b34 <__swsetup_r+0x7c>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2a:	d003      	beq.n	8002b34 <__swsetup_r+0x7c>
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 f850 	bl	8002bd4 <__smakebuf_r>
 8002b34:	89a0      	ldrh	r0, [r4, #12]
 8002b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b3a:	f010 0301 	ands.w	r3, r0, #1
 8002b3e:	d00a      	beq.n	8002b56 <__swsetup_r+0x9e>
 8002b40:	2300      	movs	r3, #0
 8002b42:	60a3      	str	r3, [r4, #8]
 8002b44:	6963      	ldr	r3, [r4, #20]
 8002b46:	425b      	negs	r3, r3
 8002b48:	61a3      	str	r3, [r4, #24]
 8002b4a:	6923      	ldr	r3, [r4, #16]
 8002b4c:	b943      	cbnz	r3, 8002b60 <__swsetup_r+0xa8>
 8002b4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b52:	d1c4      	bne.n	8002ade <__swsetup_r+0x26>
 8002b54:	bd38      	pop	{r3, r4, r5, pc}
 8002b56:	0781      	lsls	r1, r0, #30
 8002b58:	bf58      	it	pl
 8002b5a:	6963      	ldrpl	r3, [r4, #20]
 8002b5c:	60a3      	str	r3, [r4, #8]
 8002b5e:	e7f4      	b.n	8002b4a <__swsetup_r+0x92>
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7f7      	b.n	8002b54 <__swsetup_r+0x9c>
 8002b64:	20000064 	.word	0x20000064

08002b68 <_sbrk_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4d06      	ldr	r5, [pc, #24]	; (8002b84 <_sbrk_r+0x1c>)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4608      	mov	r0, r1
 8002b72:	602b      	str	r3, [r5, #0]
 8002b74:	f7fd ff66 	bl	8000a44 <_sbrk>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_sbrk_r+0x1a>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_sbrk_r+0x1a>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	20000254 	.word	0x20000254

08002b88 <__swhatbuf_r>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b90:	2900      	cmp	r1, #0
 8002b92:	b096      	sub	sp, #88	; 0x58
 8002b94:	4615      	mov	r5, r2
 8002b96:	461e      	mov	r6, r3
 8002b98:	da0d      	bge.n	8002bb6 <__swhatbuf_r+0x2e>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	bf0c      	ite	eq
 8002ba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002baa:	2340      	movne	r3, #64	; 0x40
 8002bac:	2000      	movs	r0, #0
 8002bae:	6031      	str	r1, [r6, #0]
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	b016      	add	sp, #88	; 0x58
 8002bb4:	bd70      	pop	{r4, r5, r6, pc}
 8002bb6:	466a      	mov	r2, sp
 8002bb8:	f000 f848 	bl	8002c4c <_fstat_r>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	dbec      	blt.n	8002b9a <__swhatbuf_r+0x12>
 8002bc0:	9901      	ldr	r1, [sp, #4]
 8002bc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002bc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002bca:	4259      	negs	r1, r3
 8002bcc:	4159      	adcs	r1, r3
 8002bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd2:	e7eb      	b.n	8002bac <__swhatbuf_r+0x24>

08002bd4 <__smakebuf_r>:
 8002bd4:	898b      	ldrh	r3, [r1, #12]
 8002bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bd8:	079d      	lsls	r5, r3, #30
 8002bda:	4606      	mov	r6, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	d507      	bpl.n	8002bf0 <__smakebuf_r+0x1c>
 8002be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	6123      	str	r3, [r4, #16]
 8002be8:	2301      	movs	r3, #1
 8002bea:	6163      	str	r3, [r4, #20]
 8002bec:	b002      	add	sp, #8
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	ab01      	add	r3, sp, #4
 8002bf2:	466a      	mov	r2, sp
 8002bf4:	f7ff ffc8 	bl	8002b88 <__swhatbuf_r>
 8002bf8:	9900      	ldr	r1, [sp, #0]
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f7ff fadb 	bl	80021b8 <_malloc_r>
 8002c02:	b948      	cbnz	r0, 8002c18 <__smakebuf_r+0x44>
 8002c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c08:	059a      	lsls	r2, r3, #22
 8002c0a:	d4ef      	bmi.n	8002bec <__smakebuf_r+0x18>
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	e7e3      	b.n	8002be0 <__smakebuf_r+0xc>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	6020      	str	r0, [r4, #0]
 8002c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c20:	81a3      	strh	r3, [r4, #12]
 8002c22:	9b00      	ldr	r3, [sp, #0]
 8002c24:	6163      	str	r3, [r4, #20]
 8002c26:	9b01      	ldr	r3, [sp, #4]
 8002c28:	6120      	str	r0, [r4, #16]
 8002c2a:	b15b      	cbz	r3, 8002c44 <__smakebuf_r+0x70>
 8002c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c30:	4630      	mov	r0, r6
 8002c32:	f000 f81d 	bl	8002c70 <_isatty_r>
 8002c36:	b128      	cbz	r0, 8002c44 <__smakebuf_r+0x70>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	431d      	orrs	r5, r3
 8002c48:	81a5      	strh	r5, [r4, #12]
 8002c4a:	e7cf      	b.n	8002bec <__smakebuf_r+0x18>

08002c4c <_fstat_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d07      	ldr	r5, [pc, #28]	; (8002c6c <_fstat_r+0x20>)
 8002c50:	2300      	movs	r3, #0
 8002c52:	4604      	mov	r4, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	602b      	str	r3, [r5, #0]
 8002c5a:	f7fd feea 	bl	8000a32 <_fstat>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	d102      	bne.n	8002c68 <_fstat_r+0x1c>
 8002c62:	682b      	ldr	r3, [r5, #0]
 8002c64:	b103      	cbz	r3, 8002c68 <_fstat_r+0x1c>
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000254 	.word	0x20000254

08002c70 <_isatty_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4d06      	ldr	r5, [pc, #24]	; (8002c8c <_isatty_r+0x1c>)
 8002c74:	2300      	movs	r3, #0
 8002c76:	4604      	mov	r4, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	f7fd fede 	bl	8000a3c <_isatty>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_isatty_r+0x1a>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_isatty_r+0x1a>
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	20000254 	.word	0x20000254

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
