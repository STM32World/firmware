
MCUSTM32F405_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008884  08008884  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800888c  0800888c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08008894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001dc0  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f18  20001f18  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011659  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000305f  00000000  00000000  00031824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e20  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa2  00000000  00000000  000356a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f50  00000000  00000000  0003614a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012038  00000000  00000000  0005809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd3b2  00000000  00000000  0006a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000040e4  00000000  00000000  00127484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0012b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087cc 	.word	0x080087cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080087cc 	.word	0x080087cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 fd83 	bl	800309a <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000174 	.word	0x20000174

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fa95 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f83f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8d1 	bl	800076c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f8a5 	bl	8000718 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ce:	f006 fca9 	bl	8006f24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

    DBG("\n\n\n--------\nStarting");
 80005d2:	4818      	ldr	r0, [pc, #96]	; (8000634 <main+0x7c>)
 80005d4:	f007 fa4a 	bl	8007a6c <iprintf>
 80005d8:	200a      	movs	r0, #10
 80005da:	f007 fa59 	bl	8007a90 <putchar>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_tick = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]

    while (1) {

        now = HAL_GetTick();
 80005ea:	f000 fae5 	bl	8000bb8 <HAL_GetTick>
 80005ee:	6078      	str	r0, [r7, #4]

        if (now - last_blink >= 500) {
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005fa:	d306      	bcc.n	800060a <main+0x52>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0x80>)
 8000602:	f000 fdd0 	bl	80011a6 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]
        }

        if (now - last_tick >= 1000) {
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000614:	d3e9      	bcc.n	80005ea <main+0x32>
            DBG("Tick %lu", now / 1000);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a08      	ldr	r2, [pc, #32]	; (800063c <main+0x84>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	099b      	lsrs	r3, r3, #6
 8000620:	4619      	mov	r1, r3
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <main+0x88>)
 8000624:	f007 fa22 	bl	8007a6c <iprintf>
 8000628:	200a      	movs	r0, #10
 800062a:	f007 fa31 	bl	8007a90 <putchar>
            last_tick = now;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60bb      	str	r3, [r7, #8]
        now = HAL_GetTick();
 8000632:	e7da      	b.n	80005ea <main+0x32>
 8000634:	080087e4 	.word	0x080087e4
 8000638:	40020800 	.word	0x40020800
 800063c:	10624dd3 	.word	0x10624dd3
 8000640:	080087fc 	.word	0x080087fc

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fa67 	bl	8007b26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f803 	bl	80026d4 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f89c 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fa64 	bl	8002bc4 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f885 	bl	8000810 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART1_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000724:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART1_UART_Init+0x4c>)
 8000750:	f002 fc56 	bl	8003000 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f859 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000174 	.word	0x20000174
 8000768:	40011000 	.word	0x40011000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0x9c>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xa0>)
 80007de:	f000 fcc9 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xa0>)
 80007fc:	f000 fb1e 	bl	8000e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12c      	bne.n	80008e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d8:	2307      	movs	r3, #7
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_UART_MspInit+0x8c>)
 80008e4:	f000 faaa 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40011000 	.word	0x40011000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f922 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <OTG_FS_IRQHandler+0x10>)
 8000956:	f000 fd90 	bl	800147a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200016a0 	.word	0x200016a0

08000964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_close>:
  }
  return len;
}

int _close(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c6:	605a      	str	r2, [r3, #4]
  return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_isatty>:

int _isatty(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f007 f8c4 	bl	8007bc4 <__errno>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20020000 	.word	0x20020000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200001b8 	.word	0x200001b8
 8000a70:	20001f18 	.word	0x20001f18

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9e:	490e      	ldr	r1, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab4:	4c0b      	ldr	r4, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ac2:	f7ff ffd7 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f007 f883 	bl	8007bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd75 	bl	80005b8 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000adc:	08008894 	.word	0x08008894
  ldr r2, =_sbss
 8000ae0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000ae4:	20001f18 	.word	0x20001f18

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f94f 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe7c 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f967 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 f92f 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	200001bc 	.word	0x200001bc

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200001bc 	.word	0x200001bc

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e16b      	b.n	8001130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 815a 	bne.w	800112a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b4 	beq.w	800112a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a5b      	ldr	r2, [pc, #364]	; (800114c <HAL_GPIO_Init+0x310>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x324>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x328>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x32c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x330>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x20a>
 8001042:	2307      	movs	r3, #7
 8001044:	e00e      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001046:	2308      	movs	r3, #8
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104a:	2306      	movs	r3, #6
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_GPIO_Init+0x310>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a32      	ldr	r2, [pc, #200]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae90 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40021400 	.word	0x40021400
 8001168:	40021800 	.word	0x40021800
 800116c:	40021c00 	.word	0x40021c00
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	400b      	ands	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011dc:	b08f      	sub	sp, #60	; 0x3c
 80011de:	af0a      	add	r7, sp, #40	; 0x28
 80011e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e10f      	b.n	800140c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f006 f86c 	bl	80072e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fbbf 	bl	80039ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	687e      	ldr	r6, [r7, #4]
 8001238:	466d      	mov	r5, sp
 800123a:	f106 0410 	add.w	r4, r6, #16
 800123e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800124a:	e885 0003 	stmia.w	r5, {r0, r1}
 800124e:	1d33      	adds	r3, r6, #4
 8001250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f002 fa96 	bl	8003784 <USB_CoreInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0d0      	b.n	800140c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fbad 	bl	80039d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e04a      	b.n	8001312 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	333d      	adds	r3, #61	; 0x3d
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	333c      	adds	r3, #60	; 0x3c
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	b298      	uxth	r0, r3
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3344      	adds	r3, #68	; 0x44
 80012b8:	4602      	mov	r2, r0
 80012ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3340      	adds	r3, #64	; 0x40
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3348      	adds	r3, #72	; 0x48
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	334c      	adds	r3, #76	; 0x4c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3354      	adds	r3, #84	; 0x54
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3af      	bcc.n	800127c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e044      	b.n	80013ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3b5      	bcc.n	8001322 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	687e      	ldr	r6, [r7, #4]
 80013be:	466d      	mov	r5, sp
 80013c0:	f106 0410 	add.w	r4, r6, #16
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d4:	1d33      	adds	r3, r6, #4
 80013d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f002 fb45 	bl	8003a68 <USB_DevInit>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00d      	b.n	800140c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fc94 	bl	8004d32 <USB_DevDisconnect>

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001414 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_Start+0x1c>
 800142c:	2302      	movs	r3, #2
 800142e:	e020      	b.n	8001472 <HAL_PCD_Start+0x5e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	2b01      	cmp	r3, #1
 800143e:	d109      	bne.n	8001454 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fa97 	bl	800398c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fc44 	bl	8004cf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b08d      	sub	sp, #52	; 0x34
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fd02 	bl	8004e9a <USB_GetMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 848a 	bne.w	8001db2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fc66 	bl	8004d74 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8480 	beq.w	8001db0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fc53 	bl	8004d74 <USB_ReadInterrupts>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d107      	bne.n	80014e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f002 0202 	and.w	r2, r2, #2
 80014e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fc41 	bl	8004d74 <USB_ReadInterrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b10      	cmp	r3, #16
 80014fa:	d161      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0210 	bic.w	r2, r2, #16
 800150a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f003 020f 	and.w	r2, r3, #15
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	0c5b      	lsrs	r3, r3, #17
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	2b02      	cmp	r3, #2
 8001536:	d124      	bne.n	8001582 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d035      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800154e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	6a38      	ldr	r0, [r7, #32]
 8001558:	f003 fa78 	bl	8004a4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001568:	441a      	add	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157a:	441a      	add	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	621a      	str	r2, [r3, #32]
 8001580:	e016      	b.n	80015b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	0c5b      	lsrs	r3, r3, #17
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	2b06      	cmp	r3, #6
 800158c:	d110      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001594:	2208      	movs	r2, #8
 8001596:	4619      	mov	r1, r3
 8001598:	6a38      	ldr	r0, [r7, #32]
 800159a:	f003 fa57 	bl	8004a4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015aa:	441a      	add	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0210 	orr.w	r2, r2, #16
 80015be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fbd5 	bl	8004d74 <USB_ReadInterrupts>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015d4:	f040 80a7 	bne.w	8001726 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fbda 	bl	8004d9a <USB_ReadDevAllOutEpInterrupt>
 80015e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015e8:	e099      	b.n	800171e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 808e 	beq.w	8001712 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fbfe 	bl	8004e02 <USB_ReadDevOutEPInterrupt>
 8001606:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00c      	beq.n	800162c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161e:	461a      	mov	r2, r3
 8001620:	2301      	movs	r3, #1
 8001622:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fec2 	bl	80023b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001642:	461a      	mov	r2, r3
 8001644:	2308      	movs	r3, #8
 8001646:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 ff98 	bl	8002580 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001666:	461a      	mov	r2, r3
 8001668:	2310      	movs	r3, #16
 800166a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d030      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b80      	cmp	r3, #128	; 0x80
 8001680:	d109      	bne.n	8001696 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001694:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f005 ff15 	bl	80074f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d2:	461a      	mov	r2, r3
 80016d4:	2302      	movs	r3, #2
 80016d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	461a      	mov	r2, r3
 80016f0:	2320      	movs	r3, #32
 80016f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170a:	461a      	mov	r2, r3
 800170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001710:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f af62 	bne.w	80015ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fb22 	bl	8004d74 <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800173a:	f040 80db 	bne.w	80018f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fb43 	bl	8004dce <USB_ReadDevAllInEpInterrupt>
 8001748:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800174e:	e0cd      	b.n	80018ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80c2 	beq.w	80018e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fb69 	bl	8004e3e <USB_ReadDevInEPInterrupt>
 800176c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d057      	beq.n	8001828 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	2201      	movs	r2, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	69f9      	ldr	r1, [r7, #28]
 8001794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001798:	4013      	ands	r3, r2
 800179a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a8:	461a      	mov	r2, r3
 80017aa:	2301      	movs	r3, #1
 80017ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d132      	bne.n	800181c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	334c      	adds	r3, #76	; 0x4c
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4403      	add	r3, r0
 80017d6:	3348      	adds	r3, #72	; 0x48
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4419      	add	r1, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4403      	add	r3, r0
 80017ea:	334c      	adds	r3, #76	; 0x4c
 80017ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d113      	bne.n	800181c <HAL_PCD_IRQHandler+0x3a2>
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	4613      	mov	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	3354      	adds	r3, #84	; 0x54
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d108      	bne.n	800181c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001814:	461a      	mov	r2, r3
 8001816:	2101      	movs	r1, #1
 8001818:	f003 fb70 	bl	8004efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f005 fddf 	bl	80073e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183e:	461a      	mov	r2, r3
 8001840:	2308      	movs	r3, #8
 8001842:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185a:	461a      	mov	r2, r3
 800185c:	2310      	movs	r3, #16
 800185e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001876:	461a      	mov	r2, r3
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001888:	6a38      	ldr	r0, [r7, #32]
 800188a:	f002 fa51 	bl	8003d30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	3338      	adds	r3, #56	; 0x38
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d108      	bne.n	80018bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 fe2c 	bl	8007514 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018c8:	461a      	mov	r2, r3
 80018ca:	2302      	movs	r3, #2
 80018cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fcdb 	bl	8002296 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	3301      	adds	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f af2e 	bne.w	8001750 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fa3b 	bl	8004d74 <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001908:	d122      	bne.n	8001950 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001930:	2100      	movs	r1, #0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fec2 	bl	80026bc <HAL_PCDEx_LPM_Callback>
 8001938:	e002      	b.n	8001940 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f005 fdca 	bl	80074d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fa0d 	bl	8004d74 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001964:	d112      	bne.n	800198c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d102      	bne.n	800197c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f005 fd86 	bl	8007488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800198a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f9ef 	bl	8004d74 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a0:	f040 80b7 	bne.w	8001b12 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2110      	movs	r1, #16
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 f9b6 	bl	8003d30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c8:	e046      	b.n	8001a58 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d6:	461a      	mov	r2, r3
 80019d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ee:	0151      	lsls	r1, r2, #5
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	440a      	add	r2, r1
 80019f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	0151      	lsls	r1, r2, #5
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	440a      	add	r2, r1
 8001a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	0151      	lsls	r1, r2, #5
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	440a      	add	r2, r1
 8001a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	3301      	adds	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3b3      	bcc.n	80019ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8e:	f043 030b 	orr.w	r3, r3, #11
 8001a92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa4:	f043 030b 	orr.w	r3, r3, #11
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	e015      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001abe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ac2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad2:	f043 030b 	orr.w	r3, r3, #11
 8001ad6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001aea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001afc:	461a      	mov	r2, r3
 8001afe:	f003 f9fd 	bl	8004efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 f92c 	bl	8004d74 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b26:	d124      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f9c2 	bl	8004eb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f977 	bl	8003e2a <USB_GetDevSpeed>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	f001 fa26 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f001 fe76 	bl	8003848 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f005 fc6a 	bl	8007436 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f8fc 	bl	8004d74 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d10a      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 fc47 	bl	800741a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f002 0208 	and.w	r2, r2, #8
 8001b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f8e7 	bl	8004d74 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d122      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e014      	b.n	8001bec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fb27 	bl	8002234 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	3301      	adds	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3e5      	bcc.n	8001bc2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f8ba 	bl	8004d74 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d13b      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	e02b      	b.n	8001c6a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3340      	adds	r3, #64	; 0x40
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d115      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da12      	bge.n	8001c64 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	333f      	adds	r3, #63	; 0x3f
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fae8 	bl	8002234 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	3301      	adds	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3ce      	bcc.n	8001c12 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f873 	bl	8004d74 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c98:	d155      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e045      	b.n	8001d2c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d12e      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da2b      	bge.n	8001d26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cda:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d121      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d22:	6053      	str	r3, [r2, #4]
            break;
 8001d24:	e007      	b.n	8001d36 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3b4      	bcc.n	8001ca0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 f812 	bl	8004d74 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d10a      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f005 fbeb 	bl	8007538 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fffc 	bl	8004d74 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d115      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f005 fbdb 	bl	8007554 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	e000      	b.n	8001db2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001db0:	bf00      	nop
    }
  }
}
 8001db2:	3734      	adds	r7, #52	; 0x34
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}

08001db8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_SetAddress+0x1a>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e013      	b.n	8001dfa <HAL_PCD_SetAddress+0x42>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 ff5a 	bl	8004ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	460b      	mov	r3, r1
 8001e16:	803b      	strh	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0f      	bge.n	8001e48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3338      	adds	r3, #56	; 0x38
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
 8001e46:	e00f      	b.n	8001e68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e74:	883a      	ldrh	r2, [r7, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	78ba      	ldrb	r2, [r7, #2]
 8001e7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e92:	78bb      	ldrb	r3, [r7, #2]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_PCD_EP_Open+0xaa>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e00e      	b.n	8001eca <HAL_PCD_EP_Open+0xc8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 ffda 	bl	8003e74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0f      	bge.n	8001f06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3338      	adds	r3, #56	; 0x38
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00f      	b.n	8001f26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Close+0x6e>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Close+0x8c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 f818 	bl	8003f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6979      	ldr	r1, [r7, #20]
 8001fda:	f002 faf7 	bl	80045cc <USB_EP0StartXfer>
 8001fde:	e008      	b.n	8001ff2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	f002 f8a5 	bl	800413c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	460b      	mov	r3, r1
 800203a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3338      	adds	r3, #56	; 0x38
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2201      	movs	r2, #1
 800206a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	f002 fa95 	bl	80045cc <USB_EP0StartXfer>
 80020a2:	e008      	b.n	80020b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	f002 f843 	bl	800413c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d901      	bls.n	80020de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e050      	b.n	8002180 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da0f      	bge.n	8002106 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e00d      	b.n	8002122 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_SetStall+0x82>
 800213e:	2302      	movs	r3, #2
 8002140:	e01e      	b.n	8002180 <HAL_PCD_EP_SetStall+0xc0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fcd3 	bl	8004afc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2d9      	uxtb	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002170:	461a      	mov	r2, r3
 8002172:	f002 fec3 	bl	8004efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d901      	bls.n	80021a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e042      	b.n	800222c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da0f      	bge.n	80021ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	3338      	adds	r3, #56	; 0x38
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	3304      	adds	r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	705a      	strb	r2, [r3, #1]
 80021cc:	e00f      	b.n	80021ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_PCD_EP_ClrStall+0x86>
 800220a:	2302      	movs	r3, #2
 800220c:	e00e      	b.n	800222c <HAL_PCD_EP_ClrStall+0xa4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fcdb 	bl	8004bd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002244:	2b00      	cmp	r3, #0
 8002246:	da0c      	bge.n	8002262 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	3338      	adds	r3, #56	; 0x38
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e00c      	b.n	800227c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fafa 	bl	800487c <USB_EPStopXfer>
 8002288:	4603      	mov	r3, r0
 800228a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800228c:	7afb      	ldrb	r3, [r7, #11]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b08a      	sub	sp, #40	; 0x28
 800229a:	af02      	add	r7, sp, #8
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3338      	adds	r3, #56	; 0x38
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d901      	bls.n	80022ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06c      	b.n	80023a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d902      	bls.n	80022ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3303      	adds	r3, #3
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f2:	e02b      	b.n	800234c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	429a      	cmp	r2, r3
 8002308:	d902      	bls.n	8002310 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3303      	adds	r3, #3
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002328:	b2db      	uxtb	r3, r3
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f002 fb4e 	bl	80049d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	441a      	add	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	d809      	bhi.n	8002376 <PCD_WriteEmptyTxFifo+0xe0>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236a:	429a      	cmp	r2, r3
 800236c:	d203      	bcs.n	8002376 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1be      	bne.n	80022f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	429a      	cmp	r2, r3
 8002380:	d811      	bhi.n	80023a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	2201      	movs	r2, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	43db      	mvns	r3, r3
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023a2:	4013      	ands	r3, r2
 80023a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	333c      	adds	r3, #60	; 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d17b      	bne.n	80024de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4a61      	ldr	r2, [pc, #388]	; (8002578 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	f240 80b9 	bls.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b3 	beq.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e0a7      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	2320      	movs	r3, #32
 8002436:	6093      	str	r3, [r2, #8]
 8002438:	e098      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8093 	bne.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a4b      	ldr	r2, [pc, #300]	; (8002578 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d90f      	bls.n	800246e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246a:	6093      	str	r3, [r2, #8]
 800246c:	e07e      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	440b      	add	r3, r1
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	1ad2      	subs	r2, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d114      	bne.n	80024d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b8:	461a      	mov	r2, r3
 80024ba:	2101      	movs	r1, #1
 80024bc:	f002 fd1e 	bl	8004efc <USB_EP0_OutStart>
 80024c0:	e006      	b.n	80024d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f004 ff6a 	bl	80073b0 <HAL_PCD_DataOutStageCallback>
 80024dc:	e046      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d124      	bne.n	8002530 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002502:	6093      	str	r3, [r2, #8]
 8002504:	e032      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2320      	movs	r3, #32
 8002520:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f004 ff41 	bl	80073b0 <HAL_PCD_DataOutStageCallback>
 800252e:	e01d      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d114      	bne.n	8002560 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002558:	461a      	mov	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	f002 fcce 	bl	8004efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f004 ff22 	bl	80073b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	4f54300a 	.word	0x4f54300a
 800257c:	4f54310a 	.word	0x4f54310a

08002580 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	333c      	adds	r3, #60	; 0x3c
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a15      	ldr	r2, [pc, #84]	; (8002608 <PCD_EP_OutSetupPacket_int+0x88>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d90e      	bls.n	80025d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f004 fed9 	bl	800738c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <PCD_EP_OutSetupPacket_int+0x88>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d90c      	bls.n	80025fc <PCD_EP_OutSetupPacket_int+0x7c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	f002 fc80 	bl	8004efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	4f54300a 	.word	0x4f54300a

0800260c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	4613      	mov	r3, r2
 800261a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800262a:	883b      	ldrh	r3, [r7, #0]
 800262c:	0419      	lsls	r1, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	430a      	orrs	r2, r1
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
 8002638:	e028      	b.n	800268c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4413      	add	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e00d      	b.n	800266a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3340      	adds	r3, #64	; 0x40
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	3301      	adds	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	3b01      	subs	r3, #1
 8002670:	429a      	cmp	r2, r3
 8002672:	d3ec      	bcc.n	800264e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002674:	883b      	ldrh	r3, [r7, #0]
 8002676:	0418      	lsls	r0, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	3b01      	subs	r3, #1
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	4302      	orrs	r2, r0
 8002684:	3340      	adds	r3, #64	; 0x40
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e267      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d075      	beq.n	80027de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f2:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00c      	beq.n	8002718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d112      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4b7e      	ldr	r3, [pc, #504]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05b      	beq.n	80027dc <HAL_RCC_OscConfig+0x108>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d157      	bne.n	80027dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e242      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d106      	bne.n	8002748 <HAL_RCC_OscConfig+0x74>
 800273a:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6f      	ldr	r2, [pc, #444]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a68      	ldr	r2, [pc, #416]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b66      	ldr	r3, [pc, #408]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fa14 	bl	8000bb8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fa10 	bl	8000bb8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e207      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xc0>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fa00 	bl	8000bb8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe f9fc 	bl	8000bb8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1f3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0xe8>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b44      	ldr	r3, [pc, #272]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4937      	ldr	r1, [pc, #220]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x244>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe f9b5 	bl	8000bb8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe f9b1 	bl	8000bb8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4925      	ldr	r1, [pc, #148]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_OscConfig+0x244>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe f994 	bl	8000bb8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe f990 	bl	8000bb8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e187      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x248>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe f974 	bl	8000bb8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe f970 	bl	8000bb8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e167      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x240>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x200>
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_OscConfig+0x248>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe f95d 	bl	8000bb8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	e00e      	b.n	8002920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe f959 	bl	8000bb8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d907      	bls.n	8002920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e150      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	42470000 	.word	0x42470000
 800291c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a7c      	ldr	r2, [pc, #496]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b77      	ldr	r3, [pc, #476]	; (8002b48 <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b74      	ldr	r3, [pc, #464]	; (8002b48 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a73      	ldr	r2, [pc, #460]	; (8002b48 <HAL_RCC_OscConfig+0x474>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe f919 	bl	8000bb8 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe f915 	bl	8000bb8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e10c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <HAL_RCC_OscConfig+0x474>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x2ea>
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a63      	ldr	r2, [pc, #396]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x30c>
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5e      	ldr	r2, [pc, #376]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	4b5c      	ldr	r3, [pc, #368]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a5b      	ldr	r2, [pc, #364]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029e0:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b55      	ldr	r3, [pc, #340]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a54      	ldr	r2, [pc, #336]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe f8da 	bl	8000bb8 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe f8d6 	bl	8000bb8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0cb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x334>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f8c4 	bl	8000bb8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe f8c0 	bl	8000bb8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0b5      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a38      	ldr	r2, [pc, #224]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a1 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d05c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d141      	bne.n	8002b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f894 	bl	8000bb8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe f890 	bl	8000bb8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e087      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	491b      	ldr	r1, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe f869 	bl	8000bb8 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe f865 	bl	8000bb8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e05c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x416>
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe f852 	bl	8000bb8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe f84e 	bl	8000bb8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e045      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e038      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cc      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90c      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d044      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d119      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e067      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4934      	ldr	r1, [pc, #208]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fd ff80 	bl	8000bb8 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fd ff7c 	bl	8000bb8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fee0 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08008838 	.word	0x08008838
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	20000004 	.word	0x20000004

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b094      	sub	sp, #80	; 0x50
 8002d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da0:	2300      	movs	r3, #0
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da8:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f200 80e1 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc2:	e0db      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dc8:	e0db      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dce:	e0d8      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b6d      	ldr	r3, [pc, #436]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6139      	str	r1, [r7, #16]
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e34:	4659      	mov	r1, fp
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4651      	mov	r1, sl
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4651      	mov	r1, sl
 8002e44:	ebb2 0801 	subs.w	r8, r2, r1
 8002e48:	4659      	mov	r1, fp
 8002e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	eb18 0303 	adds.w	r3, r8, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	462b      	mov	r3, r5
 8002e70:	eb49 0303 	adc.w	r3, r9, r3
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e82:	4629      	mov	r1, r5
 8002e84:	028b      	lsls	r3, r1, #10
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	028a      	lsls	r2, r1, #10
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea0:	f7fd f9e6 	bl	8000270 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eac:	e058      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0159      	lsls	r1, r3, #5
 8002ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eda:	0150      	lsls	r0, r2, #5
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f00:	ebb2 040a 	subs.w	r4, r2, sl
 8002f04:	eb63 050b 	sbc.w	r5, r3, fp
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	464b      	mov	r3, r9
 8002f24:	eb45 0303 	adc.w	r3, r5, r3
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f36:	4629      	mov	r1, r5
 8002f38:	028b      	lsls	r3, r1, #10
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f40:	4621      	mov	r1, r4
 8002f42:	028a      	lsls	r2, r1, #10
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	61fa      	str	r2, [r7, #28]
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f54:	f7fd f98c 	bl	8000270 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3750      	adds	r7, #80	; 0x50
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08008848 	.word	0x08008848

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffdc 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0b5b      	lsrs	r3, r3, #13
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08008848 	.word	0x08008848

08003000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e03f      	b.n	8003092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fc20 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f929 	bl	800329c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af02      	add	r7, sp, #8
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d17c      	bne.n	80031b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_Transmit+0x2c>
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e075      	b.n	80031b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x3e>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e06e      	b.n	80031b6 <HAL_UART_Transmit+0x11c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2221      	movs	r2, #33	; 0x21
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ee:	f7fd fd63 	bl	8000bb8 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d108      	bne.n	800311c <HAL_UART_Transmit+0x82>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e003      	b.n	8003124 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800312c:	e02a      	b.n	8003184 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f840 	bl	80031be <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e036      	b.n	80031b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3302      	adds	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e007      	b.n	8003176 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1cf      	bne.n	800312e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f810 	bl	80031be <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b090      	sub	sp, #64	; 0x40
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ce:	e050      	b.n	8003272 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d6:	d04c      	beq.n	8003272 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x30>
 80031de:	f7fd fceb 	bl	8000bb8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d241      	bcs.n	8003272 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800320e:	637a      	str	r2, [r7, #52]	; 0x34
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3314      	adds	r3, #20
 8003228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	613b      	str	r3, [r7, #16]
   return(result);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003242:	623a      	str	r2, [r7, #32]
 8003244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	69f9      	ldr	r1, [r7, #28]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e5      	bne.n	8003222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e00f      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	429a      	cmp	r2, r3
 800328e:	d09f      	beq.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3740      	adds	r7, #64	; 0x40
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b0c0      	sub	sp, #256	; 0x100
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	ea40 0301 	orr.w	r3, r0, r1
 80032c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	431a      	orrs	r2, r3
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032f4:	f021 010c 	bic.w	r1, r1, #12
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003302:	430b      	orrs	r3, r1
 8003304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	6999      	ldr	r1, [r3, #24]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	ea40 0301 	orr.w	r3, r0, r1
 8003322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <UART_SetConfig+0x2cc>)
 800332c:	429a      	cmp	r2, r3
 800332e:	d005      	beq.n	800333c <UART_SetConfig+0xa0>
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <UART_SetConfig+0x2d0>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d104      	bne.n	8003346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7ff fe4c 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8003340:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003344:	e003      	b.n	800334e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7ff fe33 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800334a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003358:	f040 810c 	bne.w	8003574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800335c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003366:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800336a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800336e:	4622      	mov	r2, r4
 8003370:	462b      	mov	r3, r5
 8003372:	1891      	adds	r1, r2, r2
 8003374:	65b9      	str	r1, [r7, #88]	; 0x58
 8003376:	415b      	adcs	r3, r3
 8003378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800337e:	4621      	mov	r1, r4
 8003380:	eb12 0801 	adds.w	r8, r2, r1
 8003384:	4629      	mov	r1, r5
 8003386:	eb43 0901 	adc.w	r9, r3, r1
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339e:	4690      	mov	r8, r2
 80033a0:	4699      	mov	r9, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	eb18 0303 	adds.w	r3, r8, r3
 80033a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb49 0303 	adc.w	r3, r9, r3
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033ca:	460b      	mov	r3, r1
 80033cc:	18db      	adds	r3, r3, r3
 80033ce:	653b      	str	r3, [r7, #80]	; 0x50
 80033d0:	4613      	mov	r3, r2
 80033d2:	eb42 0303 	adc.w	r3, r2, r3
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54
 80033d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033e0:	f7fc ff46 	bl	8000270 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <UART_SetConfig+0x2d4>)
 80033ea:	fba3 2302 	umull	r2, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	011c      	lsls	r4, r3, #4
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	64b9      	str	r1, [r7, #72]	; 0x48
 800340c:	415b      	adcs	r3, r3
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003414:	4641      	mov	r1, r8
 8003416:	eb12 0a01 	adds.w	sl, r2, r1
 800341a:	4649      	mov	r1, r9
 800341c:	eb43 0b01 	adc.w	fp, r3, r1
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800342c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003434:	4692      	mov	sl, r2
 8003436:	469b      	mov	fp, r3
 8003438:	4643      	mov	r3, r8
 800343a:	eb1a 0303 	adds.w	r3, sl, r3
 800343e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003442:	464b      	mov	r3, r9
 8003444:	eb4b 0303 	adc.w	r3, fp, r3
 8003448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003458:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800345c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003460:	460b      	mov	r3, r1
 8003462:	18db      	adds	r3, r3, r3
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
 8003466:	4613      	mov	r3, r2
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003476:	f7fc fefb 	bl	8000270 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4611      	mov	r1, r2
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <UART_SetConfig+0x2d4>)
 8003482:	fba3 2301 	umull	r2, r3, r3, r1
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2264      	movs	r2, #100	; 0x64
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	1acb      	subs	r3, r1, r3
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <UART_SetConfig+0x2d4>)
 8003498:	fba3 2302 	umull	r2, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034a4:	441c      	add	r4, r3
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c0:	415b      	adcs	r3, r3
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034c8:	4641      	mov	r1, r8
 80034ca:	1851      	adds	r1, r2, r1
 80034cc:	6339      	str	r1, [r7, #48]	; 0x30
 80034ce:	4649      	mov	r1, r9
 80034d0:	414b      	adcs	r3, r1
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034e0:	4659      	mov	r1, fp
 80034e2:	00cb      	lsls	r3, r1, #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	4651      	mov	r1, sl
 80034ec:	00ca      	lsls	r2, r1, #3
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	4642      	mov	r2, r8
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800352e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003532:	f7fc fe9d 	bl	8000270 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <UART_SetConfig+0x2d4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	; 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <UART_SetConfig+0x2d4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 0207 	and.w	r2, r3, #7
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4422      	add	r2, r4
 8003562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003564:	e106      	b.n	8003774 <UART_SetConfig+0x4d8>
 8003566:	bf00      	nop
 8003568:	40011000 	.word	0x40011000
 800356c:	40011400 	.word	0x40011400
 8003570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003578:	2200      	movs	r2, #0
 800357a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800357e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003586:	4642      	mov	r2, r8
 8003588:	464b      	mov	r3, r9
 800358a:	1891      	adds	r1, r2, r2
 800358c:	6239      	str	r1, [r7, #32]
 800358e:	415b      	adcs	r3, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003596:	4641      	mov	r1, r8
 8003598:	1854      	adds	r4, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0501 	adc.w	r5, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035bc:	464b      	mov	r3, r9
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035e2:	4629      	mov	r1, r5
 80035e4:	008b      	lsls	r3, r1, #2
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ec:	4621      	mov	r1, r4
 80035ee:	008a      	lsls	r2, r1, #2
 80035f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035f4:	f7fc fe3c 	bl	8000270 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4b60      	ldr	r3, [pc, #384]	; (8003780 <UART_SetConfig+0x4e4>)
 80035fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	011c      	lsls	r4, r3, #4
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003610:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	61b9      	str	r1, [r7, #24]
 8003620:	415b      	adcs	r3, r3
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6139      	str	r1, [r7, #16]
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800365c:	464b      	mov	r3, r9
 800365e:	460a      	mov	r2, r1
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	67bb      	str	r3, [r7, #120]	; 0x78
 8003672:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003680:	4649      	mov	r1, r9
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	4641      	mov	r1, r8
 8003686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368a:	4641      	mov	r1, r8
 800368c:	008a      	lsls	r2, r1, #2
 800368e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003692:	f7fc fded 	bl	8000270 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4611      	mov	r1, r2
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <UART_SetConfig+0x4e4>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2264      	movs	r2, #100	; 0x64
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	1acb      	subs	r3, r1, r3
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	3332      	adds	r3, #50	; 0x32
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <UART_SetConfig+0x4e4>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036bc:	441c      	add	r4, r3
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	673b      	str	r3, [r7, #112]	; 0x70
 80036c6:	677a      	str	r2, [r7, #116]	; 0x74
 80036c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	415b      	adcs	r3, r3
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	4641      	mov	r1, r8
 80036de:	1851      	adds	r1, r2, r1
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	4649      	mov	r1, r9
 80036e4:	414b      	adcs	r3, r1
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f4:	4659      	mov	r1, fp
 80036f6:	00cb      	lsls	r3, r1, #3
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fe:	4651      	mov	r1, sl
 8003700:	00ca      	lsls	r2, r1, #3
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	4603      	mov	r3, r0
 8003708:	4642      	mov	r2, r8
 800370a:	189b      	adds	r3, r3, r2
 800370c:	66bb      	str	r3, [r7, #104]	; 0x68
 800370e:	464b      	mov	r3, r9
 8003710:	460a      	mov	r2, r1
 8003712:	eb42 0303 	adc.w	r3, r2, r3
 8003716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	663b      	str	r3, [r7, #96]	; 0x60
 8003722:	667a      	str	r2, [r7, #100]	; 0x64
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003730:	4649      	mov	r1, r9
 8003732:	008b      	lsls	r3, r1, #2
 8003734:	4641      	mov	r1, r8
 8003736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800373a:	4641      	mov	r1, r8
 800373c:	008a      	lsls	r2, r1, #2
 800373e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003742:	f7fc fd95 	bl	8000270 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <UART_SetConfig+0x4e4>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	; 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	3332      	adds	r3, #50	; 0x32
 800375e:	4a08      	ldr	r2, [pc, #32]	; (8003780 <UART_SetConfig+0x4e4>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4422      	add	r2, r4
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800377a:	46bd      	mov	sp, r7
 800377c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003780:	51eb851f 	.word	0x51eb851f

08003784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003784:	b084      	sub	sp, #16
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	f107 001c 	add.w	r0, r7, #28
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2b01      	cmp	r3, #1
 800379a:	d122      	bne.n	80037e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 fbee 	bl	8004fb8 <USB_CoreReset>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e01a      	b.n	8003818 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f001 fbe2 	bl	8004fb8 <USB_CoreReset>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
 800380a:	e005      	b.n	8003818 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10b      	bne.n	8003836 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f043 0206 	orr.w	r2, r3, #6
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003842:	b004      	add	sp, #16
 8003844:	4770      	bx	lr
	...

08003848 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d165      	bne.n	8003928 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a41      	ldr	r2, [pc, #260]	; (8003964 <USB_SetTurnaroundTime+0x11c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d906      	bls.n	8003872 <USB_SetTurnaroundTime+0x2a>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <USB_SetTurnaroundTime+0x120>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d202      	bcs.n	8003872 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800386c:	230f      	movs	r3, #15
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e062      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <USB_SetTurnaroundTime+0x120>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d306      	bcc.n	8003888 <USB_SetTurnaroundTime+0x40>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a3b      	ldr	r2, [pc, #236]	; (800396c <USB_SetTurnaroundTime+0x124>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d202      	bcs.n	8003888 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003882:	230e      	movs	r3, #14
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e057      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <USB_SetTurnaroundTime+0x124>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d306      	bcc.n	800389e <USB_SetTurnaroundTime+0x56>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <USB_SetTurnaroundTime+0x128>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d202      	bcs.n	800389e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003898:	230d      	movs	r3, #13
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e04c      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a33      	ldr	r2, [pc, #204]	; (8003970 <USB_SetTurnaroundTime+0x128>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d306      	bcc.n	80038b4 <USB_SetTurnaroundTime+0x6c>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a32      	ldr	r2, [pc, #200]	; (8003974 <USB_SetTurnaroundTime+0x12c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038ae:	230c      	movs	r3, #12
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e041      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <USB_SetTurnaroundTime+0x12c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d906      	bls.n	80038ca <USB_SetTurnaroundTime+0x82>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a2e      	ldr	r2, [pc, #184]	; (8003978 <USB_SetTurnaroundTime+0x130>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d802      	bhi.n	80038ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038c4:	230b      	movs	r3, #11
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e036      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <USB_SetTurnaroundTime+0x130>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d906      	bls.n	80038e0 <USB_SetTurnaroundTime+0x98>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <USB_SetTurnaroundTime+0x134>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d802      	bhi.n	80038e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038da:	230a      	movs	r3, #10
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e02b      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <USB_SetTurnaroundTime+0x134>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d906      	bls.n	80038f6 <USB_SetTurnaroundTime+0xae>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a25      	ldr	r2, [pc, #148]	; (8003980 <USB_SetTurnaroundTime+0x138>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d202      	bcs.n	80038f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038f0:	2309      	movs	r3, #9
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e020      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4a21      	ldr	r2, [pc, #132]	; (8003980 <USB_SetTurnaroundTime+0x138>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d306      	bcc.n	800390c <USB_SetTurnaroundTime+0xc4>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <USB_SetTurnaroundTime+0x13c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d802      	bhi.n	800390c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003906:	2308      	movs	r3, #8
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e015      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <USB_SetTurnaroundTime+0x13c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d906      	bls.n	8003922 <USB_SetTurnaroundTime+0xda>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <USB_SetTurnaroundTime+0x140>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d202      	bcs.n	8003922 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800391c:	2307      	movs	r3, #7
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e00a      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003922:	2306      	movs	r3, #6
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e007      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800392e:	2309      	movs	r3, #9
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e001      	b.n	8003938 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003934:	2309      	movs	r3, #9
 8003936:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	029b      	lsls	r3, r3, #10
 800394c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	00d8acbf 	.word	0x00d8acbf
 8003968:	00e4e1c0 	.word	0x00e4e1c0
 800396c:	00f42400 	.word	0x00f42400
 8003970:	01067380 	.word	0x01067380
 8003974:	011a499f 	.word	0x011a499f
 8003978:	01312cff 	.word	0x01312cff
 800397c:	014ca43f 	.word	0x014ca43f
 8003980:	016e3600 	.word	0x016e3600
 8003984:	01a6ab1f 	.word	0x01a6ab1f
 8003988:	01e84800 	.word	0x01e84800

0800398c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f043 0201 	orr.w	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7fd f8e6 	bl	8000bd0 <HAL_Delay>
      ms++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 fa45 	bl	8004e9a <USB_GetMode>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d01e      	beq.n	8003a54 <USB_SetCurrentMode+0x84>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b31      	cmp	r3, #49	; 0x31
 8003a1a:	d9f0      	bls.n	80039fe <USB_SetCurrentMode+0x2e>
 8003a1c:	e01a      	b.n	8003a54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7fd f8cd 	bl	8000bd0 <HAL_Delay>
      ms++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 fa2c 	bl	8004e9a <USB_GetMode>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <USB_SetCurrentMode+0x84>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b31      	cmp	r3, #49	; 0x31
 8003a4c:	d9f0      	bls.n	8003a30 <USB_SetCurrentMode+0x60>
 8003a4e:	e001      	b.n	8003a54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e005      	b.n	8003a60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b32      	cmp	r3, #50	; 0x32
 8003a58:	d101      	bne.n	8003a5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a68:	b084      	sub	sp, #16
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e009      	b.n	8003a9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3340      	adds	r3, #64	; 0x40
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b0e      	cmp	r3, #14
 8003aa0:	d9f2      	bls.n	8003a88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11c      	bne.n	8003ae2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae0:	e00b      	b.n	8003afa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b00:	461a      	mov	r2, r3
 8003b02:	2300      	movs	r3, #0
 8003b04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	461a      	mov	r2, r3
 8003b16:	680b      	ldr	r3, [r1, #0]
 8003b18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b26:	2100      	movs	r1, #0
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f965 	bl	8003df8 <USB_SetDevSpeed>
 8003b2e:	e008      	b.n	8003b42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b30:	2101      	movs	r1, #1
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f960 	bl	8003df8 <USB_SetDevSpeed>
 8003b38:	e003      	b.n	8003b42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f95b 	bl	8003df8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b42:	2110      	movs	r1, #16
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8f3 	bl	8003d30 <USB_FlushTxFifo>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f91f 	bl	8003d98 <USB_FlushRxFifo>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	461a      	mov	r2, r3
 8003b78:	2300      	movs	r3, #0
 8003b7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	461a      	mov	r2, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e043      	b.n	8003c16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba4:	d118      	bne.n	8003bd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e013      	b.n	8003bea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e008      	b.n	8003bea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3301      	adds	r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3b7      	bcc.n	8003b8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e043      	b.n	8003cac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c3a:	d118      	bne.n	8003c6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e013      	b.n	8003c80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e008      	b.n	8003c80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3b7      	bcc.n	8003c24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <USB_DevInit+0x2c4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr
 8003d2c:	803c3800 	.word	0x803c3800

08003d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <USB_FlushTxFifo+0x64>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e01b      	b.n	8003d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	daf2      	bge.n	8003d3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	019b      	lsls	r3, r3, #6
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <USB_FlushTxFifo+0x64>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e006      	b.n	8003d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d0f0      	beq.n	8003d68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	00030d40 	.word	0x00030d40

08003d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <USB_FlushRxFifo+0x5c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e018      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	daf2      	bge.n	8003da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <USB_FlushRxFifo+0x5c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e006      	b.n	8003de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d0f0      	beq.n	8003dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	00030d40 	.word	0x00030d40

08003df8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0306 	and.w	r3, r3, #6
 8003e42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]
 8003e4e:	e00a      	b.n	8003e66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d002      	beq.n	8003e5c <USB_GetDevSpeed+0x32>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d102      	bne.n	8003e62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
 8003e60:	e001      	b.n	8003e66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e62:	230f      	movs	r3, #15
 8003e64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d13a      	bne.n	8003f06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d155      	bne.n	8003f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003eec:	4313      	orrs	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e036      	b.n	8003f74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11a      	bne.n	8003f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	791b      	ldrb	r3, [r3, #4]
 8003f58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d161      	bne.n	8004064 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d11f      	bne.n	8003ff8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004018:	4013      	ands	r3, r2
 800401a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800403c:	4013      	ands	r3, r2
 800403e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0159      	lsls	r1, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	440b      	add	r3, r1
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	4619      	mov	r1, r3
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <USB_DeactivateEndpoint+0x1b0>)
 800405e:	4013      	ands	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
 8004062:	e060      	b.n	8004126 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d11f      	bne.n	80040bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800409a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	43db      	mvns	r3, r3
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004100:	4013      	ands	r3, r2
 8004102:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0159      	lsls	r1, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	440b      	add	r3, r1
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	4619      	mov	r1, r3
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <USB_DeactivateEndpoint+0x1b4>)
 8004122:	4013      	ands	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	ec337800 	.word	0xec337800
 8004138:	eff37800 	.word	0xeff37800

0800413c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b01      	cmp	r3, #1
 800415a:	f040 815c 	bne.w	8004416 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d132      	bne.n	80041cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	0cdb      	lsrs	r3, r3, #19
 80041c6:	04db      	lsls	r3, r3, #19
 80041c8:	6113      	str	r3, [r2, #16]
 80041ca:	e074      	b.n	80042b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	0cdb      	lsrs	r3, r3, #19
 80041e8:	04db      	lsls	r3, r3, #19
 80041ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800420a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800420e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	440b      	add	r3, r1
 8004228:	1e59      	subs	r1, r3, #1
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004232:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004234:	4b9d      	ldr	r3, [pc, #628]	; (80044ac <USB_EPStartXfer+0x370>)
 8004236:	400b      	ands	r3, r1
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	0148      	lsls	r0, r1, #5
 800423c:	69f9      	ldr	r1, [r7, #28]
 800423e:	4401      	add	r1, r0
 8004240:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004244:	4313      	orrs	r3, r2
 8004246:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	0148      	lsls	r0, r1, #5
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	4401      	add	r1, r0
 8004266:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	791b      	ldrb	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d11f      	bne.n	80042b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004294:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d14b      	bne.n	8004354 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	461a      	mov	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d128      	bne.n	8004332 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d110      	bne.n	8004312 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e00f      	b.n	8004332 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e133      	b.n	80045bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004372:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d015      	beq.n	80043a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 811b 	beq.w	80045bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4313      	orrs	r3, r2
 80043a4:	634b      	str	r3, [r1, #52]	; 0x34
 80043a6:	e109      	b.n	80045bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d110      	bne.n	80043da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e00f      	b.n	80043fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6919      	ldr	r1, [r3, #16]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	b298      	uxth	r0, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4603      	mov	r3, r0
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fade 	bl	80049d0 <USB_WritePacket>
 8004414:	e0d2      	b.n	80045bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	04db      	lsls	r3, r3, #19
 8004434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004458:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d126      	bne.n	80044b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	0148      	lsls	r0, r1, #5
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	4401      	add	r1, r0
 8004480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a6:	6113      	str	r3, [r2, #16]
 80044a8:	e03a      	b.n	8004520 <USB_EPStartXfer+0x3e4>
 80044aa:	bf00      	nop
 80044ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	8afa      	ldrh	r2, [r7, #22]
 80044cc:	fb03 f202 	mul.w	r2, r3, r2
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	8afb      	ldrh	r3, [r7, #22]
 80044e4:	04d9      	lsls	r1, r3, #19
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <USB_EPStartXfer+0x48c>)
 80044e8:	400b      	ands	r3, r1
 80044ea:	69b9      	ldr	r1, [r7, #24]
 80044ec:	0148      	lsls	r0, r1, #5
 80044ee:	69f9      	ldr	r1, [r7, #28]
 80044f0:	4401      	add	r1, r0
 80044f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044f6:	4313      	orrs	r3, r2
 80044f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	0148      	lsls	r0, r1, #5
 8004514:	69f9      	ldr	r1, [r7, #28]
 8004516:	4401      	add	r1, r0
 8004518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800451c:	4313      	orrs	r3, r2
 800451e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10d      	bne.n	8004542 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6919      	ldr	r1, [r3, #16]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	460a      	mov	r2, r1
 8004540:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	791b      	ldrb	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d128      	bne.n	800459c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d110      	bne.n	800457c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00f      	b.n	800459c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	440a      	add	r2, r1
 8004592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	1ff80000 	.word	0x1ff80000

080045cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 80ce 	bne.w	800478a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d132      	bne.n	800465c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004638:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	0cdb      	lsrs	r3, r3, #19
 8004656:	04db      	lsls	r3, r3, #19
 8004658:	6113      	str	r3, [r2, #16]
 800465a:	e04e      	b.n	80046fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	0cdb      	lsrs	r3, r3, #19
 8004678:	04db      	lsls	r3, r3, #19
 800467a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800469a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800469e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d903      	bls.n	80046b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	0148      	lsls	r0, r1, #5
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	4401      	add	r1, r0
 80046f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d11e      	bne.n	800473e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e097      	b.n	800486e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800475c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8083 	beq.w	800486e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	6979      	ldr	r1, [r7, #20]
 8004780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004784:	4313      	orrs	r3, r2
 8004786:	634b      	str	r3, [r1, #52]	; 0x34
 8004788:	e071      	b.n	800486e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	0cdb      	lsrs	r3, r3, #19
 80047a6:	04db      	lsls	r3, r3, #19
 80047a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	6939      	ldr	r1, [r7, #16]
 800481e:	0148      	lsls	r0, r1, #5
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	4401      	add	r1, r0
 8004824:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004828:	4313      	orrs	r3, r2
 800482a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d10d      	bne.n	800484e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	460a      	mov	r2, r1
 800484c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800486c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d14a      	bne.n	8004930 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b2:	f040 8086 	bne.w	80049c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f242 7210 	movw	r2, #10000	; 0x2710
 800490a:	4293      	cmp	r3, r2
 800490c:	d902      	bls.n	8004914 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
          break;
 8004912:	e056      	b.n	80049c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492c:	d0e7      	beq.n	80048fe <USB_EPStopXfer+0x82>
 800492e:	e048      	b.n	80049c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004948:	d13b      	bne.n	80049c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800496c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	7812      	ldrb	r2, [r2, #0]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004990:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f242 7210 	movw	r2, #10000	; 0x2710
 800499e:	4293      	cmp	r3, r2
 80049a0:	d902      	bls.n	80049a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
          break;
 80049a6:	e00c      	b.n	80049c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c0:	d0e7      	beq.n	8004992 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	460b      	mov	r3, r1
 80049e0:	71fb      	strb	r3, [r7, #7]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d123      	bne.n	8004a3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	3303      	adds	r3, #3
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e018      	b.n	8004a36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	031a      	lsls	r2, r3, #12
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	461a      	mov	r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3e2      	bcc.n	8004a04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3724      	adds	r7, #36	; 0x24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b08b      	sub	sp, #44	; 0x2c
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	623b      	str	r3, [r7, #32]
 8004a76:	e014      	b.n	8004aa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	3301      	adds	r3, #1
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d3e6      	bcc.n	8004a78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004aaa:	8bfb      	ldrh	r3, [r7, #30]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01e      	beq.n	8004aee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aba:	461a      	mov	r2, r3
 8004abc:	f107 0310 	add.w	r3, r7, #16
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	623b      	str	r3, [r7, #32]
      pDest++;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ae2:	8bfb      	ldrh	r3, [r7, #30]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ae8:	8bfb      	ldrh	r3, [r7, #30]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ea      	bne.n	8004ac4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	372c      	adds	r7, #44	; 0x2c
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d12c      	bne.n	8004b72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db12      	blt.n	8004b50 <USB_EPSetStall+0x54>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00f      	beq.n	8004b50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e02b      	b.n	8004bca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db12      	blt.n	8004baa <USB_EPSetStall+0xae>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00f      	beq.n	8004baa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ba8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d128      	bne.n	8004c46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	791b      	ldrb	r3, [r3, #4]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d003      	beq.n	8004c24 <USB_EPClearStall+0x4c>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	791b      	ldrb	r3, [r3, #4]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d138      	bne.n	8004c96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e027      	b.n	8004c96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	791b      	ldrb	r3, [r3, #4]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d003      	beq.n	8004c76 <USB_EPClearStall+0x9e>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d10f      	bne.n	8004c96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cd8:	68f9      	ldr	r1, [r7, #12]
 8004cda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1e:	f023 0302 	bic.w	r3, r3, #2
 8004d22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	b29b      	uxth	r3, r3
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e30:	68bb      	ldr	r3, [r7, #8]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6e:	01db      	lsls	r3, r3, #7
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	460b      	mov	r3, r1
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	333c      	adds	r3, #60	; 0x3c
 8004f12:	3304      	adds	r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4a26      	ldr	r2, [pc, #152]	; (8004fb4 <USB_EP0_OutStart+0xb8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d90a      	bls.n	8004f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f30:	d101      	bne.n	8004f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e037      	b.n	8004fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f64:	f043 0318 	orr.w	r3, r3, #24
 8004f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10f      	bne.n	8004fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	4f54300a 	.word	0x4f54300a

08004fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <USB_CoreReset+0x64>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e01b      	b.n	800500e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <USB_CoreReset+0x64>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d0f0      	beq.n	8004fee <USB_CoreReset+0x36>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	00030d40 	.word	0x00030d40

08005020 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800502c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005030:	f002 fc28 	bl	8007884 <USBD_static_malloc>
 8005034:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	32b0      	adds	r2, #176	; 0xb0
 8005046:	2100      	movs	r1, #0
 8005048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800504c:	2302      	movs	r3, #2
 800504e:	e0d4      	b.n	80051fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005050:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005054:	2100      	movs	r1, #0
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f002 fd65 	bl	8007b26 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	32b0      	adds	r2, #176	; 0xb0
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	32b0      	adds	r2, #176	; 0xb0
 8005076:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7c1b      	ldrb	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d138      	bne.n	80050fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005088:	4b5e      	ldr	r3, [pc, #376]	; (8005204 <USBD_CDC_Init+0x1e4>)
 800508a:	7819      	ldrb	r1, [r3, #0]
 800508c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005090:	2202      	movs	r2, #2
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 fad3 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005098:	4b5a      	ldr	r3, [pc, #360]	; (8005204 <USBD_CDC_Init+0x1e4>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2201      	movs	r2, #1
 80050b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050b2:	4b55      	ldr	r3, [pc, #340]	; (8005208 <USBD_CDC_Init+0x1e8>)
 80050b4:	7819      	ldrb	r1, [r3, #0]
 80050b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ba:	2202      	movs	r2, #2
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 fabe 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050c2:	4b51      	ldr	r3, [pc, #324]	; (8005208 <USBD_CDC_Init+0x1e8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050da:	2201      	movs	r2, #1
 80050dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80050de:	4b4b      	ldr	r3, [pc, #300]	; (800520c <USBD_CDC_Init+0x1ec>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	f003 020f 	and.w	r2, r3, #15
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3326      	adds	r3, #38	; 0x26
 80050f4:	2210      	movs	r2, #16
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e035      	b.n	8005166 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050fa:	4b42      	ldr	r3, [pc, #264]	; (8005204 <USBD_CDC_Init+0x1e4>)
 80050fc:	7819      	ldrb	r1, [r3, #0]
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	2202      	movs	r2, #2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fa9b 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005108:	4b3e      	ldr	r3, [pc, #248]	; (8005204 <USBD_CDC_Init+0x1e4>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3324      	adds	r3, #36	; 0x24
 800511e:	2201      	movs	r2, #1
 8005120:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <USBD_CDC_Init+0x1e8>)
 8005124:	7819      	ldrb	r1, [r3, #0]
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	2202      	movs	r2, #2
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f002 fa87 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005130:	4b35      	ldr	r3, [pc, #212]	; (8005208 <USBD_CDC_Init+0x1e8>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	f003 020f 	and.w	r2, r3, #15
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005148:	2201      	movs	r2, #1
 800514a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800514c:	4b2f      	ldr	r3, [pc, #188]	; (800520c <USBD_CDC_Init+0x1ec>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	3326      	adds	r3, #38	; 0x26
 8005162:	2210      	movs	r2, #16
 8005164:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <USBD_CDC_Init+0x1ec>)
 8005168:	7819      	ldrb	r1, [r3, #0]
 800516a:	2308      	movs	r3, #8
 800516c:	2203      	movs	r2, #3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f002 fa65 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <USBD_CDC_Init+0x1ec>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	2201      	movs	r2, #1
 800518c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	33b0      	adds	r3, #176	; 0xb0
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e018      	b.n	80051fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7c1b      	ldrb	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <USBD_CDC_Init+0x1e8>)
 80051d2:	7819      	ldrb	r1, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f002 fb1c 	bl	800781c <USBD_LL_PrepareReceive>
 80051e4:	e008      	b.n	80051f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <USBD_CDC_Init+0x1e8>)
 80051e8:	7819      	ldrb	r1, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f002 fb12 	bl	800781c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000093 	.word	0x20000093
 8005208:	20000094 	.word	0x20000094
 800520c:	20000095 	.word	0x20000095

08005210 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800521c:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <USBD_CDC_DeInit+0xf8>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f002 fa31 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005228:	4b37      	ldr	r3, [pc, #220]	; (8005308 <USBD_CDC_DeInit+0xf8>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f003 020f 	and.w	r2, r3, #15
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3324      	adds	r3, #36	; 0x24
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005242:	4b32      	ldr	r3, [pc, #200]	; (800530c <USBD_CDC_DeInit+0xfc>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f002 fa1e 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800524e:	4b2f      	ldr	r3, [pc, #188]	; (800530c <USBD_CDC_DeInit+0xfc>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005266:	2200      	movs	r2, #0
 8005268:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800526a:	4b29      	ldr	r3, [pc, #164]	; (8005310 <USBD_CDC_DeInit+0x100>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f002 fa0a 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <USBD_CDC_DeInit+0x100>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	2200      	movs	r2, #0
 800528e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <USBD_CDC_DeInit+0x100>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3326      	adds	r3, #38	; 0x26
 80052a6:	2200      	movs	r2, #0
 80052a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	32b0      	adds	r2, #176	; 0xb0
 80052b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01f      	beq.n	80052fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	33b0      	adds	r3, #176	; 0xb0
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32b0      	adds	r2, #176	; 0xb0
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	4618      	mov	r0, r3
 80052e0:	f002 fade 	bl	80078a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	32b0      	adds	r2, #176	; 0xb0
 80052ee:	2100      	movs	r1, #0
 80052f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000093 	.word	0x20000093
 800530c:	20000094 	.word	0x20000094
 8005310:	20000095 	.word	0x20000095

08005314 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32b0      	adds	r2, #176	; 0xb0
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	e0bf      	b.n	80054c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800534c:	2b00      	cmp	r3, #0
 800534e:	d050      	beq.n	80053f2 <USBD_CDC_Setup+0xde>
 8005350:	2b20      	cmp	r3, #32
 8005352:	f040 80af 	bne.w	80054b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	88db      	ldrh	r3, [r3, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03a      	beq.n	80053d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b25b      	sxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	da1b      	bge.n	80053a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	33b0      	adds	r3, #176	; 0xb0
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800537e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	88d2      	ldrh	r2, [r2, #6]
 8005384:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	88db      	ldrh	r3, [r3, #6]
 800538a:	2b07      	cmp	r3, #7
 800538c:	bf28      	it	cs
 800538e:	2307      	movcs	r3, #7
 8005390:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	89fa      	ldrh	r2, [r7, #14]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 fd43 	bl	8006e24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800539e:	e090      	b.n	80054c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	785a      	ldrb	r2, [r3, #1]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	88db      	ldrh	r3, [r3, #6]
 80053ae:	2b3f      	cmp	r3, #63	; 0x3f
 80053b0:	d803      	bhi.n	80053ba <USBD_CDC_Setup+0xa6>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	88db      	ldrh	r3, [r3, #6]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	e000      	b.n	80053bc <USBD_CDC_Setup+0xa8>
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80053ca:	461a      	mov	r2, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fd55 	bl	8006e7c <USBD_CtlPrepareRx>
      break;
 80053d2:	e076      	b.n	80054c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	33b0      	adds	r3, #176	; 0xb0
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	7850      	ldrb	r0, [r2, #1]
 80053ea:	2200      	movs	r2, #0
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	4798      	blx	r3
      break;
 80053f0:	e067      	b.n	80054c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b0b      	cmp	r3, #11
 80053f8:	d851      	bhi.n	800549e <USBD_CDC_Setup+0x18a>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <USBD_CDC_Setup+0xec>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005431 	.word	0x08005431
 8005404:	080054ad 	.word	0x080054ad
 8005408:	0800549f 	.word	0x0800549f
 800540c:	0800549f 	.word	0x0800549f
 8005410:	0800549f 	.word	0x0800549f
 8005414:	0800549f 	.word	0x0800549f
 8005418:	0800549f 	.word	0x0800549f
 800541c:	0800549f 	.word	0x0800549f
 8005420:	0800549f 	.word	0x0800549f
 8005424:	0800549f 	.word	0x0800549f
 8005428:	0800545b 	.word	0x0800545b
 800542c:	08005485 	.word	0x08005485
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b03      	cmp	r3, #3
 800543a:	d107      	bne.n	800544c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800543c:	f107 030a 	add.w	r3, r7, #10
 8005440:	2202      	movs	r2, #2
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fced 	bl	8006e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800544a:	e032      	b.n	80054b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fc77 	bl	8006d42 <USBD_CtlError>
            ret = USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	75fb      	strb	r3, [r7, #23]
          break;
 8005458:	e02b      	b.n	80054b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b03      	cmp	r3, #3
 8005464:	d107      	bne.n	8005476 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005466:	f107 030d 	add.w	r3, r7, #13
 800546a:	2201      	movs	r2, #1
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 fcd8 	bl	8006e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005474:	e01d      	b.n	80054b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 fc62 	bl	8006d42 <USBD_CtlError>
            ret = USBD_FAIL;
 800547e:	2303      	movs	r3, #3
 8005480:	75fb      	strb	r3, [r7, #23]
          break;
 8005482:	e016      	b.n	80054b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b03      	cmp	r3, #3
 800548e:	d00f      	beq.n	80054b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 fc55 	bl	8006d42 <USBD_CtlError>
            ret = USBD_FAIL;
 8005498:	2303      	movs	r3, #3
 800549a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800549c:	e008      	b.n	80054b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 fc4e 	bl	8006d42 <USBD_CtlError>
          ret = USBD_FAIL;
 80054a6:	2303      	movs	r3, #3
 80054a8:	75fb      	strb	r3, [r7, #23]
          break;
 80054aa:	e002      	b.n	80054b2 <USBD_CDC_Setup+0x19e>
          break;
 80054ac:	bf00      	nop
 80054ae:	e008      	b.n	80054c2 <USBD_CDC_Setup+0x1ae>
          break;
 80054b0:	bf00      	nop
      }
      break;
 80054b2:	e006      	b.n	80054c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fc43 	bl	8006d42 <USBD_CtlError>
      ret = USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	75fb      	strb	r3, [r7, #23]
      break;
 80054c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80054de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	32b0      	adds	r2, #176	; 0xb0
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e065      	b.n	80055c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	32b0      	adds	r2, #176	; 0xb0
 8005500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005504:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3318      	adds	r3, #24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02f      	beq.n	8005580 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3318      	adds	r3, #24
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	f003 010f 	and.w	r1, r3, #15
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	460b      	mov	r3, r1
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	440b      	add	r3, r1
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4403      	add	r3, r0
 8005548:	3348      	adds	r3, #72	; 0x48
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005556:	2b00      	cmp	r3, #0
 8005558:	d112      	bne.n	8005580 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	f003 020f 	and.w	r2, r3, #15
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	3318      	adds	r3, #24
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005572:	78f9      	ldrb	r1, [r7, #3]
 8005574:	2300      	movs	r3, #0
 8005576:	2200      	movs	r2, #0
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f002 f92e 	bl	80077da <USBD_LL_Transmit>
 800557e:	e01f      	b.n	80055c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	33b0      	adds	r3, #176	; 0xb0
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	33b0      	adds	r3, #176	; 0xb0
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	32b0      	adds	r2, #176	; 0xb0
 80055e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	32b0      	adds	r2, #176	; 0xb0
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e01a      	b.n	8005632 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f002 f92c 	bl	800785e <USBD_LL_GetRxDataSize>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	33b0      	adds	r3, #176	; 0xb0
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800562c:	4611      	mov	r1, r2
 800562e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	32b0      	adds	r2, #176	; 0xb0
 800564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005658:	2303      	movs	r3, #3
 800565a:	e025      	b.n	80056a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	33b0      	adds	r3, #176	; 0xb0
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01a      	beq.n	80056a6 <USBD_CDC_EP0_RxReady+0x6c>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005676:	2bff      	cmp	r3, #255	; 0xff
 8005678:	d015      	beq.n	80056a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	33b0      	adds	r3, #176	; 0xb0
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005692:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800569a:	b292      	uxth	r2, r2
 800569c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056b8:	2182      	movs	r1, #130	; 0x82
 80056ba:	4818      	ldr	r0, [pc, #96]	; (800571c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056bc:	f000 fd09 	bl	80060d2 <USBD_GetEpDesc>
 80056c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056c2:	2101      	movs	r1, #1
 80056c4:	4815      	ldr	r0, [pc, #84]	; (800571c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056c6:	f000 fd04 	bl	80060d2 <USBD_GetEpDesc>
 80056ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056cc:	2181      	movs	r1, #129	; 0x81
 80056ce:	4813      	ldr	r0, [pc, #76]	; (800571c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056d0:	f000 fcff 	bl	80060d2 <USBD_GetEpDesc>
 80056d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2210      	movs	r2, #16
 80056e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d006      	beq.n	80056f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f0:	711a      	strb	r2, [r3, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d006      	beq.n	800570a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005704:	711a      	strb	r2, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2243      	movs	r2, #67	; 0x43
 800570e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000050 	.word	0x20000050

08005720 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005728:	2182      	movs	r1, #130	; 0x82
 800572a:	4818      	ldr	r0, [pc, #96]	; (800578c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800572c:	f000 fcd1 	bl	80060d2 <USBD_GetEpDesc>
 8005730:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005732:	2101      	movs	r1, #1
 8005734:	4815      	ldr	r0, [pc, #84]	; (800578c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005736:	f000 fccc 	bl	80060d2 <USBD_GetEpDesc>
 800573a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800573c:	2181      	movs	r1, #129	; 0x81
 800573e:	4813      	ldr	r0, [pc, #76]	; (800578c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005740:	f000 fcc7 	bl	80060d2 <USBD_GetEpDesc>
 8005744:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2210      	movs	r2, #16
 8005750:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2200      	movs	r2, #0
 800575c:	711a      	strb	r2, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f042 0202 	orr.w	r2, r2, #2
 8005764:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	711a      	strb	r2, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f042 0202 	orr.w	r2, r2, #2
 8005778:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2243      	movs	r2, #67	; 0x43
 800577e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000050 	.word	0x20000050

08005790 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005798:	2182      	movs	r1, #130	; 0x82
 800579a:	4818      	ldr	r0, [pc, #96]	; (80057fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800579c:	f000 fc99 	bl	80060d2 <USBD_GetEpDesc>
 80057a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057a2:	2101      	movs	r1, #1
 80057a4:	4815      	ldr	r0, [pc, #84]	; (80057fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057a6:	f000 fc94 	bl	80060d2 <USBD_GetEpDesc>
 80057aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057ac:	2181      	movs	r1, #129	; 0x81
 80057ae:	4813      	ldr	r0, [pc, #76]	; (80057fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057b0:	f000 fc8f 	bl	80060d2 <USBD_GetEpDesc>
 80057b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2210      	movs	r2, #16
 80057c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d006      	beq.n	80057d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d0:	711a      	strb	r2, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e4:	711a      	strb	r2, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2243      	movs	r2, #67	; 0x43
 80057ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000050 	.word	0x20000050

08005800 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	220a      	movs	r2, #10
 800580c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	2000000c 	.word	0x2000000c

08005820 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005830:	2303      	movs	r3, #3
 8005832:	e009      	b.n	8005848 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	33b0      	adds	r3, #176	; 0xb0
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	32b0      	adds	r2, #176	; 0xb0
 800586a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005876:	2303      	movs	r3, #3
 8005878:	e008      	b.n	800588c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	32b0      	adds	r2, #176	; 0xb0
 80058ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e004      	b.n	80058c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	32b0      	adds	r2, #176	; 0xb0
 80058e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	32b0      	adds	r2, #176	; 0xb0
 80058f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058fe:	2303      	movs	r3, #3
 8005900:	e018      	b.n	8005934 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7c1b      	ldrb	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <USBD_CDC_ReceivePacket+0x68>)
 800590c:	7819      	ldrb	r1, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 ff7f 	bl	800781c <USBD_LL_PrepareReceive>
 800591e:	e008      	b.n	8005932 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <USBD_CDC_ReceivePacket+0x68>)
 8005922:	7819      	ldrb	r1, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 ff75 	bl	800781c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000094 	.word	0x20000094

08005940 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005954:	2303      	movs	r3, #3
 8005956:	e01f      	b.n	8005998 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	79fa      	ldrb	r2, [r7, #7]
 800598a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f001 fdef 	bl	8007570 <USBD_LL_Init>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e025      	b.n	8005a04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	32ae      	adds	r2, #174	; 0xae
 80059ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00f      	beq.n	80059f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	32ae      	adds	r2, #174	; 0xae
 80059de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f107 020e 	add.w	r2, r7, #14
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	4602      	mov	r2, r0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fdf7 	bl	8007608 <USBD_LL_Start>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f908 	bl	8006cce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005acc:	461a      	mov	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d01a      	beq.n	8005b18 <USBD_LL_SetupStage+0x72>
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d822      	bhi.n	8005b2c <USBD_LL_SetupStage+0x86>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <USBD_LL_SetupStage+0x4a>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d00a      	beq.n	8005b04 <USBD_LL_SetupStage+0x5e>
 8005aee:	e01d      	b.n	8005b2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb5f 	bl	80061bc <USBD_StdDevReq>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
      break;
 8005b02:	e020      	b.n	8005b46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fbc7 	bl	80062a0 <USBD_StdItfReq>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73fb      	strb	r3, [r7, #15]
      break;
 8005b16:	e016      	b.n	8005b46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fc29 	bl	8006378 <USBD_StdEPReq>
 8005b26:	4603      	mov	r3, r0
 8005b28:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2a:	e00c      	b.n	8005b46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fdc4 	bl	80076c8 <USBD_LL_StallEP>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	bf00      	nop
  }

  return ret;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b62:	7afb      	ldrb	r3, [r7, #11]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d16e      	bne.n	8005c46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	f040 8098 	bne.w	8005cac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d913      	bls.n	8005bb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	1ad2      	subs	r2, r2, r3
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bf28      	it	cs
 8005ba2:	4613      	movcs	r3, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f001 f984 	bl	8006eb6 <USBD_CtlContinueRx>
 8005bae:	e07d      	b.n	8005cac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d014      	beq.n	8005be8 <USBD_LL_DataOutStage+0x98>
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d81d      	bhi.n	8005bfe <USBD_LL_DataOutStage+0xae>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <USBD_LL_DataOutStage+0x7c>
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d003      	beq.n	8005bd2 <USBD_LL_DataOutStage+0x82>
 8005bca:	e018      	b.n	8005bfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	75bb      	strb	r3, [r7, #22]
            break;
 8005bd0:	e018      	b.n	8005c04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa5e 	bl	800609e <USBD_CoreFindIF>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75bb      	strb	r3, [r7, #22]
            break;
 8005be6:	e00d      	b.n	8005c04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fa60 	bl	80060b8 <USBD_CoreFindEP>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75bb      	strb	r3, [r7, #22]
            break;
 8005bfc:	e002      	b.n	8005c04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75bb      	strb	r3, [r7, #22]
            break;
 8005c02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c04:	7dbb      	ldrb	r3, [r7, #22]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d119      	bne.n	8005c3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d113      	bne.n	8005c3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c16:	7dba      	ldrb	r2, [r7, #22]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	32ae      	adds	r2, #174	; 0xae
 8005c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c26:	7dba      	ldrb	r2, [r7, #22]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c2e:	7dba      	ldrb	r2, [r7, #22]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	32ae      	adds	r2, #174	; 0xae
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f001 f94a 	bl	8006ed8 <USBD_CtlSendStatus>
 8005c44:	e032      	b.n	8005cac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c46:	7afb      	ldrb	r3, [r7, #11]
 8005c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fa31 	bl	80060b8 <USBD_CoreFindEP>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c5a:	7dbb      	ldrb	r3, [r7, #22]
 8005c5c:	2bff      	cmp	r3, #255	; 0xff
 8005c5e:	d025      	beq.n	8005cac <USBD_LL_DataOutStage+0x15c>
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d122      	bne.n	8005cac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d117      	bne.n	8005ca2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c72:	7dba      	ldrb	r2, [r7, #22]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	32ae      	adds	r2, #174	; 0xae
 8005c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c82:	7dba      	ldrb	r2, [r7, #22]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c8a:	7dba      	ldrb	r2, [r7, #22]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	32ae      	adds	r2, #174	; 0xae
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	7afa      	ldrb	r2, [r7, #11]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	e000      	b.n	8005cae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d16f      	bne.n	8005daa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d15a      	bne.n	8005d90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d914      	bls.n	8005d10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f001 f8ac 	bl	8006e5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f001 fd87 	bl	800781c <USBD_LL_PrepareReceive>
 8005d0e:	e03f      	b.n	8005d90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d11c      	bne.n	8005d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d316      	bcc.n	8005d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d20f      	bcs.n	8005d56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d36:	2200      	movs	r2, #0
 8005d38:	2100      	movs	r1, #0
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f001 f88d 	bl	8006e5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f001 fd64 	bl	800781c <USBD_LL_PrepareReceive>
 8005d54:	e01c      	b.n	8005d90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d10f      	bne.n	8005d82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d82:	2180      	movs	r1, #128	; 0x80
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f001 fc9f 	bl	80076c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f001 f8b7 	bl	8006efe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d03a      	beq.n	8005e10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fe42 	bl	8005a24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005da8:	e032      	b.n	8005e10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f97f 	bl	80060b8 <USBD_CoreFindEP>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2bff      	cmp	r3, #255	; 0xff
 8005dc2:	d025      	beq.n	8005e10 <USBD_LL_DataInStage+0x15a>
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d122      	bne.n	8005e10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d11c      	bne.n	8005e10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dd6:	7dfa      	ldrb	r2, [r7, #23]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	32ae      	adds	r2, #174	; 0xae
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d014      	beq.n	8005e10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005de6:	7dfa      	ldrb	r2, [r7, #23]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005dee:	7dfa      	ldrb	r2, [r7, #23]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	32ae      	adds	r2, #174	; 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	7afa      	ldrb	r2, [r7, #11]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e06:	7dbb      	ldrb	r3, [r7, #22]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e0c:	7dbb      	ldrb	r3, [r7, #22]
 8005e0e:	e000      	b.n	8005e12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d014      	beq.n	8005e80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6852      	ldr	r2, [r2, #4]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	4611      	mov	r1, r2
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fbd9 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fbcb 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2240      	movs	r2, #64	; 0x40
 8005eb2:	621a      	str	r2, [r3, #32]

  return ret;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d106      	bne.n	8005f2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d110      	bne.n	8005f70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	32ae      	adds	r2, #174	; 0xae
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01c      	b.n	8005fd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d115      	bne.n	8005fd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32ae      	adds	r2, #174	; 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	32ae      	adds	r2, #174	; 0xae
 8005fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32ae      	adds	r2, #174	; 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e01c      	b.n	800603a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b03      	cmp	r3, #3
 800600a:	d115      	bne.n	8006038 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32ae      	adds	r2, #174	; 0xae
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	; 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4611      	mov	r1, r2
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00e      	beq.n	8006094 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6852      	ldr	r2, [r2, #4]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	4611      	mov	r1, r2
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d920      	bls.n	800613c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006102:	e013      	b.n	800612c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006104:	f107 030a 	add.w	r3, r7, #10
 8006108:	4619      	mov	r1, r3
 800610a:	6978      	ldr	r0, [r7, #20]
 800610c:	f000 f81b 	bl	8006146 <USBD_GetNextDesc>
 8006110:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d108      	bne.n	800612c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	789b      	ldrb	r3, [r3, #2]
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	429a      	cmp	r2, r3
 8006126:	d008      	beq.n	800613a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	885b      	ldrh	r3, [r3, #2]
 8006130:	b29a      	uxth	r2, r3
 8006132:	897b      	ldrh	r3, [r7, #10]
 8006134:	429a      	cmp	r2, r3
 8006136:	d8e5      	bhi.n	8006104 <USBD_GetEpDesc+0x32>
 8006138:	e000      	b.n	800613c <USBD_GetEpDesc+0x6a>
          break;
 800613a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800613c:	693b      	ldr	r3, [r7, #16]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	4413      	add	r3, r2
 8006160:	b29a      	uxth	r2, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4413      	add	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	3301      	adds	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800619e:	8a3b      	ldrh	r3, [r7, #16]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061ae:	89fb      	ldrh	r3, [r7, #14]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d005      	beq.n	80061e2 <USBD_StdDevReq+0x26>
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d857      	bhi.n	800628a <USBD_StdDevReq+0xce>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <USBD_StdDevReq+0x42>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d153      	bne.n	800628a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32ae      	adds	r2, #174	; 0xae
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
      break;
 80061fc:	e04a      	b.n	8006294 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	2b09      	cmp	r3, #9
 8006204:	d83b      	bhi.n	800627e <USBD_StdDevReq+0xc2>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USBD_StdDevReq+0x50>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006261 	.word	0x08006261
 8006210:	08006275 	.word	0x08006275
 8006214:	0800627f 	.word	0x0800627f
 8006218:	0800626b 	.word	0x0800626b
 800621c:	0800627f 	.word	0x0800627f
 8006220:	0800623f 	.word	0x0800623f
 8006224:	08006235 	.word	0x08006235
 8006228:	0800627f 	.word	0x0800627f
 800622c:	08006257 	.word	0x08006257
 8006230:	08006249 	.word	0x08006249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa3c 	bl	80066b4 <USBD_GetDescriptor>
          break;
 800623c:	e024      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fba1 	bl	8006988 <USBD_SetAddress>
          break;
 8006246:	e01f      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fbe0 	bl	8006a10 <USBD_SetConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
          break;
 8006254:	e018      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc83 	bl	8006b64 <USBD_GetConfig>
          break;
 800625e:	e013      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fcb4 	bl	8006bd0 <USBD_GetStatus>
          break;
 8006268:	e00e      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fce3 	bl	8006c38 <USBD_SetFeature>
          break;
 8006272:	e009      	b.n	8006288 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fd07 	bl	8006c8a <USBD_ClrFeature>
          break;
 800627c:	e004      	b.n	8006288 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fd5e 	bl	8006d42 <USBD_CtlError>
          break;
 8006286:	bf00      	nop
      }
      break;
 8006288:	e004      	b.n	8006294 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fd58 	bl	8006d42 <USBD_CtlError>
      break;
 8006292:	bf00      	nop
  }

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d005      	beq.n	80062c6 <USBD_StdItfReq+0x26>
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d852      	bhi.n	8006364 <USBD_StdItfReq+0xc4>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <USBD_StdItfReq+0x26>
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d14e      	bne.n	8006364 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d840      	bhi.n	8006356 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	889b      	ldrh	r3, [r3, #4]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d836      	bhi.n	800634c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	889b      	ldrh	r3, [r3, #4]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fed9 	bl	800609e <USBD_CoreFindIF>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	2bff      	cmp	r3, #255	; 0xff
 80062f4:	d01d      	beq.n	8006332 <USBD_StdItfReq+0x92>
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11a      	bne.n	8006332 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062fc:	7bba      	ldrb	r2, [r7, #14]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32ae      	adds	r2, #174	; 0xae
 8006302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00f      	beq.n	800632c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800630c:	7bba      	ldrb	r2, [r7, #14]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006314:	7bba      	ldrb	r2, [r7, #14]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32ae      	adds	r2, #174	; 0xae
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
 8006326:	4603      	mov	r3, r0
 8006328:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800632a:	e004      	b.n	8006336 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006330:	e001      	b.n	8006336 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006332:	2303      	movs	r3, #3
 8006334:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d110      	bne.n	8006360 <USBD_StdItfReq+0xc0>
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fdc7 	bl	8006ed8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800634a:	e009      	b.n	8006360 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fcf7 	bl	8006d42 <USBD_CtlError>
          break;
 8006354:	e004      	b.n	8006360 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fcf2 	bl	8006d42 <USBD_CtlError>
          break;
 800635e:	e000      	b.n	8006362 <USBD_StdItfReq+0xc2>
          break;
 8006360:	bf00      	nop
      }
      break;
 8006362:	e004      	b.n	800636e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fceb 	bl	8006d42 <USBD_CtlError>
      break;
 800636c:	bf00      	nop
  }

  return ret;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	889b      	ldrh	r3, [r3, #4]
 800638a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d007      	beq.n	80063a8 <USBD_StdEPReq+0x30>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	f200 817f 	bhi.w	800669c <USBD_StdEPReq+0x324>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02a      	beq.n	80063f8 <USBD_StdEPReq+0x80>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	f040 817a 	bne.w	800669c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fe83 	bl	80060b8 <USBD_CoreFindEP>
 80063b2:	4603      	mov	r3, r0
 80063b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	2bff      	cmp	r3, #255	; 0xff
 80063ba:	f000 8174 	beq.w	80066a6 <USBD_StdEPReq+0x32e>
 80063be:	7b7b      	ldrb	r3, [r7, #13]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8170 	bne.w	80066a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063c6:	7b7a      	ldrb	r2, [r7, #13]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063ce:	7b7a      	ldrb	r2, [r7, #13]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32ae      	adds	r2, #174	; 0xae
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8163 	beq.w	80066a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063e0:	7b7a      	ldrb	r2, [r7, #13]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	32ae      	adds	r2, #174	; 0xae
 80063e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063f6:	e156      	b.n	80066a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d008      	beq.n	8006412 <USBD_StdEPReq+0x9a>
 8006400:	2b03      	cmp	r3, #3
 8006402:	f300 8145 	bgt.w	8006690 <USBD_StdEPReq+0x318>
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 809b 	beq.w	8006542 <USBD_StdEPReq+0x1ca>
 800640c:	2b01      	cmp	r3, #1
 800640e:	d03c      	beq.n	800648a <USBD_StdEPReq+0x112>
 8006410:	e13e      	b.n	8006690 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d002      	beq.n	8006424 <USBD_StdEPReq+0xac>
 800641e:	2b03      	cmp	r3, #3
 8006420:	d016      	beq.n	8006450 <USBD_StdEPReq+0xd8>
 8006422:	e02c      	b.n	800647e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <USBD_StdEPReq+0xce>
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d00a      	beq.n	8006446 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f947 	bl	80076c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f943 	bl	80076c8 <USBD_LL_StallEP>
 8006442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006444:	e020      	b.n	8006488 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fc7a 	bl	8006d42 <USBD_CtlError>
              break;
 800644e:	e01b      	b.n	8006488 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	885b      	ldrh	r3, [r3, #2]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10e      	bne.n	8006476 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <USBD_StdEPReq+0xfe>
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b80      	cmp	r3, #128	; 0x80
 8006462:	d008      	beq.n	8006476 <USBD_StdEPReq+0xfe>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	88db      	ldrh	r3, [r3, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 f929 	bl	80076c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fd2e 	bl	8006ed8 <USBD_CtlSendStatus>

              break;
 800647c:	e004      	b.n	8006488 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc5e 	bl	8006d42 <USBD_CtlError>
              break;
 8006486:	bf00      	nop
          }
          break;
 8006488:	e107      	b.n	800669a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d002      	beq.n	800649c <USBD_StdEPReq+0x124>
 8006496:	2b03      	cmp	r3, #3
 8006498:	d016      	beq.n	80064c8 <USBD_StdEPReq+0x150>
 800649a:	e04b      	b.n	8006534 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <USBD_StdEPReq+0x146>
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d00a      	beq.n	80064be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f90b 	bl	80076c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f907 	bl	80076c8 <USBD_LL_StallEP>
 80064ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064bc:	e040      	b.n	8006540 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fc3e 	bl	8006d42 <USBD_CtlError>
              break;
 80064c6:	e03b      	b.n	8006540 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	885b      	ldrh	r3, [r3, #2]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d136      	bne.n	800653e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f911 	bl	8007706 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fcf7 	bl	8006ed8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fde2 	bl	80060b8 <USBD_CoreFindEP>
 80064f4:	4603      	mov	r3, r0
 80064f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f8:	7b7b      	ldrb	r3, [r7, #13]
 80064fa:	2bff      	cmp	r3, #255	; 0xff
 80064fc:	d01f      	beq.n	800653e <USBD_StdEPReq+0x1c6>
 80064fe:	7b7b      	ldrb	r3, [r7, #13]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11c      	bne.n	800653e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006504:	7b7a      	ldrb	r2, [r7, #13]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800650c:	7b7a      	ldrb	r2, [r7, #13]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32ae      	adds	r2, #174	; 0xae
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800651c:	7b7a      	ldrb	r2, [r7, #13]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	; 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
 800652e:	4603      	mov	r3, r0
 8006530:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006532:	e004      	b.n	800653e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fc03 	bl	8006d42 <USBD_CtlError>
              break;
 800653c:	e000      	b.n	8006540 <USBD_StdEPReq+0x1c8>
              break;
 800653e:	bf00      	nop
          }
          break;
 8006540:	e0ab      	b.n	800669a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d002      	beq.n	8006554 <USBD_StdEPReq+0x1dc>
 800654e:	2b03      	cmp	r3, #3
 8006550:	d032      	beq.n	80065b8 <USBD_StdEPReq+0x240>
 8006552:	e097      	b.n	8006684 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <USBD_StdEPReq+0x1f2>
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d004      	beq.n	800656a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fbed 	bl	8006d42 <USBD_CtlError>
                break;
 8006568:	e091      	b.n	800668e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da0b      	bge.n	800658a <USBD_StdEPReq+0x212>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	3310      	adds	r3, #16
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	3304      	adds	r3, #4
 8006588:	e00b      	b.n	80065a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	3304      	adds	r3, #4
 80065a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2202      	movs	r2, #2
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc37 	bl	8006e24 <USBD_CtlSendData>
              break;
 80065b6:	e06a      	b.n	800668e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da11      	bge.n	80065e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d117      	bne.n	800660a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fbb0 	bl	8006d42 <USBD_CtlError>
                  break;
 80065e2:	e054      	b.n	800668e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	f003 020f 	and.w	r2, r3, #15
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fb9d 	bl	8006d42 <USBD_CtlError>
                  break;
 8006608:	e041      	b.n	800668e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	da0b      	bge.n	800662a <USBD_StdEPReq+0x2b2>
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	e00b      	b.n	8006642 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <USBD_StdEPReq+0x2d8>
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d103      	bne.n	8006658 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e00e      	b.n	8006676 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f871 	bl	8007744 <USBD_LL_IsStallEP>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e002      	b.n	8006676 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2202      	movs	r2, #2
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbd1 	bl	8006e24 <USBD_CtlSendData>
              break;
 8006682:	e004      	b.n	800668e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fb5b 	bl	8006d42 <USBD_CtlError>
              break;
 800668c:	bf00      	nop
          }
          break;
 800668e:	e004      	b.n	800669a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb55 	bl	8006d42 <USBD_CtlError>
          break;
 8006698:	bf00      	nop
      }
      break;
 800669a:	e005      	b.n	80066a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fb4f 	bl	8006d42 <USBD_CtlError>
      break;
 80066a4:	e000      	b.n	80066a8 <USBD_StdEPReq+0x330>
      break;
 80066a6:	bf00      	nop
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	f200 8128 	bhi.w	800692a <USBD_GetDescriptor+0x276>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <USBD_GetDescriptor+0x2c>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066fd 	.word	0x080066fd
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006755 	.word	0x08006755
 80066ec:	0800692b 	.word	0x0800692b
 80066f0:	0800692b 	.word	0x0800692b
 80066f4:	080068cb 	.word	0x080068cb
 80066f8:	080068f7 	.word	0x080068f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      break;
 8006712:	e112      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f107 0208 	add.w	r2, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006736:	e100      	b.n	800693a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	f107 0208 	add.w	r2, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	2202      	movs	r2, #2
 8006750:	701a      	strb	r2, [r3, #0]
      break;
 8006752:	e0f2      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	885b      	ldrh	r3, [r3, #2]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b05      	cmp	r3, #5
 800675c:	f200 80ac 	bhi.w	80068b8 <USBD_GetDescriptor+0x204>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBD_GetDescriptor+0xb4>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006781 	.word	0x08006781
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067e9 	.word	0x080067e9
 8006774:	0800681d 	.word	0x0800681d
 8006778:	08006851 	.word	0x08006851
 800677c:	08006885 	.word	0x08006885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e091      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 facb 	bl	8006d42 <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e089      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7c12      	ldrb	r2, [r2, #16]
 80067cc:	f107 0108 	add.w	r1, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d6:	e077      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fab1 	bl	8006d42 <USBD_CtlError>
            err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
          break;
 80067e6:	e06f      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	7c12      	ldrb	r2, [r2, #16]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680a:	e05d      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa97 	bl	8006d42 <USBD_CtlError>
            err++;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	3301      	adds	r3, #1
 8006818:	72fb      	strb	r3, [r7, #11]
          break;
 800681a:	e055      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683e:	e043      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa7d 	bl	8006d42 <USBD_CtlError>
            err++;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
          break;
 800684e:	e03b      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006872:	e029      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa63 	bl	8006d42 <USBD_CtlError>
            err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
          break;
 8006882:	e021      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a6:	e00f      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa49 	bl	8006d42 <USBD_CtlError>
            err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
          break;
 80068b6:	e007      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa41 	bl	8006d42 <USBD_CtlError>
          err++;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	3301      	adds	r3, #1
 80068c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068c6:	bf00      	nop
      }
      break;
 80068c8:	e037      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7c1b      	ldrb	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	f107 0208 	add.w	r2, r7, #8
 80068de:	4610      	mov	r0, r2
 80068e0:	4798      	blx	r3
 80068e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e4:	e029      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa2a 	bl	8006d42 <USBD_CtlError>
        err++;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	3301      	adds	r3, #1
 80068f2:	72fb      	strb	r3, [r7, #11]
      break;
 80068f4:	e021      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f107 0208 	add.w	r2, r7, #8
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
 800690e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	2207      	movs	r2, #7
 8006916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006918:	e00f      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa10 	bl	8006d42 <USBD_CtlError>
        err++;
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	3301      	adds	r3, #1
 8006926:	72fb      	strb	r3, [r7, #11]
      break;
 8006928:	e007      	b.n	800693a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa08 	bl	8006d42 <USBD_CtlError>
      err++;
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	3301      	adds	r3, #1
 8006936:	72fb      	strb	r3, [r7, #11]
      break;
 8006938:	bf00      	nop
  }

  if (err != 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11e      	bne.n	800697e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d016      	beq.n	8006976 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88da      	ldrh	r2, [r3, #6]
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	4293      	cmp	r3, r2
 8006956:	bf28      	it	cs
 8006958:	4613      	movcs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	461a      	mov	r2, r3
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa5d 	bl	8006e24 <USBD_CtlSendData>
 800696a:	e009      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f9e7 	bl	8006d42 <USBD_CtlError>
 8006974:	e004      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 faae 	bl	8006ed8 <USBD_CtlSendStatus>
 800697c:	e000      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    return;
 800697e:	bf00      	nop
  }
}
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	889b      	ldrh	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d131      	bne.n	80069fe <USBD_SetAddress+0x76>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	88db      	ldrh	r3, [r3, #6]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d12d      	bne.n	80069fe <USBD_SetAddress+0x76>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	2b7f      	cmp	r3, #127	; 0x7f
 80069a8:	d829      	bhi.n	80069fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	885b      	ldrh	r3, [r3, #2]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d104      	bne.n	80069cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9bc 	bl	8006d42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	e01d      	b.n	8006a08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fedf 	bl	800779c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa7a 	bl	8006ed8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	e009      	b.n	8006a08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fc:	e004      	b.n	8006a08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f99e 	bl	8006d42 <USBD_CtlError>
  }
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <USBD_SetConfig+0x150>)
 8006a26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <USBD_SetConfig+0x150>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d905      	bls.n	8006a3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f985 	bl	8006d42 <USBD_CtlError>
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e08c      	b.n	8006b56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d002      	beq.n	8006a4e <USBD_SetConfig+0x3e>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d029      	beq.n	8006aa0 <USBD_SetConfig+0x90>
 8006a4c:	e075      	b.n	8006b3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a4e:	4b44      	ldr	r3, [pc, #272]	; (8006b60 <USBD_SetConfig+0x150>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d020      	beq.n	8006a98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a56:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <USBD_SetConfig+0x150>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a60:	4b3f      	ldr	r3, [pc, #252]	; (8006b60 <USBD_SetConfig+0x150>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fe ffe7 	bl	8005a3a <USBD_SetClassConfig>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f962 	bl	8006d42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a86:	e065      	b.n	8006b54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa25 	bl	8006ed8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a96:	e05d      	b.n	8006b54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa1d 	bl	8006ed8 <USBD_CtlSendStatus>
      break;
 8006a9e:	e059      	b.n	8006b54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006aa0:	4b2f      	ldr	r3, [pc, #188]	; (8006b60 <USBD_SetConfig+0x150>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d112      	bne.n	8006ace <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <USBD_SetConfig+0x150>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aba:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <USBD_SetConfig+0x150>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fe ffd6 	bl	8005a72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa06 	bl	8006ed8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006acc:	e042      	b.n	8006b54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <USBD_SetConfig+0x150>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d02a      	beq.n	8006b32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fe ffc4 	bl	8005a72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006aea:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <USBD_SetConfig+0x150>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006af4:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <USBD_SetConfig+0x150>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe ff9d 	bl	8005a3a <USBD_SetClassConfig>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00f      	beq.n	8006b2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f918 	bl	8006d42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fe ffa9 	bl	8005a72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b28:	e014      	b.n	8006b54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9d4 	bl	8006ed8 <USBD_CtlSendStatus>
      break;
 8006b30:	e010      	b.n	8006b54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9d0 	bl	8006ed8 <USBD_CtlSendStatus>
      break;
 8006b38:	e00c      	b.n	8006b54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f900 	bl	8006d42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <USBD_SetConfig+0x150>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fe ff92 	bl	8005a72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	73fb      	strb	r3, [r7, #15]
      break;
 8006b52:	bf00      	nop
  }

  return ret;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200001c0 	.word	0x200001c0

08006b64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	88db      	ldrh	r3, [r3, #6]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d004      	beq.n	8006b80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8e2 	bl	8006d42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b7e:	e023      	b.n	8006bc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	dc02      	bgt.n	8006b92 <USBD_GetConfig+0x2e>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc03      	bgt.n	8006b98 <USBD_GetConfig+0x34>
 8006b90:	e015      	b.n	8006bbe <USBD_GetConfig+0x5a>
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d00b      	beq.n	8006bae <USBD_GetConfig+0x4a>
 8006b96:	e012      	b.n	8006bbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f93c 	bl	8006e24 <USBD_CtlSendData>
        break;
 8006bac:	e00c      	b.n	8006bc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f934 	bl	8006e24 <USBD_CtlSendData>
        break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f8be 	bl	8006d42 <USBD_CtlError>
        break;
 8006bc6:	bf00      	nop
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d81e      	bhi.n	8006c26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d004      	beq.n	8006bfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8a5 	bl	8006d42 <USBD_CtlError>
        break;
 8006bf8:	e01a      	b.n	8006c30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f043 0202 	orr.w	r2, r3, #2
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f900 	bl	8006e24 <USBD_CtlSendData>
      break;
 8006c24:	e004      	b.n	8006c30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f88a 	bl	8006d42 <USBD_CtlError>
      break;
 8006c2e:	bf00      	nop
  }
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f940 	bl	8006ed8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c58:	e013      	b.n	8006c82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	885b      	ldrh	r3, [r3, #2]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d10b      	bne.n	8006c7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	889b      	ldrh	r3, [r3, #4]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f930 	bl	8006ed8 <USBD_CtlSendStatus>
}
 8006c78:	e003      	b.n	8006c82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f860 	bl	8006d42 <USBD_CtlError>
}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d80b      	bhi.n	8006cba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	885b      	ldrh	r3, [r3, #2]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10c      	bne.n	8006cc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f910 	bl	8006ed8 <USBD_CtlSendStatus>
      }
      break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f840 	bl	8006d42 <USBD_CtlError>
      break;
 8006cc2:	e000      	b.n	8006cc6 <USBD_ClrFeature+0x3c>
      break;
 8006cc4:	bf00      	nop
  }
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fa41 	bl	8006180 <SWAPBYTE>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	461a      	mov	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fa34 	bl	8006180 <SWAPBYTE>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff fa27 	bl	8006180 <SWAPBYTE>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	80da      	strh	r2, [r3, #6]
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fcba 	bl	80076c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fcb6 	bl	80076c8 <USBD_LL_StallEP>
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d036      	beq.n	8006de8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f000 f836 	bl	8006df0 <USBD_GetLen>
 8006d84:	4603      	mov	r3, r0
 8006d86:	3301      	adds	r3, #1
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	4413      	add	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	3301      	adds	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	4413      	add	r3, r2
 8006daa:	2203      	movs	r2, #3
 8006dac:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	3301      	adds	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006db4:	e013      	b.n	8006dde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	4413      	add	r3, r2
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
    idx++;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e7      	bne.n	8006db6 <USBD_GetString+0x52>
 8006de6:	e000      	b.n	8006dea <USBD_GetString+0x86>
    return;
 8006de8:	bf00      	nop
  }
}
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e00:	e005      	b.n	8006e0e <USBD_GetLen+0x1e>
  {
    len++;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	3301      	adds	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f5      	bne.n	8006e02 <USBD_GetLen+0x12>
  }

  return len;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fcc5 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fcb4 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fcb8 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fca7 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2200      	movs	r2, #0
 8006eec:	2100      	movs	r1, #0
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fc73 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2205      	movs	r2, #5
 8006f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2200      	movs	r2, #0
 8006f12:	2100      	movs	r1, #0
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc81 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4912      	ldr	r1, [pc, #72]	; (8006f74 <MX_USB_DEVICE_Init+0x50>)
 8006f2c:	4812      	ldr	r0, [pc, #72]	; (8006f78 <MX_USB_DEVICE_Init+0x54>)
 8006f2e:	f7fe fd07 	bl	8005940 <USBD_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f38:	f7f9 fc6a 	bl	8000810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f3c:	490f      	ldr	r1, [pc, #60]	; (8006f7c <MX_USB_DEVICE_Init+0x58>)
 8006f3e:	480e      	ldr	r0, [pc, #56]	; (8006f78 <MX_USB_DEVICE_Init+0x54>)
 8006f40:	f7fe fd2e 	bl	80059a0 <USBD_RegisterClass>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f4a:	f7f9 fc61 	bl	8000810 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f4e:	490c      	ldr	r1, [pc, #48]	; (8006f80 <MX_USB_DEVICE_Init+0x5c>)
 8006f50:	4809      	ldr	r0, [pc, #36]	; (8006f78 <MX_USB_DEVICE_Init+0x54>)
 8006f52:	f7fe fc65 	bl	8005820 <USBD_CDC_RegisterInterface>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f5c:	f7f9 fc58 	bl	8000810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f60:	4805      	ldr	r0, [pc, #20]	; (8006f78 <MX_USB_DEVICE_Init+0x54>)
 8006f62:	f7fe fd53 	bl	8005a0c <USBD_Start>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f6c:	f7f9 fc50 	bl	8000810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200000ac 	.word	0x200000ac
 8006f78:	200001c4 	.word	0x200001c4
 8006f7c:	20000018 	.word	0x20000018
 8006f80:	20000098 	.word	0x20000098

08006f84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4905      	ldr	r1, [pc, #20]	; (8006fa0 <CDC_Init_FS+0x1c>)
 8006f8c:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <CDC_Init_FS+0x20>)
 8006f8e:	f7fe fc61 	bl	8005854 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f92:	4905      	ldr	r1, [pc, #20]	; (8006fa8 <CDC_Init_FS+0x24>)
 8006f94:	4803      	ldr	r0, [pc, #12]	; (8006fa4 <CDC_Init_FS+0x20>)
 8006f96:	f7fe fc7f 	bl	8005898 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000ca0 	.word	0x20000ca0
 8006fa4:	200001c4 	.word	0x200001c4
 8006fa8:	200004a0 	.word	0x200004a0

08006fac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	71fb      	strb	r3, [r7, #7]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	2b23      	cmp	r3, #35	; 0x23
 8006fd0:	d84a      	bhi.n	8007068 <CDC_Control_FS+0xac>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <CDC_Control_FS+0x1c>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007069 	.word	0x08007069
 8006fdc:	08007069 	.word	0x08007069
 8006fe0:	08007069 	.word	0x08007069
 8006fe4:	08007069 	.word	0x08007069
 8006fe8:	08007069 	.word	0x08007069
 8006fec:	08007069 	.word	0x08007069
 8006ff0:	08007069 	.word	0x08007069
 8006ff4:	08007069 	.word	0x08007069
 8006ff8:	08007069 	.word	0x08007069
 8006ffc:	08007069 	.word	0x08007069
 8007000:	08007069 	.word	0x08007069
 8007004:	08007069 	.word	0x08007069
 8007008:	08007069 	.word	0x08007069
 800700c:	08007069 	.word	0x08007069
 8007010:	08007069 	.word	0x08007069
 8007014:	08007069 	.word	0x08007069
 8007018:	08007069 	.word	0x08007069
 800701c:	08007069 	.word	0x08007069
 8007020:	08007069 	.word	0x08007069
 8007024:	08007069 	.word	0x08007069
 8007028:	08007069 	.word	0x08007069
 800702c:	08007069 	.word	0x08007069
 8007030:	08007069 	.word	0x08007069
 8007034:	08007069 	.word	0x08007069
 8007038:	08007069 	.word	0x08007069
 800703c:	08007069 	.word	0x08007069
 8007040:	08007069 	.word	0x08007069
 8007044:	08007069 	.word	0x08007069
 8007048:	08007069 	.word	0x08007069
 800704c:	08007069 	.word	0x08007069
 8007050:	08007069 	.word	0x08007069
 8007054:	08007069 	.word	0x08007069
 8007058:	08007069 	.word	0x08007069
 800705c:	08007069 	.word	0x08007069
 8007060:	08007069 	.word	0x08007069
 8007064:	08007069 	.word	0x08007069
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007068:	bf00      	nop
  }

  return (USBD_OK);
 800706a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4805      	ldr	r0, [pc, #20]	; (800709c <CDC_Receive_FS+0x24>)
 8007086:	f7fe fc07 	bl	8005898 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800708a:	4804      	ldr	r0, [pc, #16]	; (800709c <CDC_Receive_FS+0x24>)
 800708c:	f7fe fc22 	bl	80058d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007090:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200001c4 	.word	0x200001c4

080070a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2212      	movs	r2, #18
 80070d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070d6:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	200000c8 	.word	0x200000c8

080070e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2204      	movs	r2, #4
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	200000dc 	.word	0x200000dc

0800710c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d105      	bne.n	800712a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <USBD_FS_ProductStrDescriptor+0x34>)
 8007122:	4808      	ldr	r0, [pc, #32]	; (8007144 <USBD_FS_ProductStrDescriptor+0x38>)
 8007124:	f7ff fe1e 	bl	8006d64 <USBD_GetString>
 8007128:	e004      	b.n	8007134 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <USBD_FS_ProductStrDescriptor+0x34>)
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <USBD_FS_ProductStrDescriptor+0x38>)
 8007130:	f7ff fe18 	bl	8006d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200014a0 	.word	0x200014a0
 8007144:	08008808 	.word	0x08008808

08007148 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	4904      	ldr	r1, [pc, #16]	; (8007168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007158:	4804      	ldr	r0, [pc, #16]	; (800716c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800715a:	f7ff fe03 	bl	8006d64 <USBD_GetString>
  return USBD_StrDesc;
 800715e:	4b02      	ldr	r3, [pc, #8]	; (8007168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200014a0 	.word	0x200014a0
 800716c:	08008810 	.word	0x08008810

08007170 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	221a      	movs	r2, #26
 8007180:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007182:	f000 f843 	bl	800720c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007186:	4b02      	ldr	r3, [pc, #8]	; (8007190 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	200000e0 	.word	0x200000e0

08007194 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4907      	ldr	r1, [pc, #28]	; (80071c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071aa:	4808      	ldr	r0, [pc, #32]	; (80071cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80071ac:	f7ff fdda 	bl	8006d64 <USBD_GetString>
 80071b0:	e004      	b.n	80071bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4904      	ldr	r1, [pc, #16]	; (80071c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071b6:	4805      	ldr	r0, [pc, #20]	; (80071cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b8:	f7ff fdd4 	bl	8006d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071bc:	4b02      	ldr	r3, [pc, #8]	; (80071c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200014a0 	.word	0x200014a0
 80071cc:	0800881c 	.word	0x0800881c

080071d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071e6:	4808      	ldr	r0, [pc, #32]	; (8007208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e8:	f7ff fdbc 	bl	8006d64 <USBD_GetString>
 80071ec:	e004      	b.n	80071f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071f2:	4805      	ldr	r0, [pc, #20]	; (8007208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f4:	f7ff fdb6 	bl	8006d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200014a0 	.word	0x200014a0
 8007208:	08008828 	.word	0x08008828

0800720c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007212:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <Get_SerialNum+0x44>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <Get_SerialNum+0x48>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <Get_SerialNum+0x4c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007232:	2208      	movs	r2, #8
 8007234:	4909      	ldr	r1, [pc, #36]	; (800725c <Get_SerialNum+0x50>)
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 f814 	bl	8007264 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800723c:	2204      	movs	r2, #4
 800723e:	4908      	ldr	r1, [pc, #32]	; (8007260 <Get_SerialNum+0x54>)
 8007240:	68b8      	ldr	r0, [r7, #8]
 8007242:	f000 f80f 	bl	8007264 <IntToUnicode>
  }
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	1fff7a10 	.word	0x1fff7a10
 8007254:	1fff7a14 	.word	0x1fff7a14
 8007258:	1fff7a18 	.word	0x1fff7a18
 800725c:	200000e2 	.word	0x200000e2
 8007260:	200000f2 	.word	0x200000f2

08007264 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007276:	2300      	movs	r3, #0
 8007278:	75fb      	strb	r3, [r7, #23]
 800727a:	e027      	b.n	80072cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	0f1b      	lsrs	r3, r3, #28
 8007280:	2b09      	cmp	r3, #9
 8007282:	d80b      	bhi.n	800729c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	0f1b      	lsrs	r3, r3, #28
 8007288:	b2da      	uxtb	r2, r3
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	4619      	mov	r1, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	440b      	add	r3, r1
 8007294:	3230      	adds	r2, #48	; 0x30
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e00a      	b.n	80072b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0f1b      	lsrs	r3, r3, #28
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4619      	mov	r1, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	440b      	add	r3, r1
 80072ac:	3237      	adds	r2, #55	; 0x37
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	3301      	adds	r3, #1
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	3301      	adds	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
 80072cc:	7dfa      	ldrb	r2, [r7, #23]
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d3d3      	bcc.n	800727c <IntToUnicode+0x18>
  }
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	609a      	str	r2, [r3, #8]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007304:	d13a      	bne.n	800737c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6313      	str	r3, [r2, #48]	; 0x30
 8007316:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007322:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007328:	2302      	movs	r3, #2
 800732a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007330:	2303      	movs	r3, #3
 8007332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007334:	230a      	movs	r3, #10
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	4619      	mov	r1, r3
 800733e:	4812      	ldr	r0, [pc, #72]	; (8007388 <HAL_PCD_MspInit+0xa4>)
 8007340:	f7f9 fd7c 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	6353      	str	r3, [r2, #52]	; 0x34
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 8007356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007358:	4a0a      	ldr	r2, [pc, #40]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 800735a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800735e:	6453      	str	r3, [r2, #68]	; 0x44
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_PCD_MspInit+0xa0>)
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	2043      	movs	r0, #67	; 0x43
 8007372:	f7f9 fd2c 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007376:	2043      	movs	r0, #67	; 0x43
 8007378:	f7f9 fd45 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800737c:	bf00      	nop
 800737e:	3728      	adds	r7, #40	; 0x28
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	40020000 	.word	0x40020000

0800738c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fb7f 	bl	8005aa6 <USBD_LL_SetupStage>
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	4619      	mov	r1, r3
 80073da:	f7fe fbb9 	bl	8005b50 <USBD_LL_DataOutStage>
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	334c      	adds	r3, #76	; 0x4c
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	4619      	mov	r1, r3
 800740e:	f7fe fc52 	bl	8005cb6 <USBD_LL_DataInStage>
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fd86 	bl	8005f3a <USBD_LL_SOF>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800743e:	2301      	movs	r3, #1
 8007440:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
 800744e:	e008      	b.n	8007462 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d102      	bne.n	800745e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	e001      	b.n	8007462 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800745e:	f7f9 f9d7 	bl	8000810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007468:	7bfa      	ldrb	r2, [r7, #15]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fd26 	bl	8005ebe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fcce 	bl	8005e1a <USBD_LL_Reset>
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fd21 	bl	8005ede <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_PCD_SuspendCallback+0x48>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a03      	ldr	r2, [pc, #12]	; (80074d0 <HAL_PCD_SuspendCallback+0x48>)
 80074c2:	f043 0306 	orr.w	r3, r3, #6
 80074c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fd11 	bl	8005f0a <USBD_LL_Resume>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fd69 	bl	8005fde <USBD_LL_IsoOUTIncomplete>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fd25 	bl	8005f7a <USBD_LL_IsoINIncomplete>
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fd7b 	bl	8006042 <USBD_LL_DevConnected>
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fd78 	bl	8006058 <USBD_LL_DevDisconnected>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d13c      	bne.n	80075fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007580:	4a20      	ldr	r2, [pc, #128]	; (8007604 <USBD_LL_Init+0x94>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <USBD_LL_Init+0x94>)
 800758c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007590:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <USBD_LL_Init+0x94>)
 8007592:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007596:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007598:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <USBD_LL_Init+0x94>)
 800759a:	2204      	movs	r2, #4
 800759c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <USBD_LL_Init+0x94>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075a4:	4b17      	ldr	r3, [pc, #92]	; (8007604 <USBD_LL_Init+0x94>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075aa:	4b16      	ldr	r3, [pc, #88]	; (8007604 <USBD_LL_Init+0x94>)
 80075ac:	2202      	movs	r2, #2
 80075ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075b0:	4b14      	ldr	r3, [pc, #80]	; (8007604 <USBD_LL_Init+0x94>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <USBD_LL_Init+0x94>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075bc:	4b11      	ldr	r3, [pc, #68]	; (8007604 <USBD_LL_Init+0x94>)
 80075be:	2200      	movs	r2, #0
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <USBD_LL_Init+0x94>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <USBD_LL_Init+0x94>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075ce:	480d      	ldr	r0, [pc, #52]	; (8007604 <USBD_LL_Init+0x94>)
 80075d0:	f7f9 fe03 	bl	80011da <HAL_PCD_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075da:	f7f9 f919 	bl	8000810 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075de:	2180      	movs	r1, #128	; 0x80
 80075e0:	4808      	ldr	r0, [pc, #32]	; (8007604 <USBD_LL_Init+0x94>)
 80075e2:	f7fb f85a 	bl	800269a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075e6:	2240      	movs	r2, #64	; 0x40
 80075e8:	2100      	movs	r1, #0
 80075ea:	4806      	ldr	r0, [pc, #24]	; (8007604 <USBD_LL_Init+0x94>)
 80075ec:	f7fb f80e 	bl	800260c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	2101      	movs	r1, #1
 80075f4:	4803      	ldr	r0, [pc, #12]	; (8007604 <USBD_LL_Init+0x94>)
 80075f6:	f7fb f809 	bl	800260c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	200016a0 	.word	0x200016a0

08007608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800761e:	4618      	mov	r0, r3
 8007620:	f7f9 fef8 	bl	8001414 <HAL_PCD_Start>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f942 	bl	80078b4 <USBD_Get_USB_Status>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007634:	7bbb      	ldrb	r3, [r7, #14]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	461a      	mov	r2, r3
 800764c:	4603      	mov	r3, r0
 800764e:	70fb      	strb	r3, [r7, #3]
 8007650:	460b      	mov	r3, r1
 8007652:	70bb      	strb	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007666:	78bb      	ldrb	r3, [r7, #2]
 8007668:	883a      	ldrh	r2, [r7, #0]
 800766a:	78f9      	ldrb	r1, [r7, #3]
 800766c:	f7fa fbc9 	bl	8001e02 <HAL_PCD_EP_Open>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f91c 	bl	80078b4 <USBD_Get_USB_Status>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007680:	7bbb      	ldrb	r3, [r7, #14]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fa fc12 	bl	8001ed2 <HAL_PCD_EP_Close>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 f8fd 	bl	80078b4 <USBD_Get_USB_Status>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076be:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa fcea 	bl	80020c0 <HAL_PCD_EP_SetStall>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f8de 	bl	80078b4 <USBD_Get_USB_Status>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f7fa fd2f 	bl	8002188 <HAL_PCD_EP_ClrStall>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f8bf 	bl	80078b4 <USBD_Get_USB_Status>
 8007736:	4603      	mov	r3, r0
 8007738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773a:	7bbb      	ldrb	r3, [r7, #14]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007756:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0b      	bge.n	8007778 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	333e      	adds	r3, #62	; 0x3e
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	e00b      	b.n	8007790 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800778e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa fafc 	bl	8001db8 <HAL_PCD_SetAddress>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f874 	bl	80078b4 <USBD_Get_USB_Status>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	460b      	mov	r3, r1
 80077e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077f8:	7af9      	ldrb	r1, [r7, #11]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f7fa fc15 	bl	800202c <HAL_PCD_EP_Transmit>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f853 	bl	80078b4 <USBD_Get_USB_Status>
 800780e:	4603      	mov	r3, r0
 8007810:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007812:	7dbb      	ldrb	r3, [r7, #22]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	460b      	mov	r3, r1
 800782a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800783a:	7af9      	ldrb	r1, [r7, #11]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	f7fa fb91 	bl	8001f66 <HAL_PCD_EP_Receive>
 8007844:	4603      	mov	r3, r0
 8007846:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f832 	bl	80078b4 <USBD_Get_USB_Status>
 8007850:	4603      	mov	r3, r0
 8007852:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007854:	7dbb      	ldrb	r3, [r7, #22]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f7fa fbc1 	bl	8001ffc <HAL_PCD_EP_GetRxCount>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800788c:	4b03      	ldr	r3, [pc, #12]	; (800789c <USBD_static_malloc+0x18>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20001bac 	.word	0x20001bac

080078a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]

}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d817      	bhi.n	80078f8 <USBD_Get_USB_Status+0x44>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBD_Get_USB_Status+0x1c>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078e1 	.word	0x080078e1
 80078d4:	080078e7 	.word	0x080078e7
 80078d8:	080078ed 	.word	0x080078ed
 80078dc:	080078f3 	.word	0x080078f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	e00b      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ea:	e008      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	e005      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	73fb      	strb	r3, [r7, #15]
    break;
 80078f6:	e002      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	73fb      	strb	r3, [r7, #15]
    break;
 80078fc:	bf00      	nop
  }
  return usb_status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <std>:
 800790c:	2300      	movs	r3, #0
 800790e:	b510      	push	{r4, lr}
 8007910:	4604      	mov	r4, r0
 8007912:	e9c0 3300 	strd	r3, r3, [r0]
 8007916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800791a:	6083      	str	r3, [r0, #8]
 800791c:	8181      	strh	r1, [r0, #12]
 800791e:	6643      	str	r3, [r0, #100]	; 0x64
 8007920:	81c2      	strh	r2, [r0, #14]
 8007922:	6183      	str	r3, [r0, #24]
 8007924:	4619      	mov	r1, r3
 8007926:	2208      	movs	r2, #8
 8007928:	305c      	adds	r0, #92	; 0x5c
 800792a:	f000 f8fc 	bl	8007b26 <memset>
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <std+0x38>)
 8007930:	6263      	str	r3, [r4, #36]	; 0x24
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <std+0x3c>)
 8007934:	62a3      	str	r3, [r4, #40]	; 0x28
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <std+0x40>)
 8007938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <std+0x44>)
 800793c:	6224      	str	r4, [r4, #32]
 800793e:	6323      	str	r3, [r4, #48]	; 0x30
 8007940:	bd10      	pop	{r4, pc}
 8007942:	bf00      	nop
 8007944:	08007aa1 	.word	0x08007aa1
 8007948:	08007ac3 	.word	0x08007ac3
 800794c:	08007afb 	.word	0x08007afb
 8007950:	08007b1f 	.word	0x08007b1f

08007954 <stdio_exit_handler>:
 8007954:	4a02      	ldr	r2, [pc, #8]	; (8007960 <stdio_exit_handler+0xc>)
 8007956:	4903      	ldr	r1, [pc, #12]	; (8007964 <stdio_exit_handler+0x10>)
 8007958:	4803      	ldr	r0, [pc, #12]	; (8007968 <stdio_exit_handler+0x14>)
 800795a:	f000 b869 	b.w	8007a30 <_fwalk_sglue>
 800795e:	bf00      	nop
 8007960:	200000fc 	.word	0x200000fc
 8007964:	080084c1 	.word	0x080084c1
 8007968:	20000108 	.word	0x20000108

0800796c <cleanup_stdio>:
 800796c:	6841      	ldr	r1, [r0, #4]
 800796e:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <cleanup_stdio+0x34>)
 8007970:	4299      	cmp	r1, r3
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	d001      	beq.n	800797c <cleanup_stdio+0x10>
 8007978:	f000 fda2 	bl	80084c0 <_fflush_r>
 800797c:	68a1      	ldr	r1, [r4, #8]
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <cleanup_stdio+0x38>)
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <cleanup_stdio+0x1e>
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fd9b 	bl	80084c0 <_fflush_r>
 800798a:	68e1      	ldr	r1, [r4, #12]
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <cleanup_stdio+0x3c>)
 800798e:	4299      	cmp	r1, r3
 8007990:	d004      	beq.n	800799c <cleanup_stdio+0x30>
 8007992:	4620      	mov	r0, r4
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007998:	f000 bd92 	b.w	80084c0 <_fflush_r>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	20001dcc 	.word	0x20001dcc
 80079a4:	20001e34 	.word	0x20001e34
 80079a8:	20001e9c 	.word	0x20001e9c

080079ac <global_stdio_init.part.0>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <global_stdio_init.part.0+0x30>)
 80079b0:	4c0b      	ldr	r4, [pc, #44]	; (80079e0 <global_stdio_init.part.0+0x34>)
 80079b2:	4a0c      	ldr	r2, [pc, #48]	; (80079e4 <global_stdio_init.part.0+0x38>)
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	4620      	mov	r0, r4
 80079b8:	2200      	movs	r2, #0
 80079ba:	2104      	movs	r1, #4
 80079bc:	f7ff ffa6 	bl	800790c <std>
 80079c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80079c4:	2201      	movs	r2, #1
 80079c6:	2109      	movs	r1, #9
 80079c8:	f7ff ffa0 	bl	800790c <std>
 80079cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079d0:	2202      	movs	r2, #2
 80079d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d6:	2112      	movs	r1, #18
 80079d8:	f7ff bf98 	b.w	800790c <std>
 80079dc:	20001f04 	.word	0x20001f04
 80079e0:	20001dcc 	.word	0x20001dcc
 80079e4:	08007955 	.word	0x08007955

080079e8 <__sfp_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sfp_lock_acquire+0x8>)
 80079ea:	f000 b915 	b.w	8007c18 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	20001f0d 	.word	0x20001f0d

080079f4 <__sfp_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sfp_lock_release+0x8>)
 80079f6:	f000 b910 	b.w	8007c1a <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	20001f0d 	.word	0x20001f0d

08007a00 <__sinit>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	f7ff fff0 	bl	80079e8 <__sfp_lock_acquire>
 8007a08:	6a23      	ldr	r3, [r4, #32]
 8007a0a:	b11b      	cbz	r3, 8007a14 <__sinit+0x14>
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	f7ff bff0 	b.w	80079f4 <__sfp_lock_release>
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__sinit+0x28>)
 8007a16:	6223      	str	r3, [r4, #32]
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <__sinit+0x2c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f5      	bne.n	8007a0c <__sinit+0xc>
 8007a20:	f7ff ffc4 	bl	80079ac <global_stdio_init.part.0>
 8007a24:	e7f2      	b.n	8007a0c <__sinit+0xc>
 8007a26:	bf00      	nop
 8007a28:	0800796d 	.word	0x0800796d
 8007a2c:	20001f04 	.word	0x20001f04

08007a30 <_fwalk_sglue>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	4607      	mov	r7, r0
 8007a36:	4688      	mov	r8, r1
 8007a38:	4614      	mov	r4, r2
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a40:	f1b9 0901 	subs.w	r9, r9, #1
 8007a44:	d505      	bpl.n	8007a52 <_fwalk_sglue+0x22>
 8007a46:	6824      	ldr	r4, [r4, #0]
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	d1f7      	bne.n	8007a3c <_fwalk_sglue+0xc>
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d907      	bls.n	8007a68 <_fwalk_sglue+0x38>
 8007a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	d003      	beq.n	8007a68 <_fwalk_sglue+0x38>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	4306      	orrs	r6, r0
 8007a68:	3568      	adds	r5, #104	; 0x68
 8007a6a:	e7e9      	b.n	8007a40 <_fwalk_sglue+0x10>

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	b507      	push	{r0, r1, r2, lr}
 8007a70:	4906      	ldr	r1, [pc, #24]	; (8007a8c <iprintf+0x20>)
 8007a72:	ab04      	add	r3, sp, #16
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	6881      	ldr	r1, [r0, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f000 f9ef 	bl	8007e60 <_vfiprintf_r>
 8007a82:	b003      	add	sp, #12
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b004      	add	sp, #16
 8007a8a:	4770      	bx	lr
 8007a8c:	20000154 	.word	0x20000154

08007a90 <putchar>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <putchar+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	6882      	ldr	r2, [r0, #8]
 8007a98:	f000 bd3a 	b.w	8008510 <_putc_r>
 8007a9c:	20000154 	.word	0x20000154

08007aa0 <__sread>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	f000 f868 	bl	8007b7c <_read_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	bfab      	itete	ge
 8007ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab4:	181b      	addge	r3, r3, r0
 8007ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aba:	bfac      	ite	ge
 8007abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007abe:	81a3      	strhlt	r3, [r4, #12]
 8007ac0:	bd10      	pop	{r4, pc}

08007ac2 <__swrite>:
 8007ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	898b      	ldrh	r3, [r1, #12]
 8007aca:	05db      	lsls	r3, r3, #23
 8007acc:	4605      	mov	r5, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	d505      	bpl.n	8007ae0 <__swrite+0x1e>
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	2302      	movs	r3, #2
 8007ada:	2200      	movs	r2, #0
 8007adc:	f000 f83c 	bl	8007b58 <_lseek_r>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	4632      	mov	r2, r6
 8007aee:	463b      	mov	r3, r7
 8007af0:	4628      	mov	r0, r5
 8007af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	f000 b853 	b.w	8007ba0 <_write_r>

08007afa <__sseek>:
 8007afa:	b510      	push	{r4, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b02:	f000 f829 	bl	8007b58 <_lseek_r>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	bf15      	itete	ne
 8007b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b16:	81a3      	strheq	r3, [r4, #12]
 8007b18:	bf18      	it	ne
 8007b1a:	81a3      	strhne	r3, [r4, #12]
 8007b1c:	bd10      	pop	{r4, pc}

08007b1e <__sclose>:
 8007b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b22:	f000 b809 	b.w	8007b38 <_close_r>

08007b26 <memset>:
 8007b26:	4402      	add	r2, r0
 8007b28:	4603      	mov	r3, r0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d100      	bne.n	8007b30 <memset+0xa>
 8007b2e:	4770      	bx	lr
 8007b30:	f803 1b01 	strb.w	r1, [r3], #1
 8007b34:	e7f9      	b.n	8007b2a <memset+0x4>
	...

08007b38 <_close_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d06      	ldr	r5, [pc, #24]	; (8007b54 <_close_r+0x1c>)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7f8 ff2b 	bl	800099e <_close>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_close_r+0x1a>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_close_r+0x1a>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20001f08 	.word	0x20001f08

08007b58 <_lseek_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4d07      	ldr	r5, [pc, #28]	; (8007b78 <_lseek_r+0x20>)
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4611      	mov	r1, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	602a      	str	r2, [r5, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7f8 ff40 	bl	80009ec <_lseek>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_lseek_r+0x1e>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_lseek_r+0x1e>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	20001f08 	.word	0x20001f08

08007b7c <_read_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d07      	ldr	r5, [pc, #28]	; (8007b9c <_read_r+0x20>)
 8007b80:	4604      	mov	r4, r0
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	602a      	str	r2, [r5, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f7f8 feea 	bl	8000964 <_read>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_read_r+0x1e>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_read_r+0x1e>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20001f08 	.word	0x20001f08

08007ba0 <_write_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	; (8007bc0 <_write_r+0x20>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f7f8 fcdc 	bl	800056c <_write>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_write_r+0x1e>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_write_r+0x1e>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	20001f08 	.word	0x20001f08

08007bc4 <__errno>:
 8007bc4:	4b01      	ldr	r3, [pc, #4]	; (8007bcc <__errno+0x8>)
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000154 	.word	0x20000154

08007bd0 <__libc_init_array>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	4d0d      	ldr	r5, [pc, #52]	; (8007c08 <__libc_init_array+0x38>)
 8007bd4:	4c0d      	ldr	r4, [pc, #52]	; (8007c0c <__libc_init_array+0x3c>)
 8007bd6:	1b64      	subs	r4, r4, r5
 8007bd8:	10a4      	asrs	r4, r4, #2
 8007bda:	2600      	movs	r6, #0
 8007bdc:	42a6      	cmp	r6, r4
 8007bde:	d109      	bne.n	8007bf4 <__libc_init_array+0x24>
 8007be0:	4d0b      	ldr	r5, [pc, #44]	; (8007c10 <__libc_init_array+0x40>)
 8007be2:	4c0c      	ldr	r4, [pc, #48]	; (8007c14 <__libc_init_array+0x44>)
 8007be4:	f000 fdf2 	bl	80087cc <_init>
 8007be8:	1b64      	subs	r4, r4, r5
 8007bea:	10a4      	asrs	r4, r4, #2
 8007bec:	2600      	movs	r6, #0
 8007bee:	42a6      	cmp	r6, r4
 8007bf0:	d105      	bne.n	8007bfe <__libc_init_array+0x2e>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf8:	4798      	blx	r3
 8007bfa:	3601      	adds	r6, #1
 8007bfc:	e7ee      	b.n	8007bdc <__libc_init_array+0xc>
 8007bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c02:	4798      	blx	r3
 8007c04:	3601      	adds	r6, #1
 8007c06:	e7f2      	b.n	8007bee <__libc_init_array+0x1e>
 8007c08:	0800888c 	.word	0x0800888c
 8007c0c:	0800888c 	.word	0x0800888c
 8007c10:	0800888c 	.word	0x0800888c
 8007c14:	08008890 	.word	0x08008890

08007c18 <__retarget_lock_acquire_recursive>:
 8007c18:	4770      	bx	lr

08007c1a <__retarget_lock_release_recursive>:
 8007c1a:	4770      	bx	lr

08007c1c <_free_r>:
 8007c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d044      	beq.n	8007cac <_free_r+0x90>
 8007c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c26:	9001      	str	r0, [sp, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c2e:	bfb8      	it	lt
 8007c30:	18e4      	addlt	r4, r4, r3
 8007c32:	f000 f8df 	bl	8007df4 <__malloc_lock>
 8007c36:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <_free_r+0x94>)
 8007c38:	9801      	ldr	r0, [sp, #4]
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	b933      	cbnz	r3, 8007c4c <_free_r+0x30>
 8007c3e:	6063      	str	r3, [r4, #4]
 8007c40:	6014      	str	r4, [r2, #0]
 8007c42:	b003      	add	sp, #12
 8007c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c48:	f000 b8da 	b.w	8007e00 <__malloc_unlock>
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d908      	bls.n	8007c62 <_free_r+0x46>
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	1961      	adds	r1, r4, r5
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf01      	itttt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	1949      	addeq	r1, r1, r5
 8007c5e:	6021      	streq	r1, [r4, #0]
 8007c60:	e7ed      	b.n	8007c3e <_free_r+0x22>
 8007c62:	461a      	mov	r2, r3
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b10b      	cbz	r3, 8007c6c <_free_r+0x50>
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d9fa      	bls.n	8007c62 <_free_r+0x46>
 8007c6c:	6811      	ldr	r1, [r2, #0]
 8007c6e:	1855      	adds	r5, r2, r1
 8007c70:	42a5      	cmp	r5, r4
 8007c72:	d10b      	bne.n	8007c8c <_free_r+0x70>
 8007c74:	6824      	ldr	r4, [r4, #0]
 8007c76:	4421      	add	r1, r4
 8007c78:	1854      	adds	r4, r2, r1
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	d1e0      	bne.n	8007c42 <_free_r+0x26>
 8007c80:	681c      	ldr	r4, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	6053      	str	r3, [r2, #4]
 8007c86:	440c      	add	r4, r1
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	e7da      	b.n	8007c42 <_free_r+0x26>
 8007c8c:	d902      	bls.n	8007c94 <_free_r+0x78>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	e7d6      	b.n	8007c42 <_free_r+0x26>
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	1961      	adds	r1, r4, r5
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf04      	itt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	bf04      	itt	eq
 8007ca4:	1949      	addeq	r1, r1, r5
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	6054      	str	r4, [r2, #4]
 8007caa:	e7ca      	b.n	8007c42 <_free_r+0x26>
 8007cac:	b003      	add	sp, #12
 8007cae:	bd30      	pop	{r4, r5, pc}
 8007cb0:	20001f10 	.word	0x20001f10

08007cb4 <sbrk_aligned>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	4e0e      	ldr	r6, [pc, #56]	; (8007cf0 <sbrk_aligned+0x3c>)
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6831      	ldr	r1, [r6, #0]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	b911      	cbnz	r1, 8007cc6 <sbrk_aligned+0x12>
 8007cc0:	f000 fcf0 	bl	80086a4 <_sbrk_r>
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 fceb 	bl	80086a4 <_sbrk_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d00a      	beq.n	8007ce8 <sbrk_aligned+0x34>
 8007cd2:	1cc4      	adds	r4, r0, #3
 8007cd4:	f024 0403 	bic.w	r4, r4, #3
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d007      	beq.n	8007cec <sbrk_aligned+0x38>
 8007cdc:	1a21      	subs	r1, r4, r0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fce0 	bl	80086a4 <_sbrk_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d101      	bne.n	8007cec <sbrk_aligned+0x38>
 8007ce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	20001f14 	.word	0x20001f14

08007cf4 <_malloc_r>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	1ccd      	adds	r5, r1, #3
 8007cfa:	f025 0503 	bic.w	r5, r5, #3
 8007cfe:	3508      	adds	r5, #8
 8007d00:	2d0c      	cmp	r5, #12
 8007d02:	bf38      	it	cc
 8007d04:	250c      	movcc	r5, #12
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	4607      	mov	r7, r0
 8007d0a:	db01      	blt.n	8007d10 <_malloc_r+0x1c>
 8007d0c:	42a9      	cmp	r1, r5
 8007d0e:	d905      	bls.n	8007d1c <_malloc_r+0x28>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	2600      	movs	r6, #0
 8007d16:	4630      	mov	r0, r6
 8007d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007df0 <_malloc_r+0xfc>
 8007d20:	f000 f868 	bl	8007df4 <__malloc_lock>
 8007d24:	f8d8 3000 	ldr.w	r3, [r8]
 8007d28:	461c      	mov	r4, r3
 8007d2a:	bb5c      	cbnz	r4, 8007d84 <_malloc_r+0x90>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7ff ffc0 	bl	8007cb4 <sbrk_aligned>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	4604      	mov	r4, r0
 8007d38:	d155      	bne.n	8007de6 <_malloc_r+0xf2>
 8007d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d3e:	4626      	mov	r6, r4
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	d145      	bne.n	8007dd0 <_malloc_r+0xdc>
 8007d44:	2c00      	cmp	r4, #0
 8007d46:	d048      	beq.n	8007dda <_malloc_r+0xe6>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	eb04 0903 	add.w	r9, r4, r3
 8007d52:	f000 fca7 	bl	80086a4 <_sbrk_r>
 8007d56:	4581      	cmp	r9, r0
 8007d58:	d13f      	bne.n	8007dda <_malloc_r+0xe6>
 8007d5a:	6821      	ldr	r1, [r4, #0]
 8007d5c:	1a6d      	subs	r5, r5, r1
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ffa7 	bl	8007cb4 <sbrk_aligned>
 8007d66:	3001      	adds	r0, #1
 8007d68:	d037      	beq.n	8007dda <_malloc_r+0xe6>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	442b      	add	r3, r5
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	f8d8 3000 	ldr.w	r3, [r8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d038      	beq.n	8007dea <_malloc_r+0xf6>
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	42a2      	cmp	r2, r4
 8007d7c:	d12b      	bne.n	8007dd6 <_malloc_r+0xe2>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	605a      	str	r2, [r3, #4]
 8007d82:	e00f      	b.n	8007da4 <_malloc_r+0xb0>
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	1b52      	subs	r2, r2, r5
 8007d88:	d41f      	bmi.n	8007dca <_malloc_r+0xd6>
 8007d8a:	2a0b      	cmp	r2, #11
 8007d8c:	d917      	bls.n	8007dbe <_malloc_r+0xca>
 8007d8e:	1961      	adds	r1, r4, r5
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	6025      	str	r5, [r4, #0]
 8007d94:	bf18      	it	ne
 8007d96:	6059      	strne	r1, [r3, #4]
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	bf08      	it	eq
 8007d9c:	f8c8 1000 	streq.w	r1, [r8]
 8007da0:	5162      	str	r2, [r4, r5]
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	4638      	mov	r0, r7
 8007da6:	f104 060b 	add.w	r6, r4, #11
 8007daa:	f000 f829 	bl	8007e00 <__malloc_unlock>
 8007dae:	f026 0607 	bic.w	r6, r6, #7
 8007db2:	1d23      	adds	r3, r4, #4
 8007db4:	1af2      	subs	r2, r6, r3
 8007db6:	d0ae      	beq.n	8007d16 <_malloc_r+0x22>
 8007db8:	1b9b      	subs	r3, r3, r6
 8007dba:	50a3      	str	r3, [r4, r2]
 8007dbc:	e7ab      	b.n	8007d16 <_malloc_r+0x22>
 8007dbe:	42a3      	cmp	r3, r4
 8007dc0:	6862      	ldr	r2, [r4, #4]
 8007dc2:	d1dd      	bne.n	8007d80 <_malloc_r+0x8c>
 8007dc4:	f8c8 2000 	str.w	r2, [r8]
 8007dc8:	e7ec      	b.n	8007da4 <_malloc_r+0xb0>
 8007dca:	4623      	mov	r3, r4
 8007dcc:	6864      	ldr	r4, [r4, #4]
 8007dce:	e7ac      	b.n	8007d2a <_malloc_r+0x36>
 8007dd0:	4634      	mov	r4, r6
 8007dd2:	6876      	ldr	r6, [r6, #4]
 8007dd4:	e7b4      	b.n	8007d40 <_malloc_r+0x4c>
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	e7cc      	b.n	8007d74 <_malloc_r+0x80>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	4638      	mov	r0, r7
 8007de0:	f000 f80e 	bl	8007e00 <__malloc_unlock>
 8007de4:	e797      	b.n	8007d16 <_malloc_r+0x22>
 8007de6:	6025      	str	r5, [r4, #0]
 8007de8:	e7dc      	b.n	8007da4 <_malloc_r+0xb0>
 8007dea:	605b      	str	r3, [r3, #4]
 8007dec:	deff      	udf	#255	; 0xff
 8007dee:	bf00      	nop
 8007df0:	20001f10 	.word	0x20001f10

08007df4 <__malloc_lock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__malloc_lock+0x8>)
 8007df6:	f7ff bf0f 	b.w	8007c18 <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20001f0c 	.word	0x20001f0c

08007e00 <__malloc_unlock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__malloc_unlock+0x8>)
 8007e02:	f7ff bf0a 	b.w	8007c1a <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	20001f0c 	.word	0x20001f0c

08007e0c <__sfputc_r>:
 8007e0c:	6893      	ldr	r3, [r2, #8]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	b410      	push	{r4}
 8007e14:	6093      	str	r3, [r2, #8]
 8007e16:	da08      	bge.n	8007e2a <__sfputc_r+0x1e>
 8007e18:	6994      	ldr	r4, [r2, #24]
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	db01      	blt.n	8007e22 <__sfputc_r+0x16>
 8007e1e:	290a      	cmp	r1, #10
 8007e20:	d103      	bne.n	8007e2a <__sfputc_r+0x1e>
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e26:	f000 bba7 	b.w	8008578 <__swbuf_r>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	1c58      	adds	r0, r3, #1
 8007e2e:	6010      	str	r0, [r2, #0]
 8007e30:	7019      	strb	r1, [r3, #0]
 8007e32:	4608      	mov	r0, r1
 8007e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <__sfputs_r>:
 8007e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	4614      	mov	r4, r2
 8007e42:	18d5      	adds	r5, r2, r3
 8007e44:	42ac      	cmp	r4, r5
 8007e46:	d101      	bne.n	8007e4c <__sfputs_r+0x12>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e007      	b.n	8007e5c <__sfputs_r+0x22>
 8007e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e50:	463a      	mov	r2, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ffda 	bl	8007e0c <__sfputc_r>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d1f3      	bne.n	8007e44 <__sfputs_r+0xa>
 8007e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e60 <_vfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	460d      	mov	r5, r1
 8007e66:	b09d      	sub	sp, #116	; 0x74
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4698      	mov	r8, r3
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <_vfiprintf_r+0x18>
 8007e70:	6a03      	ldr	r3, [r0, #32]
 8007e72:	b90b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x18>
 8007e74:	f7ff fdc4 	bl	8007a00 <__sinit>
 8007e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e7a:	07d9      	lsls	r1, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_vfiprintf_r+0x2a>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	059a      	lsls	r2, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_vfiprintf_r+0x2a>
 8007e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e86:	f7ff fec7 	bl	8007c18 <__retarget_lock_acquire_recursive>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	071b      	lsls	r3, r3, #28
 8007e8e:	d501      	bpl.n	8007e94 <_vfiprintf_r+0x34>
 8007e90:	692b      	ldr	r3, [r5, #16]
 8007e92:	b99b      	cbnz	r3, 8007ebc <_vfiprintf_r+0x5c>
 8007e94:	4629      	mov	r1, r5
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 fbac 	bl	80085f4 <__swsetup_r>
 8007e9c:	b170      	cbz	r0, 8007ebc <_vfiprintf_r+0x5c>
 8007e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea0:	07dc      	lsls	r4, r3, #31
 8007ea2:	d504      	bpl.n	8007eae <_vfiprintf_r+0x4e>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ea8:	b01d      	add	sp, #116	; 0x74
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	0598      	lsls	r0, r3, #22
 8007eb2:	d4f7      	bmi.n	8007ea4 <_vfiprintf_r+0x44>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb6:	f7ff feb0 	bl	8007c1a <__retarget_lock_release_recursive>
 8007eba:	e7f3      	b.n	8007ea4 <_vfiprintf_r+0x44>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eca:	2330      	movs	r3, #48	; 0x30
 8007ecc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008080 <_vfiprintf_r+0x220>
 8007ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed4:	f04f 0901 	mov.w	r9, #1
 8007ed8:	4623      	mov	r3, r4
 8007eda:	469a      	mov	sl, r3
 8007edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee0:	b10a      	cbz	r2, 8007ee6 <_vfiprintf_r+0x86>
 8007ee2:	2a25      	cmp	r2, #37	; 0x25
 8007ee4:	d1f9      	bne.n	8007eda <_vfiprintf_r+0x7a>
 8007ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eea:	d00b      	beq.n	8007f04 <_vfiprintf_r+0xa4>
 8007eec:	465b      	mov	r3, fp
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ffa1 	bl	8007e3a <__sfputs_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f000 80a9 	beq.w	8008050 <_vfiprintf_r+0x1f0>
 8007efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f00:	445a      	add	r2, fp
 8007f02:	9209      	str	r2, [sp, #36]	; 0x24
 8007f04:	f89a 3000 	ldrb.w	r3, [sl]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80a1 	beq.w	8008050 <_vfiprintf_r+0x1f0>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f24:	931a      	str	r3, [sp, #104]	; 0x68
 8007f26:	4654      	mov	r4, sl
 8007f28:	2205      	movs	r2, #5
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	4854      	ldr	r0, [pc, #336]	; (8008080 <_vfiprintf_r+0x220>)
 8007f30:	f7f8 f94e 	bl	80001d0 <memchr>
 8007f34:	9a04      	ldr	r2, [sp, #16]
 8007f36:	b9d8      	cbnz	r0, 8007f70 <_vfiprintf_r+0x110>
 8007f38:	06d1      	lsls	r1, r2, #27
 8007f3a:	bf44      	itt	mi
 8007f3c:	2320      	movmi	r3, #32
 8007f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f42:	0713      	lsls	r3, r2, #28
 8007f44:	bf44      	itt	mi
 8007f46:	232b      	movmi	r3, #43	; 0x2b
 8007f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f50:	2b2a      	cmp	r3, #42	; 0x2a
 8007f52:	d015      	beq.n	8007f80 <_vfiprintf_r+0x120>
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	4654      	mov	r4, sl
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f04f 0c0a 	mov.w	ip, #10
 8007f5e:	4621      	mov	r1, r4
 8007f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f64:	3b30      	subs	r3, #48	; 0x30
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d94d      	bls.n	8008006 <_vfiprintf_r+0x1a6>
 8007f6a:	b1b0      	cbz	r0, 8007f9a <_vfiprintf_r+0x13a>
 8007f6c:	9207      	str	r2, [sp, #28]
 8007f6e:	e014      	b.n	8007f9a <_vfiprintf_r+0x13a>
 8007f70:	eba0 0308 	sub.w	r3, r0, r8
 8007f74:	fa09 f303 	lsl.w	r3, r9, r3
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	46a2      	mov	sl, r4
 8007f7e:	e7d2      	b.n	8007f26 <_vfiprintf_r+0xc6>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d19      	adds	r1, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9103      	str	r1, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfbb      	ittet	lt
 8007f8c:	425b      	neglt	r3, r3
 8007f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f92:	9307      	strge	r3, [sp, #28]
 8007f94:	9307      	strlt	r3, [sp, #28]
 8007f96:	bfb8      	it	lt
 8007f98:	9204      	strlt	r2, [sp, #16]
 8007f9a:	7823      	ldrb	r3, [r4, #0]
 8007f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f9e:	d10c      	bne.n	8007fba <_vfiprintf_r+0x15a>
 8007fa0:	7863      	ldrb	r3, [r4, #1]
 8007fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa4:	d134      	bne.n	8008010 <_vfiprintf_r+0x1b0>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	9203      	str	r2, [sp, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fb6:	3402      	adds	r4, #2
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008090 <_vfiprintf_r+0x230>
 8007fbe:	7821      	ldrb	r1, [r4, #0]
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f7f8 f904 	bl	80001d0 <memchr>
 8007fc8:	b138      	cbz	r0, 8007fda <_vfiprintf_r+0x17a>
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	eba0 000a 	sub.w	r0, r0, sl
 8007fd0:	2240      	movs	r2, #64	; 0x40
 8007fd2:	4082      	lsls	r2, r0
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	3401      	adds	r4, #1
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fde:	4829      	ldr	r0, [pc, #164]	; (8008084 <_vfiprintf_r+0x224>)
 8007fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe4:	2206      	movs	r2, #6
 8007fe6:	f7f8 f8f3 	bl	80001d0 <memchr>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d03f      	beq.n	800806e <_vfiprintf_r+0x20e>
 8007fee:	4b26      	ldr	r3, [pc, #152]	; (8008088 <_vfiprintf_r+0x228>)
 8007ff0:	bb1b      	cbnz	r3, 800803a <_vfiprintf_r+0x1da>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	3307      	adds	r3, #7
 8007ff6:	f023 0307 	bic.w	r3, r3, #7
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008000:	443b      	add	r3, r7
 8008002:	9309      	str	r3, [sp, #36]	; 0x24
 8008004:	e768      	b.n	8007ed8 <_vfiprintf_r+0x78>
 8008006:	fb0c 3202 	mla	r2, ip, r2, r3
 800800a:	460c      	mov	r4, r1
 800800c:	2001      	movs	r0, #1
 800800e:	e7a6      	b.n	8007f5e <_vfiprintf_r+0xfe>
 8008010:	2300      	movs	r3, #0
 8008012:	3401      	adds	r4, #1
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	4619      	mov	r1, r3
 8008018:	f04f 0c0a 	mov.w	ip, #10
 800801c:	4620      	mov	r0, r4
 800801e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008022:	3a30      	subs	r2, #48	; 0x30
 8008024:	2a09      	cmp	r2, #9
 8008026:	d903      	bls.n	8008030 <_vfiprintf_r+0x1d0>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0c6      	beq.n	8007fba <_vfiprintf_r+0x15a>
 800802c:	9105      	str	r1, [sp, #20]
 800802e:	e7c4      	b.n	8007fba <_vfiprintf_r+0x15a>
 8008030:	fb0c 2101 	mla	r1, ip, r1, r2
 8008034:	4604      	mov	r4, r0
 8008036:	2301      	movs	r3, #1
 8008038:	e7f0      	b.n	800801c <_vfiprintf_r+0x1bc>
 800803a:	ab03      	add	r3, sp, #12
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	462a      	mov	r2, r5
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <_vfiprintf_r+0x22c>)
 8008042:	a904      	add	r1, sp, #16
 8008044:	4630      	mov	r0, r6
 8008046:	f3af 8000 	nop.w
 800804a:	4607      	mov	r7, r0
 800804c:	1c78      	adds	r0, r7, #1
 800804e:	d1d6      	bne.n	8007ffe <_vfiprintf_r+0x19e>
 8008050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008052:	07d9      	lsls	r1, r3, #31
 8008054:	d405      	bmi.n	8008062 <_vfiprintf_r+0x202>
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	059a      	lsls	r2, r3, #22
 800805a:	d402      	bmi.n	8008062 <_vfiprintf_r+0x202>
 800805c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805e:	f7ff fddc 	bl	8007c1a <__retarget_lock_release_recursive>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	065b      	lsls	r3, r3, #25
 8008066:	f53f af1d 	bmi.w	8007ea4 <_vfiprintf_r+0x44>
 800806a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806c:	e71c      	b.n	8007ea8 <_vfiprintf_r+0x48>
 800806e:	ab03      	add	r3, sp, #12
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	462a      	mov	r2, r5
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <_vfiprintf_r+0x22c>)
 8008076:	a904      	add	r1, sp, #16
 8008078:	4630      	mov	r0, r6
 800807a:	f000 f879 	bl	8008170 <_printf_i>
 800807e:	e7e4      	b.n	800804a <_vfiprintf_r+0x1ea>
 8008080:	08008850 	.word	0x08008850
 8008084:	0800885a 	.word	0x0800885a
 8008088:	00000000 	.word	0x00000000
 800808c:	08007e3b 	.word	0x08007e3b
 8008090:	08008856 	.word	0x08008856

08008094 <_printf_common>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	4616      	mov	r6, r2
 800809a:	4699      	mov	r9, r3
 800809c:	688a      	ldr	r2, [r1, #8]
 800809e:	690b      	ldr	r3, [r1, #16]
 80080a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	bfb8      	it	lt
 80080a8:	4613      	movlt	r3, r2
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080b0:	4607      	mov	r7, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	b10a      	cbz	r2, 80080ba <_printf_common+0x26>
 80080b6:	3301      	adds	r3, #1
 80080b8:	6033      	str	r3, [r6, #0]
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	0699      	lsls	r1, r3, #26
 80080be:	bf42      	ittt	mi
 80080c0:	6833      	ldrmi	r3, [r6, #0]
 80080c2:	3302      	addmi	r3, #2
 80080c4:	6033      	strmi	r3, [r6, #0]
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	f015 0506 	ands.w	r5, r5, #6
 80080cc:	d106      	bne.n	80080dc <_printf_common+0x48>
 80080ce:	f104 0a19 	add.w	sl, r4, #25
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	6832      	ldr	r2, [r6, #0]
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dc26      	bgt.n	800812a <_printf_common+0x96>
 80080dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080e0:	1e13      	subs	r3, r2, #0
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	bf18      	it	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	0692      	lsls	r2, r2, #26
 80080ea:	d42b      	bmi.n	8008144 <_printf_common+0xb0>
 80080ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080f0:	4649      	mov	r1, r9
 80080f2:	4638      	mov	r0, r7
 80080f4:	47c0      	blx	r8
 80080f6:	3001      	adds	r0, #1
 80080f8:	d01e      	beq.n	8008138 <_printf_common+0xa4>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	f003 0306 	and.w	r3, r3, #6
 8008102:	2b04      	cmp	r3, #4
 8008104:	bf02      	ittt	eq
 8008106:	68e5      	ldreq	r5, [r4, #12]
 8008108:	6833      	ldreq	r3, [r6, #0]
 800810a:	1aed      	subeq	r5, r5, r3
 800810c:	68a3      	ldr	r3, [r4, #8]
 800810e:	bf0c      	ite	eq
 8008110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008114:	2500      	movne	r5, #0
 8008116:	4293      	cmp	r3, r2
 8008118:	bfc4      	itt	gt
 800811a:	1a9b      	subgt	r3, r3, r2
 800811c:	18ed      	addgt	r5, r5, r3
 800811e:	2600      	movs	r6, #0
 8008120:	341a      	adds	r4, #26
 8008122:	42b5      	cmp	r5, r6
 8008124:	d11a      	bne.n	800815c <_printf_common+0xc8>
 8008126:	2000      	movs	r0, #0
 8008128:	e008      	b.n	800813c <_printf_common+0xa8>
 800812a:	2301      	movs	r3, #1
 800812c:	4652      	mov	r2, sl
 800812e:	4649      	mov	r1, r9
 8008130:	4638      	mov	r0, r7
 8008132:	47c0      	blx	r8
 8008134:	3001      	adds	r0, #1
 8008136:	d103      	bne.n	8008140 <_printf_common+0xac>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800813c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008140:	3501      	adds	r5, #1
 8008142:	e7c6      	b.n	80080d2 <_printf_common+0x3e>
 8008144:	18e1      	adds	r1, r4, r3
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	2030      	movs	r0, #48	; 0x30
 800814a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800814e:	4422      	add	r2, r4
 8008150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008158:	3302      	adds	r3, #2
 800815a:	e7c7      	b.n	80080ec <_printf_common+0x58>
 800815c:	2301      	movs	r3, #1
 800815e:	4622      	mov	r2, r4
 8008160:	4649      	mov	r1, r9
 8008162:	4638      	mov	r0, r7
 8008164:	47c0      	blx	r8
 8008166:	3001      	adds	r0, #1
 8008168:	d0e6      	beq.n	8008138 <_printf_common+0xa4>
 800816a:	3601      	adds	r6, #1
 800816c:	e7d9      	b.n	8008122 <_printf_common+0x8e>
	...

08008170 <_printf_i>:
 8008170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	7e0f      	ldrb	r7, [r1, #24]
 8008176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008178:	2f78      	cmp	r7, #120	; 0x78
 800817a:	4691      	mov	r9, r2
 800817c:	4680      	mov	r8, r0
 800817e:	460c      	mov	r4, r1
 8008180:	469a      	mov	sl, r3
 8008182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008186:	d807      	bhi.n	8008198 <_printf_i+0x28>
 8008188:	2f62      	cmp	r7, #98	; 0x62
 800818a:	d80a      	bhi.n	80081a2 <_printf_i+0x32>
 800818c:	2f00      	cmp	r7, #0
 800818e:	f000 80d4 	beq.w	800833a <_printf_i+0x1ca>
 8008192:	2f58      	cmp	r7, #88	; 0x58
 8008194:	f000 80c0 	beq.w	8008318 <_printf_i+0x1a8>
 8008198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800819c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081a0:	e03a      	b.n	8008218 <_printf_i+0xa8>
 80081a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081a6:	2b15      	cmp	r3, #21
 80081a8:	d8f6      	bhi.n	8008198 <_printf_i+0x28>
 80081aa:	a101      	add	r1, pc, #4	; (adr r1, 80081b0 <_printf_i+0x40>)
 80081ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081b0:	08008209 	.word	0x08008209
 80081b4:	0800821d 	.word	0x0800821d
 80081b8:	08008199 	.word	0x08008199
 80081bc:	08008199 	.word	0x08008199
 80081c0:	08008199 	.word	0x08008199
 80081c4:	08008199 	.word	0x08008199
 80081c8:	0800821d 	.word	0x0800821d
 80081cc:	08008199 	.word	0x08008199
 80081d0:	08008199 	.word	0x08008199
 80081d4:	08008199 	.word	0x08008199
 80081d8:	08008199 	.word	0x08008199
 80081dc:	08008321 	.word	0x08008321
 80081e0:	08008249 	.word	0x08008249
 80081e4:	080082db 	.word	0x080082db
 80081e8:	08008199 	.word	0x08008199
 80081ec:	08008199 	.word	0x08008199
 80081f0:	08008343 	.word	0x08008343
 80081f4:	08008199 	.word	0x08008199
 80081f8:	08008249 	.word	0x08008249
 80081fc:	08008199 	.word	0x08008199
 8008200:	08008199 	.word	0x08008199
 8008204:	080082e3 	.word	0x080082e3
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	1d1a      	adds	r2, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	602a      	str	r2, [r5, #0]
 8008210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008218:	2301      	movs	r3, #1
 800821a:	e09f      	b.n	800835c <_printf_i+0x1ec>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	682b      	ldr	r3, [r5, #0]
 8008220:	0607      	lsls	r7, r0, #24
 8008222:	f103 0104 	add.w	r1, r3, #4
 8008226:	6029      	str	r1, [r5, #0]
 8008228:	d501      	bpl.n	800822e <_printf_i+0xbe>
 800822a:	681e      	ldr	r6, [r3, #0]
 800822c:	e003      	b.n	8008236 <_printf_i+0xc6>
 800822e:	0646      	lsls	r6, r0, #25
 8008230:	d5fb      	bpl.n	800822a <_printf_i+0xba>
 8008232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008236:	2e00      	cmp	r6, #0
 8008238:	da03      	bge.n	8008242 <_printf_i+0xd2>
 800823a:	232d      	movs	r3, #45	; 0x2d
 800823c:	4276      	negs	r6, r6
 800823e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008242:	485a      	ldr	r0, [pc, #360]	; (80083ac <_printf_i+0x23c>)
 8008244:	230a      	movs	r3, #10
 8008246:	e012      	b.n	800826e <_printf_i+0xfe>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	6029      	str	r1, [r5, #0]
 8008250:	0605      	lsls	r5, r0, #24
 8008252:	d501      	bpl.n	8008258 <_printf_i+0xe8>
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	e002      	b.n	800825e <_printf_i+0xee>
 8008258:	0641      	lsls	r1, r0, #25
 800825a:	d5fb      	bpl.n	8008254 <_printf_i+0xe4>
 800825c:	881e      	ldrh	r6, [r3, #0]
 800825e:	4853      	ldr	r0, [pc, #332]	; (80083ac <_printf_i+0x23c>)
 8008260:	2f6f      	cmp	r7, #111	; 0x6f
 8008262:	bf0c      	ite	eq
 8008264:	2308      	moveq	r3, #8
 8008266:	230a      	movne	r3, #10
 8008268:	2100      	movs	r1, #0
 800826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826e:	6865      	ldr	r5, [r4, #4]
 8008270:	60a5      	str	r5, [r4, #8]
 8008272:	2d00      	cmp	r5, #0
 8008274:	bfa2      	ittt	ge
 8008276:	6821      	ldrge	r1, [r4, #0]
 8008278:	f021 0104 	bicge.w	r1, r1, #4
 800827c:	6021      	strge	r1, [r4, #0]
 800827e:	b90e      	cbnz	r6, 8008284 <_printf_i+0x114>
 8008280:	2d00      	cmp	r5, #0
 8008282:	d04b      	beq.n	800831c <_printf_i+0x1ac>
 8008284:	4615      	mov	r5, r2
 8008286:	fbb6 f1f3 	udiv	r1, r6, r3
 800828a:	fb03 6711 	mls	r7, r3, r1, r6
 800828e:	5dc7      	ldrb	r7, [r0, r7]
 8008290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008294:	4637      	mov	r7, r6
 8008296:	42bb      	cmp	r3, r7
 8008298:	460e      	mov	r6, r1
 800829a:	d9f4      	bls.n	8008286 <_printf_i+0x116>
 800829c:	2b08      	cmp	r3, #8
 800829e:	d10b      	bne.n	80082b8 <_printf_i+0x148>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	07de      	lsls	r6, r3, #31
 80082a4:	d508      	bpl.n	80082b8 <_printf_i+0x148>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4299      	cmp	r1, r3
 80082ac:	bfde      	ittt	le
 80082ae:	2330      	movle	r3, #48	; 0x30
 80082b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082b8:	1b52      	subs	r2, r2, r5
 80082ba:	6122      	str	r2, [r4, #16]
 80082bc:	f8cd a000 	str.w	sl, [sp]
 80082c0:	464b      	mov	r3, r9
 80082c2:	aa03      	add	r2, sp, #12
 80082c4:	4621      	mov	r1, r4
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7ff fee4 	bl	8008094 <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d14a      	bne.n	8008366 <_printf_i+0x1f6>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d4:	b004      	add	sp, #16
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f043 0320 	orr.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	4833      	ldr	r0, [pc, #204]	; (80083b0 <_printf_i+0x240>)
 80082e4:	2778      	movs	r7, #120	; 0x78
 80082e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	6829      	ldr	r1, [r5, #0]
 80082ee:	061f      	lsls	r7, r3, #24
 80082f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082f4:	d402      	bmi.n	80082fc <_printf_i+0x18c>
 80082f6:	065f      	lsls	r7, r3, #25
 80082f8:	bf48      	it	mi
 80082fa:	b2b6      	uxthmi	r6, r6
 80082fc:	07df      	lsls	r7, r3, #31
 80082fe:	bf48      	it	mi
 8008300:	f043 0320 	orrmi.w	r3, r3, #32
 8008304:	6029      	str	r1, [r5, #0]
 8008306:	bf48      	it	mi
 8008308:	6023      	strmi	r3, [r4, #0]
 800830a:	b91e      	cbnz	r6, 8008314 <_printf_i+0x1a4>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	f023 0320 	bic.w	r3, r3, #32
 8008312:	6023      	str	r3, [r4, #0]
 8008314:	2310      	movs	r3, #16
 8008316:	e7a7      	b.n	8008268 <_printf_i+0xf8>
 8008318:	4824      	ldr	r0, [pc, #144]	; (80083ac <_printf_i+0x23c>)
 800831a:	e7e4      	b.n	80082e6 <_printf_i+0x176>
 800831c:	4615      	mov	r5, r2
 800831e:	e7bd      	b.n	800829c <_printf_i+0x12c>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6826      	ldr	r6, [r4, #0]
 8008324:	6961      	ldr	r1, [r4, #20]
 8008326:	1d18      	adds	r0, r3, #4
 8008328:	6028      	str	r0, [r5, #0]
 800832a:	0635      	lsls	r5, r6, #24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	d501      	bpl.n	8008334 <_printf_i+0x1c4>
 8008330:	6019      	str	r1, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0x1ca>
 8008334:	0670      	lsls	r0, r6, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0x1c0>
 8008338:	8019      	strh	r1, [r3, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	6123      	str	r3, [r4, #16]
 800833e:	4615      	mov	r5, r2
 8008340:	e7bc      	b.n	80082bc <_printf_i+0x14c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	4628      	mov	r0, r5
 8008350:	f7f7 ff3e 	bl	80001d0 <memchr>
 8008354:	b108      	cbz	r0, 800835a <_printf_i+0x1ea>
 8008356:	1b40      	subs	r0, r0, r5
 8008358:	6060      	str	r0, [r4, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	2300      	movs	r3, #0
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	e7aa      	b.n	80082bc <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	462a      	mov	r2, r5
 800836a:	4649      	mov	r1, r9
 800836c:	4640      	mov	r0, r8
 800836e:	47d0      	blx	sl
 8008370:	3001      	adds	r0, #1
 8008372:	d0ad      	beq.n	80082d0 <_printf_i+0x160>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	079b      	lsls	r3, r3, #30
 8008378:	d413      	bmi.n	80083a2 <_printf_i+0x232>
 800837a:	68e0      	ldr	r0, [r4, #12]
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	4298      	cmp	r0, r3
 8008380:	bfb8      	it	lt
 8008382:	4618      	movlt	r0, r3
 8008384:	e7a6      	b.n	80082d4 <_printf_i+0x164>
 8008386:	2301      	movs	r3, #1
 8008388:	4632      	mov	r2, r6
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	47d0      	blx	sl
 8008390:	3001      	adds	r0, #1
 8008392:	d09d      	beq.n	80082d0 <_printf_i+0x160>
 8008394:	3501      	adds	r5, #1
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	9903      	ldr	r1, [sp, #12]
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	42ab      	cmp	r3, r5
 800839e:	dcf2      	bgt.n	8008386 <_printf_i+0x216>
 80083a0:	e7eb      	b.n	800837a <_printf_i+0x20a>
 80083a2:	2500      	movs	r5, #0
 80083a4:	f104 0619 	add.w	r6, r4, #25
 80083a8:	e7f5      	b.n	8008396 <_printf_i+0x226>
 80083aa:	bf00      	nop
 80083ac:	08008861 	.word	0x08008861
 80083b0:	08008872 	.word	0x08008872

080083b4 <__sflush_r>:
 80083b4:	898a      	ldrh	r2, [r1, #12]
 80083b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	4605      	mov	r5, r0
 80083bc:	0710      	lsls	r0, r2, #28
 80083be:	460c      	mov	r4, r1
 80083c0:	d458      	bmi.n	8008474 <__sflush_r+0xc0>
 80083c2:	684b      	ldr	r3, [r1, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc05      	bgt.n	80083d4 <__sflush_r+0x20>
 80083c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dc02      	bgt.n	80083d4 <__sflush_r+0x20>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d0f9      	beq.n	80083ce <__sflush_r+0x1a>
 80083da:	2300      	movs	r3, #0
 80083dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083e0:	682f      	ldr	r7, [r5, #0]
 80083e2:	6a21      	ldr	r1, [r4, #32]
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	d032      	beq.n	800844e <__sflush_r+0x9a>
 80083e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	075a      	lsls	r2, r3, #29
 80083ee:	d505      	bpl.n	80083fc <__sflush_r+0x48>
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	1ac0      	subs	r0, r0, r3
 80083f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083f6:	b10b      	cbz	r3, 80083fc <__sflush_r+0x48>
 80083f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083fa:	1ac0      	subs	r0, r0, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	4602      	mov	r2, r0
 8008400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008402:	6a21      	ldr	r1, [r4, #32]
 8008404:	4628      	mov	r0, r5
 8008406:	47b0      	blx	r6
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	d106      	bne.n	800841c <__sflush_r+0x68>
 800840e:	6829      	ldr	r1, [r5, #0]
 8008410:	291d      	cmp	r1, #29
 8008412:	d82b      	bhi.n	800846c <__sflush_r+0xb8>
 8008414:	4a29      	ldr	r2, [pc, #164]	; (80084bc <__sflush_r+0x108>)
 8008416:	410a      	asrs	r2, r1
 8008418:	07d6      	lsls	r6, r2, #31
 800841a:	d427      	bmi.n	800846c <__sflush_r+0xb8>
 800841c:	2200      	movs	r2, #0
 800841e:	6062      	str	r2, [r4, #4]
 8008420:	04d9      	lsls	r1, r3, #19
 8008422:	6922      	ldr	r2, [r4, #16]
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	d504      	bpl.n	8008432 <__sflush_r+0x7e>
 8008428:	1c42      	adds	r2, r0, #1
 800842a:	d101      	bne.n	8008430 <__sflush_r+0x7c>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b903      	cbnz	r3, 8008432 <__sflush_r+0x7e>
 8008430:	6560      	str	r0, [r4, #84]	; 0x54
 8008432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008434:	602f      	str	r7, [r5, #0]
 8008436:	2900      	cmp	r1, #0
 8008438:	d0c9      	beq.n	80083ce <__sflush_r+0x1a>
 800843a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800843e:	4299      	cmp	r1, r3
 8008440:	d002      	beq.n	8008448 <__sflush_r+0x94>
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff fbea 	bl	8007c1c <_free_r>
 8008448:	2000      	movs	r0, #0
 800844a:	6360      	str	r0, [r4, #52]	; 0x34
 800844c:	e7c0      	b.n	80083d0 <__sflush_r+0x1c>
 800844e:	2301      	movs	r3, #1
 8008450:	4628      	mov	r0, r5
 8008452:	47b0      	blx	r6
 8008454:	1c41      	adds	r1, r0, #1
 8008456:	d1c8      	bne.n	80083ea <__sflush_r+0x36>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0c5      	beq.n	80083ea <__sflush_r+0x36>
 800845e:	2b1d      	cmp	r3, #29
 8008460:	d001      	beq.n	8008466 <__sflush_r+0xb2>
 8008462:	2b16      	cmp	r3, #22
 8008464:	d101      	bne.n	800846a <__sflush_r+0xb6>
 8008466:	602f      	str	r7, [r5, #0]
 8008468:	e7b1      	b.n	80083ce <__sflush_r+0x1a>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	e7ad      	b.n	80083d0 <__sflush_r+0x1c>
 8008474:	690f      	ldr	r7, [r1, #16]
 8008476:	2f00      	cmp	r7, #0
 8008478:	d0a9      	beq.n	80083ce <__sflush_r+0x1a>
 800847a:	0793      	lsls	r3, r2, #30
 800847c:	680e      	ldr	r6, [r1, #0]
 800847e:	bf08      	it	eq
 8008480:	694b      	ldreq	r3, [r1, #20]
 8008482:	600f      	str	r7, [r1, #0]
 8008484:	bf18      	it	ne
 8008486:	2300      	movne	r3, #0
 8008488:	eba6 0807 	sub.w	r8, r6, r7
 800848c:	608b      	str	r3, [r1, #8]
 800848e:	f1b8 0f00 	cmp.w	r8, #0
 8008492:	dd9c      	ble.n	80083ce <__sflush_r+0x1a>
 8008494:	6a21      	ldr	r1, [r4, #32]
 8008496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008498:	4643      	mov	r3, r8
 800849a:	463a      	mov	r2, r7
 800849c:	4628      	mov	r0, r5
 800849e:	47b0      	blx	r6
 80084a0:	2800      	cmp	r0, #0
 80084a2:	dc06      	bgt.n	80084b2 <__sflush_r+0xfe>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084b0:	e78e      	b.n	80083d0 <__sflush_r+0x1c>
 80084b2:	4407      	add	r7, r0
 80084b4:	eba8 0800 	sub.w	r8, r8, r0
 80084b8:	e7e9      	b.n	800848e <__sflush_r+0xda>
 80084ba:	bf00      	nop
 80084bc:	dfbffffe 	.word	0xdfbffffe

080084c0 <_fflush_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	b913      	cbnz	r3, 80084d0 <_fflush_r+0x10>
 80084ca:	2500      	movs	r5, #0
 80084cc:	4628      	mov	r0, r5
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	b118      	cbz	r0, 80084da <_fflush_r+0x1a>
 80084d2:	6a03      	ldr	r3, [r0, #32]
 80084d4:	b90b      	cbnz	r3, 80084da <_fflush_r+0x1a>
 80084d6:	f7ff fa93 	bl	8007a00 <__sinit>
 80084da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0f3      	beq.n	80084ca <_fflush_r+0xa>
 80084e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084e4:	07d0      	lsls	r0, r2, #31
 80084e6:	d404      	bmi.n	80084f2 <_fflush_r+0x32>
 80084e8:	0599      	lsls	r1, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_fflush_r+0x32>
 80084ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ee:	f7ff fb93 	bl	8007c18 <__retarget_lock_acquire_recursive>
 80084f2:	4628      	mov	r0, r5
 80084f4:	4621      	mov	r1, r4
 80084f6:	f7ff ff5d 	bl	80083b4 <__sflush_r>
 80084fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084fc:	07da      	lsls	r2, r3, #31
 80084fe:	4605      	mov	r5, r0
 8008500:	d4e4      	bmi.n	80084cc <_fflush_r+0xc>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	059b      	lsls	r3, r3, #22
 8008506:	d4e1      	bmi.n	80084cc <_fflush_r+0xc>
 8008508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800850a:	f7ff fb86 	bl	8007c1a <__retarget_lock_release_recursive>
 800850e:	e7dd      	b.n	80084cc <_fflush_r+0xc>

08008510 <_putc_r>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	460d      	mov	r5, r1
 8008514:	4614      	mov	r4, r2
 8008516:	4606      	mov	r6, r0
 8008518:	b118      	cbz	r0, 8008522 <_putc_r+0x12>
 800851a:	6a03      	ldr	r3, [r0, #32]
 800851c:	b90b      	cbnz	r3, 8008522 <_putc_r+0x12>
 800851e:	f7ff fa6f 	bl	8007a00 <__sinit>
 8008522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008524:	07d8      	lsls	r0, r3, #31
 8008526:	d405      	bmi.n	8008534 <_putc_r+0x24>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	0599      	lsls	r1, r3, #22
 800852c:	d402      	bmi.n	8008534 <_putc_r+0x24>
 800852e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008530:	f7ff fb72 	bl	8007c18 <__retarget_lock_acquire_recursive>
 8008534:	68a3      	ldr	r3, [r4, #8]
 8008536:	3b01      	subs	r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	da05      	bge.n	800854a <_putc_r+0x3a>
 800853e:	69a2      	ldr	r2, [r4, #24]
 8008540:	4293      	cmp	r3, r2
 8008542:	db12      	blt.n	800856a <_putc_r+0x5a>
 8008544:	b2eb      	uxtb	r3, r5
 8008546:	2b0a      	cmp	r3, #10
 8008548:	d00f      	beq.n	800856a <_putc_r+0x5a>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	701d      	strb	r5, [r3, #0]
 8008552:	b2ed      	uxtb	r5, r5
 8008554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008556:	07da      	lsls	r2, r3, #31
 8008558:	d405      	bmi.n	8008566 <_putc_r+0x56>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	059b      	lsls	r3, r3, #22
 800855e:	d402      	bmi.n	8008566 <_putc_r+0x56>
 8008560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008562:	f7ff fb5a 	bl	8007c1a <__retarget_lock_release_recursive>
 8008566:	4628      	mov	r0, r5
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	4629      	mov	r1, r5
 800856c:	4622      	mov	r2, r4
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f802 	bl	8008578 <__swbuf_r>
 8008574:	4605      	mov	r5, r0
 8008576:	e7ed      	b.n	8008554 <_putc_r+0x44>

08008578 <__swbuf_r>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	460e      	mov	r6, r1
 800857c:	4614      	mov	r4, r2
 800857e:	4605      	mov	r5, r0
 8008580:	b118      	cbz	r0, 800858a <__swbuf_r+0x12>
 8008582:	6a03      	ldr	r3, [r0, #32]
 8008584:	b90b      	cbnz	r3, 800858a <__swbuf_r+0x12>
 8008586:	f7ff fa3b 	bl	8007a00 <__sinit>
 800858a:	69a3      	ldr	r3, [r4, #24]
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	071a      	lsls	r2, r3, #28
 8008592:	d525      	bpl.n	80085e0 <__swbuf_r+0x68>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	b31b      	cbz	r3, 80085e0 <__swbuf_r+0x68>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	6922      	ldr	r2, [r4, #16]
 800859c:	1a98      	subs	r0, r3, r2
 800859e:	6963      	ldr	r3, [r4, #20]
 80085a0:	b2f6      	uxtb	r6, r6
 80085a2:	4283      	cmp	r3, r0
 80085a4:	4637      	mov	r7, r6
 80085a6:	dc04      	bgt.n	80085b2 <__swbuf_r+0x3a>
 80085a8:	4621      	mov	r1, r4
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7ff ff88 	bl	80084c0 <_fflush_r>
 80085b0:	b9e0      	cbnz	r0, 80085ec <__swbuf_r+0x74>
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	6022      	str	r2, [r4, #0]
 80085be:	701e      	strb	r6, [r3, #0]
 80085c0:	6962      	ldr	r2, [r4, #20]
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d004      	beq.n	80085d2 <__swbuf_r+0x5a>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	07db      	lsls	r3, r3, #31
 80085cc:	d506      	bpl.n	80085dc <__swbuf_r+0x64>
 80085ce:	2e0a      	cmp	r6, #10
 80085d0:	d104      	bne.n	80085dc <__swbuf_r+0x64>
 80085d2:	4621      	mov	r1, r4
 80085d4:	4628      	mov	r0, r5
 80085d6:	f7ff ff73 	bl	80084c0 <_fflush_r>
 80085da:	b938      	cbnz	r0, 80085ec <__swbuf_r+0x74>
 80085dc:	4638      	mov	r0, r7
 80085de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f806 	bl	80085f4 <__swsetup_r>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d0d5      	beq.n	8008598 <__swbuf_r+0x20>
 80085ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085f0:	e7f4      	b.n	80085dc <__swbuf_r+0x64>
	...

080085f4 <__swsetup_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <__swsetup_r+0xac>)
 80085f8:	4605      	mov	r5, r0
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	460c      	mov	r4, r1
 80085fe:	b118      	cbz	r0, 8008608 <__swsetup_r+0x14>
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	b90b      	cbnz	r3, 8008608 <__swsetup_r+0x14>
 8008604:	f7ff f9fc 	bl	8007a00 <__sinit>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860e:	0718      	lsls	r0, r3, #28
 8008610:	d422      	bmi.n	8008658 <__swsetup_r+0x64>
 8008612:	06d9      	lsls	r1, r3, #27
 8008614:	d407      	bmi.n	8008626 <__swsetup_r+0x32>
 8008616:	2309      	movs	r3, #9
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008624:	e034      	b.n	8008690 <__swsetup_r+0x9c>
 8008626:	0758      	lsls	r0, r3, #29
 8008628:	d512      	bpl.n	8008650 <__swsetup_r+0x5c>
 800862a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800862c:	b141      	cbz	r1, 8008640 <__swsetup_r+0x4c>
 800862e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008632:	4299      	cmp	r1, r3
 8008634:	d002      	beq.n	800863c <__swsetup_r+0x48>
 8008636:	4628      	mov	r0, r5
 8008638:	f7ff faf0 	bl	8007c1c <_free_r>
 800863c:	2300      	movs	r3, #0
 800863e:	6363      	str	r3, [r4, #52]	; 0x34
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	2300      	movs	r3, #0
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f043 0308 	orr.w	r3, r3, #8
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	b94b      	cbnz	r3, 8008670 <__swsetup_r+0x7c>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008666:	d003      	beq.n	8008670 <__swsetup_r+0x7c>
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f850 	bl	8008710 <__smakebuf_r>
 8008670:	89a0      	ldrh	r0, [r4, #12]
 8008672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008676:	f010 0301 	ands.w	r3, r0, #1
 800867a:	d00a      	beq.n	8008692 <__swsetup_r+0x9e>
 800867c:	2300      	movs	r3, #0
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	6963      	ldr	r3, [r4, #20]
 8008682:	425b      	negs	r3, r3
 8008684:	61a3      	str	r3, [r4, #24]
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	b943      	cbnz	r3, 800869c <__swsetup_r+0xa8>
 800868a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800868e:	d1c4      	bne.n	800861a <__swsetup_r+0x26>
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	0781      	lsls	r1, r0, #30
 8008694:	bf58      	it	pl
 8008696:	6963      	ldrpl	r3, [r4, #20]
 8008698:	60a3      	str	r3, [r4, #8]
 800869a:	e7f4      	b.n	8008686 <__swsetup_r+0x92>
 800869c:	2000      	movs	r0, #0
 800869e:	e7f7      	b.n	8008690 <__swsetup_r+0x9c>
 80086a0:	20000154 	.word	0x20000154

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	; (80086c0 <_sbrk_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7f8 f9aa 	bl	8000a08 <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_sbrk_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_sbrk_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20001f08 	.word	0x20001f08

080086c4 <__swhatbuf_r>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	2900      	cmp	r1, #0
 80086ce:	b096      	sub	sp, #88	; 0x58
 80086d0:	4615      	mov	r5, r2
 80086d2:	461e      	mov	r6, r3
 80086d4:	da0d      	bge.n	80086f2 <__swhatbuf_r+0x2e>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086dc:	f04f 0100 	mov.w	r1, #0
 80086e0:	bf0c      	ite	eq
 80086e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086e6:	2340      	movne	r3, #64	; 0x40
 80086e8:	2000      	movs	r0, #0
 80086ea:	6031      	str	r1, [r6, #0]
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	b016      	add	sp, #88	; 0x58
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	466a      	mov	r2, sp
 80086f4:	f000 f848 	bl	8008788 <_fstat_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dbec      	blt.n	80086d6 <__swhatbuf_r+0x12>
 80086fc:	9901      	ldr	r1, [sp, #4]
 80086fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008702:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008706:	4259      	negs	r1, r3
 8008708:	4159      	adcs	r1, r3
 800870a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870e:	e7eb      	b.n	80086e8 <__swhatbuf_r+0x24>

08008710 <__smakebuf_r>:
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008714:	079d      	lsls	r5, r3, #30
 8008716:	4606      	mov	r6, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d507      	bpl.n	800872c <__smakebuf_r+0x1c>
 800871c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	2301      	movs	r3, #1
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	b002      	add	sp, #8
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	ab01      	add	r3, sp, #4
 800872e:	466a      	mov	r2, sp
 8008730:	f7ff ffc8 	bl	80086c4 <__swhatbuf_r>
 8008734:	9900      	ldr	r1, [sp, #0]
 8008736:	4605      	mov	r5, r0
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff fadb 	bl	8007cf4 <_malloc_r>
 800873e:	b948      	cbnz	r0, 8008754 <__smakebuf_r+0x44>
 8008740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008744:	059a      	lsls	r2, r3, #22
 8008746:	d4ef      	bmi.n	8008728 <__smakebuf_r+0x18>
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	e7e3      	b.n	800871c <__smakebuf_r+0xc>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	6020      	str	r0, [r4, #0]
 8008758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	9b00      	ldr	r3, [sp, #0]
 8008760:	6163      	str	r3, [r4, #20]
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	6120      	str	r0, [r4, #16]
 8008766:	b15b      	cbz	r3, 8008780 <__smakebuf_r+0x70>
 8008768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f81d 	bl	80087ac <_isatty_r>
 8008772:	b128      	cbz	r0, 8008780 <__smakebuf_r+0x70>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	431d      	orrs	r5, r3
 8008784:	81a5      	strh	r5, [r4, #12]
 8008786:	e7cf      	b.n	8008728 <__smakebuf_r+0x18>

08008788 <_fstat_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	; (80087a8 <_fstat_r+0x20>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	f7f8 f90e 	bl	80009b6 <_fstat>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d102      	bne.n	80087a4 <_fstat_r+0x1c>
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	b103      	cbz	r3, 80087a4 <_fstat_r+0x1c>
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	bf00      	nop
 80087a8:	20001f08 	.word	0x20001f08

080087ac <_isatty_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_isatty_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f8 f90d 	bl	80009d6 <_isatty>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_isatty_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_isatty_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20001f08 	.word	0x20001f08

080087cc <_init>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr

080087d8 <_fini>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr
