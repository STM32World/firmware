
TUT_CAN_LOOPBACK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003534  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003700  08003700  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003700  08003700  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003700  08003700  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  08003770  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003770  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006df1  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000186f  00000000  00000000  00026ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00028738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e3  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ee5  00000000  00000000  0002950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007fef  00000000  00000000  000413f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c80  00000000  00000000  000493df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002754  00000000  00000000  000cf060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d17b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003628 	.word	0x08003628

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003628 	.word	0x08003628

0800014c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d002      	beq.n	8000164 <_write+0x18>
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	2b02      	cmp	r3, #2
 8000162:	d111      	bne.n	8000188 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	b29a      	uxth	r2, r3
 8000168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800016c:	68b9      	ldr	r1, [r7, #8]
 800016e:	4809      	ldr	r0, [pc, #36]	; (8000194 <_write+0x48>)
 8000170:	f002 f973 	bl	800245a <HAL_UART_Transmit>
 8000174:	4603      	mov	r3, r0
 8000176:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000178:	7dfb      	ldrb	r3, [r7, #23]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d101      	bne.n	8000182 <_write+0x36>
      return len;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	e004      	b.n	800018c <_write+0x40>
    else
      return -1;
 8000182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000186:	e001      	b.n	800018c <_write+0x40>
  }
  return -1;
 8000188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800018c:	4618      	mov	r0, r3
 800018e:	3718      	adds	r7, #24
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	200000ac 	.word	0x200000ac

08000198 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    DBG("RxFifo0 Message Pending Callback");
 80001a0:	4811      	ldr	r0, [pc, #68]	; (80001e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80001a2:	f002 fb87 	bl	80028b4 <iprintf>
 80001a6:	200a      	movs	r0, #10
 80001a8:	f002 fb96 	bl	80028d8 <putchar>
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001b0:	2100      	movs	r1, #0
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f000 fecc 	bl	8000f50 <HAL_CAN_GetRxMessage>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d10a      	bne.n	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	    DBG("Got message - id = 0x%04lx len = 0x%lx", RxHeader.StdId, RxHeader.DLC);
 80001be:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001c4:	6912      	ldr	r2, [r2, #16]
 80001c6:	4619      	mov	r1, r3
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80001ca:	f002 fb73 	bl	80028b4 <iprintf>
 80001ce:	200a      	movs	r0, #10
 80001d0:	f002 fb82 	bl	80028d8 <putchar>
	}
	count++;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	3301      	adds	r3, #1
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80001de:	701a      	strb	r2, [r3, #0]
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	08003640 	.word	0x08003640
 80001ec:	20000138 	.word	0x20000138
 80001f0:	20000104 	.word	0x20000104
 80001f4:	08003664 	.word	0x08003664
 80001f8:	20000140 	.word	0x20000140

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fb61 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f885 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f945 	bl	8000498 <MX_GPIO_Init>
  MX_CAN_Init();
 800020e:	f000 f8c7 	bl	80003a0 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000212:	f000 f917 	bl	8000444 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DBG("\n\n\n--------\nStarting");
 8000216:	4835      	ldr	r0, [pc, #212]	; (80002ec <main+0xf0>)
 8000218:	f002 fb4c 	bl	80028b4 <iprintf>
 800021c:	200a      	movs	r0, #10
 800021e:	f002 fb5b 	bl	80028d8 <putchar>

  HAL_CAN_Start(&hcan);
 8000222:	4833      	ldr	r0, [pc, #204]	; (80002f0 <main+0xf4>)
 8000224:	f000 fd76 	bl	8000d14 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000228:	2102      	movs	r1, #2
 800022a:	4831      	ldr	r0, [pc, #196]	; (80002f0 <main+0xf4>)
 800022c:	f000 ffa1 	bl	8001172 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 8000230:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <main+0xf8>)
 8000232:	2201      	movs	r2, #1
 8000234:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000236:	4b2f      	ldr	r3, [pc, #188]	; (80002f4 <main+0xf8>)
 8000238:	2200      	movs	r2, #0
 800023a:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 800023c:	4b2d      	ldr	r3, [pc, #180]	; (80002f4 <main+0xf8>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000242:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <main+0xf8>)
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x101;
 8000248:	4b2a      	ldr	r3, [pc, #168]	; (80002f4 <main+0xf8>)
 800024a:	f240 1201 	movw	r2, #257	; 0x101
 800024e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000250:	4b28      	ldr	r3, [pc, #160]	; (80002f4 <main+0xf8>)
 8000252:	2200      	movs	r2, #0
 8000254:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000256:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <main+0xfc>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <main+0xfc>)
 800025e:	2202      	movs	r2, #2
 8000260:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <main+0xfc>)
 8000264:	2203      	movs	r2, #3
 8000266:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <main+0xfc>)
 800026a:	2204      	movs	r2, #4
 800026c:	70da      	strb	r2, [r3, #3]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData[0], &TxMailbox[0]) != HAL_OK)
 800026e:	4b23      	ldr	r3, [pc, #140]	; (80002fc <main+0x100>)
 8000270:	4a21      	ldr	r2, [pc, #132]	; (80002f8 <main+0xfc>)
 8000272:	4920      	ldr	r1, [pc, #128]	; (80002f4 <main+0xf8>)
 8000274:	481e      	ldr	r0, [pc, #120]	; (80002f0 <main+0xf4>)
 8000276:	f000 fd91 	bl	8000d9c <HAL_CAN_AddTxMessage>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <main+0x88>
  {
	  Error_Handler();
 8000280:	f000 f956 	bl	8000530 <Error_Handler>
  }
  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData[1], &TxMailbox[1]) != HAL_OK)
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <main+0x104>)
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <main+0x108>)
 8000288:	491a      	ldr	r1, [pc, #104]	; (80002f4 <main+0xf8>)
 800028a:	4819      	ldr	r0, [pc, #100]	; (80002f0 <main+0xf4>)
 800028c:	f000 fd86 	bl	8000d9c <HAL_CAN_AddTxMessage>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <main+0x9e>
  {
	  Error_Handler();
 8000296:	f000 f94b 	bl	8000530 <Error_Handler>
  }
  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData[2], &TxMailbox[2]) != HAL_OK)
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0x10c>)
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <main+0x110>)
 800029e:	4915      	ldr	r1, [pc, #84]	; (80002f4 <main+0xf8>)
 80002a0:	4813      	ldr	r0, [pc, #76]	; (80002f0 <main+0xf4>)
 80002a2:	f000 fd7b 	bl	8000d9c <HAL_CAN_AddTxMessage>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <main+0xb4>
  {
	  Error_Handler();
 80002ac:	f000 f940 	bl	8000530 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0, last_msg = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]

  while (1)
  {

      now = HAL_GetTick();
 80002bc:	f000 fb5c 	bl	8000978 <HAL_GetTick>
 80002c0:	6078      	str	r0, [r7, #4]

      if (now - last_blink >= 500) {
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002cc:	d306      	bcc.n	80002dc <main+0xe0>
          HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d2:	480f      	ldr	r0, [pc, #60]	; (8000310 <main+0x114>)
 80002d4:	f001 fc40 	bl	8001b58 <HAL_GPIO_TogglePin>
          last_blink = now;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	60fb      	str	r3, [r7, #12]
      }

      if (now - last_msg >= 250) {
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	2bf9      	cmp	r3, #249	; 0xf9
 80002e4:	d9ea      	bls.n	80002bc <main+0xc0>

          last_msg = now;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	60bb      	str	r3, [r7, #8]
      now = HAL_GetTick();
 80002ea:	e7e7      	b.n	80002bc <main+0xc0>
 80002ec:	0800368c 	.word	0x0800368c
 80002f0:	20000084 	.word	0x20000084
 80002f4:	200000ec 	.word	0x200000ec
 80002f8:	20000130 	.word	0x20000130
 80002fc:	20000120 	.word	0x20000120
 8000300:	20000124 	.word	0x20000124
 8000304:	20000131 	.word	0x20000131
 8000308:	20000128 	.word	0x20000128
 800030c:	20000132 	.word	0x20000132
 8000310:	40011000 	.word	0x40011000

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fb23 	bl	800296e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fc15 	bl	8001b8c <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000368:	f000 f8e2 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fe82 	bl	8002090 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000392:	f000 f8cd 	bl	8000530 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_CAN_Init+0x9c>)
 80003a8:	4a25      	ldr	r2, [pc, #148]	; (8000440 <MX_CAN_Init+0xa0>)
 80003aa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_CAN_Init+0x9c>)
 80003ae:	2212      	movs	r2, #18
 80003b0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <MX_CAN_Init+0x9c>)
 80003b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ba:	4b20      	ldr	r3, [pc, #128]	; (800043c <MX_CAN_Init+0x9c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_CAN_Init+0x9c>)
 80003c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <MX_CAN_Init+0x9c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_CAN_Init+0x9c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <MX_CAN_Init+0x9c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_CAN_Init+0x9c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_CAN_Init+0x9c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_CAN_Init+0x9c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_CAN_Init+0x9c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f2:	4812      	ldr	r0, [pc, #72]	; (800043c <MX_CAN_Init+0x9c>)
 80003f4:	f000 faca 	bl	800098c <HAL_CAN_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003fe:	f000 f897 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000402:	2301      	movs	r3, #1
 8000404:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000406:	230a      	movs	r3, #10
 8000408:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  //canfilterconfig.FilterIdHigh = 0x103<<5;
  canfilterconfig.FilterIdHigh = 0x0000;
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
  //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
  canfilterconfig.FilterMaskIdHigh = 0x0;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000422:	2301      	movs	r3, #1
 8000424:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000426:	230d      	movs	r3, #13
 8000428:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800042a:	463b      	mov	r3, r7
 800042c:	4619      	mov	r1, r3
 800042e:	4803      	ldr	r0, [pc, #12]	; (800043c <MX_CAN_Init+0x9c>)
 8000430:	f000 fba7 	bl	8000b82 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3728      	adds	r7, #40	; 0x28
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000084 	.word	0x20000084
 8000440:	40006400 	.word	0x40006400

08000444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <MX_USART1_UART_Init+0x50>)
 800044c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 8000450:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_USART1_UART_Init+0x4c>)
 800047c:	f001 ffa0 	bl	80023c0 <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000486:	f000 f853 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000ac 	.word	0x200000ac
 8000494:	40013800 	.word	0x40013800

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <MX_GPIO_Init+0x90>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0310 	and.w	r3, r3, #16
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_GPIO_Init+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_GPIO_Init+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_GPIO_Init+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <MX_GPIO_Init+0x90>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_GPIO_Init+0x94>)
 80004fc:	f001 fb14 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2302      	movs	r3, #2
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_GPIO_Init+0x94>)
 800051a:	f001 f981 	bl	8001820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40011000 	.word	0x40011000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a14      	ldr	r2, [pc, #80]	; (8000598 <HAL_MspInit+0x5c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x5c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_MspInit+0x60>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_MspInit+0x60>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <HAL_CAN_MspInit+0xac>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d141      	bne.n	8000644 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ca:	61d3      	str	r3, [r2, #28]
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <HAL_CAN_MspInit+0xb0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <HAL_CAN_MspInit+0xb4>)
 8000606:	f001 f90b 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <HAL_CAN_MspInit+0xb4>)
 8000620:	f001 f8fe 	bl	8001820 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2014      	movs	r0, #20
 800062a:	f001 f8c2 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 f8db 	bl	80017ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2015      	movs	r0, #21
 800063a:	f001 f8ba 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800063e:	2015      	movs	r0, #21
 8000640:	f001 f8d3 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40006400 	.word	0x40006400
 8000650:	40021000 	.word	0x40021000
 8000654:	40010800 	.word	0x40010800

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x8c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d131      	bne.n	80006dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_UART_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <HAL_UART_MspInit+0x90>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_UART_MspInit+0x90>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_MspInit+0x90>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x90>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_UART_MspInit+0x90>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <HAL_UART_MspInit+0x94>)
 80006be:	f001 f8af 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_UART_MspInit+0x94>)
 80006d8:	f001 f8a2 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40013800 	.word	0x40013800
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010800 	.word	0x40010800

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f90d 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000746:	f000 fd39 	bl	80011bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084

08000754 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <CAN1_RX1_IRQHandler+0x10>)
 800075a:	f000 fd2f 	bl	80011bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084

08000768 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e00a      	b.n	8000790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800077a:	f3af 8000 	nop.w
 800077e:	4601      	mov	r1, r0
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	60ba      	str	r2, [r7, #8]
 8000786:	b2ca      	uxtb	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf0      	blt.n	800077a <_read+0x12>
	}

return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return -1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c8:	605a      	str	r2, [r3, #4]
	return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <_isatty>:

int _isatty(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	return 1;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
	...

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f002 f8ea 	bl	8002a0c <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005000 	.word	0x20005000
 8000864:	00000400 	.word	0x00000400
 8000868:	20000144 	.word	0x20000144
 800086c:	20000298 	.word	0x20000298

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800087c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800087e:	e003      	b.n	8000888 <LoopCopyDataInit>

08000880 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000882:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000884:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000886:	3104      	adds	r1, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800088c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800088e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000890:	d3f6      	bcc.n	8000880 <CopyDataInit>
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000894:	e002      	b.n	800089c <LoopFillZerobss>

08000896 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000898:	f842 3b04 	str.w	r3, [r2], #4

0800089c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a0:	d3f9      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a2:	f7ff ffe5 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 f8b7 	bl	8002a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fca7 	bl	80001fc <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r3, =_sidata
 80008b0:	08003708 	.word	0x08003708
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008b8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80008bc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80008c0:	20000298 	.word	0x20000298

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 ff5f 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fe2a 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 ff77 	bl	8001806 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000930:	f000 ff3f 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	20000148 	.word	0x20000148

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	; (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000148 	.word	0x20000148

0800098c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e0ed      	b.n	8000b7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fdf8 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0202 	bic.w	r2, r2, #2
 80009be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c0:	f7ff ffda 	bl	8000978 <HAL_GetTick>
 80009c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009c6:	e012      	b.n	80009ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c8:	f7ff ffd6 	bl	8000978 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	d90b      	bls.n	80009ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2205      	movs	r2, #5
 80009e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e0c5      	b.n	8000b7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1e5      	bne.n	80009c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0201 	orr.w	r2, r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a0c:	f7ff ffb4 	bl	8000978 <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a12:	e012      	b.n	8000a3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a14:	f7ff ffb0 	bl	8000978 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d90b      	bls.n	8000a3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2205      	movs	r2, #5
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e09f      	b.n	8000b7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0e5      	beq.n	8000a14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7e1b      	ldrb	r3, [r3, #24]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d108      	bne.n	8000a62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7e5b      	ldrb	r3, [r3, #25]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d108      	bne.n	8000a8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e007      	b.n	8000a9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7e9b      	ldrb	r3, [r3, #26]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d108      	bne.n	8000ab6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0220 	orr.w	r2, r2, #32
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0220 	bic.w	r2, r2, #32
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7edb      	ldrb	r3, [r3, #27]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d108      	bne.n	8000ae0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0210 	bic.w	r2, r2, #16
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0210 	orr.w	r2, r2, #16
 8000aee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7f1b      	ldrb	r3, [r3, #28]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0208 	orr.w	r2, r2, #8
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0208 	bic.w	r2, r2, #8
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7f5b      	ldrb	r3, [r3, #29]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0204 	orr.w	r2, r2, #4
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0204 	bic.w	r2, r2, #4
 8000b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	ea42 0103 	orr.w	r1, r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	1e5a      	subs	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b087      	sub	sp, #28
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b98:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9a:	7cfb      	ldrb	r3, [r7, #19]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d003      	beq.n	8000ba8 <HAL_CAN_ConfigFilter+0x26>
 8000ba0:	7cfb      	ldrb	r3, [r7, #19]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	f040 80aa 	bne.w	8000cfc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f003 031f 	and.w	r3, r3, #31
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d123      	bne.n	8000c2a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	401a      	ands	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3248      	adds	r2, #72	; 0x48
 8000c0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c20:	6979      	ldr	r1, [r7, #20]
 8000c22:	3348      	adds	r3, #72	; 0x48
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d122      	bne.n	8000c78 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3248      	adds	r2, #72	; 0x48
 8000c58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c6e:	6979      	ldr	r1, [r7, #20]
 8000c70:	3348      	adds	r3, #72	; 0x48
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c92:	e007      	b.n	8000ca4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d109      	bne.n	8000cc0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000cbe:	e007      	b.n	8000cd0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d107      	bne.n	8000ce8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cee:	f023 0201 	bic.w	r2, r3, #1
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e006      	b.n	8000d0a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
  }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d12e      	bne.n	8000d86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d40:	f7ff fe1a 	bl	8000978 <HAL_GetTick>
 8000d44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d46:	e012      	b.n	8000d6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d48:	f7ff fe16 	bl	8000978 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d90b      	bls.n	8000d6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2205      	movs	r2, #5
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e012      	b.n	8000d94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1e5      	bne.n	8000d48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e006      	b.n	8000d94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
  }
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dba:	7ffb      	ldrb	r3, [r7, #31]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d003      	beq.n	8000dc8 <HAL_CAN_AddTxMessage+0x2c>
 8000dc0:	7ffb      	ldrb	r3, [r7, #31]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	f040 80b8 	bne.w	8000f38 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10a      	bne.n	8000de8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80a0 	beq.w	8000f28 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	0e1b      	lsrs	r3, r3, #24
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d907      	bls.n	8000e08 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e09e      	b.n	8000f46 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10d      	bne.n	8000e36 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	6809      	ldr	r1, [r1, #0]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	440b      	add	r3, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e00f      	b.n	8000e56 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3318      	adds	r3, #24
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3318      	adds	r3, #24
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	440b      	add	r3, r1
 8000e66:	3304      	adds	r3, #4
 8000e68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	7d1b      	ldrb	r3, [r3, #20]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d111      	bne.n	8000e96 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	6811      	ldr	r1, [r2, #0]
 8000e86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3318      	adds	r3, #24
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	440b      	add	r3, r1
 8000e92:	3304      	adds	r3, #4
 8000e94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3307      	adds	r3, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	061a      	lsls	r2, r3, #24
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3306      	adds	r3, #6
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3305      	adds	r3, #5
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	3204      	adds	r2, #4
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	4610      	mov	r0, r2
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	ea43 0200 	orr.w	r2, r3, r0
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ecc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061a      	lsls	r2, r3, #24
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4610      	mov	r0, r2
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	6811      	ldr	r1, [r2, #0]
 8000ef4:	ea43 0200 	orr.w	r2, r3, r0
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	440b      	add	r3, r1
 8000efe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3318      	adds	r3, #24
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	6811      	ldr	r1, [r2, #0]
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	440b      	add	r3, r1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e00e      	b.n	8000f46 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e006      	b.n	8000f46 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
  }
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d003      	beq.n	8000f74 <HAL_CAN_GetRxMessage+0x24>
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	f040 80f3 	bne.w	800115a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10e      	bne.n	8000f98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d116      	bne.n	8000fb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0e7      	b.n	8001168 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0d8      	b.n	8001168 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	331b      	adds	r3, #27
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0204 	and.w	r2, r3, #4
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10c      	bne.n	8000fee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	331b      	adds	r3, #27
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0d5b      	lsrs	r3, r3, #21
 8000fe4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e00b      	b.n	8001006 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	331b      	adds	r3, #27
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	331b      	adds	r3, #27
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0202 	and.w	r2, r3, #2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	3304      	adds	r3, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 020f 	and.w	r2, r3, #15
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	331b      	adds	r3, #27
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b2da      	uxtb	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	331b      	adds	r3, #27
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	4413      	add	r3, r2
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	b29a      	uxth	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0a1a      	lsrs	r2, r3, #8
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0c1a      	lsrs	r2, r3, #16
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3302      	adds	r3, #2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0e1a      	lsrs	r2, r3, #24
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3303      	adds	r3, #3
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3304      	adds	r3, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4413      	add	r3, r2
 80010ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0a1a      	lsrs	r2, r3, #8
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3305      	adds	r3, #5
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0c1a      	lsrs	r2, r3, #16
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	3306      	adds	r3, #6
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0e1a      	lsrs	r2, r3, #24
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3307      	adds	r3, #7
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0220 	orr.w	r2, r2, #32
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	e007      	b.n	8001156 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0220 	orr.w	r2, r2, #32
 8001154:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e006      	b.n	8001168 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
  }
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <HAL_CAN_ActivateNotification+0x1e>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d109      	bne.n	80011a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6959      	ldr	r1, [r3, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e006      	b.n	80011b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d07c      	beq.n	80012fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d023      	beq.n	8001254 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f983 	bl	800152a <HAL_CAN_TxMailbox0CompleteCallback>
 8001224:	e016      	b.n	8001254 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	e00c      	b.n	8001254 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	e002      	b.n	8001254 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f986 	bl	8001560 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d024      	beq.n	80012a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f962 	bl	800153c <HAL_CAN_TxMailbox1CompleteCallback>
 8001278:	e016      	b.n	80012a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	e00c      	b.n	80012a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	e002      	b.n	80012a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f965 	bl	8001572 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d024      	beq.n	80012fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f941 	bl	800154e <HAL_CAN_TxMailbox2CompleteCallback>
 80012cc:	e016      	b.n	80012fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	e00c      	b.n	80012fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	e002      	b.n	80012fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f944 	bl	8001584 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2208      	movs	r2, #8
 800133a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f92a 	bl	8001596 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d009      	beq.n	8001360 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7fe ff1c 	bl	8000198 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00c      	beq.n	8001384 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2210      	movs	r2, #16
 8001382:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f90a 	bl	80015ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8f2 	bl	80015a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2210      	movs	r2, #16
 80013de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f8f3 	bl	80015cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2208      	movs	r2, #8
 8001400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8eb 	bl	80015de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d07b      	beq.n	800150a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d072      	beq.n	8001502 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001476:	2b00      	cmp	r3, #0
 8001478:	d043      	beq.n	8001502 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001480:	2b00      	cmp	r3, #0
 8001482:	d03e      	beq.n	8001502 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800148a:	2b60      	cmp	r3, #96	; 0x60
 800148c:	d02b      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x32a>
 800148e:	2b60      	cmp	r3, #96	; 0x60
 8001490:	d82e      	bhi.n	80014f0 <HAL_CAN_IRQHandler+0x334>
 8001492:	2b50      	cmp	r3, #80	; 0x50
 8001494:	d022      	beq.n	80014dc <HAL_CAN_IRQHandler+0x320>
 8001496:	2b50      	cmp	r3, #80	; 0x50
 8001498:	d82a      	bhi.n	80014f0 <HAL_CAN_IRQHandler+0x334>
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	d019      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x316>
 800149e:	2b40      	cmp	r3, #64	; 0x40
 80014a0:	d826      	bhi.n	80014f0 <HAL_CAN_IRQHandler+0x334>
 80014a2:	2b30      	cmp	r3, #48	; 0x30
 80014a4:	d010      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x30c>
 80014a6:	2b30      	cmp	r3, #48	; 0x30
 80014a8:	d822      	bhi.n	80014f0 <HAL_CAN_IRQHandler+0x334>
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d002      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x2f8>
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d005      	beq.n	80014be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014b2:	e01d      	b.n	80014f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014bc:	e019      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c6:	e014      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d0:	e00f      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014da:	e00a      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014e4:	e005      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ee:	e000      	b.n	80014f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80014f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001500:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f867 	bl	80015f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
	...

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <__NVIC_EnableIRQ+0x34>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177c:	f7ff ff90 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff2d 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff42 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff35 	bl	8001668 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	; 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	e169      	b.n	8001b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001834:	2201      	movs	r2, #1
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8158 	bne.w	8001b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a9a      	ldr	r2, [pc, #616]	; (8001ac0 <HAL_GPIO_Init+0x2a0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05e      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800185c:	4a98      	ldr	r2, [pc, #608]	; (8001ac0 <HAL_GPIO_Init+0x2a0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d875      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001862:	4a98      	ldr	r2, [pc, #608]	; (8001ac4 <HAL_GPIO_Init+0x2a4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d058      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001868:	4a96      	ldr	r2, [pc, #600]	; (8001ac4 <HAL_GPIO_Init+0x2a4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d86f      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800186e:	4a96      	ldr	r2, [pc, #600]	; (8001ac8 <HAL_GPIO_Init+0x2a8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d052      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001874:	4a94      	ldr	r2, [pc, #592]	; (8001ac8 <HAL_GPIO_Init+0x2a8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d869      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800187a:	4a94      	ldr	r2, [pc, #592]	; (8001acc <HAL_GPIO_Init+0x2ac>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04c      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001880:	4a92      	ldr	r2, [pc, #584]	; (8001acc <HAL_GPIO_Init+0x2ac>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d863      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001886:	4a92      	ldr	r2, [pc, #584]	; (8001ad0 <HAL_GPIO_Init+0x2b0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d046      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800188c:	4a90      	ldr	r2, [pc, #576]	; (8001ad0 <HAL_GPIO_Init+0x2b0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d85d      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d82a      	bhi.n	80018ec <HAL_GPIO_Init+0xcc>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d859      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <HAL_GPIO_Init+0x80>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	080018f5 	.word	0x080018f5
 80018a8:	08001907 	.word	0x08001907
 80018ac:	08001949 	.word	0x08001949
 80018b0:	0800194f 	.word	0x0800194f
 80018b4:	0800194f 	.word	0x0800194f
 80018b8:	0800194f 	.word	0x0800194f
 80018bc:	0800194f 	.word	0x0800194f
 80018c0:	0800194f 	.word	0x0800194f
 80018c4:	0800194f 	.word	0x0800194f
 80018c8:	0800194f 	.word	0x0800194f
 80018cc:	0800194f 	.word	0x0800194f
 80018d0:	0800194f 	.word	0x0800194f
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	0800194f 	.word	0x0800194f
 80018dc:	0800194f 	.word	0x0800194f
 80018e0:	0800194f 	.word	0x0800194f
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001911 	.word	0x08001911
 80018ec:	4a79      	ldr	r2, [pc, #484]	; (8001ad4 <HAL_GPIO_Init+0x2b4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f2:	e02c      	b.n	800194e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e029      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	3304      	adds	r3, #4
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e024      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	3308      	adds	r3, #8
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e01f      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	330c      	adds	r3, #12
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e01a      	b.n	8001950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001922:	2304      	movs	r3, #4
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e013      	b.n	8001950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	611a      	str	r2, [r3, #16]
          break;
 800193a:	e009      	b.n	8001950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	615a      	str	r2, [r3, #20]
          break;
 8001946:	e003      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x130>
          break;
 800194e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d801      	bhi.n	800195a <HAL_GPIO_Init+0x13a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e001      	b.n	800195e <HAL_GPIO_Init+0x13e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d802      	bhi.n	800196c <HAL_GPIO_Init+0x14c>
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x152>
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3b08      	subs	r3, #8
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	210f      	movs	r1, #15
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b1 	beq.w	8001b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a0:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b8:	4a48      	ldr	r2, [pc, #288]	; (8001adc <HAL_GPIO_Init+0x2bc>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a40      	ldr	r2, [pc, #256]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1ec>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3f      	ldr	r2, [pc, #252]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1e8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3e      	ldr	r2, [pc, #248]	; (8001ae8 <HAL_GPIO_Init+0x2c8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <HAL_GPIO_Init+0x2cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e0>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1e:	492f      	ldr	r1, [pc, #188]	; (8001adc <HAL_GPIO_Init+0x2bc>)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	492c      	ldr	r1, [pc, #176]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4928      	ldr	r1, [pc, #160]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4922      	ldr	r1, [pc, #136]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	491e      	ldr	r1, [pc, #120]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4918      	ldr	r1, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4914      	ldr	r1, [pc, #80]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d021      	beq.n	8001af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e021      	b.n	8001b02 <HAL_GPIO_Init+0x2e2>
 8001abe:	bf00      	nop
 8001ac0:	10320000 	.word	0x10320000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10220000 	.word	0x10220000
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10110000 	.word	0x10110000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40011400 	.word	0x40011400
 8001af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4909      	ldr	r1, [pc, #36]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f ae8e 	bne.w	8001834 <HAL_GPIO_Init+0x14>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	372c      	adds	r7, #44	; 0x2c
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43d9      	mvns	r1, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	611a      	str	r2, [r3, #16]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e272      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8087 	beq.w	8001cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bac:	4b92      	ldr	r3, [pc, #584]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb8:	4b8f      	ldr	r3, [pc, #572]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d112      	bne.n	8001bea <HAL_RCC_OscConfig+0x5e>
 8001bc4:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d10b      	bne.n	8001bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d06c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x12c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d168      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e24c      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x76>
 8001bf4:	4b80      	ldr	r3, [pc, #512]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a7f      	ldr	r2, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e02e      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x98>
 8001c0a:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7a      	ldr	r2, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0xbc>
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a67      	ldr	r2, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fe86 	bl	8000978 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7fe fe82 	bl	8000978 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e200      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe4>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe fe72 	bl	8000978 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7fe fe6e 	bl	8000978 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1ec      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x10c>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x18c>
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x176>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1c0      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4939      	ldr	r1, [pc, #228]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fe27 	bl	8000978 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7fe fe23 	bl	8000978 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1a1      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4927      	ldr	r1, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7fe fe06 	bl	8000978 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7fe fe02 	bl	8000978 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e180      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03a      	beq.n	8001e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d019      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_RCC_OscConfig+0x274>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7fe fde6 	bl	8000978 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7fe fde2 	bl	8000978 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e160      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 fad8 	bl	8002384 <RCC_Delay>
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fdcc 	bl	8000978 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7fe fdc8 	bl	8000978 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d908      	bls.n	8001e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e146      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	42420000 	.word	0x42420000
 8001e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e9      	bne.n	8001de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a6 	beq.w	8001f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10d      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a87      	ldr	r2, [pc, #540]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_RCC_OscConfig+0x4c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d118      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_RCC_OscConfig+0x4c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	; (8002054 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fd89 	bl	8000978 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7fe fd85 	bl	8000978 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	; 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e103      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x4c8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x312>
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e02d      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x334>
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a66      	ldr	r2, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	e01c      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x356>
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a60      	ldr	r2, [pc, #384]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a5d      	ldr	r2, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e00b      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a5a      	ldr	r2, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a57      	ldr	r2, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d015      	beq.n	8001f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fd39 	bl	8000978 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fd35 	bl	8000978 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0b1      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ee      	beq.n	8001f0a <HAL_RCC_OscConfig+0x37e>
 8001f2c:	e014      	b.n	8001f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fd23 	bl	8000978 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fd1f 	bl	8000978 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e09b      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8087 	beq.w	8002082 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d061      	beq.n	8002044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d146      	bne.n	8002016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_RCC_OscConfig+0x4cc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fcf3 	bl	8000978 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe fcef 	bl	8000978 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e06d      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4921      	ldr	r1, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a19      	ldr	r1, [r3, #32]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	491b      	ldr	r1, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fcc3 	bl	8000978 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe fcbf 	bl	8000978 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e03d      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x46a>
 8002014:	e035      	b.n	8002082 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fcac 	bl	8000978 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe fca8 	bl	8000978 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e026      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x498>
 8002042:	e01e      	b.n	8002082 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e019      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x500>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0d0      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4965      	ldr	r1, [pc, #404]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0b8      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a58      	ldr	r2, [pc, #352]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a52      	ldr	r2, [pc, #328]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800210e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	494d      	ldr	r1, [pc, #308]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d040      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d115      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e07f      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e073      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06b      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4936      	ldr	r1, [pc, #216]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7fe fbfa 	bl	8000978 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fbf6 	bl	8000978 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e053      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d210      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4922      	ldr	r1, [pc, #136]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e032      	b.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4916      	ldr	r1, [pc, #88]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800221e:	f000 f821 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002222:	4602      	mov	r2, r0
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	490a      	ldr	r1, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	5ccb      	ldrb	r3, [r1, r3]
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1cc>)
 8002238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1d0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fb58 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
 8002258:	080036b4 	.word	0x080036b4
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004

08002264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b490      	push	{r4, r7}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_GetSysClockFreq+0xac>)
 800226c:	1d3c      	adds	r4, r7, #4
 800226e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002274:	f240 2301 	movw	r3, #513	; 0x201
 8002278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x40>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x46>
 80022a2:	e02b      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e02b      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3328      	adds	r3, #40	; 0x28
 80022b4:	443b      	add	r3, r7
 80022b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	3328      	adds	r3, #40	; 0x28
 80022d2:	443b      	add	r3, r7
 80022d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	623b      	str	r3, [r7, #32]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fe:	623b      	str	r3, [r7, #32]
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	6a3b      	ldr	r3, [r7, #32]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc90      	pop	{r4, r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	080036a4 	.word	0x080036a4
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	003d0900 	.word	0x003d0900

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_GetHCLKFreq+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000000 	.word	0x20000000

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002338:	f7ff fff2 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	080036c4 	.word	0x080036c4

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002360:	f7ff ffde 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0adb      	lsrs	r3, r3, #11
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	080036c4 	.word	0x080036c4

08002384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <RCC_Delay+0x34>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <RCC_Delay+0x38>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0a5b      	lsrs	r3, r3, #9
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a0:	bf00      	nop
  }
  while (Delay --);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <RCC_Delay+0x1c>
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000000 	.word	0x20000000
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e03f      	b.n	8002452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f936 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f905 	bl	8002614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08a      	sub	sp, #40	; 0x28
 800245e:	af02      	add	r7, sp, #8
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d17c      	bne.n	8002574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_Transmit+0x2c>
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e075      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit+0x3e>
 8002494:	2302      	movs	r3, #2
 8002496:	e06e      	b.n	8002576 <HAL_UART_Transmit+0x11c>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	; 0x21
 80024aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fa63 	bl	8000978 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x82>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024ec:	e02a      	b.n	8002544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f840 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e036      	b.n	8002576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1cf      	bne.n	80024ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f810 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e006      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258e:	e02c      	b.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002596:	d028      	beq.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x30>
 800259e:	f7fe f9eb 	bl	8000978 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d21d      	bcs.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e00f      	b.n	800260a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	429a      	cmp	r2, r3
 8002606:	d0c3      	beq.n	8002590 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800264e:	f023 030c 	bic.w	r3, r3, #12
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <UART_SetConfig+0x114>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff fe6e 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	e002      	b.n	800268a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002684:	f7ff fe56 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002688:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <UART_SetConfig+0x118>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	0119      	lsls	r1, r3, #4
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <UART_SetConfig+0x118>)
 80026c2:	fba3 0302 	umull	r0, r3, r3, r2
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2064      	movs	r0, #100	; 0x64
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3332      	adds	r3, #50	; 0x32
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <UART_SetConfig+0x118>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e0:	4419      	add	r1, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <UART_SetConfig+0x118>)
 80026fa:	fba3 0302 	umull	r0, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <UART_SetConfig+0x118>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	440a      	add	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013800 	.word	0x40013800
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <std>:
 8002730:	2300      	movs	r3, #0
 8002732:	b510      	push	{r4, lr}
 8002734:	4604      	mov	r4, r0
 8002736:	e9c0 3300 	strd	r3, r3, [r0]
 800273a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800273e:	6083      	str	r3, [r0, #8]
 8002740:	8181      	strh	r1, [r0, #12]
 8002742:	6643      	str	r3, [r0, #100]	; 0x64
 8002744:	81c2      	strh	r2, [r0, #14]
 8002746:	6183      	str	r3, [r0, #24]
 8002748:	4619      	mov	r1, r3
 800274a:	2208      	movs	r2, #8
 800274c:	305c      	adds	r0, #92	; 0x5c
 800274e:	f000 f90e 	bl	800296e <memset>
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <std+0x58>)
 8002754:	6224      	str	r4, [r4, #32]
 8002756:	6263      	str	r3, [r4, #36]	; 0x24
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <std+0x5c>)
 800275a:	62a3      	str	r3, [r4, #40]	; 0x28
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <std+0x60>)
 800275e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <std+0x64>)
 8002762:	6323      	str	r3, [r4, #48]	; 0x30
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <std+0x68>)
 8002766:	429c      	cmp	r4, r3
 8002768:	d006      	beq.n	8002778 <std+0x48>
 800276a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800276e:	4294      	cmp	r4, r2
 8002770:	d002      	beq.n	8002778 <std+0x48>
 8002772:	33d0      	adds	r3, #208	; 0xd0
 8002774:	429c      	cmp	r4, r3
 8002776:	d105      	bne.n	8002784 <std+0x54>
 8002778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800277c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002780:	f000 b96e 	b.w	8002a60 <__retarget_lock_init_recursive>
 8002784:	bd10      	pop	{r4, pc}
 8002786:	bf00      	nop
 8002788:	080028e9 	.word	0x080028e9
 800278c:	0800290b 	.word	0x0800290b
 8002790:	08002943 	.word	0x08002943
 8002794:	08002967 	.word	0x08002967
 8002798:	2000014c 	.word	0x2000014c

0800279c <stdio_exit_handler>:
 800279c:	4a02      	ldr	r2, [pc, #8]	; (80027a8 <stdio_exit_handler+0xc>)
 800279e:	4903      	ldr	r1, [pc, #12]	; (80027ac <stdio_exit_handler+0x10>)
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <stdio_exit_handler+0x14>)
 80027a2:	f000 b869 	b.w	8002878 <_fwalk_sglue>
 80027a6:	bf00      	nop
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	08003301 	.word	0x08003301
 80027b0:	20000018 	.word	0x20000018

080027b4 <cleanup_stdio>:
 80027b4:	6841      	ldr	r1, [r0, #4]
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <cleanup_stdio+0x34>)
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4299      	cmp	r1, r3
 80027bc:	4604      	mov	r4, r0
 80027be:	d001      	beq.n	80027c4 <cleanup_stdio+0x10>
 80027c0:	f000 fd9e 	bl	8003300 <_fflush_r>
 80027c4:	68a1      	ldr	r1, [r4, #8]
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <cleanup_stdio+0x38>)
 80027c8:	4299      	cmp	r1, r3
 80027ca:	d002      	beq.n	80027d2 <cleanup_stdio+0x1e>
 80027cc:	4620      	mov	r0, r4
 80027ce:	f000 fd97 	bl	8003300 <_fflush_r>
 80027d2:	68e1      	ldr	r1, [r4, #12]
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <cleanup_stdio+0x3c>)
 80027d6:	4299      	cmp	r1, r3
 80027d8:	d004      	beq.n	80027e4 <cleanup_stdio+0x30>
 80027da:	4620      	mov	r0, r4
 80027dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e0:	f000 bd8e 	b.w	8003300 <_fflush_r>
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	bf00      	nop
 80027e8:	2000014c 	.word	0x2000014c
 80027ec:	200001b4 	.word	0x200001b4
 80027f0:	2000021c 	.word	0x2000021c

080027f4 <global_stdio_init.part.0>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <global_stdio_init.part.0+0x30>)
 80027f8:	4c0b      	ldr	r4, [pc, #44]	; (8002828 <global_stdio_init.part.0+0x34>)
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <global_stdio_init.part.0+0x38>)
 80027fc:	4620      	mov	r0, r4
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	2104      	movs	r1, #4
 8002802:	2200      	movs	r2, #0
 8002804:	f7ff ff94 	bl	8002730 <std>
 8002808:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800280c:	2201      	movs	r2, #1
 800280e:	2109      	movs	r1, #9
 8002810:	f7ff ff8e 	bl	8002730 <std>
 8002814:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002818:	2202      	movs	r2, #2
 800281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281e:	2112      	movs	r1, #18
 8002820:	f7ff bf86 	b.w	8002730 <std>
 8002824:	20000284 	.word	0x20000284
 8002828:	2000014c 	.word	0x2000014c
 800282c:	0800279d 	.word	0x0800279d

08002830 <__sfp_lock_acquire>:
 8002830:	4801      	ldr	r0, [pc, #4]	; (8002838 <__sfp_lock_acquire+0x8>)
 8002832:	f000 b916 	b.w	8002a62 <__retarget_lock_acquire_recursive>
 8002836:	bf00      	nop
 8002838:	2000028d 	.word	0x2000028d

0800283c <__sfp_lock_release>:
 800283c:	4801      	ldr	r0, [pc, #4]	; (8002844 <__sfp_lock_release+0x8>)
 800283e:	f000 b911 	b.w	8002a64 <__retarget_lock_release_recursive>
 8002842:	bf00      	nop
 8002844:	2000028d 	.word	0x2000028d

08002848 <__sinit>:
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
 800284c:	f7ff fff0 	bl	8002830 <__sfp_lock_acquire>
 8002850:	6a23      	ldr	r3, [r4, #32]
 8002852:	b11b      	cbz	r3, 800285c <__sinit+0x14>
 8002854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002858:	f7ff bff0 	b.w	800283c <__sfp_lock_release>
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__sinit+0x28>)
 800285e:	6223      	str	r3, [r4, #32]
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__sinit+0x2c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f5      	bne.n	8002854 <__sinit+0xc>
 8002868:	f7ff ffc4 	bl	80027f4 <global_stdio_init.part.0>
 800286c:	e7f2      	b.n	8002854 <__sinit+0xc>
 800286e:	bf00      	nop
 8002870:	080027b5 	.word	0x080027b5
 8002874:	20000284 	.word	0x20000284

08002878 <_fwalk_sglue>:
 8002878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800287c:	4607      	mov	r7, r0
 800287e:	4688      	mov	r8, r1
 8002880:	4614      	mov	r4, r2
 8002882:	2600      	movs	r6, #0
 8002884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002888:	f1b9 0901 	subs.w	r9, r9, #1
 800288c:	d505      	bpl.n	800289a <_fwalk_sglue+0x22>
 800288e:	6824      	ldr	r4, [r4, #0]
 8002890:	2c00      	cmp	r4, #0
 8002892:	d1f7      	bne.n	8002884 <_fwalk_sglue+0xc>
 8002894:	4630      	mov	r0, r6
 8002896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800289a:	89ab      	ldrh	r3, [r5, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d907      	bls.n	80028b0 <_fwalk_sglue+0x38>
 80028a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028a4:	3301      	adds	r3, #1
 80028a6:	d003      	beq.n	80028b0 <_fwalk_sglue+0x38>
 80028a8:	4629      	mov	r1, r5
 80028aa:	4638      	mov	r0, r7
 80028ac:	47c0      	blx	r8
 80028ae:	4306      	orrs	r6, r0
 80028b0:	3568      	adds	r5, #104	; 0x68
 80028b2:	e7e9      	b.n	8002888 <_fwalk_sglue+0x10>

080028b4 <iprintf>:
 80028b4:	b40f      	push	{r0, r1, r2, r3}
 80028b6:	b507      	push	{r0, r1, r2, lr}
 80028b8:	4906      	ldr	r1, [pc, #24]	; (80028d4 <iprintf+0x20>)
 80028ba:	ab04      	add	r3, sp, #16
 80028bc:	6808      	ldr	r0, [r1, #0]
 80028be:	f853 2b04 	ldr.w	r2, [r3], #4
 80028c2:	6881      	ldr	r1, [r0, #8]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f000 f9eb 	bl	8002ca0 <_vfiprintf_r>
 80028ca:	b003      	add	sp, #12
 80028cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d0:	b004      	add	sp, #16
 80028d2:	4770      	bx	lr
 80028d4:	20000064 	.word	0x20000064

080028d8 <putchar>:
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <putchar+0xc>)
 80028da:	4601      	mov	r1, r0
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	6882      	ldr	r2, [r0, #8]
 80028e0:	f000 bd36 	b.w	8003350 <_putc_r>
 80028e4:	20000064 	.word	0x20000064

080028e8 <__sread>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	460c      	mov	r4, r1
 80028ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f0:	f000 f868 	bl	80029c4 <_read_r>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	bfab      	itete	ge
 80028f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028fa:	89a3      	ldrhlt	r3, [r4, #12]
 80028fc:	181b      	addge	r3, r3, r0
 80028fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002902:	bfac      	ite	ge
 8002904:	6563      	strge	r3, [r4, #84]	; 0x54
 8002906:	81a3      	strhlt	r3, [r4, #12]
 8002908:	bd10      	pop	{r4, pc}

0800290a <__swrite>:
 800290a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800290e:	461f      	mov	r7, r3
 8002910:	898b      	ldrh	r3, [r1, #12]
 8002912:	4605      	mov	r5, r0
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	460c      	mov	r4, r1
 8002918:	4616      	mov	r6, r2
 800291a:	d505      	bpl.n	8002928 <__swrite+0x1e>
 800291c:	2302      	movs	r3, #2
 800291e:	2200      	movs	r2, #0
 8002920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002924:	f000 f83c 	bl	80029a0 <_lseek_r>
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	4632      	mov	r2, r6
 800292c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	4628      	mov	r0, r5
 8002934:	463b      	mov	r3, r7
 8002936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800293a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800293e:	f000 b853 	b.w	80029e8 <_write_r>

08002942 <__sseek>:
 8002942:	b510      	push	{r4, lr}
 8002944:	460c      	mov	r4, r1
 8002946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800294a:	f000 f829 	bl	80029a0 <_lseek_r>
 800294e:	1c43      	adds	r3, r0, #1
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	bf15      	itete	ne
 8002954:	6560      	strne	r0, [r4, #84]	; 0x54
 8002956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800295a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800295e:	81a3      	strheq	r3, [r4, #12]
 8002960:	bf18      	it	ne
 8002962:	81a3      	strhne	r3, [r4, #12]
 8002964:	bd10      	pop	{r4, pc}

08002966 <__sclose>:
 8002966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800296a:	f000 b809 	b.w	8002980 <_close_r>

0800296e <memset>:
 800296e:	4603      	mov	r3, r0
 8002970:	4402      	add	r2, r0
 8002972:	4293      	cmp	r3, r2
 8002974:	d100      	bne.n	8002978 <memset+0xa>
 8002976:	4770      	bx	lr
 8002978:	f803 1b01 	strb.w	r1, [r3], #1
 800297c:	e7f9      	b.n	8002972 <memset+0x4>
	...

08002980 <_close_r>:
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	2300      	movs	r3, #0
 8002984:	4d05      	ldr	r5, [pc, #20]	; (800299c <_close_r+0x1c>)
 8002986:	4604      	mov	r4, r0
 8002988:	4608      	mov	r0, r1
 800298a:	602b      	str	r3, [r5, #0]
 800298c:	f7fd ff09 	bl	80007a2 <_close>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d102      	bne.n	800299a <_close_r+0x1a>
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	b103      	cbz	r3, 800299a <_close_r+0x1a>
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	20000288 	.word	0x20000288

080029a0 <_lseek_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	2200      	movs	r2, #0
 80029aa:	4d05      	ldr	r5, [pc, #20]	; (80029c0 <_lseek_r+0x20>)
 80029ac:	602a      	str	r2, [r5, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7fd ff1b 	bl	80007ea <_lseek>
 80029b4:	1c43      	adds	r3, r0, #1
 80029b6:	d102      	bne.n	80029be <_lseek_r+0x1e>
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	b103      	cbz	r3, 80029be <_lseek_r+0x1e>
 80029bc:	6023      	str	r3, [r4, #0]
 80029be:	bd38      	pop	{r3, r4, r5, pc}
 80029c0:	20000288 	.word	0x20000288

080029c4 <_read_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	4d05      	ldr	r5, [pc, #20]	; (80029e4 <_read_r+0x20>)
 80029d0:	602a      	str	r2, [r5, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f7fd fec8 	bl	8000768 <_read>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d102      	bne.n	80029e2 <_read_r+0x1e>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	b103      	cbz	r3, 80029e2 <_read_r+0x1e>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	20000288 	.word	0x20000288

080029e8 <_write_r>:
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4604      	mov	r4, r0
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	2200      	movs	r2, #0
 80029f2:	4d05      	ldr	r5, [pc, #20]	; (8002a08 <_write_r+0x20>)
 80029f4:	602a      	str	r2, [r5, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f7fd fba8 	bl	800014c <_write>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d102      	bne.n	8002a06 <_write_r+0x1e>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	b103      	cbz	r3, 8002a06 <_write_r+0x1e>
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	20000288 	.word	0x20000288

08002a0c <__errno>:
 8002a0c:	4b01      	ldr	r3, [pc, #4]	; (8002a14 <__errno+0x8>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000064 	.word	0x20000064

08002a18 <__libc_init_array>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	2600      	movs	r6, #0
 8002a1c:	4d0c      	ldr	r5, [pc, #48]	; (8002a50 <__libc_init_array+0x38>)
 8002a1e:	4c0d      	ldr	r4, [pc, #52]	; (8002a54 <__libc_init_array+0x3c>)
 8002a20:	1b64      	subs	r4, r4, r5
 8002a22:	10a4      	asrs	r4, r4, #2
 8002a24:	42a6      	cmp	r6, r4
 8002a26:	d109      	bne.n	8002a3c <__libc_init_array+0x24>
 8002a28:	f000 fdfe 	bl	8003628 <_init>
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	4d0a      	ldr	r5, [pc, #40]	; (8002a58 <__libc_init_array+0x40>)
 8002a30:	4c0a      	ldr	r4, [pc, #40]	; (8002a5c <__libc_init_array+0x44>)
 8002a32:	1b64      	subs	r4, r4, r5
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	42a6      	cmp	r6, r4
 8002a38:	d105      	bne.n	8002a46 <__libc_init_array+0x2e>
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a40:	4798      	blx	r3
 8002a42:	3601      	adds	r6, #1
 8002a44:	e7ee      	b.n	8002a24 <__libc_init_array+0xc>
 8002a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4a:	4798      	blx	r3
 8002a4c:	3601      	adds	r6, #1
 8002a4e:	e7f2      	b.n	8002a36 <__libc_init_array+0x1e>
 8002a50:	08003700 	.word	0x08003700
 8002a54:	08003700 	.word	0x08003700
 8002a58:	08003700 	.word	0x08003700
 8002a5c:	08003704 	.word	0x08003704

08002a60 <__retarget_lock_init_recursive>:
 8002a60:	4770      	bx	lr

08002a62 <__retarget_lock_acquire_recursive>:
 8002a62:	4770      	bx	lr

08002a64 <__retarget_lock_release_recursive>:
 8002a64:	4770      	bx	lr
	...

08002a68 <_free_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	2900      	cmp	r1, #0
 8002a6e:	d040      	beq.n	8002af2 <_free_r+0x8a>
 8002a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a74:	1f0c      	subs	r4, r1, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bfb8      	it	lt
 8002a7a:	18e4      	addlt	r4, r4, r3
 8002a7c:	f000 f8dc 	bl	8002c38 <__malloc_lock>
 8002a80:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <_free_r+0x8c>)
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	b933      	cbnz	r3, 8002a94 <_free_r+0x2c>
 8002a86:	6063      	str	r3, [r4, #4]
 8002a88:	6014      	str	r4, [r2, #0]
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a90:	f000 b8d8 	b.w	8002c44 <__malloc_unlock>
 8002a94:	42a3      	cmp	r3, r4
 8002a96:	d908      	bls.n	8002aaa <_free_r+0x42>
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	1821      	adds	r1, r4, r0
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	bf01      	itttt	eq
 8002aa0:	6819      	ldreq	r1, [r3, #0]
 8002aa2:	685b      	ldreq	r3, [r3, #4]
 8002aa4:	1809      	addeq	r1, r1, r0
 8002aa6:	6021      	streq	r1, [r4, #0]
 8002aa8:	e7ed      	b.n	8002a86 <_free_r+0x1e>
 8002aaa:	461a      	mov	r2, r3
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b10b      	cbz	r3, 8002ab4 <_free_r+0x4c>
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	d9fa      	bls.n	8002aaa <_free_r+0x42>
 8002ab4:	6811      	ldr	r1, [r2, #0]
 8002ab6:	1850      	adds	r0, r2, r1
 8002ab8:	42a0      	cmp	r0, r4
 8002aba:	d10b      	bne.n	8002ad4 <_free_r+0x6c>
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	4401      	add	r1, r0
 8002ac0:	1850      	adds	r0, r2, r1
 8002ac2:	4283      	cmp	r3, r0
 8002ac4:	6011      	str	r1, [r2, #0]
 8002ac6:	d1e0      	bne.n	8002a8a <_free_r+0x22>
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4408      	add	r0, r1
 8002ace:	6010      	str	r0, [r2, #0]
 8002ad0:	6053      	str	r3, [r2, #4]
 8002ad2:	e7da      	b.n	8002a8a <_free_r+0x22>
 8002ad4:	d902      	bls.n	8002adc <_free_r+0x74>
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	602b      	str	r3, [r5, #0]
 8002ada:	e7d6      	b.n	8002a8a <_free_r+0x22>
 8002adc:	6820      	ldr	r0, [r4, #0]
 8002ade:	1821      	adds	r1, r4, r0
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	bf01      	itttt	eq
 8002ae4:	6819      	ldreq	r1, [r3, #0]
 8002ae6:	685b      	ldreq	r3, [r3, #4]
 8002ae8:	1809      	addeq	r1, r1, r0
 8002aea:	6021      	streq	r1, [r4, #0]
 8002aec:	6063      	str	r3, [r4, #4]
 8002aee:	6054      	str	r4, [r2, #4]
 8002af0:	e7cb      	b.n	8002a8a <_free_r+0x22>
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
 8002af4:	20000290 	.word	0x20000290

08002af8 <sbrk_aligned>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4e0e      	ldr	r6, [pc, #56]	; (8002b34 <sbrk_aligned+0x3c>)
 8002afc:	460c      	mov	r4, r1
 8002afe:	6831      	ldr	r1, [r6, #0]
 8002b00:	4605      	mov	r5, r0
 8002b02:	b911      	cbnz	r1, 8002b0a <sbrk_aligned+0x12>
 8002b04:	f000 fcee 	bl	80034e4 <_sbrk_r>
 8002b08:	6030      	str	r0, [r6, #0]
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 fce9 	bl	80034e4 <_sbrk_r>
 8002b12:	1c43      	adds	r3, r0, #1
 8002b14:	d00a      	beq.n	8002b2c <sbrk_aligned+0x34>
 8002b16:	1cc4      	adds	r4, r0, #3
 8002b18:	f024 0403 	bic.w	r4, r4, #3
 8002b1c:	42a0      	cmp	r0, r4
 8002b1e:	d007      	beq.n	8002b30 <sbrk_aligned+0x38>
 8002b20:	1a21      	subs	r1, r4, r0
 8002b22:	4628      	mov	r0, r5
 8002b24:	f000 fcde 	bl	80034e4 <_sbrk_r>
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d101      	bne.n	8002b30 <sbrk_aligned+0x38>
 8002b2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b30:	4620      	mov	r0, r4
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	20000294 	.word	0x20000294

08002b38 <_malloc_r>:
 8002b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	1ccd      	adds	r5, r1, #3
 8002b3e:	f025 0503 	bic.w	r5, r5, #3
 8002b42:	3508      	adds	r5, #8
 8002b44:	2d0c      	cmp	r5, #12
 8002b46:	bf38      	it	cc
 8002b48:	250c      	movcc	r5, #12
 8002b4a:	2d00      	cmp	r5, #0
 8002b4c:	4607      	mov	r7, r0
 8002b4e:	db01      	blt.n	8002b54 <_malloc_r+0x1c>
 8002b50:	42a9      	cmp	r1, r5
 8002b52:	d905      	bls.n	8002b60 <_malloc_r+0x28>
 8002b54:	230c      	movs	r3, #12
 8002b56:	2600      	movs	r6, #0
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c34 <_malloc_r+0xfc>
 8002b64:	f000 f868 	bl	8002c38 <__malloc_lock>
 8002b68:	f8d8 3000 	ldr.w	r3, [r8]
 8002b6c:	461c      	mov	r4, r3
 8002b6e:	bb5c      	cbnz	r4, 8002bc8 <_malloc_r+0x90>
 8002b70:	4629      	mov	r1, r5
 8002b72:	4638      	mov	r0, r7
 8002b74:	f7ff ffc0 	bl	8002af8 <sbrk_aligned>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	d155      	bne.n	8002c2a <_malloc_r+0xf2>
 8002b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8002b82:	4626      	mov	r6, r4
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	d145      	bne.n	8002c14 <_malloc_r+0xdc>
 8002b88:	2c00      	cmp	r4, #0
 8002b8a:	d048      	beq.n	8002c1e <_malloc_r+0xe6>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	4631      	mov	r1, r6
 8002b90:	4638      	mov	r0, r7
 8002b92:	eb04 0903 	add.w	r9, r4, r3
 8002b96:	f000 fca5 	bl	80034e4 <_sbrk_r>
 8002b9a:	4581      	cmp	r9, r0
 8002b9c:	d13f      	bne.n	8002c1e <_malloc_r+0xe6>
 8002b9e:	6821      	ldr	r1, [r4, #0]
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	1a6d      	subs	r5, r5, r1
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7ff ffa7 	bl	8002af8 <sbrk_aligned>
 8002baa:	3001      	adds	r0, #1
 8002bac:	d037      	beq.n	8002c1e <_malloc_r+0xe6>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	442b      	add	r3, r5
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d038      	beq.n	8002c2e <_malloc_r+0xf6>
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	42a2      	cmp	r2, r4
 8002bc0:	d12b      	bne.n	8002c1a <_malloc_r+0xe2>
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e00f      	b.n	8002be8 <_malloc_r+0xb0>
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	1b52      	subs	r2, r2, r5
 8002bcc:	d41f      	bmi.n	8002c0e <_malloc_r+0xd6>
 8002bce:	2a0b      	cmp	r2, #11
 8002bd0:	d917      	bls.n	8002c02 <_malloc_r+0xca>
 8002bd2:	1961      	adds	r1, r4, r5
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	6025      	str	r5, [r4, #0]
 8002bd8:	bf18      	it	ne
 8002bda:	6059      	strne	r1, [r3, #4]
 8002bdc:	6863      	ldr	r3, [r4, #4]
 8002bde:	bf08      	it	eq
 8002be0:	f8c8 1000 	streq.w	r1, [r8]
 8002be4:	5162      	str	r2, [r4, r5]
 8002be6:	604b      	str	r3, [r1, #4]
 8002be8:	4638      	mov	r0, r7
 8002bea:	f104 060b 	add.w	r6, r4, #11
 8002bee:	f000 f829 	bl	8002c44 <__malloc_unlock>
 8002bf2:	f026 0607 	bic.w	r6, r6, #7
 8002bf6:	1d23      	adds	r3, r4, #4
 8002bf8:	1af2      	subs	r2, r6, r3
 8002bfa:	d0ae      	beq.n	8002b5a <_malloc_r+0x22>
 8002bfc:	1b9b      	subs	r3, r3, r6
 8002bfe:	50a3      	str	r3, [r4, r2]
 8002c00:	e7ab      	b.n	8002b5a <_malloc_r+0x22>
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	6862      	ldr	r2, [r4, #4]
 8002c06:	d1dd      	bne.n	8002bc4 <_malloc_r+0x8c>
 8002c08:	f8c8 2000 	str.w	r2, [r8]
 8002c0c:	e7ec      	b.n	8002be8 <_malloc_r+0xb0>
 8002c0e:	4623      	mov	r3, r4
 8002c10:	6864      	ldr	r4, [r4, #4]
 8002c12:	e7ac      	b.n	8002b6e <_malloc_r+0x36>
 8002c14:	4634      	mov	r4, r6
 8002c16:	6876      	ldr	r6, [r6, #4]
 8002c18:	e7b4      	b.n	8002b84 <_malloc_r+0x4c>
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	e7cc      	b.n	8002bb8 <_malloc_r+0x80>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	4638      	mov	r0, r7
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	f000 f80e 	bl	8002c44 <__malloc_unlock>
 8002c28:	e797      	b.n	8002b5a <_malloc_r+0x22>
 8002c2a:	6025      	str	r5, [r4, #0]
 8002c2c:	e7dc      	b.n	8002be8 <_malloc_r+0xb0>
 8002c2e:	605b      	str	r3, [r3, #4]
 8002c30:	deff      	udf	#255	; 0xff
 8002c32:	bf00      	nop
 8002c34:	20000290 	.word	0x20000290

08002c38 <__malloc_lock>:
 8002c38:	4801      	ldr	r0, [pc, #4]	; (8002c40 <__malloc_lock+0x8>)
 8002c3a:	f7ff bf12 	b.w	8002a62 <__retarget_lock_acquire_recursive>
 8002c3e:	bf00      	nop
 8002c40:	2000028c 	.word	0x2000028c

08002c44 <__malloc_unlock>:
 8002c44:	4801      	ldr	r0, [pc, #4]	; (8002c4c <__malloc_unlock+0x8>)
 8002c46:	f7ff bf0d 	b.w	8002a64 <__retarget_lock_release_recursive>
 8002c4a:	bf00      	nop
 8002c4c:	2000028c 	.word	0x2000028c

08002c50 <__sfputc_r>:
 8002c50:	6893      	ldr	r3, [r2, #8]
 8002c52:	b410      	push	{r4}
 8002c54:	3b01      	subs	r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	6093      	str	r3, [r2, #8]
 8002c5a:	da07      	bge.n	8002c6c <__sfputc_r+0x1c>
 8002c5c:	6994      	ldr	r4, [r2, #24]
 8002c5e:	42a3      	cmp	r3, r4
 8002c60:	db01      	blt.n	8002c66 <__sfputc_r+0x16>
 8002c62:	290a      	cmp	r1, #10
 8002c64:	d102      	bne.n	8002c6c <__sfputc_r+0x1c>
 8002c66:	bc10      	pop	{r4}
 8002c68:	f000 bba6 	b.w	80033b8 <__swbuf_r>
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	1c58      	adds	r0, r3, #1
 8002c70:	6010      	str	r0, [r2, #0]
 8002c72:	7019      	strb	r1, [r3, #0]
 8002c74:	4608      	mov	r0, r1
 8002c76:	bc10      	pop	{r4}
 8002c78:	4770      	bx	lr

08002c7a <__sfputs_r>:
 8002c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	460f      	mov	r7, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	18d5      	adds	r5, r2, r3
 8002c84:	42ac      	cmp	r4, r5
 8002c86:	d101      	bne.n	8002c8c <__sfputs_r+0x12>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e007      	b.n	8002c9c <__sfputs_r+0x22>
 8002c8c:	463a      	mov	r2, r7
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c94:	f7ff ffdc 	bl	8002c50 <__sfputc_r>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d1f3      	bne.n	8002c84 <__sfputs_r+0xa>
 8002c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ca0 <_vfiprintf_r>:
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	460d      	mov	r5, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	4698      	mov	r8, r3
 8002caa:	4606      	mov	r6, r0
 8002cac:	b09d      	sub	sp, #116	; 0x74
 8002cae:	b118      	cbz	r0, 8002cb8 <_vfiprintf_r+0x18>
 8002cb0:	6a03      	ldr	r3, [r0, #32]
 8002cb2:	b90b      	cbnz	r3, 8002cb8 <_vfiprintf_r+0x18>
 8002cb4:	f7ff fdc8 	bl	8002848 <__sinit>
 8002cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cba:	07d9      	lsls	r1, r3, #31
 8002cbc:	d405      	bmi.n	8002cca <_vfiprintf_r+0x2a>
 8002cbe:	89ab      	ldrh	r3, [r5, #12]
 8002cc0:	059a      	lsls	r2, r3, #22
 8002cc2:	d402      	bmi.n	8002cca <_vfiprintf_r+0x2a>
 8002cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cc6:	f7ff fecc 	bl	8002a62 <__retarget_lock_acquire_recursive>
 8002cca:	89ab      	ldrh	r3, [r5, #12]
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	d501      	bpl.n	8002cd4 <_vfiprintf_r+0x34>
 8002cd0:	692b      	ldr	r3, [r5, #16]
 8002cd2:	b99b      	cbnz	r3, 8002cfc <_vfiprintf_r+0x5c>
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f000 fbac 	bl	8003434 <__swsetup_r>
 8002cdc:	b170      	cbz	r0, 8002cfc <_vfiprintf_r+0x5c>
 8002cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ce0:	07dc      	lsls	r4, r3, #31
 8002ce2:	d504      	bpl.n	8002cee <_vfiprintf_r+0x4e>
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce8:	b01d      	add	sp, #116	; 0x74
 8002cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cee:	89ab      	ldrh	r3, [r5, #12]
 8002cf0:	0598      	lsls	r0, r3, #22
 8002cf2:	d4f7      	bmi.n	8002ce4 <_vfiprintf_r+0x44>
 8002cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cf6:	f7ff feb5 	bl	8002a64 <__retarget_lock_release_recursive>
 8002cfa:	e7f3      	b.n	8002ce4 <_vfiprintf_r+0x44>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8002d00:	2320      	movs	r3, #32
 8002d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d06:	2330      	movs	r3, #48	; 0x30
 8002d08:	f04f 0901 	mov.w	r9, #1
 8002d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002ec0 <_vfiprintf_r+0x220>
 8002d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d18:	4623      	mov	r3, r4
 8002d1a:	469a      	mov	sl, r3
 8002d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d20:	b10a      	cbz	r2, 8002d26 <_vfiprintf_r+0x86>
 8002d22:	2a25      	cmp	r2, #37	; 0x25
 8002d24:	d1f9      	bne.n	8002d1a <_vfiprintf_r+0x7a>
 8002d26:	ebba 0b04 	subs.w	fp, sl, r4
 8002d2a:	d00b      	beq.n	8002d44 <_vfiprintf_r+0xa4>
 8002d2c:	465b      	mov	r3, fp
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4629      	mov	r1, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	f7ff ffa1 	bl	8002c7a <__sfputs_r>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	f000 80a9 	beq.w	8002e90 <_vfiprintf_r+0x1f0>
 8002d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d40:	445a      	add	r2, fp
 8002d42:	9209      	str	r2, [sp, #36]	; 0x24
 8002d44:	f89a 3000 	ldrb.w	r3, [sl]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a1 	beq.w	8002e90 <_vfiprintf_r+0x1f0>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d58:	f10a 0a01 	add.w	sl, sl, #1
 8002d5c:	9304      	str	r3, [sp, #16]
 8002d5e:	9307      	str	r3, [sp, #28]
 8002d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d64:	931a      	str	r3, [sp, #104]	; 0x68
 8002d66:	4654      	mov	r4, sl
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6e:	4854      	ldr	r0, [pc, #336]	; (8002ec0 <_vfiprintf_r+0x220>)
 8002d70:	f000 fbc8 	bl	8003504 <memchr>
 8002d74:	9a04      	ldr	r2, [sp, #16]
 8002d76:	b9d8      	cbnz	r0, 8002db0 <_vfiprintf_r+0x110>
 8002d78:	06d1      	lsls	r1, r2, #27
 8002d7a:	bf44      	itt	mi
 8002d7c:	2320      	movmi	r3, #32
 8002d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d82:	0713      	lsls	r3, r2, #28
 8002d84:	bf44      	itt	mi
 8002d86:	232b      	movmi	r3, #43	; 0x2b
 8002d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	2b2a      	cmp	r3, #42	; 0x2a
 8002d92:	d015      	beq.n	8002dc0 <_vfiprintf_r+0x120>
 8002d94:	4654      	mov	r4, sl
 8002d96:	2000      	movs	r0, #0
 8002d98:	f04f 0c0a 	mov.w	ip, #10
 8002d9c:	9a07      	ldr	r2, [sp, #28]
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002da4:	3b30      	subs	r3, #48	; 0x30
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	d94d      	bls.n	8002e46 <_vfiprintf_r+0x1a6>
 8002daa:	b1b0      	cbz	r0, 8002dda <_vfiprintf_r+0x13a>
 8002dac:	9207      	str	r2, [sp, #28]
 8002dae:	e014      	b.n	8002dda <_vfiprintf_r+0x13a>
 8002db0:	eba0 0308 	sub.w	r3, r0, r8
 8002db4:	fa09 f303 	lsl.w	r3, r9, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	46a2      	mov	sl, r4
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	e7d2      	b.n	8002d66 <_vfiprintf_r+0xc6>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	1d19      	adds	r1, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9103      	str	r1, [sp, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bfbb      	ittet	lt
 8002dcc:	425b      	neglt	r3, r3
 8002dce:	f042 0202 	orrlt.w	r2, r2, #2
 8002dd2:	9307      	strge	r3, [sp, #28]
 8002dd4:	9307      	strlt	r3, [sp, #28]
 8002dd6:	bfb8      	it	lt
 8002dd8:	9204      	strlt	r2, [sp, #16]
 8002dda:	7823      	ldrb	r3, [r4, #0]
 8002ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8002dde:	d10c      	bne.n	8002dfa <_vfiprintf_r+0x15a>
 8002de0:	7863      	ldrb	r3, [r4, #1]
 8002de2:	2b2a      	cmp	r3, #42	; 0x2a
 8002de4:	d134      	bne.n	8002e50 <_vfiprintf_r+0x1b0>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	3402      	adds	r4, #2
 8002dea:	1d1a      	adds	r2, r3, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	9203      	str	r2, [sp, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bfb8      	it	lt
 8002df4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002df8:	9305      	str	r3, [sp, #20]
 8002dfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ec4 <_vfiprintf_r+0x224>
 8002dfe:	2203      	movs	r2, #3
 8002e00:	4650      	mov	r0, sl
 8002e02:	7821      	ldrb	r1, [r4, #0]
 8002e04:	f000 fb7e 	bl	8003504 <memchr>
 8002e08:	b138      	cbz	r0, 8002e1a <_vfiprintf_r+0x17a>
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	9b04      	ldr	r3, [sp, #16]
 8002e0e:	eba0 000a 	sub.w	r0, r0, sl
 8002e12:	4082      	lsls	r2, r0
 8002e14:	4313      	orrs	r3, r2
 8002e16:	3401      	adds	r4, #1
 8002e18:	9304      	str	r3, [sp, #16]
 8002e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1e:	2206      	movs	r2, #6
 8002e20:	4829      	ldr	r0, [pc, #164]	; (8002ec8 <_vfiprintf_r+0x228>)
 8002e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e26:	f000 fb6d 	bl	8003504 <memchr>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d03f      	beq.n	8002eae <_vfiprintf_r+0x20e>
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <_vfiprintf_r+0x22c>)
 8002e30:	bb1b      	cbnz	r3, 8002e7a <_vfiprintf_r+0x1da>
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	3307      	adds	r3, #7
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e40:	443b      	add	r3, r7
 8002e42:	9309      	str	r3, [sp, #36]	; 0x24
 8002e44:	e768      	b.n	8002d18 <_vfiprintf_r+0x78>
 8002e46:	460c      	mov	r4, r1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e4e:	e7a6      	b.n	8002d9e <_vfiprintf_r+0xfe>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f04f 0c0a 	mov.w	ip, #10
 8002e56:	4619      	mov	r1, r3
 8002e58:	3401      	adds	r4, #1
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e62:	3a30      	subs	r2, #48	; 0x30
 8002e64:	2a09      	cmp	r2, #9
 8002e66:	d903      	bls.n	8002e70 <_vfiprintf_r+0x1d0>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0c6      	beq.n	8002dfa <_vfiprintf_r+0x15a>
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	e7c4      	b.n	8002dfa <_vfiprintf_r+0x15a>
 8002e70:	4604      	mov	r4, r0
 8002e72:	2301      	movs	r3, #1
 8002e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e78:	e7f0      	b.n	8002e5c <_vfiprintf_r+0x1bc>
 8002e7a:	ab03      	add	r3, sp, #12
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462a      	mov	r2, r5
 8002e80:	4630      	mov	r0, r6
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <_vfiprintf_r+0x230>)
 8002e84:	a904      	add	r1, sp, #16
 8002e86:	f3af 8000 	nop.w
 8002e8a:	4607      	mov	r7, r0
 8002e8c:	1c78      	adds	r0, r7, #1
 8002e8e:	d1d6      	bne.n	8002e3e <_vfiprintf_r+0x19e>
 8002e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e92:	07d9      	lsls	r1, r3, #31
 8002e94:	d405      	bmi.n	8002ea2 <_vfiprintf_r+0x202>
 8002e96:	89ab      	ldrh	r3, [r5, #12]
 8002e98:	059a      	lsls	r2, r3, #22
 8002e9a:	d402      	bmi.n	8002ea2 <_vfiprintf_r+0x202>
 8002e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e9e:	f7ff fde1 	bl	8002a64 <__retarget_lock_release_recursive>
 8002ea2:	89ab      	ldrh	r3, [r5, #12]
 8002ea4:	065b      	lsls	r3, r3, #25
 8002ea6:	f53f af1d 	bmi.w	8002ce4 <_vfiprintf_r+0x44>
 8002eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eac:	e71c      	b.n	8002ce8 <_vfiprintf_r+0x48>
 8002eae:	ab03      	add	r3, sp, #12
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	462a      	mov	r2, r5
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <_vfiprintf_r+0x230>)
 8002eb8:	a904      	add	r1, sp, #16
 8002eba:	f000 f87d 	bl	8002fb8 <_printf_i>
 8002ebe:	e7e4      	b.n	8002e8a <_vfiprintf_r+0x1ea>
 8002ec0:	080036cc 	.word	0x080036cc
 8002ec4:	080036d2 	.word	0x080036d2
 8002ec8:	080036d6 	.word	0x080036d6
 8002ecc:	00000000 	.word	0x00000000
 8002ed0:	08002c7b 	.word	0x08002c7b

08002ed4 <_printf_common>:
 8002ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed8:	4616      	mov	r6, r2
 8002eda:	4699      	mov	r9, r3
 8002edc:	688a      	ldr	r2, [r1, #8]
 8002ede:	690b      	ldr	r3, [r1, #16]
 8002ee0:	4607      	mov	r7, r0
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	bfb8      	it	lt
 8002ee6:	4613      	movlt	r3, r2
 8002ee8:	6033      	str	r3, [r6, #0]
 8002eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eee:	460c      	mov	r4, r1
 8002ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ef4:	b10a      	cbz	r2, 8002efa <_printf_common+0x26>
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	0699      	lsls	r1, r3, #26
 8002efe:	bf42      	ittt	mi
 8002f00:	6833      	ldrmi	r3, [r6, #0]
 8002f02:	3302      	addmi	r3, #2
 8002f04:	6033      	strmi	r3, [r6, #0]
 8002f06:	6825      	ldr	r5, [r4, #0]
 8002f08:	f015 0506 	ands.w	r5, r5, #6
 8002f0c:	d106      	bne.n	8002f1c <_printf_common+0x48>
 8002f0e:	f104 0a19 	add.w	sl, r4, #25
 8002f12:	68e3      	ldr	r3, [r4, #12]
 8002f14:	6832      	ldr	r2, [r6, #0]
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	42ab      	cmp	r3, r5
 8002f1a:	dc2b      	bgt.n	8002f74 <_printf_common+0xa0>
 8002f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f20:	1e13      	subs	r3, r2, #0
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	bf18      	it	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	0692      	lsls	r2, r2, #26
 8002f2a:	d430      	bmi.n	8002f8e <_printf_common+0xba>
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f34:	47c0      	blx	r8
 8002f36:	3001      	adds	r0, #1
 8002f38:	d023      	beq.n	8002f82 <_printf_common+0xae>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	f003 0306 	and.w	r3, r3, #6
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf14      	ite	ne
 8002f46:	2500      	movne	r5, #0
 8002f48:	6833      	ldreq	r3, [r6, #0]
 8002f4a:	f04f 0600 	mov.w	r6, #0
 8002f4e:	bf08      	it	eq
 8002f50:	68e5      	ldreq	r5, [r4, #12]
 8002f52:	f104 041a 	add.w	r4, r4, #26
 8002f56:	bf08      	it	eq
 8002f58:	1aed      	subeq	r5, r5, r3
 8002f5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f5e:	bf08      	it	eq
 8002f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bfc4      	itt	gt
 8002f68:	1a9b      	subgt	r3, r3, r2
 8002f6a:	18ed      	addgt	r5, r5, r3
 8002f6c:	42b5      	cmp	r5, r6
 8002f6e:	d11a      	bne.n	8002fa6 <_printf_common+0xd2>
 8002f70:	2000      	movs	r0, #0
 8002f72:	e008      	b.n	8002f86 <_printf_common+0xb2>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4652      	mov	r2, sl
 8002f78:	4649      	mov	r1, r9
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	47c0      	blx	r8
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d103      	bne.n	8002f8a <_printf_common+0xb6>
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8a:	3501      	adds	r5, #1
 8002f8c:	e7c1      	b.n	8002f12 <_printf_common+0x3e>
 8002f8e:	2030      	movs	r0, #48	; 0x30
 8002f90:	18e1      	adds	r1, r4, r3
 8002f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f9c:	4422      	add	r2, r4
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fa4:	e7c2      	b.n	8002f2c <_printf_common+0x58>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4622      	mov	r2, r4
 8002faa:	4649      	mov	r1, r9
 8002fac:	4638      	mov	r0, r7
 8002fae:	47c0      	blx	r8
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d0e6      	beq.n	8002f82 <_printf_common+0xae>
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7d9      	b.n	8002f6c <_printf_common+0x98>

08002fb8 <_printf_i>:
 8002fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	7e0f      	ldrb	r7, [r1, #24]
 8002fbe:	4691      	mov	r9, r2
 8002fc0:	2f78      	cmp	r7, #120	; 0x78
 8002fc2:	4680      	mov	r8, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	469a      	mov	sl, r3
 8002fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fce:	d807      	bhi.n	8002fe0 <_printf_i+0x28>
 8002fd0:	2f62      	cmp	r7, #98	; 0x62
 8002fd2:	d80a      	bhi.n	8002fea <_printf_i+0x32>
 8002fd4:	2f00      	cmp	r7, #0
 8002fd6:	f000 80d5 	beq.w	8003184 <_printf_i+0x1cc>
 8002fda:	2f58      	cmp	r7, #88	; 0x58
 8002fdc:	f000 80c1 	beq.w	8003162 <_printf_i+0x1aa>
 8002fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fe8:	e03a      	b.n	8003060 <_printf_i+0xa8>
 8002fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fee:	2b15      	cmp	r3, #21
 8002ff0:	d8f6      	bhi.n	8002fe0 <_printf_i+0x28>
 8002ff2:	a101      	add	r1, pc, #4	; (adr r1, 8002ff8 <_printf_i+0x40>)
 8002ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ff8:	08003051 	.word	0x08003051
 8002ffc:	08003065 	.word	0x08003065
 8003000:	08002fe1 	.word	0x08002fe1
 8003004:	08002fe1 	.word	0x08002fe1
 8003008:	08002fe1 	.word	0x08002fe1
 800300c:	08002fe1 	.word	0x08002fe1
 8003010:	08003065 	.word	0x08003065
 8003014:	08002fe1 	.word	0x08002fe1
 8003018:	08002fe1 	.word	0x08002fe1
 800301c:	08002fe1 	.word	0x08002fe1
 8003020:	08002fe1 	.word	0x08002fe1
 8003024:	0800316b 	.word	0x0800316b
 8003028:	08003091 	.word	0x08003091
 800302c:	08003125 	.word	0x08003125
 8003030:	08002fe1 	.word	0x08002fe1
 8003034:	08002fe1 	.word	0x08002fe1
 8003038:	0800318d 	.word	0x0800318d
 800303c:	08002fe1 	.word	0x08002fe1
 8003040:	08003091 	.word	0x08003091
 8003044:	08002fe1 	.word	0x08002fe1
 8003048:	08002fe1 	.word	0x08002fe1
 800304c:	0800312d 	.word	0x0800312d
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	1d1a      	adds	r2, r3, #4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	602a      	str	r2, [r5, #0]
 8003058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800305c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003060:	2301      	movs	r3, #1
 8003062:	e0a0      	b.n	80031a6 <_printf_i+0x1ee>
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	0607      	lsls	r7, r0, #24
 800306a:	f103 0104 	add.w	r1, r3, #4
 800306e:	6029      	str	r1, [r5, #0]
 8003070:	d501      	bpl.n	8003076 <_printf_i+0xbe>
 8003072:	681e      	ldr	r6, [r3, #0]
 8003074:	e003      	b.n	800307e <_printf_i+0xc6>
 8003076:	0646      	lsls	r6, r0, #25
 8003078:	d5fb      	bpl.n	8003072 <_printf_i+0xba>
 800307a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800307e:	2e00      	cmp	r6, #0
 8003080:	da03      	bge.n	800308a <_printf_i+0xd2>
 8003082:	232d      	movs	r3, #45	; 0x2d
 8003084:	4276      	negs	r6, r6
 8003086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800308a:	230a      	movs	r3, #10
 800308c:	4859      	ldr	r0, [pc, #356]	; (80031f4 <_printf_i+0x23c>)
 800308e:	e012      	b.n	80030b6 <_printf_i+0xfe>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	1d19      	adds	r1, r3, #4
 8003096:	6029      	str	r1, [r5, #0]
 8003098:	0605      	lsls	r5, r0, #24
 800309a:	d501      	bpl.n	80030a0 <_printf_i+0xe8>
 800309c:	681e      	ldr	r6, [r3, #0]
 800309e:	e002      	b.n	80030a6 <_printf_i+0xee>
 80030a0:	0641      	lsls	r1, r0, #25
 80030a2:	d5fb      	bpl.n	800309c <_printf_i+0xe4>
 80030a4:	881e      	ldrh	r6, [r3, #0]
 80030a6:	2f6f      	cmp	r7, #111	; 0x6f
 80030a8:	bf0c      	ite	eq
 80030aa:	2308      	moveq	r3, #8
 80030ac:	230a      	movne	r3, #10
 80030ae:	4851      	ldr	r0, [pc, #324]	; (80031f4 <_printf_i+0x23c>)
 80030b0:	2100      	movs	r1, #0
 80030b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030b6:	6865      	ldr	r5, [r4, #4]
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	bfa8      	it	ge
 80030bc:	6821      	ldrge	r1, [r4, #0]
 80030be:	60a5      	str	r5, [r4, #8]
 80030c0:	bfa4      	itt	ge
 80030c2:	f021 0104 	bicge.w	r1, r1, #4
 80030c6:	6021      	strge	r1, [r4, #0]
 80030c8:	b90e      	cbnz	r6, 80030ce <_printf_i+0x116>
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	d04b      	beq.n	8003166 <_printf_i+0x1ae>
 80030ce:	4615      	mov	r5, r2
 80030d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80030d4:	fb03 6711 	mls	r7, r3, r1, r6
 80030d8:	5dc7      	ldrb	r7, [r0, r7]
 80030da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030de:	4637      	mov	r7, r6
 80030e0:	42bb      	cmp	r3, r7
 80030e2:	460e      	mov	r6, r1
 80030e4:	d9f4      	bls.n	80030d0 <_printf_i+0x118>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d10b      	bne.n	8003102 <_printf_i+0x14a>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	07de      	lsls	r6, r3, #31
 80030ee:	d508      	bpl.n	8003102 <_printf_i+0x14a>
 80030f0:	6923      	ldr	r3, [r4, #16]
 80030f2:	6861      	ldr	r1, [r4, #4]
 80030f4:	4299      	cmp	r1, r3
 80030f6:	bfde      	ittt	le
 80030f8:	2330      	movle	r3, #48	; 0x30
 80030fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003102:	1b52      	subs	r2, r2, r5
 8003104:	6122      	str	r2, [r4, #16]
 8003106:	464b      	mov	r3, r9
 8003108:	4621      	mov	r1, r4
 800310a:	4640      	mov	r0, r8
 800310c:	f8cd a000 	str.w	sl, [sp]
 8003110:	aa03      	add	r2, sp, #12
 8003112:	f7ff fedf 	bl	8002ed4 <_printf_common>
 8003116:	3001      	adds	r0, #1
 8003118:	d14a      	bne.n	80031b0 <_printf_i+0x1f8>
 800311a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800311e:	b004      	add	sp, #16
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	f043 0320 	orr.w	r3, r3, #32
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	2778      	movs	r7, #120	; 0x78
 800312e:	4832      	ldr	r0, [pc, #200]	; (80031f8 <_printf_i+0x240>)
 8003130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	6829      	ldr	r1, [r5, #0]
 8003138:	061f      	lsls	r7, r3, #24
 800313a:	f851 6b04 	ldr.w	r6, [r1], #4
 800313e:	d402      	bmi.n	8003146 <_printf_i+0x18e>
 8003140:	065f      	lsls	r7, r3, #25
 8003142:	bf48      	it	mi
 8003144:	b2b6      	uxthmi	r6, r6
 8003146:	07df      	lsls	r7, r3, #31
 8003148:	bf48      	it	mi
 800314a:	f043 0320 	orrmi.w	r3, r3, #32
 800314e:	6029      	str	r1, [r5, #0]
 8003150:	bf48      	it	mi
 8003152:	6023      	strmi	r3, [r4, #0]
 8003154:	b91e      	cbnz	r6, 800315e <_printf_i+0x1a6>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	f023 0320 	bic.w	r3, r3, #32
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	2310      	movs	r3, #16
 8003160:	e7a6      	b.n	80030b0 <_printf_i+0xf8>
 8003162:	4824      	ldr	r0, [pc, #144]	; (80031f4 <_printf_i+0x23c>)
 8003164:	e7e4      	b.n	8003130 <_printf_i+0x178>
 8003166:	4615      	mov	r5, r2
 8003168:	e7bd      	b.n	80030e6 <_printf_i+0x12e>
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	6826      	ldr	r6, [r4, #0]
 800316e:	1d18      	adds	r0, r3, #4
 8003170:	6961      	ldr	r1, [r4, #20]
 8003172:	6028      	str	r0, [r5, #0]
 8003174:	0635      	lsls	r5, r6, #24
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	d501      	bpl.n	800317e <_printf_i+0x1c6>
 800317a:	6019      	str	r1, [r3, #0]
 800317c:	e002      	b.n	8003184 <_printf_i+0x1cc>
 800317e:	0670      	lsls	r0, r6, #25
 8003180:	d5fb      	bpl.n	800317a <_printf_i+0x1c2>
 8003182:	8019      	strh	r1, [r3, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	4615      	mov	r5, r2
 8003188:	6123      	str	r3, [r4, #16]
 800318a:	e7bc      	b.n	8003106 <_printf_i+0x14e>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	602a      	str	r2, [r5, #0]
 8003194:	681d      	ldr	r5, [r3, #0]
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	4628      	mov	r0, r5
 800319a:	f000 f9b3 	bl	8003504 <memchr>
 800319e:	b108      	cbz	r0, 80031a4 <_printf_i+0x1ec>
 80031a0:	1b40      	subs	r0, r0, r5
 80031a2:	6060      	str	r0, [r4, #4]
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	6123      	str	r3, [r4, #16]
 80031a8:	2300      	movs	r3, #0
 80031aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ae:	e7aa      	b.n	8003106 <_printf_i+0x14e>
 80031b0:	462a      	mov	r2, r5
 80031b2:	4649      	mov	r1, r9
 80031b4:	4640      	mov	r0, r8
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	47d0      	blx	sl
 80031ba:	3001      	adds	r0, #1
 80031bc:	d0ad      	beq.n	800311a <_printf_i+0x162>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	079b      	lsls	r3, r3, #30
 80031c2:	d413      	bmi.n	80031ec <_printf_i+0x234>
 80031c4:	68e0      	ldr	r0, [r4, #12]
 80031c6:	9b03      	ldr	r3, [sp, #12]
 80031c8:	4298      	cmp	r0, r3
 80031ca:	bfb8      	it	lt
 80031cc:	4618      	movlt	r0, r3
 80031ce:	e7a6      	b.n	800311e <_printf_i+0x166>
 80031d0:	2301      	movs	r3, #1
 80031d2:	4632      	mov	r2, r6
 80031d4:	4649      	mov	r1, r9
 80031d6:	4640      	mov	r0, r8
 80031d8:	47d0      	blx	sl
 80031da:	3001      	adds	r0, #1
 80031dc:	d09d      	beq.n	800311a <_printf_i+0x162>
 80031de:	3501      	adds	r5, #1
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	9903      	ldr	r1, [sp, #12]
 80031e4:	1a5b      	subs	r3, r3, r1
 80031e6:	42ab      	cmp	r3, r5
 80031e8:	dcf2      	bgt.n	80031d0 <_printf_i+0x218>
 80031ea:	e7eb      	b.n	80031c4 <_printf_i+0x20c>
 80031ec:	2500      	movs	r5, #0
 80031ee:	f104 0619 	add.w	r6, r4, #25
 80031f2:	e7f5      	b.n	80031e0 <_printf_i+0x228>
 80031f4:	080036dd 	.word	0x080036dd
 80031f8:	080036ee 	.word	0x080036ee

080031fc <__sflush_r>:
 80031fc:	898a      	ldrh	r2, [r1, #12]
 80031fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003200:	4605      	mov	r5, r0
 8003202:	0710      	lsls	r0, r2, #28
 8003204:	460c      	mov	r4, r1
 8003206:	d457      	bmi.n	80032b8 <__sflush_r+0xbc>
 8003208:	684b      	ldr	r3, [r1, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	dc04      	bgt.n	8003218 <__sflush_r+0x1c>
 800320e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	dc01      	bgt.n	8003218 <__sflush_r+0x1c>
 8003214:	2000      	movs	r0, #0
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800321a:	2e00      	cmp	r6, #0
 800321c:	d0fa      	beq.n	8003214 <__sflush_r+0x18>
 800321e:	2300      	movs	r3, #0
 8003220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003224:	682f      	ldr	r7, [r5, #0]
 8003226:	6a21      	ldr	r1, [r4, #32]
 8003228:	602b      	str	r3, [r5, #0]
 800322a:	d032      	beq.n	8003292 <__sflush_r+0x96>
 800322c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	075a      	lsls	r2, r3, #29
 8003232:	d505      	bpl.n	8003240 <__sflush_r+0x44>
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	1ac0      	subs	r0, r0, r3
 8003238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800323a:	b10b      	cbz	r3, 8003240 <__sflush_r+0x44>
 800323c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800323e:	1ac0      	subs	r0, r0, r3
 8003240:	2300      	movs	r3, #0
 8003242:	4602      	mov	r2, r0
 8003244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003246:	4628      	mov	r0, r5
 8003248:	6a21      	ldr	r1, [r4, #32]
 800324a:	47b0      	blx	r6
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	d106      	bne.n	8003260 <__sflush_r+0x64>
 8003252:	6829      	ldr	r1, [r5, #0]
 8003254:	291d      	cmp	r1, #29
 8003256:	d82b      	bhi.n	80032b0 <__sflush_r+0xb4>
 8003258:	4a28      	ldr	r2, [pc, #160]	; (80032fc <__sflush_r+0x100>)
 800325a:	410a      	asrs	r2, r1
 800325c:	07d6      	lsls	r6, r2, #31
 800325e:	d427      	bmi.n	80032b0 <__sflush_r+0xb4>
 8003260:	2200      	movs	r2, #0
 8003262:	6062      	str	r2, [r4, #4]
 8003264:	6922      	ldr	r2, [r4, #16]
 8003266:	04d9      	lsls	r1, r3, #19
 8003268:	6022      	str	r2, [r4, #0]
 800326a:	d504      	bpl.n	8003276 <__sflush_r+0x7a>
 800326c:	1c42      	adds	r2, r0, #1
 800326e:	d101      	bne.n	8003274 <__sflush_r+0x78>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b903      	cbnz	r3, 8003276 <__sflush_r+0x7a>
 8003274:	6560      	str	r0, [r4, #84]	; 0x54
 8003276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003278:	602f      	str	r7, [r5, #0]
 800327a:	2900      	cmp	r1, #0
 800327c:	d0ca      	beq.n	8003214 <__sflush_r+0x18>
 800327e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003282:	4299      	cmp	r1, r3
 8003284:	d002      	beq.n	800328c <__sflush_r+0x90>
 8003286:	4628      	mov	r0, r5
 8003288:	f7ff fbee 	bl	8002a68 <_free_r>
 800328c:	2000      	movs	r0, #0
 800328e:	6360      	str	r0, [r4, #52]	; 0x34
 8003290:	e7c1      	b.n	8003216 <__sflush_r+0x1a>
 8003292:	2301      	movs	r3, #1
 8003294:	4628      	mov	r0, r5
 8003296:	47b0      	blx	r6
 8003298:	1c41      	adds	r1, r0, #1
 800329a:	d1c8      	bne.n	800322e <__sflush_r+0x32>
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0c5      	beq.n	800322e <__sflush_r+0x32>
 80032a2:	2b1d      	cmp	r3, #29
 80032a4:	d001      	beq.n	80032aa <__sflush_r+0xae>
 80032a6:	2b16      	cmp	r3, #22
 80032a8:	d101      	bne.n	80032ae <__sflush_r+0xb2>
 80032aa:	602f      	str	r7, [r5, #0]
 80032ac:	e7b2      	b.n	8003214 <__sflush_r+0x18>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	e7ae      	b.n	8003216 <__sflush_r+0x1a>
 80032b8:	690f      	ldr	r7, [r1, #16]
 80032ba:	2f00      	cmp	r7, #0
 80032bc:	d0aa      	beq.n	8003214 <__sflush_r+0x18>
 80032be:	0793      	lsls	r3, r2, #30
 80032c0:	bf18      	it	ne
 80032c2:	2300      	movne	r3, #0
 80032c4:	680e      	ldr	r6, [r1, #0]
 80032c6:	bf08      	it	eq
 80032c8:	694b      	ldreq	r3, [r1, #20]
 80032ca:	1bf6      	subs	r6, r6, r7
 80032cc:	600f      	str	r7, [r1, #0]
 80032ce:	608b      	str	r3, [r1, #8]
 80032d0:	2e00      	cmp	r6, #0
 80032d2:	dd9f      	ble.n	8003214 <__sflush_r+0x18>
 80032d4:	4633      	mov	r3, r6
 80032d6:	463a      	mov	r2, r7
 80032d8:	4628      	mov	r0, r5
 80032da:	6a21      	ldr	r1, [r4, #32]
 80032dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80032e0:	47e0      	blx	ip
 80032e2:	2800      	cmp	r0, #0
 80032e4:	dc06      	bgt.n	80032f4 <__sflush_r+0xf8>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e790      	b.n	8003216 <__sflush_r+0x1a>
 80032f4:	4407      	add	r7, r0
 80032f6:	1a36      	subs	r6, r6, r0
 80032f8:	e7ea      	b.n	80032d0 <__sflush_r+0xd4>
 80032fa:	bf00      	nop
 80032fc:	dfbffffe 	.word	0xdfbffffe

08003300 <_fflush_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	690b      	ldr	r3, [r1, #16]
 8003304:	4605      	mov	r5, r0
 8003306:	460c      	mov	r4, r1
 8003308:	b913      	cbnz	r3, 8003310 <_fflush_r+0x10>
 800330a:	2500      	movs	r5, #0
 800330c:	4628      	mov	r0, r5
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	b118      	cbz	r0, 800331a <_fflush_r+0x1a>
 8003312:	6a03      	ldr	r3, [r0, #32]
 8003314:	b90b      	cbnz	r3, 800331a <_fflush_r+0x1a>
 8003316:	f7ff fa97 	bl	8002848 <__sinit>
 800331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f3      	beq.n	800330a <_fflush_r+0xa>
 8003322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003324:	07d0      	lsls	r0, r2, #31
 8003326:	d404      	bmi.n	8003332 <_fflush_r+0x32>
 8003328:	0599      	lsls	r1, r3, #22
 800332a:	d402      	bmi.n	8003332 <_fflush_r+0x32>
 800332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332e:	f7ff fb98 	bl	8002a62 <__retarget_lock_acquire_recursive>
 8003332:	4628      	mov	r0, r5
 8003334:	4621      	mov	r1, r4
 8003336:	f7ff ff61 	bl	80031fc <__sflush_r>
 800333a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800333c:	4605      	mov	r5, r0
 800333e:	07da      	lsls	r2, r3, #31
 8003340:	d4e4      	bmi.n	800330c <_fflush_r+0xc>
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	059b      	lsls	r3, r3, #22
 8003346:	d4e1      	bmi.n	800330c <_fflush_r+0xc>
 8003348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334a:	f7ff fb8b 	bl	8002a64 <__retarget_lock_release_recursive>
 800334e:	e7dd      	b.n	800330c <_fflush_r+0xc>

08003350 <_putc_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	460d      	mov	r5, r1
 8003354:	4614      	mov	r4, r2
 8003356:	4606      	mov	r6, r0
 8003358:	b118      	cbz	r0, 8003362 <_putc_r+0x12>
 800335a:	6a03      	ldr	r3, [r0, #32]
 800335c:	b90b      	cbnz	r3, 8003362 <_putc_r+0x12>
 800335e:	f7ff fa73 	bl	8002848 <__sinit>
 8003362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003364:	07d8      	lsls	r0, r3, #31
 8003366:	d405      	bmi.n	8003374 <_putc_r+0x24>
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	0599      	lsls	r1, r3, #22
 800336c:	d402      	bmi.n	8003374 <_putc_r+0x24>
 800336e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003370:	f7ff fb77 	bl	8002a62 <__retarget_lock_acquire_recursive>
 8003374:	68a3      	ldr	r3, [r4, #8]
 8003376:	3b01      	subs	r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	60a3      	str	r3, [r4, #8]
 800337c:	da05      	bge.n	800338a <_putc_r+0x3a>
 800337e:	69a2      	ldr	r2, [r4, #24]
 8003380:	4293      	cmp	r3, r2
 8003382:	db12      	blt.n	80033aa <_putc_r+0x5a>
 8003384:	b2eb      	uxtb	r3, r5
 8003386:	2b0a      	cmp	r3, #10
 8003388:	d00f      	beq.n	80033aa <_putc_r+0x5a>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6022      	str	r2, [r4, #0]
 8003390:	701d      	strb	r5, [r3, #0]
 8003392:	b2ed      	uxtb	r5, r5
 8003394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003396:	07da      	lsls	r2, r3, #31
 8003398:	d405      	bmi.n	80033a6 <_putc_r+0x56>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	059b      	lsls	r3, r3, #22
 800339e:	d402      	bmi.n	80033a6 <_putc_r+0x56>
 80033a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033a2:	f7ff fb5f 	bl	8002a64 <__retarget_lock_release_recursive>
 80033a6:	4628      	mov	r0, r5
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	4629      	mov	r1, r5
 80033ac:	4622      	mov	r2, r4
 80033ae:	4630      	mov	r0, r6
 80033b0:	f000 f802 	bl	80033b8 <__swbuf_r>
 80033b4:	4605      	mov	r5, r0
 80033b6:	e7ed      	b.n	8003394 <_putc_r+0x44>

080033b8 <__swbuf_r>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	460e      	mov	r6, r1
 80033bc:	4614      	mov	r4, r2
 80033be:	4605      	mov	r5, r0
 80033c0:	b118      	cbz	r0, 80033ca <__swbuf_r+0x12>
 80033c2:	6a03      	ldr	r3, [r0, #32]
 80033c4:	b90b      	cbnz	r3, 80033ca <__swbuf_r+0x12>
 80033c6:	f7ff fa3f 	bl	8002848 <__sinit>
 80033ca:	69a3      	ldr	r3, [r4, #24]
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	071a      	lsls	r2, r3, #28
 80033d2:	d525      	bpl.n	8003420 <__swbuf_r+0x68>
 80033d4:	6923      	ldr	r3, [r4, #16]
 80033d6:	b31b      	cbz	r3, 8003420 <__swbuf_r+0x68>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	6922      	ldr	r2, [r4, #16]
 80033dc:	b2f6      	uxtb	r6, r6
 80033de:	1a98      	subs	r0, r3, r2
 80033e0:	6963      	ldr	r3, [r4, #20]
 80033e2:	4637      	mov	r7, r6
 80033e4:	4283      	cmp	r3, r0
 80033e6:	dc04      	bgt.n	80033f2 <__swbuf_r+0x3a>
 80033e8:	4621      	mov	r1, r4
 80033ea:	4628      	mov	r0, r5
 80033ec:	f7ff ff88 	bl	8003300 <_fflush_r>
 80033f0:	b9e0      	cbnz	r0, 800342c <__swbuf_r+0x74>
 80033f2:	68a3      	ldr	r3, [r4, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60a3      	str	r3, [r4, #8]
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	6022      	str	r2, [r4, #0]
 80033fe:	701e      	strb	r6, [r3, #0]
 8003400:	6962      	ldr	r2, [r4, #20]
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	429a      	cmp	r2, r3
 8003406:	d004      	beq.n	8003412 <__swbuf_r+0x5a>
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	07db      	lsls	r3, r3, #31
 800340c:	d506      	bpl.n	800341c <__swbuf_r+0x64>
 800340e:	2e0a      	cmp	r6, #10
 8003410:	d104      	bne.n	800341c <__swbuf_r+0x64>
 8003412:	4621      	mov	r1, r4
 8003414:	4628      	mov	r0, r5
 8003416:	f7ff ff73 	bl	8003300 <_fflush_r>
 800341a:	b938      	cbnz	r0, 800342c <__swbuf_r+0x74>
 800341c:	4638      	mov	r0, r7
 800341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003420:	4621      	mov	r1, r4
 8003422:	4628      	mov	r0, r5
 8003424:	f000 f806 	bl	8003434 <__swsetup_r>
 8003428:	2800      	cmp	r0, #0
 800342a:	d0d5      	beq.n	80033d8 <__swbuf_r+0x20>
 800342c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003430:	e7f4      	b.n	800341c <__swbuf_r+0x64>
	...

08003434 <__swsetup_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <__swsetup_r+0xac>)
 8003438:	4605      	mov	r5, r0
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	460c      	mov	r4, r1
 800343e:	b118      	cbz	r0, 8003448 <__swsetup_r+0x14>
 8003440:	6a03      	ldr	r3, [r0, #32]
 8003442:	b90b      	cbnz	r3, 8003448 <__swsetup_r+0x14>
 8003444:	f7ff fa00 	bl	8002848 <__sinit>
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800344e:	0718      	lsls	r0, r3, #28
 8003450:	d422      	bmi.n	8003498 <__swsetup_r+0x64>
 8003452:	06d9      	lsls	r1, r3, #27
 8003454:	d407      	bmi.n	8003466 <__swsetup_r+0x32>
 8003456:	2309      	movs	r3, #9
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800345e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	e034      	b.n	80034d0 <__swsetup_r+0x9c>
 8003466:	0758      	lsls	r0, r3, #29
 8003468:	d512      	bpl.n	8003490 <__swsetup_r+0x5c>
 800346a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800346c:	b141      	cbz	r1, 8003480 <__swsetup_r+0x4c>
 800346e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003472:	4299      	cmp	r1, r3
 8003474:	d002      	beq.n	800347c <__swsetup_r+0x48>
 8003476:	4628      	mov	r0, r5
 8003478:	f7ff faf6 	bl	8002a68 <_free_r>
 800347c:	2300      	movs	r3, #0
 800347e:	6363      	str	r3, [r4, #52]	; 0x34
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	2300      	movs	r3, #0
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	b94b      	cbnz	r3, 80034b0 <__swsetup_r+0x7c>
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d003      	beq.n	80034b0 <__swsetup_r+0x7c>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4628      	mov	r0, r5
 80034ac:	f000 f85d 	bl	800356a <__smakebuf_r>
 80034b0:	89a0      	ldrh	r0, [r4, #12]
 80034b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034b6:	f010 0301 	ands.w	r3, r0, #1
 80034ba:	d00a      	beq.n	80034d2 <__swsetup_r+0x9e>
 80034bc:	2300      	movs	r3, #0
 80034be:	60a3      	str	r3, [r4, #8]
 80034c0:	6963      	ldr	r3, [r4, #20]
 80034c2:	425b      	negs	r3, r3
 80034c4:	61a3      	str	r3, [r4, #24]
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	b943      	cbnz	r3, 80034dc <__swsetup_r+0xa8>
 80034ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034ce:	d1c4      	bne.n	800345a <__swsetup_r+0x26>
 80034d0:	bd38      	pop	{r3, r4, r5, pc}
 80034d2:	0781      	lsls	r1, r0, #30
 80034d4:	bf58      	it	pl
 80034d6:	6963      	ldrpl	r3, [r4, #20]
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	e7f4      	b.n	80034c6 <__swsetup_r+0x92>
 80034dc:	2000      	movs	r0, #0
 80034de:	e7f7      	b.n	80034d0 <__swsetup_r+0x9c>
 80034e0:	20000064 	.word	0x20000064

080034e4 <_sbrk_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	2300      	movs	r3, #0
 80034e8:	4d05      	ldr	r5, [pc, #20]	; (8003500 <_sbrk_r+0x1c>)
 80034ea:	4604      	mov	r4, r0
 80034ec:	4608      	mov	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd f988 	bl	8000804 <_sbrk>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_sbrk_r+0x1a>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_sbrk_r+0x1a>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20000288 	.word	0x20000288

08003504 <memchr>:
 8003504:	4603      	mov	r3, r0
 8003506:	b510      	push	{r4, lr}
 8003508:	b2c9      	uxtb	r1, r1
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	d101      	bne.n	8003516 <memchr+0x12>
 8003512:	2000      	movs	r0, #0
 8003514:	e003      	b.n	800351e <memchr+0x1a>
 8003516:	7804      	ldrb	r4, [r0, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	428c      	cmp	r4, r1
 800351c:	d1f6      	bne.n	800350c <memchr+0x8>
 800351e:	bd10      	pop	{r4, pc}

08003520 <__swhatbuf_r>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	460c      	mov	r4, r1
 8003524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003528:	4615      	mov	r5, r2
 800352a:	2900      	cmp	r1, #0
 800352c:	461e      	mov	r6, r3
 800352e:	b096      	sub	sp, #88	; 0x58
 8003530:	da0c      	bge.n	800354c <__swhatbuf_r+0x2c>
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	2100      	movs	r1, #0
 8003536:	f013 0f80 	tst.w	r3, #128	; 0x80
 800353a:	bf0c      	ite	eq
 800353c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003540:	2340      	movne	r3, #64	; 0x40
 8003542:	2000      	movs	r0, #0
 8003544:	6031      	str	r1, [r6, #0]
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	b016      	add	sp, #88	; 0x58
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	466a      	mov	r2, sp
 800354e:	f000 f849 	bl	80035e4 <_fstat_r>
 8003552:	2800      	cmp	r0, #0
 8003554:	dbed      	blt.n	8003532 <__swhatbuf_r+0x12>
 8003556:	9901      	ldr	r1, [sp, #4]
 8003558:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800355c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003560:	4259      	negs	r1, r3
 8003562:	4159      	adcs	r1, r3
 8003564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003568:	e7eb      	b.n	8003542 <__swhatbuf_r+0x22>

0800356a <__smakebuf_r>:
 800356a:	898b      	ldrh	r3, [r1, #12]
 800356c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800356e:	079d      	lsls	r5, r3, #30
 8003570:	4606      	mov	r6, r0
 8003572:	460c      	mov	r4, r1
 8003574:	d507      	bpl.n	8003586 <__smakebuf_r+0x1c>
 8003576:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800357a:	6023      	str	r3, [r4, #0]
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	2301      	movs	r3, #1
 8003580:	6163      	str	r3, [r4, #20]
 8003582:	b002      	add	sp, #8
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	466a      	mov	r2, sp
 8003588:	ab01      	add	r3, sp, #4
 800358a:	f7ff ffc9 	bl	8003520 <__swhatbuf_r>
 800358e:	9900      	ldr	r1, [sp, #0]
 8003590:	4605      	mov	r5, r0
 8003592:	4630      	mov	r0, r6
 8003594:	f7ff fad0 	bl	8002b38 <_malloc_r>
 8003598:	b948      	cbnz	r0, 80035ae <__smakebuf_r+0x44>
 800359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800359e:	059a      	lsls	r2, r3, #22
 80035a0:	d4ef      	bmi.n	8003582 <__smakebuf_r+0x18>
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	e7e3      	b.n	8003576 <__smakebuf_r+0xc>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	6020      	str	r0, [r4, #0]
 80035b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	9b00      	ldr	r3, [sp, #0]
 80035ba:	6120      	str	r0, [r4, #16]
 80035bc:	6163      	str	r3, [r4, #20]
 80035be:	9b01      	ldr	r3, [sp, #4]
 80035c0:	b15b      	cbz	r3, 80035da <__smakebuf_r+0x70>
 80035c2:	4630      	mov	r0, r6
 80035c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035c8:	f000 f81e 	bl	8003608 <_isatty_r>
 80035cc:	b128      	cbz	r0, 80035da <__smakebuf_r+0x70>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	431d      	orrs	r5, r3
 80035de:	81a5      	strh	r5, [r4, #12]
 80035e0:	e7cf      	b.n	8003582 <__smakebuf_r+0x18>
	...

080035e4 <_fstat_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	2300      	movs	r3, #0
 80035e8:	4d06      	ldr	r5, [pc, #24]	; (8003604 <_fstat_r+0x20>)
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	f7fd f8e1 	bl	80007b8 <_fstat>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	d102      	bne.n	8003600 <_fstat_r+0x1c>
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	b103      	cbz	r3, 8003600 <_fstat_r+0x1c>
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	20000288 	.word	0x20000288

08003608 <_isatty_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	2300      	movs	r3, #0
 800360c:	4d05      	ldr	r5, [pc, #20]	; (8003624 <_isatty_r+0x1c>)
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	f7fd f8df 	bl	80007d6 <_isatty>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_isatty_r+0x1a>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_isatty_r+0x1a>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	20000288 	.word	0x20000288

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
